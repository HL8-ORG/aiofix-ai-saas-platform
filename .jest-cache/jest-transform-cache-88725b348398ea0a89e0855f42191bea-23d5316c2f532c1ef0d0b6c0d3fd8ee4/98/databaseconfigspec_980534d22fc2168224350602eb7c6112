e1b042ec5b4ef61a85757ae6e4836129
"use strict";
/**
 * @file database.config.spec.ts
 * @description 数据库配置服务单元测试
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const database_config_1 = require("./database.config");
describe('DatabaseConfigService', () => {
    let service;
    let configService;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            imports: [config_1.ConfigModule],
            providers: [database_config_1.DatabaseConfigService],
        }).compile();
        service = module.get(database_config_1.DatabaseConfigService);
        configService = module.get(config_1.ConfigService);
    });
    describe('getPostgreSQLConfig', () => {
        it('should return default PostgreSQL configuration', () => {
            // 模拟环境变量未设置
            jest.spyOn(configService, 'get').mockReturnValue(undefined);
            const config = service.getPostgreSQLConfig();
            expect(config).toEqual({
                type: 'postgresql',
                host: 'localhost',
                port: 5432,
                username: 'aiofix_user',
                password: 'aiofix_password',
                database: 'aiofix_platform',
                ssl: false,
                pool: {
                    min: 2,
                    max: 10,
                    acquireTimeoutMillis: 60000,
                    createTimeoutMillis: 30000,
                    destroyTimeoutMillis: 5000,
                    idleTimeoutMillis: 600000,
                    reapIntervalMillis: 1000,
                    createRetryIntervalMillis: 200,
                },
            });
        });
        it('should return configured PostgreSQL configuration', () => {
            jest.spyOn(configService, 'get').mockImplementation((key) => {
                const configs = {
                    POSTGRES_HOST: 'custom-host',
                    POSTGRES_PORT: '5433',
                    POSTGRES_USER: 'custom_user',
                    POSTGRES_PASSWORD: 'custom_password',
                    POSTGRES_DB: 'custom_database',
                    POSTGRES_SSL: 'true',
                    POSTGRES_POOL_MIN: '5',
                    POSTGRES_POOL_MAX: '20',
                };
                return configs[key];
            });
            const config = service.getPostgreSQLConfig();
            expect(config).toEqual({
                type: 'postgresql',
                host: 'custom-host',
                port: 5433,
                username: 'custom_user',
                password: 'custom_password',
                database: 'custom_database',
                ssl: true,
                pool: {
                    min: 5,
                    max: 20,
                    acquireTimeoutMillis: 60000,
                    createTimeoutMillis: 30000,
                    destroyTimeoutMillis: 5000,
                    idleTimeoutMillis: 600000,
                    reapIntervalMillis: 1000,
                    createRetryIntervalMillis: 200,
                },
            });
        });
        it('should handle SSL configuration as object', () => {
            jest.spyOn(configService, 'get').mockImplementation((key) => {
                if (key === 'POSTGRES_SSL') {
                    return '{"rejectUnauthorized": false}';
                }
                return undefined;
            });
            const config = service.getPostgreSQLConfig();
            expect(config.ssl).toEqual({ rejectUnauthorized: false });
        });
    });
    describe('getMongoDBConfig', () => {
        it('should return default MongoDB configuration', () => {
            jest.spyOn(configService, 'get').mockReturnValue(undefined);
            const config = service.getMongoDBConfig();
            expect(config).toEqual({
                type: 'mongodb',
                host: 'localhost',
                port: 27017,
                username: 'aiofix_user',
                password: 'aiofix_password',
                database: 'aiofix_events',
                ssl: false,
                pool: {
                    min: 2,
                    max: 10,
                    acquireTimeoutMillis: 60000,
                    createTimeoutMillis: 30000,
                    destroyTimeoutMillis: 5000,
                    idleTimeoutMillis: 600000,
                    reapIntervalMillis: 1000,
                    createRetryIntervalMillis: 200,
                },
            });
        });
        it('should return configured MongoDB configuration', () => {
            jest.spyOn(configService, 'get').mockImplementation((key) => {
                const configs = {
                    MONGODB_HOST: 'mongo-host',
                    MONGODB_PORT: '27018',
                    MONGODB_USER: 'mongo_user',
                    MONGODB_PASSWORD: 'mongo_password',
                    MONGODB_DB: 'mongo_database',
                    MONGODB_SSL: 'true',
                };
                return configs[key];
            });
            const config = service.getMongoDBConfig();
            expect(config).toEqual({
                type: 'mongodb',
                host: 'mongo-host',
                port: 27018,
                username: 'mongo_user',
                password: 'mongo_password',
                database: 'mongo_database',
                ssl: true,
                pool: {
                    min: 2,
                    max: 10,
                    acquireTimeoutMillis: 60000,
                    createTimeoutMillis: 30000,
                    destroyTimeoutMillis: 5000,
                    idleTimeoutMillis: 600000,
                    reapIntervalMillis: 1000,
                    createRetryIntervalMillis: 200,
                },
            });
        });
    });
    describe('getTenantDatabases', () => {
        it('should return empty array by default', () => {
            jest.spyOn(configService, 'get').mockReturnValue(undefined);
            const databases = service.getTenantDatabases();
            expect(databases).toEqual([]);
        });
        it('should return configured tenant databases', () => {
            jest
                .spyOn(configService, 'get')
                .mockReturnValue('tenant1,tenant2,tenant3');
            const databases = service.getTenantDatabases();
            expect(databases).toEqual(['tenant1', 'tenant2', 'tenant3']);
        });
        it('should handle single tenant database', () => {
            jest.spyOn(configService, 'get').mockReturnValue('tenant1');
            const databases = service.getTenantDatabases();
            expect(databases).toEqual(['tenant1']);
        });
        it('should handle empty string', () => {
            jest.spyOn(configService, 'get').mockReturnValue('');
            const databases = service.getTenantDatabases();
            expect(databases).toEqual([]);
        });
    });
    describe('validateConfig', () => {
        it('should validate correct PostgreSQL config', () => {
            const config = {
                type: 'postgresql',
                host: 'localhost',
                port: 5432,
                username: 'user',
                password: 'password',
                database: 'test_db',
            };
            const isValid = service.validateConfig(config);
            expect(isValid).toBe(true);
        });
        it('should validate correct MongoDB config', () => {
            const config = {
                type: 'mongodb',
                host: 'localhost',
                port: 27017,
                username: 'user',
                password: 'password',
                database: 'test_db',
            };
            const isValid = service.validateConfig(config);
            expect(isValid).toBe(true);
        });
        it('should reject invalid config with missing required fields', () => {
            const config = {
                type: 'postgresql',
                host: 'localhost',
                // 缺少 port, username, password, database
            };
            const isValid = service.validateConfig(config);
            expect(isValid).toBe(false);
        });
        it('should reject config with invalid type', () => {
            const config = {
                type: 'invalid',
                host: 'localhost',
                port: 5432,
                username: 'user',
                password: 'password',
                database: 'test_db',
            };
            const isValid = service.validateConfig(config);
            expect(isValid).toBe(false);
        });
        it('should reject config with invalid port', () => {
            const config = {
                type: 'postgresql',
                host: 'localhost',
                port: 'invalid',
                username: 'user',
                password: 'password',
                database: 'test_db',
            };
            const isValid = service.validateConfig(config);
            expect(isValid).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,