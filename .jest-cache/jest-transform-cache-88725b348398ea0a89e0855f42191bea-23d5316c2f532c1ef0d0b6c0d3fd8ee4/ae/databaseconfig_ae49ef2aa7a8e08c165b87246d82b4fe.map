{"version":3,"names":["cov_23v5ly6mx","actualCoverage","common_1","s","require","config_1","logging_1","DatabaseConfig","constructor","_configService","logger","f","getPostgresConfig","host","b","get","port","parseInt","database","username","password","pool","min","max","acquireTimeoutMillis","createTimeoutMillis","destroyTimeoutMillis","idleTimeoutMillis","reapIntervalMillis","createRetryIntervalMillis","tenantDatabases","synchronize","logging","cache","duration","ssl","rejectUnauthorized","getMongoDBConfig","uri","databases","events","notifications","options","maxPoolSize","minPoolSize","maxIdleTimeMS","serverSelectionTimeoutMS","socketTimeoutMS","bufferMaxEntries","useNewUrlParser","useUnifiedTopology","eventStore","collection","snapshotCollection","maxEventsPerSnapshot","indexes","keys","id","unique","type","status","tenantId","userId","createdAt","getTenantDatabaseName","getTenantPostgresConfig","baseConfig","validateConfig","postgresConfig","mongodbConfig","error","info","undefined","Error","message","String","exports","__decorate","Injectable","ConfigService","_a","Object","_b","PinoLoggerService"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/config/database.config.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@aiofix/config';\nimport { PinoLoggerService } from '@aiofix/logging';\n\n/**\n * @class DatabaseConfig\n * @description\n * 数据库配置类，负责管理PostgreSQL和MongoDB的配置信息。\n *\n * 配置管理职责：\n * 1. 提供PostgreSQL数据库连接配置\n * 2. 提供MongoDB数据库连接配置\n * 3. 管理数据库连接池配置\n * 4. 支持多租户数据库配置\n *\n * 多租户支持：\n * 1. 支持租户级数据库隔离\n * 2. 动态数据库连接管理\n * 3. 租户数据库路由\n * 4. 数据库连接池优化\n *\n * @param {ConfigService} configService 配置服务\n * @param {PinoLoggerService} logger 日志服务\n *\n * @example\n * ```typescript\n * const dbConfig = new DatabaseConfig(configService, logger);\n * const postgresConfig = dbConfig.getPostgresConfig();\n * const mongodbConfig = dbConfig.getMongoDBConfig();\n * ```\n * @since 1.0.0\n */\n@Injectable()\nexport class DatabaseConfig {\n  constructor(\n    private readonly _configService: ConfigService,\n    private readonly logger: PinoLoggerService,\n  ) {}\n\n  /**\n   * @method getPostgresConfig\n   * @description 获取PostgreSQL数据库配置\n   * @returns {object} PostgreSQL配置对象\n   *\n   * 配置包含：\n   * 1. 数据库连接信息\n   * 2. 连接池配置\n   * 3. 多租户数据库支持\n   * 4. 性能优化配置\n   */\n  getPostgresConfig() {\n    return {\n      // 主数据库配置\n      host: this._configService.get('POSTGRES_HOST') ?? 'localhost',\n      port: parseInt(this._configService.get('POSTGRES_PORT') ?? '5432'),\n      database: this._configService.get('POSTGRES_DB') ?? 'aiofix_platform',\n      username: this._configService.get('POSTGRES_USER') ?? 'aiofix_user',\n      password:\n        this._configService.get('POSTGRES_PASSWORD') ?? 'aiofix_password',\n\n      // 连接池配置\n      pool: {\n        min: parseInt(this._configService.get('POSTGRES_POOL_MIN') ?? '2'),\n        max: parseInt(this._configService.get('POSTGRES_POOL_MAX') ?? '10'),\n        acquireTimeoutMillis: 30000,\n        createTimeoutMillis: 30000,\n        destroyTimeoutMillis: 5000,\n        idleTimeoutMillis: parseInt(\n          this._configService.get('POSTGRES_POOL_IDLE_TIMEOUT') ?? '30000',\n        ),\n        reapIntervalMillis: 1000,\n        createRetryIntervalMillis: 200,\n      },\n\n      // 多租户数据库配置\n      tenantDatabases: {\n        'tenant-1': 'aiofix_tenant_1',\n        'tenant-2': 'aiofix_tenant_2',\n        'tenant-3': 'aiofix_tenant_3',\n      },\n\n      // 性能配置\n      synchronize: this._configService.get('NODE_ENV') === 'development',\n      logging: this._configService.get('NODE_ENV') === 'development',\n      cache: {\n        duration: 30000, // 30秒缓存\n      },\n\n      // SSL配置\n      ssl:\n        this._configService.get('NODE_ENV') === 'production'\n          ? {\n              rejectUnauthorized: false,\n            }\n          : false,\n    };\n  }\n\n  /**\n   * @method getMongoDBConfig\n   * @description 获取MongoDB数据库配置\n   * @returns {object} MongoDB配置对象\n   *\n   * 配置包含：\n   * 1. 事件存储数据库配置\n   * 2. 通知模块数据库配置\n   * 3. 连接池和性能配置\n   * 4. 索引和验证配置\n   */\n  getMongoDBConfig() {\n    return {\n      // 主连接URI\n      uri:\n        this._configService.get('MONGODB_URI') ??\n        'mongodb://aiofix_admin:aiofix_password@localhost:27017/aiofix_events?authSource=admin',\n\n      // 数据库配置\n      databases: {\n        events: this._configService.get('MONGODB_EVENTS_DB') ?? 'aiofix_events',\n        notifications:\n          this._configService.get('MONGODB_NOTIFICATIONS_DB') ??\n          'aiofix_notifications',\n      },\n\n      // 连接配置\n      options: {\n        maxPoolSize: 10,\n        minPoolSize: 2,\n        maxIdleTimeMS: 30000,\n        serverSelectionTimeoutMS: 5000,\n        socketTimeoutMS: 45000,\n        bufferMaxEntries: 0,\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n      },\n\n      // 事件存储配置\n      eventStore: {\n        collection: 'domain_events',\n        snapshotCollection: 'aggregate_snapshots',\n        maxEventsPerSnapshot: 100,\n      },\n\n      // 通知存储配置\n      notifications: {\n        collection: 'notifications',\n        indexes: [\n          { keys: { id: 1 }, options: { unique: true } },\n          { keys: { type: 1, status: 1 } },\n          { keys: { tenantId: 1, userId: 1 } },\n          { keys: { createdAt: 1 } },\n        ],\n      },\n    };\n  }\n\n  /**\n   * @method getTenantDatabaseName\n   * @description 获取租户数据库名称\n   * @param {string} tenantId 租户ID\n   * @returns {string} 租户数据库名称\n   */\n  getTenantDatabaseName(tenantId: string): string {\n    const tenantDatabases = this.getPostgresConfig().tenantDatabases as Record<\n      string,\n      string\n    >;\n    return tenantDatabases[tenantId] || `aiofix_tenant_${tenantId}`;\n  }\n\n  /**\n   * @method getTenantPostgresConfig\n   * @description 获取租户PostgreSQL配置\n   * @param {string} tenantId 租户ID\n   * @returns {object} 租户PostgreSQL配置\n   */\n  getTenantPostgresConfig(tenantId: string) {\n    const baseConfig = this.getPostgresConfig();\n    return {\n      ...baseConfig,\n      database: this.getTenantDatabaseName(tenantId),\n    };\n  }\n\n  /**\n   * @method validateConfig\n   * @description 验证数据库配置\n   * @returns {boolean} 配置是否有效\n   */\n  validateConfig(): boolean {\n    try {\n      const postgresConfig = this.getPostgresConfig();\n      const mongodbConfig = this.getMongoDBConfig();\n\n      // 验证PostgreSQL配置\n      if (\n        !postgresConfig.host ||\n        !postgresConfig.database ||\n        !postgresConfig.username\n      ) {\n        this.logger.error('PostgreSQL配置不完整');\n        return false;\n      }\n\n      // 验证MongoDB配置\n      if (!mongodbConfig.uri) {\n        this.logger.error('MongoDB配置不完整');\n        return false;\n      }\n\n      this.logger.info('数据库配置验证通过');\n      return true;\n    } catch (error) {\n      this.logger.error('数据库配置验证失败', undefined, {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      return false;\n    }\n  }\n}\n"],"mappingsaAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFA,MAAAE,QAAA;AAAA;AAAA,CAAAF,aAAA,GAAAG,CAAA,QAAAC,OAAA;AACA,MAAAC,QAAA;AAAA;AAAA,CAAAL,aAAA,GAAAG,CAAA,QAAAC,OAAA;AACA,MAAAE,SAAA;AAAA;AAAA,CAAAN,aAAA,GAAAG,CAAA,QAAAC,OAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAAJ,aAAA,GAAAG,CAAA;AA6BO,IAAMI,cAAc,GAApB,MAAMA,cAAc;EACzBC,YACmBC,cAA6B,EAC7BC,MAAyB;IAAA;IAAAV,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IADzB,KAAAM,cAAc,GAAdA,cAAc;IAAe;IAAAT,aAAA,GAAAG,CAAA;IAC7B,KAAAO,MAAM,GAANA,MAAM;EACtB;EAEH;;;;;;;;;;;EAWAE,iBAAiBA,CAAA;IAAA;IAAAZ,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IACf,OAAO;MACL;MACAU,IAAI;MAAE;MAAA,CAAAb,aAAA,GAAAc,CAAA,eAAI,CAACL,cAAc,CAACM,GAAG,CAAC,eAAe,CAAC;MAAA;MAAA,CAAAf,aAAA,GAAAc,CAAA,WAAI,WAAW;MAC7DE,IAAI,EAAEC,QAAQ;MAAC;MAAA,CAAAjB,aAAA,GAAAc,CAAA,eAAI,CAACL,cAAc,CAACM,GAAG,CAAC,eAAe,CAAC;MAAA;MAAA,CAAAf,aAAA,GAAAc,CAAA,WAAI,MAAM,EAAC;MAClEI,QAAQ;MAAE;MAAA,CAAAlB,aAAA,GAAAc,CAAA,eAAI,CAACL,cAAc,CAACM,GAAG,CAAC,aAAa,CAAC;MAAA;MAAA,CAAAf,aAAA,GAAAc,CAAA,WAAI,iBAAiB;MACrEK,QAAQ;MAAE;MAAA,CAAAnB,aAAA,GAAAc,CAAA,eAAI,CAACL,cAAc,CAACM,GAAG,CAAC,eAAe,CAAC;MAAA;MAAA,CAAAf,aAAA,GAAAc,CAAA,WAAI,aAAa;MACnEM,QAAQ;MACN;MAAA,CAAApB,aAAA,GAAAc,CAAA,eAAI,CAACL,cAAc,CAACM,GAAG,CAAC,mBAAmB,CAAC;MAAA;MAAA,CAAAf,aAAA,GAAAc,CAAA,WAAI,iBAAiB;MAEnE;MACAO,IAAI,EAAE;QACJC,GAAG,EAAEL,QAAQ;QAAC;QAAA,CAAAjB,aAAA,GAAAc,CAAA,eAAI,CAACL,cAAc,CAACM,GAAG,CAAC,mBAAmB,CAAC;QAAA;QAAA,CAAAf,aAAA,GAAAc,CAAA,WAAI,GAAG,EAAC;QAClES,GAAG,EAAEN,QAAQ;QAAC;QAAA,CAAAjB,aAAA,GAAAc,CAAA,eAAI,CAACL,cAAc,CAACM,GAAG,CAAC,mBAAmB,CAAC;QAAA;QAAA,CAAAf,aAAA,GAAAc,CAAA,WAAI,IAAI,EAAC;QACnEU,oBAAoB,EAAE,KAAK;QAC3BC,mBAAmB,EAAE,KAAK;QAC1BC,oBAAoB,EAAE,IAAI;QAC1BC,iBAAiB,EAAEV,QAAQ;QACzB;QAAA,CAAAjB,aAAA,GAAAc,CAAA,eAAI,CAACL,cAAc,CAACM,GAAG,CAAC,4BAA4B,CAAC;QAAA;QAAA,CAAAf,aAAA,GAAAc,CAAA,WAAI,OAAO,EACjE;QACDc,kBAAkB,EAAE,IAAI;QACxBC,yBAAyB,EAAE;OAC5B;MAED;MACAC,eAAe,EAAE;QACf,UAAU,EAAE,iBAAiB;QAC7B,UAAU,EAAE,iBAAiB;QAC7B,UAAU,EAAE;OACb;MAED;MACAC,WAAW,EAAE,IAAI,CAACtB,cAAc,CAACM,GAAG,CAAC,UAAU,CAAC,KAAK,aAAa;MAClEiB,OAAO,EAAE,IAAI,CAACvB,cAAc,CAACM,GAAG,CAAC,UAAU,CAAC,KAAK,aAAa;MAC9DkB,KAAK,EAAE;QACLC,QAAQ,EAAE,KAAK,CAAE;OAClB;MAED;MACAC,GAAG,EACD,IAAI,CAAC1B,cAAc,CAACM,GAAG,CAAC,UAAU,CAAC,KAAK,YAAY;MAAA;MAAA,CAAAf,aAAA,GAAAc,CAAA,WAChD;QACEsB,kBAAkB,EAAE;OACrB;MAAA;MAAA,CAAApC,aAAA,GAAAc,CAAA,WACD,KAAK;KACZ;EACH;EAEA;;;;;;;;;;;EAWAuB,gBAAgBA,CAAA;IAAA;IAAArC,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IACd,OAAO;MACL;MACAmC,GAAG;MACD;MAAA,CAAAtC,aAAA,GAAAc,CAAA,eAAI,CAACL,cAAc,CAACM,GAAG,CAAC,aAAa,CAAC;MAAA;MAAA,CAAAf,aAAA,GAAAc,CAAA,WACtC,uFAAuF;MAEzF;MACAyB,SAAS,EAAE;QACTC,MAAM;QAAE;QAAA,CAAAxC,aAAA,GAAAc,CAAA,eAAI,CAACL,cAAc,CAACM,GAAG,CAAC,mBAAmB,CAAC;QAAA;QAAA,CAAAf,aAAA,GAAAc,CAAA,WAAI,eAAe;QACvE2B,aAAa;QACX;QAAA,CAAAzC,aAAA,GAAAc,CAAA,eAAI,CAACL,cAAc,CAACM,GAAG,CAAC,0BAA0B,CAAC;QAAA;QAAA,CAAAf,aAAA,GAAAc,CAAA,WACnD,sBAAsB;OACzB;MAED;MACA4B,OAAO,EAAE;QACPC,WAAW,EAAE,EAAE;QACfC,WAAW,EAAE,CAAC;QACdC,aAAa,EAAE,KAAK;QACpBC,wBAAwB,EAAE,IAAI;QAC9BC,eAAe,EAAE,KAAK;QACtBC,gBAAgB,EAAE,CAAC;QACnBC,eAAe,EAAE,IAAI;QACrBC,kBAAkB,EAAE;OACrB;MAED;MACAC,UAAU,EAAE;QACVC,UAAU,EAAE,eAAe;QAC3BC,kBAAkB,EAAE,qBAAqB;QACzCC,oBAAoB,EAAE;OACvB;MAED;MACAb,aAAa,EAAE;QACbW,UAAU,EAAE,eAAe;QAC3BG,OAAO,EAAE,CACP;UAAEC,IAAI,EAAE;YAAEC,EAAE,EAAE;UAAC,CAAE;UAAEf,OAAO,EAAE;YAAEgB,MAAM,EAAE;UAAI;QAAE,CAAE,EAC9C;UAAEF,IAAI,EAAE;YAAEG,IAAI,EAAE,CAAC;YAAEC,MAAM,EAAE;UAAC;QAAE,CAAE,EAChC;UAAEJ,IAAI,EAAE;YAAEK,QAAQ,EAAE,CAAC;YAAEC,MAAM,EAAE;UAAC;QAAE,CAAE,EACpC;UAAEN,IAAI,EAAE;YAAEO,SAAS,EAAE;UAAC;QAAE,CAAE;;KAG/B;EACH;EAEA;;;;;;EAMAC,qBAAqBA,CAACH,QAAgB;IAAA;IAAA7D,aAAA,GAAAW,CAAA;IACpC,MAAMmB,eAAe;IAAA;IAAA,CAAA9B,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACS,iBAAiB,EAAE,CAACkB,eAGhD;IAAC;IAAA9B,aAAA,GAAAG,CAAA;IACF,OAAO,2BAAAH,aAAA,GAAAc,CAAA,WAAAgB,eAAe,CAAC+B,QAAQ,CAAC;IAAA;IAAA,CAAA7D,aAAA,GAAAc,CAAA,WAAI,iBAAiB+C,QAAQ,EAAE;EACjE;EAEA;;;;;;EAMAI,uBAAuBA,CAACJ,QAAgB;IAAA;IAAA7D,aAAA,GAAAW,CAAA;IACtC,MAAMuD,UAAU;IAAA;IAAA,CAAAlE,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACS,iBAAiB,EAAE;IAAC;IAAAZ,aAAA,GAAAG,CAAA;IAC5C,OAAO;MACL,GAAG+D,UAAU;MACbhD,QAAQ,EAAE,IAAI,CAAC8C,qBAAqB,CAACH,QAAQ;KAC9C;EACH;EAEA;;;;;EAKAM,cAAcA,CAAA;IAAA;IAAAnE,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IACZ,IAAI;MACF,MAAMiE,cAAc;MAAA;MAAA,CAAApE,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACS,iBAAiB,EAAE;MAC/C,MAAMyD,aAAa;MAAA;MAAA,CAAArE,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACkC,gBAAgB,EAAE;MAE7C;MAAA;MAAArC,aAAA,GAAAG,CAAA;MACA;MACE;MAAA,CAAAH,aAAA,GAAAc,CAAA,YAACsD,cAAc,CAACvD,IAAI;MAAA;MAAA,CAAAb,aAAA,GAAAc,CAAA,WACpB,CAACsD,cAAc,CAAClD,QAAQ;MAAA;MAAA,CAAAlB,aAAA,GAAAc,CAAA,WACxB,CAACsD,cAAc,CAACjD,QAAQ,GACxB;QAAA;QAAAnB,aAAA,GAAAc,CAAA;QAAAd,aAAA,GAAAG,CAAA;QACA,IAAI,CAACO,MAAM,CAAC4D,KAAK,CAAC,iBAAiB,CAAC;QAAC;QAAAtE,aAAA,GAAAG,CAAA;QACrC,OAAO,KAAK;MACd,CAAC;MAAA;MAAA;QAAAH,aAAA,GAAAc,CAAA;MAAA;MAED;MAAAd,aAAA,GAAAG,CAAA;MACA,IAAI,CAACkE,aAAa,CAAC/B,GAAG,EAAE;QAAA;QAAAtC,aAAA,GAAAc,CAAA;QAAAd,aAAA,GAAAG,CAAA;QACtB,IAAI,CAACO,MAAM,CAAC4D,KAAK,CAAC,cAAc,CAAC;QAAC;QAAAtE,aAAA,GAAAG,CAAA;QAClC,OAAO,KAAK;MACd,CAAC;MAAA;MAAA;QAAAH,aAAA,GAAAc,CAAA;MAAA;MAAAd,aAAA,GAAAG,CAAA;MAED,IAAI,CAACO,MAAM,CAAC6D,IAAI,CAAC,WAAW,CAAC;MAAC;MAAAvE,aAAA,GAAAG,CAAA;MAC9B,OAAO,IAAI;IACb,CAAC,CAAC,OAAOmE,KAAK,EAAE;MAAA;MAAAtE,aAAA,GAAAG,CAAA;MACd,IAAI,CAACO,MAAM,CAAC4D,KAAK,CAAC,WAAW,EAAEE,SAAS,EAAE;QACxCF,KAAK,EAAEA,KAAK,YAAYG,KAAK;QAAA;QAAA,CAAAzE,aAAA,GAAAc,CAAA,WAAGwD,KAAK,CAACI,OAAO;QAAA;QAAA,CAAA1E,aAAA,GAAAc,CAAA,WAAG6D,MAAM,CAACL,KAAK,CAAC;OAC9D,CAAC;MAAC;MAAAtE,aAAA,GAAAG,CAAA;MACH,OAAO,KAAK;IACd;EACF;CACD;AAAA;AAAAH,aAAA,GAAAG,CAAA;AA1LYyE,OAAA,CAAArE,cAAA,GAAAA,cAAA;AAAc;AAAAP,aAAA,GAAAG,CAAA;yBAAdI,cAAc,GAAAsE,UAAA,EAD1B,IAAA3E,QAAA,CAAA4E,UAAU,GAAE,E;;oCAGwBzE,QAAA,CAAA0E,aAAa;AAAA;AAAA,CAAA/E,aAAA,GAAAc,CAAA,WAAbT,QAAA,CAAA0E,aAAa;AAAA;AAAA,CAAA/E,aAAA,GAAAc,CAAA,WAAAkE,EAAA;AAAA;AAAA,CAAAhF,aAAA,GAAAc,CAAA,WAAAmE,MAAA,WAAAC,EAAA;AAAA;AAAA,CAAAlF,aAAA,GAAAc,CAAA,kBACrBR,SAAA,CAAA6E,iBAAiB;AAAA;AAAA,CAAAnF,aAAA,GAAAc,CAAA,WAAjBR,SAAA,CAAA6E,iBAAiB;AAAA;AAAA,CAAAnF,aAAA,GAAAc,CAAA,WAAAoE,EAAA;AAAA;AAAA,CAAAlF,aAAA,GAAAc,CAAA,WAAAmE,MAAA,I,EAHjC1E,cAAc,CA0L1B","ignoreList":[]}