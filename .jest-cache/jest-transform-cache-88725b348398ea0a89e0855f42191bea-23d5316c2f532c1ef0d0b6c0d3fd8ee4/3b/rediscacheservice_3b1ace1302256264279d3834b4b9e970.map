{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/redis-cache.service.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/redis-cache.service.ts"],"sourcesContent":["/**\n * @file redis-cache.service.ts\n * @description Redis缓存服务\n *\n * 该文件实现了基于Redis的缓存服务，包括：\n * - 基础的CRUD操作\n * - 缓存统计和健康检查\n * - 连接管理和错误处理\n * - 序列化和反序列化\n *\n * 遵循DDD和Clean Architecture原则，提供高性能的分布式缓存。\n */\n\nimport {\n  Injectable,\n  OnModuleDestroy,\n  OnModuleInit,\n  Inject,\n} from '@nestjs/common';\nimport Redis, { Cluster } from 'ioredis';\nimport {\n  ICacheService,\n  CacheKey,\n  CacheValue,\n  CacheOptions,\n  CacheStats,\n  CacheHealth,\n  CacheType,\n  CacheStrategy,\n} from '../interfaces/cache.interface';\nimport type { ICacheKeyFactory } from '../interfaces/cache.interface';\nimport { PinoLoggerService, LogContext } from '@aiofix/logging';\n\n/**\n * @interface RedisConfig\n * @description Redis配置接口\n */\nexport interface RedisConfig {\n  /** Redis主机地址 */\n  host: string;\n  /** Redis端口 */\n  port: number;\n  /** Redis密码 */\n  password?: string;\n  /** 数据库索引 */\n  db?: number;\n  /** 连接超时时间（毫秒） */\n  connectTimeout?: number;\n  /** 命令超时时间（毫秒） */\n  commandTimeout?: number;\n  /** 重试次数 */\n  retries?: number;\n  /** 重试延迟（毫秒） */\n  retryDelay?: number;\n  /** 是否启用集群模式 */\n  cluster?: boolean;\n  /** 集群节点 */\n  nodes?: Array<{ host: string; port: number }>;\n  /** 是否启用哨兵模式 */\n  sentinel?: boolean;\n  /** 哨兵配置 */\n  sentinels?: Array<{ host: string; port: number }>;\n  /** 主节点名称 */\n  name?: string;\n}\n\n/**\n * @class RedisCacheService\n * @description Redis缓存服务实现\n *\n * 提供基于Redis的分布式缓存功能，包括：\n * - 基础的CRUD操作\n * - 缓存统计和健康检查\n * - 连接管理和错误处理\n * - 序列化和反序列化\n */\n@Injectable()\nexport class RedisCacheService\n  implements ICacheService, OnModuleInit, OnModuleDestroy\n{\n  private readonly logger: PinoLoggerService;\n  private redis: Redis | Cluster = {} as Redis | Cluster;\n  private isConnected = false;\n  private stats: CacheStats = {\n    totalEntries: 0,\n    hits: 0,\n    misses: 0,\n    hitRate: 0,\n    totalSize: 0,\n    averageSize: 0,\n    expiredEntries: 0,\n    evictedEntries: 0,\n    lastReset: Date.now(),\n  };\n\n  constructor(\n    @Inject('REDIS_CONFIG') private readonly config: RedisConfig,\n    @Inject('ICacheKeyFactory') private readonly keyFactory: ICacheKeyFactory,\n    logger: PinoLoggerService,\n  ) {\n    this.logger = logger;\n  }\n\n  /**\n   * @method onModuleInit\n   * @description 模块初始化时连接Redis\n   */\n  async onModuleInit(): Promise<void> {\n    await this.connect();\n  }\n\n  /**\n   * @method onModuleDestroy\n   * @description 模块销毁时断开Redis连接\n   */\n  async onModuleDestroy(): Promise<void> {\n    await this.disconnect();\n  }\n\n  /**\n   * @method connect\n   * @description 连接到Redis\n   */\n  private async connect(): Promise<void> {\n    try {\n      if (this.config.cluster && this.config.nodes) {\n        this.redis = new Redis.Cluster(this.config.nodes, {\n          redisOptions: {\n            password: this.config.password,\n            db: this.config.db || 0,\n            connectTimeout: this.config.connectTimeout || 10000,\n            commandTimeout: this.config.commandTimeout || 5000,\n            maxRetriesPerRequest: this.config.retries || 3,\n          },\n        });\n      } else if (this.config.sentinel && this.config.sentinels) {\n        this.redis = new Redis({\n          sentinels: this.config.sentinels,\n          name: this.config.name || 'mymaster',\n          password: this.config.password,\n          db: this.config.db || 0,\n          connectTimeout: this.config.connectTimeout || 10000,\n          commandTimeout: this.config.commandTimeout || 5000,\n          maxRetriesPerRequest: this.config.retries || 3,\n        });\n      } else {\n        this.redis = new Redis({\n          host: this.config.host,\n          port: this.config.port,\n          password: this.config.password,\n          db: this.config.db || 0,\n          connectTimeout: this.config.connectTimeout || 10000,\n          commandTimeout: this.config.commandTimeout || 5000,\n          maxRetriesPerRequest: this.config.retries || 3,\n        });\n      }\n\n      // 监听连接事件\n      this.redis.on('connect', () => {\n        this.logger.info('Redis connected', LogContext.CACHE);\n        this.isConnected = true;\n      });\n\n      this.redis.on('ready', () => {\n        this.logger.info('Redis ready', LogContext.CACHE);\n        this.isConnected = true;\n      });\n\n      this.redis.on('error', error => {\n        this.logger.error(\n          'Redis error',\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n        this.isConnected = false;\n      });\n\n      this.redis.on('close', () => {\n        this.logger.warn('Redis connection closed', LogContext.CACHE);\n        this.isConnected = false;\n      });\n\n      this.redis.on('reconnecting', () => {\n        this.logger.info('Redis reconnecting...', LogContext.CACHE);\n      });\n\n      // 等待连接建立\n      await this.redis.ping();\n      this.logger.info(\n        'Redis connection established successfully',\n        LogContext.CACHE,\n      );\n    } catch (error) {\n      this.logger.error(\n        'Failed to connect to Redis',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * @method disconnect\n   * @description 断开Redis连接\n   */\n  private async disconnect(): Promise<void> {\n    if (this.redis) {\n      await this.redis.quit();\n      this.isConnected = false;\n      this.logger.info('Redis connection closed', LogContext.CACHE);\n    }\n  }\n\n  /**\n   * @method get\n   * @description 获取缓存值\n   * @param key 缓存键\n   * @returns 缓存值或null\n   */\n  async get<T = any>(key: CacheKey): Promise<T | null> {\n    try {\n      const keyString = this.keyFactory.toString(key);\n      const result = await this.redis.get(keyString);\n\n      if (result === null) {\n        this.stats.misses++;\n        this.updateHitRate();\n        return null;\n      }\n\n      this.stats.hits++;\n      this.updateHitRate();\n\n      const cacheValue: CacheValue<T> = JSON.parse(result);\n\n      // 检查是否过期\n      if (cacheValue.expiresAt && Date.now() > cacheValue.expiresAt) {\n        await this.delete(key);\n        this.stats.expiredEntries++;\n        this.stats.misses++;\n        this.updateHitRate();\n        return null;\n      }\n\n      // 更新访问统计\n      cacheValue.accessCount++;\n      cacheValue.lastAccessed = Date.now();\n      await this.redis.set(keyString, JSON.stringify(cacheValue));\n\n      return cacheValue.value;\n    } catch (error) {\n      this.logger.error(\n        'Error getting cache value',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.stats.misses++;\n      this.updateHitRate();\n      return null;\n    }\n  }\n\n  /**\n   * @method set\n   * @description 设置缓存值\n   * @param key 缓存键\n   * @param value 缓存值\n   * @param options 缓存选项\n   * @returns 是否成功\n   */\n  async set<T = any>(\n    key: CacheKey,\n    value: T,\n    options?: Partial<CacheOptions>,\n  ): Promise<boolean> {\n    try {\n      const keyString = this.keyFactory.toString(key);\n      const now = Date.now();\n\n      const cacheValue: CacheValue<T> = {\n        value,\n        createdAt: now,\n        accessCount: 0,\n        lastAccessed: now,\n        version: key.version,\n        tags: key.tags,\n        metadata: {\n          type: CacheType.REDIS,\n          strategy: options?.strategy || CacheStrategy.TTL,\n        },\n      };\n\n      // 设置过期时间\n      if (options?.ttl) {\n        cacheValue.expiresAt = now + options.ttl;\n      }\n\n      const serializedValue = JSON.stringify(cacheValue);\n      const valueSize = Buffer.byteLength(serializedValue, 'utf8');\n\n      // 使用Redis的EXPIRE命令设置过期时间\n      if (options?.ttl) {\n        await this.redis.setex(\n          keyString,\n          Math.ceil(options.ttl / 1000),\n          serializedValue,\n        );\n      } else {\n        await this.redis.set(keyString, serializedValue);\n      }\n\n      // 更新统计\n      this.stats.totalEntries++;\n      this.stats.totalSize += valueSize;\n      this.stats.averageSize = this.stats.totalSize / this.stats.totalEntries;\n\n      return true;\n    } catch (error) {\n      this.logger.error(\n        'Error setting cache value',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method delete\n   * @description 删除缓存值\n   * @param key 缓存键\n   * @returns 是否成功\n   */\n  async delete(key: CacheKey): Promise<boolean> {\n    try {\n      const keyString = this.keyFactory.toString(key);\n      const result = await this.redis.del(keyString);\n\n      if (result > 0) {\n        this.stats.totalEntries--;\n        // 注意：这里无法准确更新totalSize，因为我们需要获取被删除项的大小\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      this.logger.error(\n        'Error deleting cache value',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method exists\n   * @description 检查缓存键是否存在\n   * @param key 缓存键\n   * @returns 是否存在\n   */\n  async exists(key: CacheKey): Promise<boolean> {\n    try {\n      const keyString = this.keyFactory.toString(key);\n      const result = await this.redis.exists(keyString);\n      return result === 1;\n    } catch (error) {\n      this.logger.error(\n        'Error checking cache key existence',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method clear\n   * @description 清空缓存\n   * @param namespace 命名空间（可选）\n   * @returns 是否成功\n   */\n  async clear(namespace?: string): Promise<boolean> {\n    try {\n      if (namespace) {\n        // 使用模式匹配删除指定命名空间的所有键\n        const pattern = `${namespace}:*`;\n        const keys = await this.redis.keys(pattern);\n\n        if (keys.length > 0) {\n          await this.redis.del(...keys);\n          this.stats.totalEntries -= keys.length;\n        }\n      } else {\n        // 清空整个数据库\n        await this.redis.flushdb();\n        this.stats.totalEntries = 0;\n        this.stats.totalSize = 0;\n        this.stats.averageSize = 0;\n      }\n\n      return true;\n    } catch (error) {\n      this.logger.error(\n        'Error clearing cache',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method getStats\n   * @description 获取缓存统计\n   * @returns 缓存统计\n   */\n  async getStats(): Promise<CacheStats> {\n    try {\n      // 获取Redis信息\n      const info = await this.redis.info();\n      const lines = info.split('\\r\\n');\n\n      // 解析Redis统计信息\n      for (const line of lines) {\n        if (line.startsWith('keyspace:')) {\n          const match = line.match(/keys=(\\d+)/);\n          if (match) {\n            this.stats.totalEntries = parseInt(match[1], 10);\n            break;\n          }\n        }\n      }\n\n      return { ...this.stats };\n    } catch (error) {\n      this.logger.error(\n        'Error getting cache stats',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return { ...this.stats };\n    }\n  }\n\n  /**\n   * @method getHealth\n   * @description 获取缓存健康状态\n   * @returns 缓存健康状态\n   */\n  async getHealth(): Promise<CacheHealth> {\n    const startTime = Date.now();\n\n    try {\n      await this.redis.ping();\n      const responseTime = Date.now() - startTime;\n\n      return {\n        healthy: true,\n        connected: this.isConnected,\n        responseTime,\n        lastCheck: Date.now(),\n      };\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n\n      return {\n        healthy: false,\n        connected: false,\n        responseTime,\n        error: (error as Error).message,\n        lastCheck: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * @method resetStats\n   * @description 重置缓存统计\n   */\n  async resetStats(): Promise<void> {\n    this.stats = {\n      totalEntries: 0,\n      hits: 0,\n      misses: 0,\n      hitRate: 0,\n      totalSize: 0,\n      averageSize: 0,\n      expiredEntries: 0,\n      evictedEntries: 0,\n      lastReset: Date.now(),\n    };\n  }\n\n  /**\n   * @private updateHitRate\n   * @description 更新命中率\n   */\n  private updateHitRate(): void {\n    const total = this.stats.hits + this.stats.misses;\n    this.stats.hitRate = total > 0 ? this.stats.hits / total : 0;\n  }\n}\n"],"version":3}