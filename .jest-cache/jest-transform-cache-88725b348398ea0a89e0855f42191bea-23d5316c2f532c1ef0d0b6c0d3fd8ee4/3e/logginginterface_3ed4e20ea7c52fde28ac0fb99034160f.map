{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/interfaces/logging.interface.ts","mappings":";;;AAEA;;;;GAIG;AACH,IAAY,UAqBX;AArBD,WAAY,UAAU;IACpB,aAAa;IACb,2CAA6B,CAAA;IAC7B,YAAY;IACZ,mCAAqB,CAAA;IACrB,WAAW;IACX,mCAAqB,CAAA;IACrB,WAAW;IACX,2BAAa,CAAA;IACb,WAAW;IACX,+BAAiB,CAAA;IACjB,WAAW;IACX,6BAAe,CAAA;IACf,WAAW;IACX,6BAAe,CAAA;IACf,WAAW;IACX,+BAAiB,CAAA;IACjB,WAAW;IACX,mCAAqB,CAAA;IACrB,WAAW;IACX,yCAA2B,CAAA;AAC7B,CAAC,EArBW,UAAU,0BAAV,UAAU,QAqBrB;AAED;;;;GAIG;AACH,IAAY,SAOX;AAPD,WAAY,SAAS;IACnB,aAAa;IACb,0BAAa,CAAA;IACb,WAAW;IACX,0BAAa,CAAA;IACb,YAAY;IACZ,sCAAyB,CAAA;AAC3B,CAAC,EAPW,SAAS,yBAAT,SAAS,QAOpB","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/interfaces/logging.interface.ts"],"sourcesContent":["export type LogLevel = 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace';\n\n/**\n * @enum LogContext\n * @description\n * 日志上下文枚举，定义日志的来源上下文。\n */\nexport enum LogContext {\n  /** HTTP请求 */\n  HTTP_REQUEST = 'http_request',\n  /** 数据库操作 */\n  DATABASE = 'database',\n  /** 业务逻辑 */\n  BUSINESS = 'business',\n  /** 认证授权 */\n  AUTH = 'auth',\n  /** 配置管理 */\n  CONFIG = 'config',\n  /** 缓存操作 */\n  CACHE = 'cache',\n  /** 事件处理 */\n  EVENT = 'event',\n  /** 系统操作 */\n  SYSTEM = 'system',\n  /** 外部服务 */\n  EXTERNAL = 'external',\n  /** 性能监控 */\n  PERFORMANCE = 'performance',\n}\n\n/**\n * @enum LogFormat\n * @description\n * 日志格式枚举，定义日志的输出格式。\n */\nexport enum LogFormat {\n  /** JSON格式 */\n  JSON = 'json',\n  /** 文本格式 */\n  TEXT = 'text',\n  /** 结构化格式 */\n  STRUCTURED = 'structured',\n}\n\n/**\n * @interface LogMetadata\n * @description\n * 日志元数据接口，定义日志的额外信息。\n */\nexport interface LogMetadata {\n  /** 请求ID */\n  requestId?: string;\n  /** 租户ID */\n  tenantId?: string;\n  /** 用户ID */\n  userId?: string;\n  /** 会话ID */\n  sessionId?: string;\n  /** 操作类型 */\n  operation?: string;\n  /** 资源类型 */\n  resource?: string;\n  /** 资源ID */\n  resourceId?: string;\n  /** 执行时间（毫秒） */\n  duration?: number;\n  /** 错误代码 */\n  errorCode?: string;\n  /** 错误类型 */\n  errorType?: string;\n  /** 堆栈跟踪 */\n  stack?: string;\n  /** 自定义字段 */\n  [key: string]: any;\n}\n\n/**\n * @interface LogEntry\n * @description\n * 日志条目接口，定义日志的完整结构。\n */\nexport interface LogEntry {\n  /** 日志级别 */\n  level: LogLevel;\n  /** 时间戳 */\n  timestamp: Date;\n  /** 日志消息 */\n  message: string;\n  /** 日志上下文 */\n  context: LogContext;\n  /** 日志元数据 */\n  metadata: LogMetadata;\n  /** 错误对象（如果有） */\n  error?: Error;\n  /** 原始数据 */\n  raw?: any;\n}\n\n/**\n * @interface LogConfig\n * @description\n * 日志配置接口，定义日志系统的配置选项。\n */\nexport interface LogConfig {\n  /** 日志级别 */\n  level: LogLevel;\n  /** 日志格式 */\n  format: LogFormat;\n  /** 是否启用彩色输出 */\n  colorize: boolean;\n  /** 是否启用时间戳 */\n  timestamp: boolean;\n  /** 是否启用请求ID */\n  requestId: boolean;\n  /** 是否启用租户ID */\n  tenantId: boolean;\n  /** 是否启用用户ID */\n  userId: boolean;\n  /** 是否启用性能监控 */\n  performance: boolean;\n  /** 是否启用错误堆栈 */\n  stackTrace: boolean;\n  /** 日志文件路径 */\n  filePath?: string;\n  /** 日志文件轮转配置 */\n  rotation?: {\n    /** 最大文件大小 */\n    maxSize: string;\n    /** 保留文件数量 */\n    maxFiles: number;\n    /** 轮转间隔 */\n    interval: string;\n  };\n  /** 远程日志配置 */\n  remote?: {\n    /** 远程日志服务URL */\n    url: string;\n    /** 认证令牌 */\n    token?: string;\n    /** 超时时间 */\n    timeout: number;\n    /** 重试次数 */\n    retries: number;\n  };\n  /** 自定义字段 */\n  custom?: Record<string, any>;\n}\n\n/**\n * @interface ILoggerService\n * @description\n * 日志服务接口，定义日志系统的核心功能。\n *\n * 主要职责：\n * 1. 提供不同级别的日志记录\n * 2. 支持结构化日志输出\n * 3. 支持日志上下文和元数据\n * 4. 支持日志格式化和传输\n * 5. 支持日志配置管理\n * 6. 支持性能监控和错误追踪\n *\n * 设计原则：\n * - 高性能：基于Pino的高性能日志库\n * - 结构化：支持结构化日志输出\n * - 可扩展：支持多种日志格式和传输方式\n * - 可配置：支持灵活的配置选项\n * - 可观测：支持完整的日志追踪\n */\nexport interface ILoggerService {\n  /**\n   * 记录调试日志\n   *\n   * @param message 日志消息\n   * @param context 日志上下文\n   * @param metadata 日志元数据\n   * @param error 错误对象\n   */\n  debug(\n    message: string,\n    context?: LogContext,\n    metadata?: LogMetadata,\n    error?: Error,\n  ): void;\n\n  /**\n   * 记录信息日志\n   *\n   * @param message 日志消息\n   * @param context 日志上下文\n   * @param metadata 日志元数据\n   * @param error 错误对象\n   */\n  info(\n    message: string,\n    context?: LogContext,\n    metadata?: LogMetadata,\n    error?: Error,\n  ): void;\n\n  /**\n   * 记录警告日志\n   *\n   * @param message 日志消息\n   * @param context 日志上下文\n   * @param metadata 日志元数据\n   * @param error 错误对象\n   */\n  warn(\n    message: string,\n    context?: LogContext,\n    metadata?: LogMetadata,\n    error?: Error,\n  ): void;\n\n  /**\n   * 记录错误日志\n   *\n   * @param message 日志消息\n   * @param context 日志上下文\n   * @param metadata 日志元数据\n   * @param error 错误对象\n   */\n  error(\n    message: string,\n    context?: LogContext,\n    metadata?: LogMetadata,\n    error?: Error,\n  ): void;\n\n  /**\n   * 记录致命错误日志\n   *\n   * @param message 日志消息\n   * @param context 日志上下文\n   * @param metadata 日志元数据\n   * @param error 错误对象\n   */\n  fatal(\n    message: string,\n    context?: LogContext,\n    metadata?: LogMetadata,\n    error?: Error,\n  ): void;\n\n  /**\n   * 记录跟踪日志\n   *\n   * @param message 日志消息\n   * @param context 日志上下文\n   * @param metadata 日志元数据\n   * @param error 错误对象\n   */\n  trace(\n    message: string,\n    context?: LogContext,\n    metadata?: LogMetadata,\n    error?: Error,\n  ): void;\n\n  /**\n   * 记录性能日志\n   *\n   * @param operation 操作名称\n   * @param duration 执行时间（毫秒）\n   * @param context 日志上下文\n   * @param metadata 日志元数据\n   */\n  performance(\n    operation: string,\n    duration: number,\n    context?: LogContext,\n    metadata?: LogMetadata,\n  ): void;\n\n  /**\n   * 记录业务日志\n   *\n   * @param message 日志消息\n   * @param metadata 日志元数据\n   */\n  business(message: string, metadata?: LogMetadata): void;\n\n  /**\n   * 记录安全日志\n   *\n   * @param message 日志消息\n   * @param metadata 日志元数据\n   */\n  security(message: string, metadata?: LogMetadata): void;\n\n  /**\n   * 创建子日志器\n   *\n   * @param context 日志上下文\n   * @param metadata 默认元数据\n   * @returns 子日志器\n   */\n  child(context: LogContext, metadata?: LogMetadata): ILoggerService;\n\n  /**\n   * 设置日志级别\n   *\n   * @param level 日志级别\n   */\n  setLevel(level: LogLevel): void;\n\n  /**\n   * 获取日志级别\n   *\n   * @returns 当前日志级别\n   */\n  getLevel(): LogLevel;\n\n  /**\n   * 更新日志配置\n   *\n   * @param config 日志配置\n   */\n  updateConfig(config: Partial<LogConfig>): void;\n\n  /**\n   * 获取日志配置\n   *\n   * @returns 当前日志配置\n   */\n  getConfig(): LogConfig;\n\n  /**\n   * 刷新日志缓冲区\n   */\n  flush(): Promise<void>;\n\n  /**\n   * 关闭日志器\n   */\n  close(): Promise<void>;\n\n  /**\n   * 获取日志统计信息\n   *\n   * @returns 日志统计信息\n   */\n  getStats(): {\n    totalLogs: number;\n    logsByLevel: Record<LogLevel, number>;\n    logsByContext: Record<LogContext, number>;\n    averageLogSize: number;\n    lastLogTime?: Date;\n  };\n\n  /**\n   * 重置日志统计\n   */\n  resetStats(): void;\n}\n"],"version":3}