{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/adapters/database-adapter.factory.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/adapters/database-adapter.factory.spec.ts"],"sourcesContent":["/**\n * @file database-adapter.factory.spec.ts\n * @description 数据库适配器工厂单元测试\n */\n\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { DatabaseAdapterFactory } from './database-adapter.factory';\nimport { IsolationConfigService, IsolationStrategy } from '../config/isolation.config';\nimport { PostgreSQLAdapter } from './postgresql.adapter';\n\n// Mock PostgreSQLAdapter\njest.mock('./postgresql.adapter');\nconst MockedPostgreSQLAdapter = PostgreSQLAdapter as jest.MockedClass<typeof PostgreSQLAdapter>;\n\ndescribe('DatabaseAdapterFactory', () => {\n  let factory: DatabaseAdapterFactory;\n  let isolationConfig: IsolationConfigService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [ConfigModule],\n      providers: [\n        DatabaseAdapterFactory,\n        IsolationConfigService,\n      ],\n    }).compile();\n\n    factory = module.get<DatabaseAdapterFactory>(DatabaseAdapterFactory);\n    isolationConfig = module.get<IsolationConfigService>(IsolationConfigService);\n\n    // 重置 mock\n    MockedPostgreSQLAdapter.mockClear();\n  });\n\n  describe('createAdapter', () => {\n    it('should create database level adapter', () => {\n      const mockAdapter = {} as any;\n      MockedPostgreSQLAdapter.mockImplementation(() => mockAdapter);\n      \n      jest.spyOn(isolationConfig, 'getStrategy').mockReturnValue(IsolationStrategy.DATABASE_LEVEL);\n      jest.spyOn(isolationConfig, 'getConnectionConfig').mockReturnValue({\n        database: 'tenant_db',\n        tenantId: 'tenant-123',\n      });\n\n      const adapter = factory.createAdapter('tenant-123');\n\n      expect(MockedPostgreSQLAdapter).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'postgresql',\n          host: 'localhost',\n          port: 5432,\n          database: 'tenant_db',\n          username: 'aiofix_user',\n          password: 'aiofix_password',\n        }),\n        null,\n        null,\n        null,\n      );\n      expect(adapter).toBe(mockAdapter);\n    });\n\n    it('should create schema level adapter', () => {\n      const mockAdapter = {\n        setDefaultSchema: jest.fn(),\n        setTenantContext: jest.fn(),\n      } as any;\n      MockedPostgreSQLAdapter.mockImplementation(() => mockAdapter);\n      \n      jest.spyOn(isolationConfig, 'getStrategy').mockReturnValue(IsolationStrategy.SCHEMA_LEVEL);\n      jest.spyOn(isolationConfig, 'getConnectionConfig').mockReturnValue({\n        database: 'platform_db',\n        schema: 'tenant_schema',\n        tenantId: 'tenant-123',\n      });\n\n      const adapter = factory.createAdapter('tenant-123');\n\n      expect(MockedPostgreSQLAdapter).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'postgresql',\n          database: 'platform_db',\n        }),\n        null,\n        null,\n        null,\n      );\n      expect(mockAdapter.setDefaultSchema).toHaveBeenCalledWith('tenant_schema');\n      expect(mockAdapter.setTenantContext).toHaveBeenCalledWith('tenant-123');\n    });\n\n    it('should create table level adapter', () => {\n      const mockAdapter = {\n        setTenantContext: jest.fn(),\n        enableRowLevelSecurity: jest.fn(),\n      } as any;\n      MockedPostgreSQLAdapter.mockImplementation(() => mockAdapter);\n      \n      jest.spyOn(isolationConfig, 'getStrategy').mockReturnValue(IsolationStrategy.TABLE_LEVEL);\n      jest.spyOn(isolationConfig, 'getConnectionConfig').mockReturnValue({\n        database: 'platform_db',\n        tenantId: 'tenant-123',\n      });\n      jest.spyOn(isolationConfig, 'shouldEnableRLS').mockReturnValue(true);\n\n      const adapter = factory.createAdapter('tenant-123');\n\n      expect(MockedPostgreSQLAdapter).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'postgresql',\n          database: 'platform_db',\n        }),\n        null,\n        null,\n        null,\n      );\n      expect(mockAdapter.setTenantContext).toHaveBeenCalledWith('tenant-123');\n      expect(mockAdapter.enableRowLevelSecurity).toHaveBeenCalled();\n    });\n\n    it('should not enable RLS when configured to disable', () => {\n      const mockAdapter = {\n        setTenantContext: jest.fn(),\n        enableRowLevelSecurity: jest.fn(),\n      } as any;\n      MockedPostgreSQLAdapter.mockImplementation(() => mockAdapter);\n      \n      jest.spyOn(isolationConfig, 'getStrategy').mockReturnValue(IsolationStrategy.TABLE_LEVEL);\n      jest.spyOn(isolationConfig, 'getConnectionConfig').mockReturnValue({\n        database: 'platform_db',\n        tenantId: 'tenant-123',\n      });\n      jest.spyOn(isolationConfig, 'shouldEnableRLS').mockReturnValue(false);\n\n      factory.createAdapter('tenant-123');\n\n      expect(mockAdapter.setTenantContext).toHaveBeenCalledWith('tenant-123');\n      expect(mockAdapter.enableRowLevelSecurity).not.toHaveBeenCalled();\n    });\n\n    it('should throw error for unsupported strategy', () => {\n      jest.spyOn(isolationConfig, 'getStrategy').mockReturnValue('UNSUPPORTED' as any);\n\n      expect(() => factory.createAdapter('tenant-123')).toThrow('Unsupported isolation strategy: UNSUPPORTED');\n    });\n  });\n\n  describe('createPlatformAdapter', () => {\n    it('should create platform adapter', () => {\n      const mockAdapter = {} as any;\n      MockedPostgreSQLAdapter.mockImplementation(() => mockAdapter);\n      \n      jest.spyOn(isolationConfig, 'getPlatformDatabaseName').mockReturnValue('platform_db');\n\n      const adapter = factory.createPlatformAdapter();\n\n      expect(MockedPostgreSQLAdapter).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'postgresql',\n          host: 'localhost',\n          port: 5432,\n          database: 'platform_db',\n          username: 'aiofix_user',\n          password: 'aiofix_password',\n        }),\n        null,\n        null,\n        null,\n      );\n      expect(adapter).toBe(mockAdapter);\n    });\n  });\n\n  describe('createEventsAdapter', () => {\n    it('should create events adapter', () => {\n      const mockAdapter = {} as any;\n      MockedPostgreSQLAdapter.mockImplementation(() => mockAdapter);\n      \n      jest.spyOn(isolationConfig, 'getEventsDatabaseName').mockReturnValue('events_db');\n\n      const adapter = factory.createEventsAdapter();\n\n      expect(MockedPostgreSQLAdapter).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'postgresql',\n          host: 'localhost',\n          port: 5432,\n          database: 'events_db',\n          username: 'aiofix_user',\n          password: 'aiofix_password',\n        }),\n        null,\n        null,\n        null,\n      );\n      expect(adapter).toBe(mockAdapter);\n    });\n  });\n\n  describe('createAiVectorsAdapter', () => {\n    it('should create AI vectors adapter with default config', () => {\n      const mockAdapter = {} as any;\n      MockedPostgreSQLAdapter.mockImplementation(() => mockAdapter);\n      \n      jest.spyOn(isolationConfig, 'getAiVectorsDatabaseName').mockReturnValue('ai_vectors_db');\n\n      const adapter = factory.createAiVectorsAdapter();\n\n      expect(MockedPostgreSQLAdapter).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'postgresql',\n          host: 'localhost',\n          port: 5432,\n          database: 'ai_vectors_db',\n          username: 'aiofix_user',\n          password: 'aiofix_password',\n        }),\n        null,\n        null,\n        null,\n      );\n      expect(adapter).toBe(mockAdapter);\n    });\n\n    it('should create AI vectors adapter with custom config', () => {\n      const mockAdapter = {} as any;\n      MockedPostgreSQLAdapter.mockImplementation(() => mockAdapter);\n      \n      jest.spyOn(isolationConfig, 'getAiVectorsDatabaseName').mockReturnValue('ai_vectors_db');\n\n      // 设置自定义AI向量数据库环境变量\n      process.env.AI_VECTORS_HOST = 'ai-host';\n      process.env.AI_VECTORS_PORT = '5433';\n      process.env.AI_VECTORS_USER = 'ai_user';\n      process.env.AI_VECTORS_PASSWORD = 'ai_password';\n\n      const adapter = factory.createAiVectorsAdapter();\n\n      expect(MockedPostgreSQLAdapter).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'postgresql',\n          host: 'ai-host',\n          port: 5433,\n          database: 'ai_vectors_db',\n          username: 'ai_user',\n          password: 'ai_password',\n        }),\n        null,\n        null,\n        null,\n      );\n\n      // 清理环境变量\n      delete process.env.AI_VECTORS_HOST;\n      delete process.env.AI_VECTORS_PORT;\n      delete process.env.AI_VECTORS_USER;\n      delete process.env.AI_VECTORS_PASSWORD;\n    });\n  });\n});\n"],"version":3}