{"version":3,"names":["cov_2c4qc5ulay","actualCoverage","common_1","s","require","config_1","logging_1","RedisConfig","constructor","configService","logger","f","getCacheConfig","host","b","process","env","REDIS_HOST","port","parseInt","REDIS_PORT","password","REDIS_PASSWORD","db","REDIS_DB","pool","min","REDIS_POOL_MIN","max","REDIS_POOL_MAX","idleTimeoutMillis","REDIS_POOL_IDLE_TIMEOUT","cache","ttl","CACHE_TTL","maxItems","CACHE_MAX_ITEMS","checkPeriod","CACHE_CHECK_PERIOD","tenant","keyPrefix","namespaceSeparator","defaultTenant","retryDelayOnFailover","maxRetriesPerRequest","lazyConnect","keepAlive","cluster","enabled","nodes","getQueueConfig","redis","BULL_REDIS_HOST","BULL_REDIS_PORT","BULL_REDIS_PASSWORD","BULL_REDIS_DB","queue","concurrency","QUEUE_CONCURRENCY","attempts","QUEUE_ATTEMPTS","backoff","type","delay","QUEUE_BACKOFF_DELAY","removeOnComplete","removeOnFail","queues","notifications","emails","sms","getTenantCacheKey","tenantId","key","config","getTenantQueueName","queueName","validateConfig","cacheConfig","queueConfig","error","info","undefined","Error","message","String","exports","__decorate","Injectable","ConfigService","_a","Object","_b","PinoLoggerService"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/config/redis.config.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@aiofix/config';\nimport { PinoLoggerService } from '@aiofix/logging';\n\n/**\n * @class RedisConfig\n * @description\n * Redis配置类，负责管理Redis缓存和消息队列的配置信息。\n *\n * 配置管理职责：\n * 1. 提供Redis缓存配置\n * 2. 提供消息队列配置\n * 3. 管理连接池和性能配置\n * 4. 支持多租户缓存隔离\n *\n * 多租户支持：\n * 1. 基于租户ID的缓存键命名空间\n * 2. 租户级缓存隔离\n * 3. 租户级队列隔离\n * 4. 缓存统计和监控\n *\n * @param {ConfigService} configService 配置服务\n * @param {PinoLoggerService} logger 日志服务\n *\n * @example\n * ```typescript\n * const redisConfig = new RedisConfig(configService, logger);\n * const cacheConfig = redisConfig.getCacheConfig();\n * const queueConfig = redisConfig.getQueueConfig();\n * ```\n * @since 1.0.0\n */\n@Injectable()\nexport class RedisConfig {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly logger: PinoLoggerService,\n  ) {}\n\n  /**\n   * @method getCacheConfig\n   * @description 获取Redis缓存配置\n   * @returns {object} Redis缓存配置对象\n   *\n   * 配置包含：\n   * 1. 连接配置\n   * 2. 缓存策略配置\n   * 3. 性能优化配置\n   * 4. 多租户支持配置\n   */\n  getCacheConfig() {\n    return {\n      // 连接配置\n      host: process.env.REDIS_HOST || 'localhost',\n      port: parseInt(process.env.REDIS_PORT || '6379'),\n      password: process.env.REDIS_PASSWORD || '',\n      db: parseInt(process.env.REDIS_DB || '0'),\n\n      // 连接池配置\n      pool: {\n        min: parseInt(process.env.REDIS_POOL_MIN || '2'),\n        max: parseInt(process.env.REDIS_POOL_MAX || '10'),\n        idleTimeoutMillis: parseInt(\n          process.env.REDIS_POOL_IDLE_TIMEOUT || '30000',\n        ),\n      },\n\n      // 缓存配置\n      cache: {\n        ttl: parseInt(process.env.CACHE_TTL || '3600'), // 默认1小时\n        maxItems: parseInt(process.env.CACHE_MAX_ITEMS || '1000'),\n        checkPeriod: parseInt(process.env.CACHE_CHECK_PERIOD || '600'), // 10分钟\n      },\n\n      // 多租户配置\n      tenant: {\n        keyPrefix: 'tenant:',\n        namespaceSeparator: ':',\n        defaultTenant: 'platform',\n      },\n\n      // 性能配置\n      retryDelayOnFailover: 100,\n      maxRetriesPerRequest: 3,\n      lazyConnect: true,\n      keepAlive: 30000,\n\n      // 集群配置（如果需要）\n      cluster: {\n        enabled: false,\n        nodes: [],\n      },\n    };\n  }\n\n  /**\n   * @method getQueueConfig\n   * @description 获取消息队列配置\n   * @returns {object} 消息队列配置对象\n   *\n   * 配置包含：\n   * 1. Bull队列配置\n   * 2. 重试和错误处理配置\n   * 3. 并发和性能配置\n   * 4. 监控和统计配置\n   */\n  getQueueConfig() {\n    return {\n      // Redis连接配置\n      redis: {\n        host: process.env.BULL_REDIS_HOST || 'localhost',\n        port: parseInt(process.env.BULL_REDIS_PORT || '6379'),\n        password: process.env.BULL_REDIS_PASSWORD || '',\n        db: parseInt(process.env.BULL_REDIS_DB || '1'),\n      },\n\n      // 队列配置\n      queue: {\n        concurrency: parseInt(process.env.QUEUE_CONCURRENCY || '5'),\n        attempts: parseInt(process.env.QUEUE_ATTEMPTS || '3'),\n        backoff: {\n          type: 'exponential',\n          delay: parseInt(process.env.QUEUE_BACKOFF_DELAY || '2000'),\n        },\n        removeOnComplete: 100,\n        removeOnFail: 50,\n      },\n\n      // 队列类型配置\n      queues: {\n        'domain-events': {\n          concurrency: 10,\n          attempts: 5,\n          backoff: { type: 'exponential', delay: 2000 },\n        },\n        notifications: {\n          concurrency: 20,\n          attempts: 3,\n          backoff: { type: 'fixed', delay: 1000 },\n        },\n        emails: {\n          concurrency: 5,\n          attempts: 3,\n          backoff: { type: 'exponential', delay: 5000 },\n        },\n        'push-notifications': {\n          concurrency: 15,\n          attempts: 3,\n          backoff: { type: 'fixed', delay: 2000 },\n        },\n        sms: {\n          concurrency: 10,\n          attempts: 3,\n          backoff: { type: 'exponential', delay: 3000 },\n        },\n      },\n\n      // 多租户队列配置\n      tenant: {\n        keyPrefix: 'queue:tenant:',\n        namespaceSeparator: ':',\n      },\n    };\n  }\n\n  /**\n   * @method getTenantCacheKey\n   * @description 生成租户级缓存键\n   * @param {string} tenantId 租户ID\n   * @param {string} key 原始键\n   * @returns {string} 租户级缓存键\n   */\n  getTenantCacheKey(tenantId: string, key: string): string {\n    const config = this.getCacheConfig();\n    return `${config.tenant.keyPrefix}${tenantId}${config.tenant.namespaceSeparator}${key}`;\n  }\n\n  /**\n   * @method getTenantQueueName\n   * @description 生成租户级队列名称\n   * @param {string} tenantId 租户ID\n   * @param {string} queueName 原始队列名称\n   * @returns {string} 租户级队列名称\n   */\n  getTenantQueueName(tenantId: string, queueName: string): string {\n    const config = this.getQueueConfig();\n    return `${config.tenant.keyPrefix}${tenantId}${config.tenant.namespaceSeparator}${queueName}`;\n  }\n\n  /**\n   * @method validateConfig\n   * @description 验证Redis配置\n   * @returns {boolean} 配置是否有效\n   */\n  validateConfig(): boolean {\n    try {\n      const cacheConfig = this.getCacheConfig();\n      const queueConfig = this.getQueueConfig();\n\n      // 验证缓存配置\n      if (\n        !cacheConfig.host ||\n        typeof cacheConfig.port !== 'number' ||\n        cacheConfig.port <= 0\n      ) {\n        this.logger.error('Redis缓存配置不完整');\n        return false;\n      }\n\n      // 验证队列配置\n      if (\n        !queueConfig.redis.host ||\n        typeof queueConfig.redis.port !== 'number' ||\n        queueConfig.redis.port <= 0\n      ) {\n        this.logger.error('Redis队列配置不完整');\n        return false;\n      }\n\n      this.logger.info('Redis配置验证通过');\n      return true;\n    } catch (error) {\n      this.logger.error('Redis配置验证失败', undefined, {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      return false;\n    }\n  }\n}\n"],"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","ignoreList":[]}