56bd76fcb58412310b6a3ad62c89f143
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const user_id_vo_1 = require("./user-id.vo");
/**
 * @file user-id.vo.spec.ts
 * @description 用户ID值对象单元测试
 *
 * 测试覆盖：
 * - 用户ID创建和验证
 * - 用户ID相等性比较
 * - 用户ID字符串转换
 * - 异常情况处理
 *
 * @author AI开发团队
 * @since 1.0.0
 */
(0, globals_1.describe)('UserId', () => {
    (0, globals_1.describe)('constructor', () => {
        (0, globals_1.it)('should create UserId with valid UUID', () => {
            // Arrange
            const validUuid = '123e4567-e89b-12d3-a456-426614174000';
            // Act
            const userId = new user_id_vo_1.UserId(validUuid);
            // Assert
            (0, globals_1.expect)(userId).toBeInstanceOf(user_id_vo_1.UserId);
            (0, globals_1.expect)(userId.value).toBe(validUuid);
        });
        (0, globals_1.it)('should create UserId with generated UUID when no value provided', () => {
            // Act
            const userId = new user_id_vo_1.UserId();
            // Assert
            (0, globals_1.expect)(userId).toBeInstanceOf(user_id_vo_1.UserId);
            (0, globals_1.expect)(userId.value).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);
        });
        (0, globals_1.it)('should throw InvalidUserIdError for invalid UUID format', () => {
            // Arrange
            const invalidUuid = 'invalid-uuid';
            // Act & Assert
            (0, globals_1.expect)(() => {
                new user_id_vo_1.UserId(invalidUuid);
            }).toThrow(user_id_vo_1.InvalidUserIdError);
        });
        (0, globals_1.it)('should throw InvalidUserIdError for empty string', () => {
            // Arrange
            const emptyString = '';
            // Act & Assert
            (0, globals_1.expect)(() => {
                new user_id_vo_1.UserId(emptyString);
            }).toThrow(user_id_vo_1.InvalidUserIdError);
        });
        (0, globals_1.it)('should throw InvalidUserIdError for null value', () => {
            // Act & Assert
            (0, globals_1.expect)(() => {
                new user_id_vo_1.UserId(null);
            }).toThrow(user_id_vo_1.InvalidUserIdError);
        });
        (0, globals_1.it)('should throw InvalidUserIdError for undefined value', () => {
            // Act & Assert
            (0, globals_1.expect)(() => {
                new user_id_vo_1.UserId(undefined);
            }).toThrow(user_id_vo_1.InvalidUserIdError);
        });
    });
    (0, globals_1.describe)('equals', () => {
        (0, globals_1.it)('should return true for same UserId instances', () => {
            // Arrange
            const uuid = '123e4567-e89b-12d3-a456-426614174000';
            const userId1 = new user_id_vo_1.UserId(uuid);
            const userId2 = new user_id_vo_1.UserId(uuid);
            // Act
            const result = userId1.equals(userId2);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should return false for different UserId instances', () => {
            // Arrange
            const userId1 = new user_id_vo_1.UserId('123e4567-e89b-12d3-a456-426614174000');
            const userId2 = new user_id_vo_1.UserId('987fcdeb-51a2-43d1-b789-123456789abc');
            // Act
            const result = userId1.equals(userId2);
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
        (0, globals_1.it)('should return false when comparing with non-UserId object', () => {
            // Arrange
            const userId = new user_id_vo_1.UserId('123e4567-e89b-12d3-a456-426614174000');
            const otherObject = { value: '123e4567-e89b-12d3-a456-426614174000' };
            // Act
            const result = userId.equals(otherObject);
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
    });
    (0, globals_1.describe)('toString', () => {
        (0, globals_1.it)('should return UUID string representation', () => {
            // Arrange
            const uuid = '123e4567-e89b-12d3-a456-426614174000';
            const userId = new user_id_vo_1.UserId(uuid);
            // Act
            const result = userId.toString();
            // Assert
            (0, globals_1.expect)(result).toBe(uuid);
        });
    });
    (0, globals_1.describe)('fromString', () => {
        (0, globals_1.it)('should create UserId from valid UUID string', () => {
            // Arrange
            const uuid = '123e4567-e89b-12d3-a456-426614174000';
            // Act
            const userId = user_id_vo_1.UserId.fromString(uuid);
            // Assert
            (0, globals_1.expect)(userId).toBeInstanceOf(user_id_vo_1.UserId);
            (0, globals_1.expect)(userId.value).toBe(uuid);
        });
        (0, globals_1.it)('should throw InvalidUserIdError for invalid UUID string', () => {
            // Arrange
            const invalidUuid = 'invalid-uuid';
            // Act & Assert
            (0, globals_1.expect)(() => {
                user_id_vo_1.UserId.fromString(invalidUuid);
            }).toThrow(user_id_vo_1.InvalidUserIdError);
        });
    });
    (0, globals_1.describe)('isValid', () => {
        (0, globals_1.it)('should return true for valid UUID', () => {
            // Arrange
            const validUuid = '123e4567-e89b-12d3-a456-426614174000';
            // Act
            const result = user_id_vo_1.UserId.isValid(validUuid);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should return false for invalid UUID', () => {
            // Arrange
            const invalidUuid = 'invalid-uuid';
            // Act
            const result = user_id_vo_1.UserId.isValid(invalidUuid);
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
        (0, globals_1.it)('should return false for empty string', () => {
            // Arrange
            const emptyString = '';
            // Act
            const result = user_id_vo_1.UserId.isValid(emptyString);
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
        (0, globals_1.it)('should return false for null value', () => {
            // Act
            const result = user_id_vo_1.UserId.isValid(null);
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
    });
});
(0, globals_1.describe)('InvalidUserIdError', () => {
    (0, globals_1.it)('should create error with correct name and message', () => {
        // Arrange
        const message = 'Invalid user ID format';
        // Act
        const error = new user_id_vo_1.InvalidUserIdError(message);
        // Assert
        (0, globals_1.expect)(error).toBeInstanceOf(Error);
        (0, globals_1.expect)(error).toBeInstanceOf(user_id_vo_1.InvalidUserIdError);
        (0, globals_1.expect)(error.name).toBe('InvalidUserIdError');
        (0, globals_1.expect)(error.message).toBe(message);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,