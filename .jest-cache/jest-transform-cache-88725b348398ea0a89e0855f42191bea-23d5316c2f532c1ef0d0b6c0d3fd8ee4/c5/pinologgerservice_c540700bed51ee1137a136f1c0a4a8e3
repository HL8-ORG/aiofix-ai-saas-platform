b466c05e6a42b9900da720c0c1f56bed
"use strict";
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinoLoggerService = void 0;
const common_1 = require("@nestjs/common");
const logging_interface_1 = require("../interfaces/logging.interface");
/**
 * @class PinoLoggerService
 * @description
 * 基于Pino的日志服务实现类，提供高性能的结构化日志功能。
 *
 * 主要功能包括：
 * 1. 支持多种日志级别（trace, debug, info, warn, error, fatal）
 * 2. 结构化日志输出（JSON格式）
 * 3. 日志上下文和元数据支持
 * 4. 性能监控和错误追踪
 * 5. 日志配置管理和动态更新
 * 6. 子日志器创建和管理
 * 7. 日志统计和监控
 *
 * @implements {ILoggerService}
 * @implements {OnModuleDestroy}
 */
let PinoLoggerService = (() => {
    let _classDecorators = [(0, common_1.Injectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    var PinoLoggerService = _classThis = class {
        constructor(eventEmitter, configService, loggerFactory, cls) {
            this.eventEmitter = eventEmitter;
            this.configService = configService;
            this.loggerFactory = loggerFactory;
            this.cls = cls;
            this.logger = {};
            this.stats = {
                totalLogs: 0,
                logsByLevel: {
                    fatal: 0,
                    error: 0,
                    warn: 0,
                    info: 0,
                    debug: 0,
                    trace: 0,
                },
                logsByContext: {
                    [logging_interface_1.LogContext.HTTP_REQUEST]: 0,
                    [logging_interface_1.LogContext.DATABASE]: 0,
                    [logging_interface_1.LogContext.BUSINESS]: 0,
                    [logging_interface_1.LogContext.AUTH]: 0,
                    [logging_interface_1.LogContext.CONFIG]: 0,
                    [logging_interface_1.LogContext.CACHE]: 0,
                    [logging_interface_1.LogContext.EVENT]: 0,
                    [logging_interface_1.LogContext.SYSTEM]: 0,
                    [logging_interface_1.LogContext.EXTERNAL]: 0,
                    [logging_interface_1.LogContext.PERFORMANCE]: 0,
                },
                totalLogSize: 0,
            };
            this.initializeStats();
            this.initializeLogger();
        }
        /**
         * @method debug
         * @description 记录调试日志
         */
        debug(message, context, metadata, error) {
            this.log('debug', message, context, metadata, error);
        }
        /**
         * @method info
         * @description 记录信息日志
         */
        info(message, context, metadata, error) {
            this.log('info', message, context, metadata, error);
        }
        /**
         * @method warn
         * @description 记录警告日志
         */
        warn(message, context, metadata, error) {
            this.log('warn', message, context, metadata, error);
        }
        /**
         * @method error
         * @description 记录错误日志
         */
        error(message, context, metadata, error) {
            this.log('error', message, context, metadata, error);
        }
        /**
         * @method fatal
         * @description 记录致命错误日志
         */
        fatal(message, context, metadata, error) {
            this.log('fatal', message, context, metadata, error);
        }
        /**
         * @method trace
         * @description 记录跟踪日志
         */
        trace(message, context, metadata, error) {
            this.log('trace', message, context, metadata, error);
        }
        /**
         * @method performance
         * @description 记录性能日志
         */
        performance(operation, duration, context, metadata) {
            const performanceMetadata = {
                ...metadata,
                operation,
                duration,
                type: 'performance',
            };
            this.log('info', `Performance: ${operation} took ${duration}ms`, context || logging_interface_1.LogContext.PERFORMANCE, performanceMetadata);
        }
        /**
         * @method business
         * @description 记录业务日志
         */
        business(message, metadata) {
            this.log('info', message, logging_interface_1.LogContext.BUSINESS, metadata);
        }
        /**
         * @method security
         * @description 记录安全日志
         */
        security(message, metadata) {
            this.log('warn', message, logging_interface_1.LogContext.AUTH, metadata);
        }
        /**
         * @method child
         * @description 创建子日志器
         */
        child(context, metadata) {
            const childLogger = this.loggerFactory.createChildLogger(this.logger, {
                context,
                ...metadata,
            });
            // 创建一个新的PinoLoggerService实例，使用子日志器
            const childService = new PinoLoggerService(this.eventEmitter, this.configService, this.loggerFactory, this.cls);
            childService.logger = childLogger;
            childService.stats = this.stats;
            return childService;
        }
        /**
         * @method setLevel
         * @description 设置日志级别
         */
        setLevel(level) {
            this.configService.setLevel(level);
            this.initializeLogger();
        }
        /**
         * @method getLevel
         * @description 获取日志级别
         */
        getLevel() {
            return this.configService.getLevel();
        }
        /**
         * @method updateConfig
         * @description 更新日志配置
         */
        updateConfig(config) {
            this.configService.updateConfig(config);
            this.initializeLogger();
        }
        /**
         * @method getConfig
         * @description 获取日志配置
         */
        getConfig() {
            return this.configService.getConfig();
        }
        /**
         * @method flush
         * @description 刷新日志缓冲区
         */
        async flush() {
            if (this.logger.flush) {
                await this.logger.flush();
            }
        }
        /**
         * @method close
         * @description 关闭日志器
         */
        async close() {
            await this.flush();
        }
        /**
         * @method onModuleDestroy
         * @description 模块销毁时的清理工作
         */
        async onModuleDestroy() {
            await this.close();
        }
        /**
         * @method getStats
         * @description 获取日志统计信息
         */
        getStats() {
            return {
                totalLogs: this.stats.totalLogs,
                logsByLevel: { ...this.stats.logsByLevel },
                logsByContext: { ...this.stats.logsByContext },
                averageLogSize: this.stats.totalLogs > 0
                    ? this.stats.totalLogSize / this.stats.totalLogs
                    : 0,
                lastLogTime: this.stats.lastLogTime,
            };
        }
        /**
         * @method resetStats
         * @description 重置日志统计
         */
        resetStats() {
            this.initializeStats();
        }
        // 私有辅助方法
        /**
         * @private
         * @method initializeStats
         * @description 初始化统计信息
         */
        initializeStats() {
            this.stats = {
                totalLogs: 0,
                logsByLevel: {
                    trace: 0,
                    debug: 0,
                    info: 0,
                    warn: 0,
                    error: 0,
                    fatal: 0,
                },
                logsByContext: {
                    [logging_interface_1.LogContext.HTTP_REQUEST]: 0,
                    [logging_interface_1.LogContext.DATABASE]: 0,
                    [logging_interface_1.LogContext.BUSINESS]: 0,
                    [logging_interface_1.LogContext.AUTH]: 0,
                    [logging_interface_1.LogContext.CONFIG]: 0,
                    [logging_interface_1.LogContext.CACHE]: 0,
                    [logging_interface_1.LogContext.EVENT]: 0,
                    [logging_interface_1.LogContext.SYSTEM]: 0,
                    [logging_interface_1.LogContext.EXTERNAL]: 0,
                    [logging_interface_1.LogContext.PERFORMANCE]: 0,
                },
                totalLogSize: 0,
            };
        }
        /**
         * @private
         * @method initializeLogger
         * @description 初始化Pino日志器
         */
        initializeLogger() {
            this.logger = this.loggerFactory.createLogger();
        }
        /**
         * @private
         * @method log
         * @description 内部日志记录方法
         */
        log(level, message, context, metadata, error) {
            const config = this.configService.getConfig();
            // 从CLS获取上下文信息
            const requestId = this.cls.get('requestId');
            const tenantId = this.cls.get('tenantId');
            const userId = this.cls.get('userId');
            const logData = {
                message,
                context: context || logging_interface_1.LogContext.SYSTEM,
                timestamp: new Date().toISOString(),
                requestId,
                tenantId,
                userId,
                ...metadata,
            };
            if (error) {
                logData.error = {
                    message: error.message,
                    stack: config.stackTrace ? error.stack : undefined,
                    code: error.code,
                    name: error.name,
                };
            }
            // 更新统计信息
            this.updateStats(level, context || logging_interface_1.LogContext.SYSTEM, message.length);
            // 记录日志
            this.logger[level](logData);
            // 发送事件
            this.eventEmitter.emit('logger.log', {
                level,
                message,
                context: context || logging_interface_1.LogContext.SYSTEM,
                metadata,
                error,
                timestamp: new Date(),
            });
        }
        /**
         * @private
         * @method updateStats
         * @description 更新统计信息
         */
        updateStats(level, context, logSize) {
            this.stats.totalLogs++;
            this.stats.logsByLevel[level]++;
            this.stats.logsByContext[context]++;
            this.stats.totalLogSize += logSize;
            this.stats.lastLogTime = new Date();
        }
    };
    __setFunctionName(_classThis, "PinoLoggerService");
    (() => {
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        PinoLoggerService = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return PinoLoggerService = _classThis;
})();
exports.PinoLoggerService = PinoLoggerService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,