{"version":3,"names":["DatabaseConfig","constructor","_configService","logger","cov_23v5ly6mx","f","s","getPostgresConfig","host","b","process","env","POSTGRES_HOST","port","parseInt","POSTGRES_PORT","database","POSTGRES_DB","username","POSTGRES_USER","password","POSTGRES_PASSWORD","pool","min","POSTGRES_POOL_MIN","max","POSTGRES_POOL_MAX","acquireTimeoutMillis","createTimeoutMillis","destroyTimeoutMillis","idleTimeoutMillis","POSTGRES_POOL_IDLE_TIMEOUT","reapIntervalMillis","createRetryIntervalMillis","tenantDatabases","synchronize","NODE_ENV","logging","cache","duration","ssl","rejectUnauthorized","getMongoDBConfig","uri","MONGODB_URI","databases","events","MONGODB_EVENTS_DB","notifications","MONGODB_NOTIFICATIONS_DB","options","maxPoolSize","minPoolSize","maxIdleTimeMS","serverSelectionTimeoutMS","socketTimeoutMS","bufferMaxEntries","useNewUrlParser","useUnifiedTopology","eventStore","collection","snapshotCollection","maxEventsPerSnapshot","indexes","keys","id","unique","type","status","tenantId","userId","createdAt","getTenantDatabaseName","getTenantPostgresConfig","baseConfig","validateConfig","postgresConfig","mongodbConfig","error","info","undefined","Error","message","String","exports"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/config/database.config.ts"],"sourcesContent":["import { ConfigService } from '@aiofix/config';\nimport { PinoLoggerService } from '@aiofix/logging';\n\n/**\n * @class DatabaseConfig\n * @description\n * 数据库配置类，负责管理PostgreSQL和MongoDB的配置信息。\n *\n * 配置管理职责：\n * 1. 提供PostgreSQL数据库连接配置\n * 2. 提供MongoDB数据库连接配置\n * 3. 管理数据库连接池配置\n * 4. 支持多租户数据库配置\n *\n * 多租户支持：\n * 1. 支持租户级数据库隔离\n * 2. 动态数据库连接管理\n * 3. 租户数据库路由\n * 4. 数据库连接池优化\n *\n * @param {ConfigService} configService 配置服务\n * @param {PinoLoggerService} logger 日志服务\n *\n * @example\n * ```typescript\n * const dbConfig = new DatabaseConfig(configService, logger);\n * const postgresConfig = dbConfig.getPostgresConfig();\n * const mongodbConfig = dbConfig.getMongoDBConfig();\n * ```\n * @since 1.0.0\n */\nexport class DatabaseConfig {\n  constructor(\n    private readonly _configService: ConfigService,\n    private readonly logger: PinoLoggerService,\n  ) {}\n\n  /**\n   * @method getPostgresConfig\n   * @description 获取PostgreSQL数据库配置\n   * @returns {object} PostgreSQL配置对象\n   *\n   * 配置包含：\n   * 1. 数据库连接信息\n   * 2. 连接池配置\n   * 3. 多租户数据库支持\n   * 4. 性能优化配置\n   */\n  getPostgresConfig() {\n    return {\n      // 主数据库配置\n      host: process.env.POSTGRES_HOST ?? 'localhost',\n      port: parseInt(process.env.POSTGRES_PORT ?? '5432'),\n      database: process.env.POSTGRES_DB ?? 'aiofix_platform',\n      username: process.env.POSTGRES_USER ?? 'aiofix_user',\n      password: process.env.POSTGRES_PASSWORD ?? 'aiofix_password',\n\n      // 连接池配置\n      pool: {\n        min: parseInt(process.env.POSTGRES_POOL_MIN ?? '2'),\n        max: parseInt(process.env.POSTGRES_POOL_MAX ?? '10'),\n        acquireTimeoutMillis: 30000,\n        createTimeoutMillis: 30000,\n        destroyTimeoutMillis: 5000,\n        idleTimeoutMillis: parseInt(\n          process.env.POSTGRES_POOL_IDLE_TIMEOUT ?? '30000',\n        ),\n        reapIntervalMillis: 1000,\n        createRetryIntervalMillis: 200,\n      },\n\n      // 多租户数据库配置\n      tenantDatabases: {\n        'tenant-1': 'aiofix_tenant_1',\n        'tenant-2': 'aiofix_tenant_2',\n        'tenant-3': 'aiofix_tenant_3',\n      },\n\n      // 性能配置\n      synchronize: process.env.NODE_ENV === 'development',\n      logging: process.env.NODE_ENV === 'development',\n      cache: {\n        duration: 30000, // 30秒缓存\n      },\n\n      // SSL配置\n      ssl:\n        process.env.NODE_ENV === 'production'\n          ? {\n              rejectUnauthorized: false,\n            }\n          : false,\n    };\n  }\n\n  /**\n   * @method getMongoDBConfig\n   * @description 获取MongoDB数据库配置\n   * @returns {object} MongoDB配置对象\n   *\n   * 配置包含：\n   * 1. 事件存储数据库配置\n   * 2. 通知模块数据库配置\n   * 3. 连接池和性能配置\n   * 4. 索引和验证配置\n   */\n  getMongoDBConfig() {\n    return {\n      // 主连接URI\n      uri:\n        process.env.MONGODB_URI ??\n        'mongodb://aiofix_admin:aiofix_password@localhost:27017/aiofix_events?authSource=admin',\n\n      // 数据库配置\n      databases: {\n        events: process.env.MONGODB_EVENTS_DB ?? 'aiofix_events',\n        notifications:\n          process.env.MONGODB_NOTIFICATIONS_DB ?? 'aiofix_notifications',\n      },\n\n      // 连接配置\n      options: {\n        maxPoolSize: 10,\n        minPoolSize: 2,\n        maxIdleTimeMS: 30000,\n        serverSelectionTimeoutMS: 5000,\n        socketTimeoutMS: 45000,\n        bufferMaxEntries: 0,\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n      },\n\n      // 事件存储配置\n      eventStore: {\n        collection: 'domain_events',\n        snapshotCollection: 'aggregate_snapshots',\n        maxEventsPerSnapshot: 100,\n      },\n\n      // 通知存储配置\n      notifications: {\n        collection: 'notifications',\n        indexes: [\n          { keys: { id: 1 }, options: { unique: true } },\n          { keys: { type: 1, status: 1 } },\n          { keys: { tenantId: 1, userId: 1 } },\n          { keys: { createdAt: 1 } },\n        ],\n      },\n    };\n  }\n\n  /**\n   * @method getTenantDatabaseName\n   * @description 获取租户数据库名称\n   * @param {string} tenantId 租户ID\n   * @returns {string} 租户数据库名称\n   */\n  getTenantDatabaseName(tenantId: string): string {\n    const tenantDatabases = this.getPostgresConfig().tenantDatabases as Record<\n      string,\n      string\n    >;\n    return tenantDatabases[tenantId] || `aiofix_tenant_${tenantId}`;\n  }\n\n  /**\n   * @method getTenantPostgresConfig\n   * @description 获取租户PostgreSQL配置\n   * @param {string} tenantId 租户ID\n   * @returns {object} 租户PostgreSQL配置\n   */\n  getTenantPostgresConfig(tenantId: string) {\n    const baseConfig = this.getPostgresConfig();\n    return {\n      ...baseConfig,\n      database: this.getTenantDatabaseName(tenantId),\n    };\n  }\n\n  /**\n   * @method validateConfig\n   * @description 验证数据库配置\n   * @returns {boolean} 配置是否有效\n   */\n  validateConfig(): boolean {\n    try {\n      const postgresConfig = this.getPostgresConfig();\n      const mongodbConfig = this.getMongoDBConfig();\n\n      // 验证PostgreSQL配置\n      if (\n        !postgresConfig.host ||\n        !postgresConfig.database ||\n        !postgresConfig.username\n      ) {\n        this.logger.error('PostgreSQL配置不完整');\n        return false;\n      }\n\n      // 验证MongoDB配置\n      if (!mongodbConfig.uri) {\n        this.logger.error('MongoDB配置不完整');\n        return false;\n      }\n\n      this.logger.info('数据库配置验证通过');\n      return true;\n    } catch (error) {\n      this.logger.error('数据库配置验证失败', undefined, {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      return false;\n    }\n  }\n}\n"],"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","ignoreList":[]}