{"version":3,"names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/core/src/domain/interfaces/message-queue.interface.ts"],"sourcesContent":["import { DomainEvent } from '../domain-event';\n\n/**\n * @interface IMessage\n * @description 消息接口\n */\nexport interface IMessage {\n  readonly id: string;\n  readonly type: 'DOMAIN_EVENT' | 'COMMAND' | 'QUERY' | 'INTEGRATION_EVENT';\n  readonly eventType?: string;\n  readonly commandType?: string;\n  readonly queryType?: string;\n  readonly aggregateId?: string;\n  readonly data: Record<string, unknown>;\n  readonly metadata: MessageMetadata;\n  readonly timestamp: Date;\n  readonly priority: number;\n  readonly delay?: number; // 延迟执行时间（毫秒）\n  readonly attempts: number;\n  readonly maxAttempts: number;\n}\n\n/**\n * @interface MessageMetadata\n * @description 消息元数据\n */\nexport interface MessageMetadata {\n  readonly userId?: string;\n  readonly tenantId?: string;\n  readonly correlationId?: string;\n  readonly causationId?: string;\n  readonly source: string;\n  readonly version: string;\n  readonly timestamp: Date;\n  readonly retryCount: number;\n  readonly originalTimestamp: Date;\n}\n\n/**\n * @interface QueueConfig\n * @description 队列配置\n */\nexport interface QueueConfig {\n  readonly name: string;\n  readonly concurrency: number;\n  readonly retryAttempts: number;\n  readonly retryDelay: number;\n  readonly backoffMultiplier: number;\n  readonly maxRetryDelay: number;\n  readonly removeOnComplete: number;\n  readonly removeOnFail: number;\n  readonly delay: number;\n  readonly priority: number;\n}\n\n/**\n * @interface JobOptions\n * @description 任务选项\n */\nexport interface JobOptions {\n  readonly delay?: number;\n  readonly priority?: number;\n  readonly attempts?: number;\n  readonly backoff?: {\n    readonly type: 'fixed' | 'exponential';\n    readonly delay: number;\n  };\n  readonly removeOnComplete?: number;\n  readonly removeOnFail?: number;\n}\n\n/**\n * @interface IMessageQueue\n * @description\n * 消息队列接口，负责处理异步消息传递和事件分发。\n *\n * 消息队列职责：\n * 1. 发布和消费领域事件\n * 2. 处理异步任务队列\n * 3. 实现消息路由和分发\n * 4. 提供消息持久化和重试机制\n *\n * 消息类型：\n * 1. 领域事件：业务状态变更通知\n * 2. 集成事件：跨边界上下文通信\n * 3. 命令消息：异步命令处理\n * 4. 查询消息：异步查询处理\n *\n * 可靠性保证：\n * 1. 消息持久化存储\n * 2. 消息确认机制\n * 3. 失败重试策略\n * 4. 死信队列处理\n *\n * @example\n * ```typescript\n * const messageQueue = new MessageQueue(redisService, logger);\n * await messageQueue.publishEvent(userCreatedEvent);\n * ```\n * @since 1.0.0\n */\nexport interface IMessageQueue {\n  /**\n   * @method publishEvent\n   * @description 发布领域事件到消息队列\n   * @param {DomainEvent} event 领域事件\n   * @param {JobOptions} [options] 任务选项\n   * @returns {Promise<void>}\n   * @throws {MessagePublishError} 当消息发布失败时抛出\n   *\n   * 发布流程：\n   * 1. 序列化事件数据\n   * 2. 生成消息ID和元数据\n   * 3. 发送到消息队列\n   * 4. 记录发布日志\n   */\n  publishEvent(event: DomainEvent, options?: JobOptions): Promise<void>;\n\n  /**\n   * @method publishCommand\n   * @description 发布命令到消息队列\n   * @param {any} command 命令对象\n   * @param {JobOptions} [options] 任务选项\n   * @returns {Promise<void>}\n   * @throws {MessagePublishError} 当消息发布失败时抛出\n   */\n  publishCommand(command: any, options?: JobOptions): Promise<void>;\n\n  /**\n   * @method publishQuery\n   * @description 发布查询到消息队列\n   * @param {any} query 查询对象\n   * @param {JobOptions} [options] 任务选项\n   * @returns {Promise<void>}\n   * @throws {MessagePublishError} 当消息发布失败时抛出\n   */\n  publishQuery(query: any, options?: JobOptions): Promise<void>;\n\n  /**\n   * @method publishIntegrationEvent\n   * @description 发布集成事件到消息队列\n   * @param {any} integrationEvent 集成事件\n   * @param {JobOptions} [options] 任务选项\n   * @returns {Promise<void>}\n   * @throws {MessagePublishError} 当消息发布失败时抛出\n   */\n  publishIntegrationEvent(\n    integrationEvent: any,\n    options?: JobOptions,\n  ): Promise<void>;\n\n  /**\n   * @method consumeEvents\n   * @description 消费领域事件\n   * @param {string} queueName 队列名称\n   * @param {Function} processor 事件处理器函数\n   * @returns {Promise<void>}\n   *\n   * 消费流程：\n   * 1. 从队列获取消息\n   * 2. 反序列化事件数据\n   * 3. 调用事件处理器\n   * 4. 处理消费结果\n   */\n  consumeEvents(\n    queueName: string,\n    processor: (event: DomainEvent) => Promise<void>,\n  ): Promise<void>;\n\n  /**\n   * @method consumeCommands\n   * @description 消费命令\n   * @param {string} queueName 队列名称\n   * @param {Function} processor 命令处理器函数\n   * @returns {Promise<void>}\n   */\n  consumeCommands(\n    queueName: string,\n    processor: (command: any) => Promise<void>,\n  ): Promise<void>;\n\n  /**\n   * @method consumeQueries\n   * @description 消费查询\n   * @param {string} queueName 队列名称\n   * @param {Function} processor 查询处理器函数\n   * @returns {Promise<void>}\n   */\n  consumeQueries(\n    queueName: string,\n    processor: (query: any) => Promise<void>,\n  ): Promise<void>;\n\n  /**\n   * @method createQueue\n   * @description 创建队列\n   * @param {QueueConfig} config 队列配置\n   * @returns {Promise<void>}\n   */\n  createQueue(config: QueueConfig): Promise<void>;\n\n  /**\n   * @method deleteQueue\n   * @description 删除队列\n   * @param {string} queueName 队列名称\n   * @returns {Promise<void>}\n   */\n  deleteQueue(queueName: string): Promise<void>;\n\n  /**\n   * @method getQueueStatistics\n   * @description 获取队列统计信息\n   * @param {string} queueName 队列名称\n   * @returns {Promise<QueueStatistics>} 统计信息\n   */\n  getQueueStatistics(queueName: string): Promise<QueueStatistics>;\n\n  /**\n   * @method pauseQueue\n   * @description 暂停队列\n   * @param {string} queueName 队列名称\n   * @returns {Promise<void>}\n   */\n  pauseQueue(queueName: string): Promise<void>;\n\n  /**\n   * @method resumeQueue\n   * @description 恢复队列\n   * @param {string} queueName 队列名称\n   * @returns {Promise<void>}\n   */\n  resumeQueue(queueName: string): Promise<void>;\n\n  /**\n   * @method clearQueue\n   * @description 清空队列\n   * @param {string} queueName 队列名称\n   * @returns {Promise<void>}\n   */\n  clearQueue(queueName: string): Promise<void>;\n\n  /**\n   * @method retryFailedJobs\n   * @description 重试失败的任务\n   * @param {string} queueName 队列名称\n   * @returns {Promise<number>} 重试的任务数量\n   */\n  retryFailedJobs(queueName: string): Promise<number>;\n\n  /**\n   * @method getFailedJobs\n   * @description 获取失败的任务\n   * @param {string} queueName 队列名称\n   * @param {number} [limit=100] 限制数量\n   * @returns {Promise<FailedJob[]>} 失败的任务列表\n   */\n  getFailedJobs(queueName: string, limit?: number): Promise<FailedJob[]>;\n\n  /**\n   * @method start\n   * @description 启动消息队列\n   * @returns {Promise<void>}\n   */\n  start(): Promise<void>;\n\n  /**\n   * @method stop\n   * @description 停止消息队列\n   * @returns {Promise<void>}\n   */\n  stop(): Promise<void>;\n\n  /**\n   * @method isRunning\n   * @description 检查消息队列是否正在运行\n   * @returns {boolean} 是否正在运行\n   */\n  isRunning(): boolean;\n}\n\n/**\n * @interface QueueStatistics\n * @description 队列统计信息\n */\nexport interface QueueStatistics {\n  readonly name: string;\n  readonly waiting: number;\n  readonly active: number;\n  readonly completed: number;\n  readonly failed: number;\n  readonly delayed: number;\n  readonly paused: boolean;\n  readonly concurrency: number;\n  readonly averageProcessingTime: number; // 毫秒\n  readonly throughput: number; // 每秒处理数量\n}\n\n/**\n * @interface FailedJob\n * @description 失败的任务\n */\nexport interface FailedJob {\n  readonly id: string;\n  readonly name: string;\n  readonly data: any;\n  readonly error: string;\n  readonly stack: string;\n  readonly failedAt: Date;\n  readonly attempts: number;\n  readonly maxAttempts: number;\n}\n"],"mappings":"","ignoreList":[]}