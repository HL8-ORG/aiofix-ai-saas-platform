{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/core/src/examples/user.aggregate.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/core/src/examples/user.aggregate.spec.ts"],"sourcesContent":["/**\n * 用户聚合根测试\n *\n * 测试用户聚合根的基本功能，包括用户创建、资料更新等。\n *\n * @fileoverview 用户聚合根单元测试\n * @author AI开发团队\n * @since 1.0.0\n */\n\nimport {\n  User,\n  UserCreatedEvent,\n  UserProfileUpdatedEvent,\n} from './user.aggregate';\n\ndescribe('User Aggregate', () => {\n  describe('create', () => {\n    it('should create user with valid data', () => {\n      // Arrange\n      const email = 'test@example.com';\n      const password = 'Password123!';\n      const name = 'Test User';\n\n      // Act\n      const user = User.create(email, password, name);\n\n      // Assert\n      expect(user).toBeInstanceOf(User);\n      expect(user.id).toBeDefined();\n      expect(user.email).toBe(email);\n      expect(user.name).toBe(name);\n      expect(user.status).toBe('active');\n      expect(user.hasUncommittedEvents()).toBe(true);\n      expect(user.getUncommittedEventsCount()).toBe(1);\n      expect(user.uncommittedEvents[0]).toBeInstanceOf(UserCreatedEvent);\n    });\n\n    it('should throw error for invalid email', () => {\n      // Arrange\n      const invalidEmail = 'invalid-email';\n      const password = 'Password123!';\n      const name = 'Test User';\n\n      // Act & Assert\n      expect(() => {\n        User.create(invalidEmail, password, name);\n      }).toThrow('邮箱格式无效');\n    });\n\n    it('should throw error for weak password', () => {\n      // Arrange\n      const email = 'test@example.com';\n      const weakPassword = '123';\n      const name = 'Test User';\n\n      // Act & Assert\n      expect(() => {\n        User.create(email, weakPassword, name);\n      }).toThrow('密码强度不足');\n    });\n\n    it('should throw error for empty name', () => {\n      // Arrange\n      const email = 'test@example.com';\n      const password = 'Password123!';\n      const emptyName = '';\n\n      // Act & Assert\n      expect(() => {\n        User.create(email, password, emptyName);\n      }).toThrow('用户姓名不能为空');\n    });\n  });\n\n  describe('updateProfile', () => {\n    let user: User;\n\n    beforeEach(() => {\n      user = User.create('test@example.com', 'Password123!', 'Test User');\n      user.markEventsAsCommitted(); // 清除未提交事件\n    });\n\n    it('should update user profile successfully', () => {\n      // Arrange\n      const profile = {\n        name: 'Updated Name',\n        phone: '+1234567890',\n        avatar: 'https://example.com/avatar.jpg',\n      };\n\n      // Act\n      user.updateProfile(profile);\n\n      // Assert\n      expect(user.name).toBe('Updated Name');\n      expect(user.phone).toBe('+1234567890');\n      expect(user.avatar).toBe('https://example.com/avatar.jpg');\n      expect(user.hasUncommittedEvents()).toBe(true);\n      expect(user.getUncommittedEventsCount()).toBe(1);\n      expect(user.uncommittedEvents[0]).toBeInstanceOf(UserProfileUpdatedEvent);\n    });\n\n    it('should update partial profile', () => {\n      // Arrange\n      const profile = {\n        name: 'New Name',\n      };\n\n      // Act\n      user.updateProfile(profile);\n\n      // Assert\n      expect(user.name).toBe('New Name');\n      expect(user.phone).toBe(''); // 未更新，保持原值\n      expect(user.avatar).toBe(''); // 未更新，保持原值\n    });\n\n    it('should throw error for empty name', () => {\n      // Arrange\n      const profile = {\n        name: '',\n      };\n\n      // Act & Assert\n      expect(() => {\n        user.updateProfile(profile);\n      }).toThrow('用户姓名不能为空');\n    });\n\n    it('should throw error for invalid phone', () => {\n      // Arrange\n      const profile = {\n        phone: 'invalid-phone',\n      };\n\n      // Act & Assert\n      expect(() => {\n        user.updateProfile(profile);\n      }).toThrow('电话号码格式无效');\n    });\n  });\n\n  describe('event sourcing', () => {\n    it('should restore from history events', () => {\n      // Arrange\n      const user = User.create('test@example.com', 'Password123!', 'Test User');\n      const events = user.uncommittedEvents;\n      user.markEventsAsCommitted();\n\n      // 创建新用户实例\n      const restoredUser = new User(user.id);\n\n      // Act\n      restoredUser.loadFromHistory(events);\n\n      // Assert\n      expect(restoredUser.id).toBe(user.id);\n      expect(restoredUser.email).toBe(user.email);\n      expect(restoredUser.name).toBe(user.name);\n      expect(restoredUser.status).toBe(user.status);\n      expect(restoredUser.version).toBe(1);\n    });\n\n    it('should create and restore snapshot', () => {\n      // Arrange\n      const user = User.create('test@example.com', 'Password123!', 'Test User');\n      user.updateProfile({ name: 'Updated Name' });\n      user.markEventsAsCommitted();\n\n      // Act\n      const snapshot = user.createSnapshot();\n      const restoredUser = new User(user.id);\n      restoredUser.restoreFromSnapshot(snapshot);\n\n      // Assert\n      expect(restoredUser.id).toBe(user.id);\n      expect(restoredUser.email).toBe(user.email);\n      expect(restoredUser.name).toBe('Updated Name');\n      expect(restoredUser.version).toBe(user.version);\n    });\n  });\n\n  describe('version control', () => {\n    it('should increment version on each event', () => {\n      // Arrange\n      const user = User.create('test@example.com', 'Password123!', 'Test User');\n      expect(user.version).toBe(1);\n\n      // Act\n      user.updateProfile({ name: 'Updated Name' });\n\n      // Assert\n      expect(user.version).toBe(2);\n    });\n\n    it('should maintain version consistency', () => {\n      // Arrange\n      const user = User.create('test@example.com', 'Password123!', 'Test User');\n      const initialVersion = user.version;\n\n      // Act\n      user.markEventsAsCommitted();\n\n      // Assert\n      expect(user.version).toBe(initialVersion);\n      expect(user.hasUncommittedEvents()).toBe(false);\n    });\n  });\n});\n"],"version":3}