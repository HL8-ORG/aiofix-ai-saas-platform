{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/config/isolation.config.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/config/isolation.config.spec.ts"],"sourcesContent":["/**\n * @file isolation.config.spec.ts\n * @description 隔离配置服务单元测试\n */\n\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { IsolationConfigService, IsolationStrategy } from './isolation.config';\n\ndescribe('IsolationConfigService', () => {\n  let service: IsolationConfigService;\n  let configService: ConfigService;\n\n  beforeEach(async () => {\n    const mockConfigService = {\n      get: jest.fn().mockReturnValue(undefined),\n    };\n\n    service = new IsolationConfigService(mockConfigService as any);\n    configService = mockConfigService as any;\n  });\n\n  describe('getStrategy', () => {\n    it('should return TABLE_LEVEL as default strategy', () => {\n      // 模拟环境变量未设置\n      jest.spyOn(configService, 'get').mockReturnValue(undefined);\n\n      const strategy = service.getStrategy();\n      expect(strategy).toBe(IsolationStrategy.TABLE_LEVEL);\n    });\n\n    it('should return DATABASE_LEVEL when configured', () => {\n      jest.spyOn(configService, 'get').mockReturnValue('database_level');\n\n      const strategy = service.getStrategy();\n      expect(strategy).toBe(IsolationStrategy.DATABASE_LEVEL);\n    });\n\n    it('should return SCHEMA_LEVEL when configured', () => {\n      jest.spyOn(configService, 'get').mockReturnValue('schema_level');\n\n      const strategy = service.getStrategy();\n      expect(strategy).toBe(IsolationStrategy.SCHEMA_LEVEL);\n    });\n\n    it('should return TABLE_LEVEL when configured', () => {\n      jest.spyOn(configService, 'get').mockReturnValue('table_level');\n\n      const strategy = service.getStrategy();\n      expect(strategy).toBe(IsolationStrategy.TABLE_LEVEL);\n    });\n\n    it('should throw error for invalid strategy', () => {\n      jest.spyOn(configService, 'get').mockReturnValue('INVALID_STRATEGY');\n\n      expect(() => service.getStrategy()).toThrow(\n        'Invalid isolation strategy: INVALID_STRATEGY',\n      );\n    });\n  });\n\n  describe('getConnectionConfig', () => {\n    beforeEach(() => {\n      // 设置默认环境变量\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const defaults: Record<string, string> = {\n          PLATFORM_DB_NAME: 'aiofix_platform',\n          EVENTS_DB_NAME: 'aiofix_events',\n          AI_VECTORS_DB_NAME: 'aiofix_ai_vectors',\n          TENANT_DB_PREFIX: 'tenant_',\n          TENANT_SCHEMA_PREFIX: 'tenant_',\n          SHARED_SCHEMA_NAME: 'shared',\n        };\n        return defaults[key];\n      });\n    });\n\n    it('should return platform database config for TABLE_LEVEL strategy', () => {\n      jest\n        .spyOn(service, 'getStrategy')\n        .mockReturnValue(IsolationStrategy.TABLE_LEVEL);\n\n      const config = service.getConnectionConfig('tenant-123');\n\n      expect(config).toEqual({\n        database: 'aiofix_platform',\n        tenantId: 'tenant-123',\n      });\n    });\n\n    it('should return tenant database config for DATABASE_LEVEL strategy', () => {\n      jest.spyOn(service, 'isDatabaseLevel').mockReturnValue(true);\n      jest\n        .spyOn(service, 'getTenantDatabaseName')\n        .mockReturnValue('tenant_tenant-123');\n\n      const config = service.getConnectionConfig('tenant-123');\n\n      expect(config).toEqual({\n        database: 'tenant_tenant-123',\n        tenantId: 'tenant-123',\n      });\n    });\n\n    it('should return schema config for SCHEMA_LEVEL strategy', () => {\n      jest.spyOn(service, 'isSchemaLevel').mockReturnValue(true);\n      jest\n        .spyOn(service, 'getPlatformDatabaseName')\n        .mockReturnValue('aiofix_platform');\n      jest\n        .spyOn(service, 'getTenantSchemaName')\n        .mockReturnValue('tenant_tenant-123');\n\n      const config = service.getConnectionConfig('tenant-123');\n\n      expect(config).toEqual({\n        database: 'aiofix_platform',\n        schema: 'tenant_tenant-123',\n        tenantId: 'tenant-123',\n      });\n    });\n\n    it('should return platform config when no tenantId provided', () => {\n      jest\n        .spyOn(service, 'getStrategy')\n        .mockReturnValue(IsolationStrategy.TABLE_LEVEL);\n\n      const config = service.getConnectionConfig();\n\n      expect(config).toEqual({\n        database: 'aiofix_platform',\n      });\n    });\n  });\n\n  describe('shouldEnableRLS', () => {\n    it('should return true by default', () => {\n      jest.spyOn(configService, 'get').mockReturnValue(undefined);\n\n      const result = service.shouldEnableRLS();\n      expect(result).toBe(true);\n    });\n\n    it('should return true when ENABLE_RLS is true', () => {\n      jest.spyOn(configService, 'get').mockReturnValue('true');\n\n      const result = service.shouldEnableRLS();\n      expect(result).toBe(true);\n    });\n\n    it('should return false when ENABLE_RLS is false', () => {\n      jest.spyOn(configService, 'get').mockReturnValue('false');\n\n      const result = service.shouldEnableRLS();\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getDatabaseNames', () => {\n    beforeEach(() => {\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const defaults: Record<string, string> = {\n          PLATFORM_DB_NAME: 'aiofix_platform',\n          EVENTS_DB_NAME: 'aiofix_events',\n          AI_VECTORS_DB_NAME: 'aiofix_ai_vectors',\n        };\n        return defaults[key];\n      });\n    });\n\n    it('should return correct database names', () => {\n      expect(service.getPlatformDatabaseName()).toBe('aiofix_platform');\n      expect(service.getEventsDatabaseName()).toBe('aiofix_events');\n      expect(service.getAiVectorsDatabaseName()).toBe('aiofix_ai_vectors');\n    });\n  });\n\n  describe('getTenantIdField', () => {\n    it('should return default tenant field name', () => {\n      jest.spyOn(configService, 'get').mockReturnValue(undefined);\n\n      const fieldName = service.getTenantIdField();\n      expect(fieldName).toBe('tenant_id');\n    });\n\n    it('should return configured tenant field name', () => {\n      jest.spyOn(configService, 'get').mockReturnValue('custom_tenant_id');\n\n      const fieldName = service.getTenantIdField();\n      expect(fieldName).toBe('custom_tenant_id');\n    });\n  });\n\n  describe('shouldAutoAddTenantCondition', () => {\n    it('should return true by default', () => {\n      jest.spyOn(configService, 'get').mockReturnValue(undefined);\n\n      const result = service.shouldAutoAddTenantCondition();\n      expect(result).toBe(true);\n    });\n\n    it('should return configured value', () => {\n      jest.spyOn(configService, 'get').mockReturnValue('false');\n\n      const result = service.shouldAutoAddTenantCondition();\n      expect(result).toBe(false);\n    });\n  });\n});\n"],"version":3}