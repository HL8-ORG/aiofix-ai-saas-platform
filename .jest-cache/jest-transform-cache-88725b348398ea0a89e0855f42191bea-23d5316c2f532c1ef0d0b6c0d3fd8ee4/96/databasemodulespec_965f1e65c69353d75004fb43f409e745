6aa9e83be83fa3e001254baf72d85fdb
"use strict";
/**
 * @file database.module.spec.ts
 * @description 数据库模块单元测试
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the adapters to avoid actual database connections
jest.mock('./adapters/postgresql.adapter');
jest.mock('./adapters/mongodb.adapter');
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const database_module_1 = require("./database.module");
const database_config_1 = require("./config/database.config");
const redis_config_1 = require("./config/redis.config");
const isolation_config_1 = require("./config/isolation.config");
const database_adapter_factory_1 = require("./adapters/database-adapter.factory");
describe('DatabaseModule', () => {
    let module;
    beforeEach(async () => {
        module = await testing_1.Test.createTestingModule({
            imports: [
                config_1.ConfigModule.forRoot({
                    isGlobal: true,
                    envFilePath: '.env.test',
                }),
                database_module_1.DatabaseModule.register({
                    config: {
                        type: 'postgresql',
                        host: 'localhost',
                        port: 5432,
                        username: 'test_user',
                        password: 'test_password',
                        database: 'test_database',
                    },
                    postgresql: false, // 禁用PostgreSQL以避免连接测试
                    mongodb: false, // 禁用MongoDB以避免连接测试
                }),
            ],
        }).compile();
    });
    afterEach(async () => {
        if (module) {
            await module.close();
        }
    });
    describe('Module Registration', () => {
        it('should be defined', () => {
            expect(module).toBeDefined();
        });
        it('should have database config provider', () => {
            const config = module.get('DATABASE_CONFIG');
            expect(config).toBeDefined();
            expect(config.type).toBe('postgresql');
            expect(config.host).toBe('localhost');
            expect(config.port).toBe(5432);
            expect(config.username).toBe('test_user');
            expect(config.password).toBe('test_password');
            expect(config.database).toBe('test_database');
        });
        it('should have database name provider', () => {
            const name = module.get('DATABASE_NAME');
            expect(name).toBeDefined();
            expect(name).toBe('test_database');
        });
    });
    describe('Service Providers', () => {
        it('should provide DatabaseConfigService', () => {
            const service = module.get(database_config_1.DatabaseConfigService);
            expect(service).toBeDefined();
            expect(service).toBeInstanceOf(database_config_1.DatabaseConfigService);
        });
        it('should provide RedisConfigService', () => {
            const service = module.get(redis_config_1.RedisConfigService);
            expect(service).toBeDefined();
            expect(service).toBeInstanceOf(redis_config_1.RedisConfigService);
        });
        it('should provide IsolationConfigService', () => {
            const service = module.get(isolation_config_1.IsolationConfigService);
            expect(service).toBeDefined();
            expect(service).toBeInstanceOf(isolation_config_1.IsolationConfigService);
        });
        it('should provide DatabaseAdapterFactory', () => {
            const factory = module.get(database_adapter_factory_1.DatabaseAdapterFactory);
            expect(factory).toBeDefined();
            expect(factory).toBeInstanceOf(database_adapter_factory_1.DatabaseAdapterFactory);
        });
    });
    describe('Configuration Validation', () => {
        it('should validate PostgreSQL configuration', () => {
            const configService = module.get(database_config_1.DatabaseConfigService);
            const config = configService.getPostgreSQLConfig();
            expect(config).toBeDefined();
            expect(config.type).toBe('postgresql');
            expect(config.host).toBeDefined();
            expect(config.port).toBeDefined();
            expect(config.username).toBeDefined();
            expect(config.password).toBeDefined();
            expect(config.database).toBeDefined();
        });
        it('should validate MongoDB configuration', () => {
            const configService = module.get(database_config_1.DatabaseConfigService);
            const config = configService.getMongoDBConfig();
            expect(config).toBeDefined();
            expect(config.type).toBe('mongodb');
            expect(config.host).toBeDefined();
            expect(config.port).toBeDefined();
            expect(config.username).toBeDefined();
            expect(config.password).toBeDefined();
            expect(config.database).toBeDefined();
        });
        it('should validate Redis configuration', () => {
            const configService = module.get(redis_config_1.RedisConfigService);
            const cacheConfig = configService.getCacheConfig();
            const queueConfig = configService.getMessageQueueConfig();
            const sessionConfig = configService.getSessionConfig();
            expect(cacheConfig).toBeDefined();
            expect(cacheConfig.host).toBeDefined();
            expect(cacheConfig.port).toBeDefined();
            expect(queueConfig).toBeDefined();
            expect(queueConfig.host).toBeDefined();
            expect(queueConfig.port).toBeDefined();
            expect(sessionConfig).toBeDefined();
            expect(sessionConfig.host).toBeDefined();
            expect(sessionConfig.port).toBeDefined();
        });
    });
    describe('Isolation Strategy', () => {
        it('should provide isolation configuration', () => {
            const isolationService = module.get(isolation_config_1.IsolationConfigService);
            const strategy = isolationService.getStrategy();
            expect(strategy).toBeDefined();
            expect(['DATABASE_LEVEL', 'SCHEMA_LEVEL', 'TABLE_LEVEL']).toContain(strategy);
        });
        it('should provide connection configuration', () => {
            const isolationService = module.get(isolation_config_1.IsolationConfigService);
            const config = isolationService.getConnectionConfig('test-tenant');
            expect(config).toBeDefined();
            expect(config.database).toBeDefined();
        });
    });
    describe('Adapter Factory', () => {
        it('should create adapters based on isolation strategy', () => {
            const factory = module.get(database_adapter_factory_1.DatabaseAdapterFactory);
            // 测试创建适配器（不实际连接数据库）
            expect(() => factory.createAdapter('test-tenant')).not.toThrow();
            expect(() => factory.createPlatformAdapter()).not.toThrow();
            expect(() => factory.createEventsAdapter()).not.toThrow();
            expect(() => factory.createAiVectorsAdapter()).not.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,