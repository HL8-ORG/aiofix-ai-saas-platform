{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/database.module.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/database.module.spec.ts"],"sourcesContent":["/**\n * @file database.module.spec.ts\n * @description 数据库模块单元测试\n */\n\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule } from '@nestjs/config';\nimport { DatabaseModule } from './database.module';\nimport { DatabaseConfigService } from './config/database.config';\nimport { RedisConfigService } from './config/redis.config';\nimport { IsolationConfigService } from './config/isolation.config';\nimport { DatabaseAdapterFactory } from './adapters/database-adapter.factory';\n\n// Mock the adapters to avoid actual database connections\njest.mock('./adapters/postgresql.adapter');\njest.mock('./adapters/mongodb.adapter');\n\ndescribe('DatabaseModule', () => {\n  let module: TestingModule;\n\n  beforeEach(async () => {\n    module = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          envFilePath: '.env.test',\n        }),\n        DatabaseModule.register({\n          config: {\n            type: 'postgresql',\n            host: 'localhost',\n            port: 5432,\n            username: 'test_user',\n            password: 'test_password',\n            database: 'test_database',\n          },\n          postgresql: false, // 禁用PostgreSQL以避免连接测试\n          mongodb: false, // 禁用MongoDB以避免连接测试\n        }),\n      ],\n    }).compile();\n  });\n\n  afterEach(async () => {\n    if (module) {\n      await module.close();\n    }\n  });\n\n  describe('Module Registration', () => {\n    it('should be defined', () => {\n      expect(module).toBeDefined();\n    });\n\n    it('should have database config provider', () => {\n      const config = module.get('DATABASE_CONFIG');\n      expect(config).toBeDefined();\n      expect(config.type).toBe('postgresql');\n      expect(config.host).toBe('localhost');\n      expect(config.port).toBe(5432);\n      expect(config.username).toBe('test_user');\n      expect(config.password).toBe('test_password');\n      expect(config.database).toBe('test_database');\n    });\n\n    it('should have database name provider', () => {\n      const name = module.get('DATABASE_NAME');\n      expect(name).toBeDefined();\n      expect(name).toBe('test_database');\n    });\n  });\n\n  describe('Service Providers', () => {\n    it('should provide DatabaseConfigService', () => {\n      const service = module.get<DatabaseConfigService>(DatabaseConfigService);\n      expect(service).toBeDefined();\n      expect(service).toBeInstanceOf(DatabaseConfigService);\n    });\n\n    it('should provide RedisConfigService', () => {\n      const service = module.get<RedisConfigService>(RedisConfigService);\n      expect(service).toBeDefined();\n      expect(service).toBeInstanceOf(RedisConfigService);\n    });\n\n    it('should provide IsolationConfigService', () => {\n      const service = module.get<IsolationConfigService>(\n        IsolationConfigService,\n      );\n      expect(service).toBeDefined();\n      expect(service).toBeInstanceOf(IsolationConfigService);\n    });\n\n    it('should provide DatabaseAdapterFactory', () => {\n      const factory = module.get<DatabaseAdapterFactory>(\n        DatabaseAdapterFactory,\n      );\n      expect(factory).toBeDefined();\n      expect(factory).toBeInstanceOf(DatabaseAdapterFactory);\n    });\n  });\n\n  describe('Configuration Validation', () => {\n    it('should validate PostgreSQL configuration', () => {\n      const configService = module.get<DatabaseConfigService>(\n        DatabaseConfigService,\n      );\n      const config = configService.getPostgreSQLConfig();\n\n      expect(config).toBeDefined();\n      expect(config.type).toBe('postgresql');\n      expect(config.host).toBeDefined();\n      expect(config.port).toBeDefined();\n      expect(config.username).toBeDefined();\n      expect(config.password).toBeDefined();\n      expect(config.database).toBeDefined();\n    });\n\n    it('should validate MongoDB configuration', () => {\n      const configService = module.get<DatabaseConfigService>(\n        DatabaseConfigService,\n      );\n      const config = configService.getMongoDBConfig();\n\n      expect(config).toBeDefined();\n      expect(config.type).toBe('mongodb');\n      expect(config.host).toBeDefined();\n      expect(config.port).toBeDefined();\n      expect(config.username).toBeDefined();\n      expect(config.password).toBeDefined();\n      expect(config.database).toBeDefined();\n    });\n\n    it('should validate Redis configuration', () => {\n      const configService = module.get<RedisConfigService>(RedisConfigService);\n      const cacheConfig = configService.getCacheConfig();\n      const queueConfig = configService.getMessageQueueConfig();\n      const sessionConfig = configService.getSessionConfig();\n\n      expect(cacheConfig).toBeDefined();\n      expect(cacheConfig.host).toBeDefined();\n      expect(cacheConfig.port).toBeDefined();\n\n      expect(queueConfig).toBeDefined();\n      expect(queueConfig.host).toBeDefined();\n      expect(queueConfig.port).toBeDefined();\n\n      expect(sessionConfig).toBeDefined();\n      expect(sessionConfig.host).toBeDefined();\n      expect(sessionConfig.port).toBeDefined();\n    });\n  });\n\n  describe('Isolation Strategy', () => {\n    it('should provide isolation configuration', () => {\n      const isolationService = module.get<IsolationConfigService>(\n        IsolationConfigService,\n      );\n      const strategy = isolationService.getStrategy();\n\n      expect(strategy).toBeDefined();\n      expect(['DATABASE_LEVEL', 'SCHEMA_LEVEL', 'TABLE_LEVEL']).toContain(\n        strategy,\n      );\n    });\n\n    it('should provide connection configuration', () => {\n      const isolationService = module.get<IsolationConfigService>(\n        IsolationConfigService,\n      );\n      const config = isolationService.getConnectionConfig('test-tenant');\n\n      expect(config).toBeDefined();\n      expect(config.database).toBeDefined();\n    });\n  });\n\n  describe('Adapter Factory', () => {\n    it('should create adapters based on isolation strategy', () => {\n      const factory = module.get<DatabaseAdapterFactory>(\n        DatabaseAdapterFactory,\n      );\n\n      // 测试创建适配器（不实际连接数据库）\n      expect(() => factory.createAdapter('test-tenant')).not.toThrow();\n      expect(() => factory.createPlatformAdapter()).not.toThrow();\n      expect(() => factory.createEventsAdapter()).not.toThrow();\n      expect(() => factory.createAiVectorsAdapter()).not.toThrow();\n    });\n  });\n});\n"],"version":3}