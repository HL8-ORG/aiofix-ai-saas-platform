{"version":3,"names":["exports","defineConfig","cov_1ff055icyv","s","getConfig","resetConfig","default_config_1","require","deepMerge","target","source","f","result","key","b","Array","isArray","currentAppConfig","defaultConfiguration","providedConfig","Error","Object","freeze","console","log"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/config/src/config-loader.ts"],"sourcesContent":["import { defaultConfiguration } from './default-config';\nimport { IamConfig } from './config.service';\n\n/**\n * @function deepMerge\n * @description\n * 深度合并工具函数，用于合并两个对象的属性，支持嵌套对象的递归合并。\n * 该函数是配置系统的核心工具，用于合并默认配置和用户自定义配置。\n *\n * 主要原理与机制如下：\n * 1. 使用展开运算符创建目标对象的浅拷贝\n * 2. 遍历源对象的所有属性\n * 3. 对于嵌套对象进行递归合并\n * 4. 对于基本类型直接覆盖\n * 5. 保持数组类型不变\n *\n * 功能与业务规则：\n * 1. 对象深度合并\n * 2. 配置覆盖机制\n * 3. 类型安全保证\n * 4. 递归处理支持\n *\n * @param {Record<string, unknown>} target - 目标对象，将被合并的对象\n * @param {Record<string, unknown>} source - 源对象，提供要合并的属性\n * @returns {Record<string, unknown>} 返回合并后的新对象\n */\nfunction deepMerge(\n  target: Record<string, unknown>,\n  source: Record<string, unknown>,\n): Record<string, unknown> {\n  const result = { ...target };\n\n  for (const key in source) {\n    if (\n      source[key] &&\n      typeof source[key] === 'object' &&\n      !Array.isArray(source[key])\n    ) {\n      result[key] = deepMerge(\n        (result[key] as Record<string, unknown>) || {},\n        source[key] as Record<string, unknown>,\n      );\n    } else {\n      result[key] = source[key];\n    }\n  }\n\n  return result;\n}\n\nlet currentAppConfig: Partial<IamConfig> = { ...defaultConfiguration };\n\n/**\n * @function defineConfig\n * @description\n * 定义配置，将提供的配置与现有的默认配置进行合并。\n * 该函数是配置系统的核心API，用于动态更新系统配置。\n *\n * 主要原理与机制如下：\n * 1. 验证提供的配置对象是否有效\n * 2. 使用deepMerge函数合并配置\n * 3. 更新全局配置对象\n * 4. 支持异步配置更新\n *\n * 功能与业务规则：\n * 1. 配置验证和合并\n * 2. 动态配置更新\n * 3. 错误处理和验证\n * 4. 配置完整性保证\n *\n * @param {Partial<IamConfig>} providedConfig - 要合并的配置对象\n * @returns {Promise<void>} 返回一个Promise，表示配置更新过程\n * @throws {Error} 当提供的配置无效时抛出错误\n */\nexport async function defineConfig(\n  providedConfig: Partial<IamConfig>,\n): Promise<void> {\n  if (!providedConfig || typeof providedConfig !== 'object') {\n    throw new Error(\n      'Invalid configuration provided. Expected a non-empty object.',\n    );\n  }\n\n  currentAppConfig = await deepMerge(currentAppConfig, providedConfig);\n}\n\n/**\n * @function getConfig\n * @description\n * 获取当前应用配置，返回一个只读的配置副本。\n * 该函数提供了对系统当前配置的安全访问。\n *\n * 主要原理与机制如下：\n * 1. 使用Object.freeze()创建不可变配置对象\n * 2. 使用展开运算符创建配置对象的深拷贝\n * 3. 返回只读类型，防止运行时修改\n * 4. 提供类型安全的配置访问\n *\n * 功能与业务规则：\n * 1. 配置获取和访问\n * 2. 配置对象保护\n * 3. 类型安全保证\n * 4. 配置完整性保证\n *\n * @returns {Readonly<Partial<IamConfig>>} 返回只读的当前配置对象\n */\nexport function getConfig(): Readonly<Partial<IamConfig>> {\n  return Object.freeze({ ...currentAppConfig });\n}\n\n/**\n * @function resetConfig\n * @description\n * 重置配置到默认值，将当前配置恢复为系统默认配置。\n * 该函数用于配置恢复和调试目的。\n *\n * 主要原理与机制如下：\n * 1. 使用展开运算符复制默认配置\n * 2. 更新全局配置对象\n * 3. 记录重置操作到控制台\n * 4. 提供配置恢复机制\n *\n * 功能与业务规则：\n * 1. 配置重置和恢复\n * 2. 调试支持\n * 3. 配置回滚\n * 4. 系统状态恢复\n */\nexport function resetConfig(): void {\n  currentAppConfig = { ...defaultConfiguration };\n  console.log('Aiofix IAM Config Reset to Defaults');\n}\n"],"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","ignoreList":[]}