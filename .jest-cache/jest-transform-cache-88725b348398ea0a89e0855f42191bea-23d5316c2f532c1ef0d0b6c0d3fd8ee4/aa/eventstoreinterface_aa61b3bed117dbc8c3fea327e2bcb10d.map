{"version":3,"names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/core/src/domain/interfaces/event-store.interface.ts"],"sourcesContent":["import { DomainEvent, EventMetadata } from '../domain-event';\n\n/**\n * @interface StoredEvent\n * @description 存储的事件，包含事件数据和元数据\n */\nexport interface StoredEvent {\n  readonly eventId: string;\n  readonly aggregateId: string;\n  readonly eventType: string;\n  readonly eventVersion: number;\n  readonly eventData: Record<string, unknown>;\n  readonly metadata: EventMetadata;\n  readonly occurredOn: Date;\n  readonly storedAt: Date;\n  readonly streamVersion: number; // 事件流版本号\n}\n\n/**\n * @interface EventStream\n * @description 事件流，包含聚合根的所有事件\n */\nexport interface EventStream {\n  readonly aggregateId: string;\n  readonly events: StoredEvent[];\n  readonly fromVersion: number;\n  readonly toVersion: number;\n  readonly hasMore: boolean;\n}\n\n/**\n * @interface EventStoreQuery\n * @description 事件存储查询条件\n */\nexport interface EventStoreQuery {\n  readonly aggregateId?: string;\n  readonly eventType?: string;\n  readonly fromDate?: Date;\n  readonly toDate?: Date;\n  readonly fromVersion?: number;\n  readonly toVersion?: number;\n  readonly limit?: number;\n  readonly offset?: number;\n  readonly tenantId?: string;\n  readonly userId?: string;\n}\n\n/**\n * @interface EventStoreResult\n * @description 事件存储查询结果\n */\nexport interface EventStoreResult {\n  readonly events: StoredEvent[];\n  readonly totalCount: number;\n  readonly hasMore: boolean;\n  readonly nextOffset?: number;\n}\n\n/**\n * @interface IAggregateSnapshot\n * @description 聚合根快照接口\n */\nexport interface IAggregateSnapshot {\n  readonly aggregateId: string;\n  readonly aggregateType: string;\n  readonly version: number;\n  readonly data: Record<string, unknown>;\n  readonly createdAt: Date;\n}\n\n/**\n * @interface IEventStore\n * @description\n * 事件存储接口，负责管理领域事件的持久化、检索和重放功能。\n *\n * 事件存储职责：\n * 1. 持久化领域事件到事件存储数据库\n * 2. 支持事件的版本控制和并发控制\n * 3. 提供事件查询和过滤功能\n * 4. 支持事件重放和快照机制\n *\n * 事件溯源特性：\n * 1. 所有状态变更都通过事件记录\n * 2. 支持时间旅行和状态重建\n * 3. 提供完整的审计日志\n * 4. 支持事件版本管理和迁移\n *\n * 多租户支持：\n * 1. 基于租户ID进行事件隔离\n * 2. 支持租户级的事件查询\n * 3. 确保跨租户数据安全\n * 4. 支持租户级的事件归档\n *\n * @example\n * ```typescript\n * const eventStore = new EventStore(eventRepository, snapshotRepository);\n * await eventStore.saveEvents(aggregateId, events);\n * const events = await eventStore.getEvents(aggregateId, fromVersion);\n * ```\n * @since 1.0.0\n */\nexport interface IEventStore {\n  /**\n   * @method saveEvents\n   * @description 保存聚合根的事件到事件存储\n   * @param {string} aggregateId 聚合根ID\n   * @param {DomainEvent[]} events 领域事件列表\n   * @param {number} expectedVersion 期望的版本号，用于乐观并发控制\n   * @param {EventMetadata} [metadata] 事件元数据，可选\n   * @returns {Promise<void>}\n   * @throws {ConcurrencyError} 当版本冲突时抛出\n   * @throws {ValidationError} 当事件无效时抛出\n   *\n   * 保存流程：\n   * 1. 验证事件的有效性和完整性\n   * 2. 检查聚合根版本一致性\n   * 3. 应用租户级数据隔离\n   * 4. 持久化事件到存储\n   * 5. 更新聚合根版本号\n   */\n  saveEvents(\n    aggregateId: string,\n    events: DomainEvent[],\n    expectedVersion: number,\n    metadata?: EventMetadata,\n  ): Promise<void>;\n\n  /**\n   * @method getEvents\n   * @description 获取聚合根的事件历史\n   * @param {string} aggregateId 聚合根ID\n   * @param {number} fromVersion 起始版本号\n   * @param {number} toVersion 结束版本号，可选\n   * @returns {Promise<DomainEvent[]>} 事件列表\n   */\n  getEvents(\n    aggregateId: string,\n    fromVersion?: number,\n    toVersion?: number,\n  ): Promise<DomainEvent[]>;\n\n  /**\n   * @method getEventStream\n   * @description 获取事件流\n   * @param {string} aggregateId 聚合根ID\n   * @param {number} fromVersion 起始版本号\n   * @param {number} limit 限制数量\n   * @returns {Promise<EventStream>} 事件流\n   */\n  getEventStream(\n    aggregateId: string,\n    fromVersion?: number,\n    limit?: number,\n  ): Promise<EventStream>;\n\n  /**\n   * @method queryEvents\n   * @description 查询事件\n   * @param {EventStoreQuery} query 查询条件\n   * @returns {Promise<EventStoreResult>} 查询结果\n   */\n  queryEvents(query: EventStoreQuery): Promise<EventStoreResult>;\n\n  /**\n   * @method getEventsByType\n   * @description 根据事件类型获取事件\n   * @param {string} eventType 事件类型\n   * @param {Date} fromDate 开始日期\n   * @param {Date} toDate 结束日期\n   * @param {number} limit 限制数量\n   * @returns {Promise<DomainEvent[]>} 事件列表\n   */\n  getEventsByType(\n    eventType: string,\n    fromDate?: Date,\n    toDate?: Date,\n    limit?: number,\n  ): Promise<DomainEvent[]>;\n\n  /**\n   * @method createSnapshot\n   * @description 为聚合根创建快照\n   * @param {string} aggregateId 聚合根ID\n   * @param {any} aggregateState 聚合根状态\n   * @param {number} version 版本号\n   * @returns {Promise<void>}\n   */\n  createSnapshot(\n    aggregateId: string,\n    aggregateState: any,\n    version: number,\n  ): Promise<void>;\n\n  /**\n   * @method getSnapshot\n   * @description 获取聚合根的最新快照\n   * @param {string} aggregateId 聚合根ID\n   * @returns {Promise<IAggregateSnapshot | null>} 快照或null\n   */\n  getSnapshot(aggregateId: string): Promise<IAggregateSnapshot | null>;\n\n  /**\n   * @method deleteSnapshot\n   * @description 删除聚合根的快照\n   * @param {string} aggregateId 聚合根ID\n   * @returns {Promise<void>}\n   */\n  deleteSnapshot(aggregateId: string): Promise<void>;\n\n  /**\n   * @method getAggregateVersion\n   * @description 获取聚合根的当前版本号\n   * @param {string} aggregateId 聚合根ID\n   * @returns {Promise<number>} 版本号\n   */\n  getAggregateVersion(aggregateId: string): Promise<number>;\n\n  /**\n   * @method eventExists\n   * @description 检查事件是否存在\n   * @param {string} eventId 事件ID\n   * @returns {Promise<boolean>} 是否存在\n   */\n  eventExists(eventId: string): Promise<boolean>;\n\n  /**\n   * @method getEventById\n   * @description 根据事件ID获取事件\n   * @param {string} eventId 事件ID\n   * @returns {Promise<DomainEvent | null>} 事件或null\n   */\n  getEventById(eventId: string): Promise<DomainEvent | null>;\n\n  /**\n   * @method archiveEvents\n   * @description 归档旧事件\n   * @param {Date} beforeDate 归档此日期之前的事件\n   * @returns {Promise<number>} 归档的事件数量\n   */\n  archiveEvents(beforeDate: Date): Promise<number>;\n\n  /**\n   * @method getEventStatistics\n   * @description 获取事件统计信息\n   * @param {Date} fromDate 开始日期\n   * @param {Date} toDate 结束日期\n   * @returns {Promise<EventStatistics>} 统计信息\n   */\n  getEventStatistics(fromDate: Date, toDate: Date): Promise<EventStatistics>;\n}\n\n/**\n * @interface EventStatistics\n * @description 事件统计信息\n */\nexport interface EventStatistics {\n  readonly totalEvents: number;\n  readonly eventsByType: Record<string, number>;\n  readonly eventsByTenant: Record<string, number>;\n  readonly eventsByUser: Record<string, number>;\n  readonly averageEventsPerDay: number;\n  readonly peakEventsPerHour: number;\n  readonly storageSize: number; // bytes\n}\n"],"mappings":"","ignoreList":[]}