883de28559c47c1d97a75b66914ef1fd
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types="jest" />
/* eslint-env jest */
const globals_1 = require("@jest/globals");
/**
 * @file database.module.spec.ts
 * @description 数据库模块测试
 */
const testing_1 = require("@nestjs/testing");
const database_module_1 = require("./database.module");
(0, globals_1.describe)('DatabaseModule', () => {
    let module;
    (0, globals_1.beforeEach)(async () => {
        module = await testing_1.Test.createTestingModule({
            imports: [
                database_module_1.DatabaseModule.register({
                    config: {
                        type: 'postgresql',
                        host: 'localhost',
                        port: 5432,
                        username: 'test',
                        password: 'test',
                        database: 'test',
                    },
                    postgresql: false, // 禁用PostgreSQL以避免连接测试
                }),
            ],
        })
            .overrideProvider('IDatabaseAdapter')
            .useValue({})
            .compile();
    });
    (0, globals_1.it)('should be defined', () => {
        (0, globals_1.expect)(module).toBeDefined();
    });
    (0, globals_1.it)('should have database config provider', () => {
        const config = module.get('DATABASE_CONFIG');
        (0, globals_1.expect)(config).toBeDefined();
        (0, globals_1.expect)(config.type).toBe('postgresql');
    });
    (0, globals_1.it)('should have database name provider', () => {
        const name = module.get('DATABASE_NAME');
        (0, globals_1.expect)(name).toBeDefined();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJsaWdsZS9WMS9BaW9maXgvYWlvZml4LWFpLXNhYXMtcGxhdGZvcm0vcGFja2FnZXMvZGF0YWJhc2Uvc3JjL2RhdGFiYXNlLm1vZHVsZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsOEJBQThCO0FBQzlCLHFCQUFxQjtBQUNyQiwyQ0FBaUU7QUFDakU7OztHQUdHO0FBRUgsNkNBQXNEO0FBQ3RELHVEQUFtRDtBQUVuRCxJQUFBLGtCQUFRLEVBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO0lBQzlCLElBQUksTUFBcUIsQ0FBQztJQUUxQixJQUFBLG9CQUFVLEVBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsTUFBTSxHQUFHLE1BQU0sY0FBSSxDQUFDLG1CQUFtQixDQUFDO1lBQ3RDLE9BQU8sRUFBRTtnQkFDUCxnQ0FBYyxDQUFDLFFBQVEsQ0FBQztvQkFDdEIsTUFBTSxFQUFFO3dCQUNOLElBQUksRUFBRSxZQUFZO3dCQUNsQixJQUFJLEVBQUUsV0FBVzt3QkFDakIsSUFBSSxFQUFFLElBQUk7d0JBQ1YsUUFBUSxFQUFFLE1BQU07d0JBQ2hCLFFBQVEsRUFBRSxNQUFNO3dCQUNoQixRQUFRLEVBQUUsTUFBTTtxQkFDakI7b0JBQ0QsVUFBVSxFQUFFLEtBQUssRUFBRSxzQkFBc0I7aUJBQzFDLENBQUM7YUFDSDtTQUNGLENBQUM7YUFDQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQzthQUNwQyxRQUFRLENBQUMsRUFBRSxDQUFDO2FBQ1osT0FBTyxFQUFFLENBQUM7SUFDZixDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsWUFBRSxFQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUMzQixJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLFlBQUUsRUFBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7UUFDOUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzdDLElBQUEsZ0JBQU0sRUFBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM3QixJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsWUFBRSxFQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtRQUM1QyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3pDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM3QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2FybGlnbGUvVjEvQWlvZml4L2Fpb2ZpeC1haS1zYWFzLXBsYXRmb3JtL3BhY2thZ2VzL2RhdGFiYXNlL3NyYy9kYXRhYmFzZS5tb2R1bGUuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cImplc3RcIiAvPlxuLyogZXNsaW50LWVudiBqZXN0ICovXG5pbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCwgYmVmb3JlRWFjaCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuLyoqXG4gKiBAZmlsZSBkYXRhYmFzZS5tb2R1bGUuc3BlYy50c1xuICogQGRlc2NyaXB0aW9uIOaVsOaNruW6k+aooeWdl+a1i+ivlVxuICovXG5cbmltcG9ydCB7IFRlc3QsIFRlc3RpbmdNb2R1bGUgfSBmcm9tICdAbmVzdGpzL3Rlc3RpbmcnO1xuaW1wb3J0IHsgRGF0YWJhc2VNb2R1bGUgfSBmcm9tICcuL2RhdGFiYXNlLm1vZHVsZSc7XG5cbmRlc2NyaWJlKCdEYXRhYmFzZU1vZHVsZScsICgpID0+IHtcbiAgbGV0IG1vZHVsZTogVGVzdGluZ01vZHVsZTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBtb2R1bGUgPSBhd2FpdCBUZXN0LmNyZWF0ZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgaW1wb3J0czogW1xuICAgICAgICBEYXRhYmFzZU1vZHVsZS5yZWdpc3Rlcih7XG4gICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICB0eXBlOiAncG9zdGdyZXNxbCcsXG4gICAgICAgICAgICBob3N0OiAnbG9jYWxob3N0JyxcbiAgICAgICAgICAgIHBvcnQ6IDU0MzIsXG4gICAgICAgICAgICB1c2VybmFtZTogJ3Rlc3QnLFxuICAgICAgICAgICAgcGFzc3dvcmQ6ICd0ZXN0JyxcbiAgICAgICAgICAgIGRhdGFiYXNlOiAndGVzdCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwb3N0Z3Jlc3FsOiBmYWxzZSwgLy8g56aB55SoUG9zdGdyZVNRTOS7pemBv+WFjei/nuaOpea1i+ivlVxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfSlcbiAgICAgIC5vdmVycmlkZVByb3ZpZGVyKCdJRGF0YWJhc2VBZGFwdGVyJylcbiAgICAgIC51c2VWYWx1ZSh7fSlcbiAgICAgIC5jb21waWxlKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgZGVmaW5lZCcsICgpID0+IHtcbiAgICBleHBlY3QobW9kdWxlKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhdmUgZGF0YWJhc2UgY29uZmlnIHByb3ZpZGVyJywgKCkgPT4ge1xuICAgIGNvbnN0IGNvbmZpZyA9IG1vZHVsZS5nZXQoJ0RBVEFCQVNFX0NPTkZJRycpO1xuICAgIGV4cGVjdChjb25maWcpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KGNvbmZpZy50eXBlKS50b0JlKCdwb3N0Z3Jlc3FsJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGF2ZSBkYXRhYmFzZSBuYW1lIHByb3ZpZGVyJywgKCkgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSBtb2R1bGUuZ2V0KCdEQVRBQkFTRV9OQU1FJyk7XG4gICAgZXhwZWN0KG5hbWUpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=