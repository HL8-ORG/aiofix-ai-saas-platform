{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/memory-cache.service.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAqE;AACrE,mEAQuC;AAEvC,6CAAgE;AAwChE;;;;;;;;;;;;;;;;GAgBG;IAEU,kBAAkB;4BAD9B,IAAA,mBAAU,GAAE;;;;;QAmCX,YAGE,UAA6C,EAC7C,MAAyB;YADR,eAAU,GAAV,UAAU,CAAkB;YAlC/C,WAAW;YACM,UAAK,GAAG,IAAI,GAAG,EAA4B,CAAC;YAE7D,sBAAsB;YACL,gBAAW,GAAa,EAAE,CAAC;YAE5C,sBAAsB;YACL,oBAAe,GAAG,IAAI,GAAG,EAAkB,CAAC;YAK7D,WAAW;YACH,UAAK,GAAe;gBAC1B,YAAY,EAAE,CAAC;gBACf,IAAI,EAAE,CAAC;gBACP,MAAM,EAAE,CAAC;gBACT,OAAO,EAAE,CAAC;gBACV,SAAS,EAAE,CAAC;gBACZ,WAAW,EAAE,CAAC;gBACd,cAAc,EAAE,CAAC;gBACjB,cAAc,EAAE,CAAC;gBACjB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;YAKF,YAAY;YACJ,gBAAW,GAAG,KAAK,CAAC;YAQ1B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,SAAS;YACT,IAAI,CAAC,MAAM,GAAG;gBACZ,UAAU,EAAE,MAAM,EAAE,MAAM;gBAC1B,OAAO,EAAE,IAAI;gBACb,eAAe,EAAE,+BAAa,CAAC,GAAG;gBAClC,eAAe,EAAE,KAAK,EAAE,MAAM;gBAC9B,iBAAiB,EAAE,KAAK;gBACxB,gBAAgB,EAAE,KAAK;aACxB,CAAC;YAEF,UAAU;YACV,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAEzB,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,+CAA+C,IAAI,CAAC,SAAS,CAC3D,IAAI,CAAC,MAAM,CACZ,EAAE,EACH,oBAAU,CAAC,KAAK,CACjB,CAAC;QACJ,CAAC;QAED;;;WAGG;QACH,KAAK,CAAC,eAAe;YACnB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAExB,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;gBACtB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBACjC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;YAChC,CAAC;YAED,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACnB,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;YAC5B,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;YAE7B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,8BAA8B,EAAE,oBAAU,CAAC,KAAK,CAAC,CAAC;QACrE,CAAC;QAED;;;;;WAKG;QACH,KAAK,CAAC,GAAG,CAAU,GAAa;YAC9B,IAAI,CAAC;gBACH,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAChD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAExC,IAAI,CAAC,KAAK,EAAE,CAAC;oBACX,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;oBACxB,OAAO,IAAI,CAAC;gBACd,CAAC;gBAED,SAAS;gBACT,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;oBAChC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBAC7B,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;oBACtC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBACvC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;oBAC5B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;oBACxB,OAAO,IAAI,CAAC;gBACd,CAAC;gBAED,SAAS;gBACT,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;gBAExC,OAAO;gBACP,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBAEvB,OAAO,KAAK,CAAC,KAAK,CAAC,KAAU,CAAC;YAChC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,8BAA+B,KAAe,CAAC,OAAO,EAAE,EACxD,oBAAU,CAAC,KAAK,EAChB,SAAS,EACT,KAAc,CACf,CAAC;gBACF,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBACxB,OAAO,IAAI,CAAC;YACd,CAAC;QACH,CAAC;QAED;;;;;;;WAOG;QACH,KAAK,CAAC,GAAG,CACP,GAAa,EACb,KAAQ,EACR,OAA+B;YAE/B,IAAI,CAAC;gBACH,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAChD,MAAM,QAAQ,GAAG,OAAO,EAAE,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;gBAClE,MAAM,GAAG,GAAG,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;gBAEnD,QAAQ;gBACR,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAE5C,QAAQ;gBACR,MAAM,UAAU,GAAkB;oBAChC,KAAK;oBACL,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;oBACrB,SAAS,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,SAAS;oBACjD,WAAW,EAAE,CAAC;oBACd,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE;oBACxB,OAAO,EAAE,GAAG,CAAC,OAAO;oBACpB,IAAI,EAAE,GAAG,CAAC,IAAI;oBACd,QAAQ,EAAE;wBACR,QAAQ;wBACR,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB;wBACzC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB;qBACxC;iBACF,CAAC;gBAEF,cAAc;gBACd,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;oBAC3C,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAC5B,CAAC;gBAED,QAAQ;gBACR,MAAM,KAAK,GAAwB;oBACjC,KAAK,EAAE,UAAU;oBACjB,IAAI,EAAE,SAAS;oBACf,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;oBACrB,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE;oBACxB,WAAW,EAAE,CAAC;oBACd,eAAe,EAAE,CAAC;iBACnB,CAAC;gBAEF,eAAe;gBACf,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAChD,IAAI,aAAa,EAAE,CAAC;oBAClB,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,aAAa,CAAC,IAAI,CAAC;oBAC3C,4BAA4B;gBAC9B,CAAC;qBAAM,CAAC;oBACN,uBAAuB;oBACvB,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;gBAC5B,CAAC;gBAED,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;gBACjC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;gBACjC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;gBAEvC,OAAO;gBACP,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,SAAS,CAAC;gBAClC,IAAI,CAAC,KAAK,CAAC,WAAW;oBACpB,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC;wBACzB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY;wBAChD,CAAC,CAAC,CAAC,CAAC;gBAER,OAAO,IAAI,CAAC;YACd,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,8BAA+B,KAAe,CAAC,OAAO,EAAE,EACxD,oBAAU,CAAC,KAAK,EAChB,SAAS,EACT,KAAc,CACf,CAAC;gBACF,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;QAED;;;;;WAKG;QACH,KAAK,CAAC,MAAM,CAAC,GAAa;YACxB,IAAI,CAAC;gBACH,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAChD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAExC,IAAI,CAAC,KAAK,EAAE,CAAC;oBACX,OAAO,KAAK,CAAC;gBACf,CAAC;gBAED,SAAS;gBACT,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBAC7B,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;gBACtC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBAEvC,OAAO;gBACP,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;gBAC1C,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,CAAC;gBACnC,IAAI,CAAC,KAAK,CAAC,WAAW;oBACpB,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC;wBACzB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY;wBAChD,CAAC,CAAC,CAAC,CAAC;gBAER,OAAO,IAAI,CAAC;YACd,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,+BAAgC,KAAe,CAAC,OAAO,EAAE,EACzD,oBAAU,CAAC,KAAK,EAChB,SAAS,EACT,KAAc,CACf,CAAC;gBACF,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;QAED;;;;;WAKG;QACH,KAAK,CAAC,MAAM,CAAC,GAAa;YACxB,IAAI,CAAC;gBACH,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAChD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAExC,IAAI,CAAC,KAAK,EAAE,CAAC;oBACX,OAAO,KAAK,CAAC;gBACf,CAAC;gBAED,SAAS;gBACT,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;oBAChC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBAC7B,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;oBACtC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBACvC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;oBAC5B,OAAO,KAAK,CAAC;gBACf,CAAC;gBAED,OAAO,IAAI,CAAC;YACd,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,uCAAwC,KAAe,CAAC,OAAO,EAAE,EACjE,oBAAU,CAAC,KAAK,EAChB,SAAS,EACT,KAAc,CACf,CAAC;gBACF,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;QAED;;;;;WAKG;QACH,KAAK,CAAC,KAAK,CAAC,SAAkB;YAC5B,IAAI,CAAC;gBACH,IAAI,SAAS,EAAE,CAAC;oBACd,WAAW;oBACX,MAAM,YAAY,GAAa,EAAE,CAAC;oBAElC,KAAK,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;wBAC/C,IAAI,CAAC;4BACH,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;4BACnD,IAAI,SAAS,CAAC,SAAS,KAAK,SAAS,EAAE,CAAC;gCACtC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;4BAC/B,CAAC;wBACH,CAAC;wBAAC,OAAO,UAAU,EAAE,CAAC;4BACpB,eAAe;4BACf,SAAS;wBACX,CAAC;oBACH,CAAC;oBAED,mCAAmC;oBACnC,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;wBAC9B,KAAK,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;4BAC/C,IACE,SAAS,CAAC,QAAQ,CAAC,IAAI,SAAS,GAAG,CAAC;gCACpC,SAAS,CAAC,UAAU,CAAC,GAAG,SAAS,GAAG,CAAC,EACrC,CAAC;gCACD,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;4BAC/B,CAAC;wBACH,CAAC;oBACH,CAAC;oBAED,oBAAoB;oBACpB,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;wBAC9B,KAAK,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;4BAC/C,IAAI,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;gCAClC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;4BAC/B,CAAC;wBACH,CAAC;oBACH,CAAC;oBAED,gCAAgC;oBAChC,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;wBAC9B,KAAK,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;4BAC/C,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;4BACnC,IAAI,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;gCAC9B,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;4BAC/B,CAAC;wBACH,CAAC;oBACH,CAAC;oBAED,KAAK,MAAM,SAAS,IAAI,YAAY,EAAE,CAAC;wBACrC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;wBACxC,IAAI,KAAK,EAAE,CAAC;4BACV,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;4BAC7B,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;4BACtC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;4BACvC,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,CAAC;wBACrC,CAAC;oBACH,CAAC;oBAED,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;oBAC1C,IAAI,CAAC,KAAK,CAAC,WAAW;wBACpB,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC;4BACzB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY;4BAChD,CAAC,CAAC,CAAC,CAAC;gBACV,CAAC;qBAAM,CAAC;oBACN,SAAS;oBACT,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;oBACnB,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;oBAC5B,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;oBAC7B,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC,CAAC;oBAC5B,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;oBACzB,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC;gBAC7B,CAAC;gBAED,OAAO,IAAI,CAAC;YACd,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,yBAA0B,KAAe,CAAC,OAAO,EAAE,EACnD,oBAAU,CAAC,KAAK,EAChB,SAAS,EACT,KAAc,CACf,CAAC;gBACF,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;QAED;;;;WAIG;QACH,KAAK,CAAC,QAAQ;YACZ,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QAC3B,CAAC;QAED;;;;WAIG;QACH,KAAK,CAAC,SAAS;YACb,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAE7B,IAAI,CAAC;gBACH,uBAAuB;gBACvB,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;gBACvD,MAAM,SAAS,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;gBAE5C,MAAM,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;gBAClD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBAE1C,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;gBAE5C,OAAO;oBACL,OAAO,EAAE,SAAS,KAAK,IAAI;oBAC3B,SAAS,EAAE,IAAI;oBACf,YAAY;oBACZ,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;iBACtB,CAAC;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,wBAAyB,KAAe,CAAC,OAAO,EAAE,EAClD,oBAAU,CAAC,KAAK,CACjB,CAAC;gBACF,OAAO;oBACL,OAAO,EAAE,KAAK;oBACd,SAAS,EAAE,KAAK;oBAChB,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS;oBACpC,KAAK,EAAG,KAAe,CAAC,OAAO;oBAC/B,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;iBACtB,CAAC;YACJ,CAAC;QACH,CAAC;QAED;;;;WAIG;QACH,KAAK,CAAC,UAAU;YACd,IAAI,CAAC,KAAK,GAAG;gBACX,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;gBAC7B,IAAI,EAAE,CAAC;gBACP,MAAM,EAAE,CAAC;gBACT,OAAO,EAAE,CAAC;gBACV,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS;gBAC/B,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW;gBACnC,cAAc,EAAE,CAAC;gBACjB,cAAc,EAAE,CAAC;gBACjB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAC;QACJ,CAAC;QAED;;;;WAIG;QACK,iBAAiB;YACvB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,GAAG,EAAE;gBACnC,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC/B,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAClC,CAAC;QAED;;;;WAIG;QACK,qBAAqB;YAC3B,IAAI,IAAI,CAAC,WAAW;gBAAE,OAAO;YAE7B,MAAM,YAAY,GAAa,EAAE,CAAC;YAElC,KAAK,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;gBACtD,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;oBAChC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC/B,CAAC;YACH,CAAC;YAED,KAAK,MAAM,SAAS,IAAI,YAAY,EAAE,CAAC;gBACrC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBACxC,IAAI,KAAK,EAAE,CAAC;oBACV,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBAC7B,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;oBACtC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBACvC,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,CAAC;oBACnC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;gBAC9B,CAAC;YACH,CAAC;YAED,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YAC1C,IAAI,CAAC,KAAK,CAAC,WAAW;gBACpB,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC;oBACzB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY;oBAChD,CAAC,CAAC,CAAC,CAAC;YAER,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,cAAc,YAAY,CAAC,MAAM,kBAAkB,EACnD,oBAAU,CAAC,KAAK,CACjB,CAAC;YACJ,CAAC;QACH,CAAC;QAED;;;;;;WAMG;QACK,SAAS,CAAC,KAAiB;YACjC,OAAO,KAAK,CAAC,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,SAAS,CAAC;QACvE,CAAC;QAED;;;;;;WAMG;QACK,aAAa,CAAC,MAAe;YACnC,IAAI,CAAC;gBACH,OAAO,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;YAC3D,CAAC;YAAC,MAAM,CAAC;gBACP,OAAO,CAAC,CAAC;YACX,CAAC;QACH,CAAC;QAED;;;;;;WAMG;QACK,gBAAgB,CAAC,SAAiB,EAAE,KAAuB;YACjE,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAEvB,YAAY;YACZ,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;YAC1B,KAAK,CAAC,KAAK,CAAC,YAAY,GAAG,GAAG,CAAC;YAC/B,KAAK,CAAC,YAAY,GAAG,GAAG,CAAC;YACzB,KAAK,CAAC,WAAW,EAAE,CAAC;YAEpB,kBAAkB;YAClB,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC7D,MAAM,OAAO,GAAG,WAAW,GAAG,CAAC,CAAC;YAChC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC7C,KAAK,CAAC,eAAe,GAAG,OAAO,CAAC;YAEhC,kBAAkB;YAClB,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;YACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;QAED;;;;;WAKG;QACK,gBAAgB,CAAC,SAAiB;YACxC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;QAED;;;;;WAKG;QACK,qBAAqB,CAAC,SAAiB;YAC7C,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAClD,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;gBACf,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACpC,CAAC;QACH,CAAC;QAED;;;;;WAKG;QACK,UAAU,CAAC,QAAuB;YACxC,IAAI,UAA8B,CAAC;YAEnC,QAAQ,QAAQ,EAAE,CAAC;gBACjB,KAAK,+BAAa,CAAC,GAAG;oBACpB,yBAAyB;oBACzB,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;wBAChC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBACnC,CAAC;oBACD,MAAM;gBAER,KAAK,+BAAa,CAAC,GAAG,CAAC,CAAC,CAAC;oBACvB,cAAc;oBACd,IAAI,OAAO,GAAG,QAAQ,CAAC;oBACvB,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,EAAE,CAAC;wBACzD,IAAI,IAAI,GAAG,OAAO,EAAE,CAAC;4BACnB,OAAO,GAAG,IAAI,CAAC;4BACf,UAAU,GAAG,GAAG,CAAC;wBACnB,CAAC;oBACH,CAAC;oBACD,MAAM;gBACR,CAAC;gBAED,KAAK,+BAAa,CAAC,IAAI,CAAC,CAAC,CAAC;oBACxB,YAAY;oBACZ,IAAI,UAAU,GAAG,QAAQ,CAAC;oBAC1B,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;wBAChD,IAAI,KAAK,CAAC,SAAS,GAAG,UAAU,EAAE,CAAC;4BACjC,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC;4BAC7B,UAAU,GAAG,GAAG,CAAC;wBACnB,CAAC;oBACH,CAAC;oBACD,MAAM;gBACR,CAAC;gBAED,KAAK,+BAAa,CAAC,GAAG,CAAC,CAAC,CAAC;oBACvB,YAAY;oBACZ,IAAI,cAAc,GAAG,QAAQ,CAAC;oBAC9B,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;wBAChD,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,GAAG,cAAc,EAAE,CAAC;4BACpE,cAAc,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC;4BACvC,UAAU,GAAG,GAAG,CAAC;wBACnB,CAAC;oBACH,CAAC;oBACD,MAAM;gBACR,CAAC;YACH,CAAC;YAED,IAAI,UAAU,EAAE,CAAC;gBACf,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBACzC,IAAI,KAAK,EAAE,CAAC;oBACV,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBAC9B,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;oBACvC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBACxC,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,CAAC;oBACnC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;oBAC5B,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;oBAC1C,IAAI,CAAC,KAAK,CAAC,WAAW;wBACpB,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC;4BACzB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY;4BAChD,CAAC,CAAC,CAAC,CAAC;gBACV,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,0BAA0B;gBAC1B,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAChC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBACjC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;oBACzC,IAAI,KAAK,EAAE,CAAC;wBACV,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;wBAC9B,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;wBACvC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;wBACxC,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,IAAI,CAAC;wBACnC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;wBAC5B,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;wBAC1C,IAAI,CAAC,KAAK,CAAC,WAAW;4BACpB,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC;gCACzB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY;gCAChD,CAAC,CAAC,CAAC,CAAC;oBACV,CAAC;gBACH,CAAC;YACH,CAAC;YAED,qBAAqB;YACrB,IAAI,UAAU,EAAE,CAAC;gBACf,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;gBACvC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC;QAED;;;;;WAKG;QACK,WAAW,CAAC,KAAc;YAChC,IAAI,KAAK,EAAE,CAAC;gBACV,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YACpB,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YACtB,CAAC;YAED,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;YAClD,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/D,CAAC;;;;;QA5qBH,6KA6qBC;;;QA7qBY,uDAAkB;;;;AAAlB,gDAAkB","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/memory-cache.service.ts"],"sourcesContent":["import { Injectable, OnModuleDestroy, Inject } from '@nestjs/common';\nimport {\n  ICacheService,\n  CacheKey,\n  CacheValue,\n  CacheOptions,\n  CacheStats,\n  CacheHealth,\n  CacheStrategy,\n} from '../interfaces/cache.interface';\nimport type { ICacheKeyFactory } from '../interfaces/cache.interface';\nimport { PinoLoggerService, LogContext } from '@aiofix/logging';\n\n/**\n * @interface MemoryCacheConfig\n * @description 内存缓存配置接口\n */\nexport interface MemoryCacheConfig {\n  /** 默认过期时间（毫秒） */\n  defaultTtl?: number;\n  /** 最大缓存项数量 */\n  maxSize?: number;\n  /** 默认缓存策略 */\n  defaultStrategy?: CacheStrategy;\n  /** 清理间隔（毫秒） */\n  cleanupInterval?: number;\n  /** 是否启用压缩 */\n  enableCompression?: boolean;\n  /** 是否启用加密 */\n  enableEncryption?: boolean;\n}\n\n/**\n * @interface MemoryCacheEntry<T>\n * @description 内存缓存条目接口\n */\ninterface MemoryCacheEntry<T = any> {\n  /** 缓存值 */\n  value: CacheValue<T>;\n  /** 大小（字节） */\n  size: number;\n  /** 创建时间 */\n  createdAt: number;\n  /** 最后访问时间 */\n  lastAccessed: number;\n  /** 访问次数 */\n  accessCount: number;\n  /** 访问频率（用于LFU策略） */\n  accessFrequency: number;\n}\n\n/**\n * @class MemoryCacheService\n * @description 内存缓存服务实现\n *\n * 该服务提供高性能的内存缓存功能，支持多种缓存策略：\n * - LRU (Least Recently Used): 最近最少使用策略\n * - LFU (Least Frequently Used): 最少使用频率策略\n * - FIFO (First In First Out): 先进先出策略\n * - TTL (Time To Live): 基于时间过期策略\n *\n * 主要特性：\n * 1. 支持多种缓存策略，可根据业务需求选择\n * 2. 自动过期清理和内存管理\n * 3. 完整的统计信息和健康检查\n * 4. 线程安全的并发访问\n * 5. 可配置的压缩和加密功能\n */\n@Injectable()\nexport class MemoryCacheService implements ICacheService, OnModuleDestroy {\n  private readonly logger: PinoLoggerService;\n\n  /** 内存存储 */\n  private readonly cache = new Map<string, MemoryCacheEntry>();\n\n  /** 访问顺序队列（用于LRU策略） */\n  private readonly accessOrder: string[] = [];\n\n  /** 访问频率映射（用于LFU策略） */\n  private readonly accessFrequency = new Map<string, number>();\n\n  /** 配置选项 */\n  private readonly config: Required<MemoryCacheConfig>;\n\n  /** 统计信息 */\n  private stats: CacheStats = {\n    totalEntries: 0,\n    hits: 0,\n    misses: 0,\n    hitRate: 0,\n    totalSize: 0,\n    averageSize: 0,\n    expiredEntries: 0,\n    evictedEntries: 0,\n    lastReset: Date.now(),\n  };\n\n  /** 清理定时器 */\n  private cleanupTimer?: NodeJS.Timeout;\n\n  /** 是否已销毁 */\n  private isDestroyed = false;\n\n  constructor(\n    @Inject('MEMORY_CACHE_CONFIG')\n    @Inject('ICacheKeyFactory')\n    private readonly keyFactory: ICacheKeyFactory,\n    logger: PinoLoggerService,\n  ) {\n    this.logger = logger;\n    // 设置默认配置\n    this.config = {\n      defaultTtl: 300000, // 5分钟\n      maxSize: 1000,\n      defaultStrategy: CacheStrategy.LRU,\n      cleanupInterval: 60000, // 1分钟\n      enableCompression: false,\n      enableEncryption: false,\n    };\n\n    // 启动清理定时器\n    this.startCleanupTimer();\n\n    this.logger.info(\n      `MemoryCacheService initialized with config: ${JSON.stringify(\n        this.config,\n      )}`,\n      LogContext.CACHE,\n    );\n  }\n\n  /**\n   * @method onModuleDestroy\n   * @description 模块销毁时的清理工作\n   */\n  async onModuleDestroy(): Promise<void> {\n    this.isDestroyed = true;\n\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = undefined;\n    }\n\n    this.cache.clear();\n    this.accessOrder.length = 0;\n    this.accessFrequency.clear();\n\n    this.logger.info('MemoryCacheService destroyed', LogContext.CACHE);\n  }\n\n  /**\n   * @method get\n   * @description 获取缓存值\n   * @param {CacheKey} key 缓存键\n   * @returns {Promise<T | null>} 缓存值或null\n   */\n  async get<T = any>(key: CacheKey): Promise<T | null> {\n    try {\n      const keyString = this.keyFactory.toString(key);\n      const entry = this.cache.get(keyString);\n\n      if (!entry) {\n        this.updateStats(false);\n        return null;\n      }\n\n      // 检查是否过期\n      if (this.isExpired(entry.value)) {\n        this.cache.delete(keyString);\n        this.removeFromAccessOrder(keyString);\n        this.accessFrequency.delete(keyString);\n        this.stats.expiredEntries++;\n        this.updateStats(false);\n        return null;\n      }\n\n      // 更新访问信息\n      this.updateAccessInfo(keyString, entry);\n\n      // 更新统计\n      this.updateStats(true);\n\n      return entry.value.value as T;\n    } catch (error) {\n      this.logger.error(\n        `Error getting cache value: ${(error as Error).message}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.updateStats(false);\n      return null;\n    }\n  }\n\n  /**\n   * @method set\n   * @description 设置缓存值\n   * @param {CacheKey} key 缓存键\n   * @param {T} value 缓存值\n   * @param {Partial<CacheOptions>} options 缓存选项\n   * @returns {Promise<boolean>} 是否成功\n   */\n  async set<T = any>(\n    key: CacheKey,\n    value: T,\n    options?: Partial<CacheOptions>,\n  ): Promise<boolean> {\n    try {\n      const keyString = this.keyFactory.toString(key);\n      const strategy = options?.strategy ?? this.config.defaultStrategy;\n      const ttl = options?.ttl ?? this.config.defaultTtl;\n\n      // 计算值大小\n      const valueSize = this.calculateSize(value);\n\n      // 创建缓存值\n      const cacheValue: CacheValue<T> = {\n        value,\n        createdAt: Date.now(),\n        expiresAt: ttl > 0 ? Date.now() + ttl : undefined,\n        accessCount: 0,\n        lastAccessed: Date.now(),\n        version: key.version,\n        tags: key.tags,\n        metadata: {\n          strategy,\n          compressed: this.config.enableCompression,\n          encrypted: this.config.enableEncryption,\n        },\n      };\n\n      // 检查是否需要驱逐旧条目\n      if (this.cache.size >= this.config.maxSize) {\n        this.evictEntry(strategy);\n      }\n\n      // 存储新条目\n      const entry: MemoryCacheEntry<T> = {\n        value: cacheValue,\n        size: valueSize,\n        createdAt: Date.now(),\n        lastAccessed: Date.now(),\n        accessCount: 0,\n        accessFrequency: 0,\n      };\n\n      // 如果键已存在，先更新统计\n      const existingEntry = this.cache.get(keyString);\n      if (existingEntry) {\n        this.stats.totalSize -= existingEntry.size;\n        // 不减少 totalEntries，因为我们要替换它\n      } else {\n        // 只有新键才增加 totalEntries\n        this.stats.totalEntries++;\n      }\n\n      this.cache.set(keyString, entry);\n      this.addToAccessOrder(keyString);\n      this.accessFrequency.set(keyString, 0);\n\n      // 更新统计\n      this.stats.totalSize += valueSize;\n      this.stats.averageSize =\n        this.stats.totalEntries > 0\n          ? this.stats.totalSize / this.stats.totalEntries\n          : 0;\n\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Error setting cache value: ${(error as Error).message}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method delete\n   * @description 删除缓存值\n   * @param {CacheKey} key 缓存键\n   * @returns {Promise<boolean>} 是否成功\n   */\n  async delete(key: CacheKey): Promise<boolean> {\n    try {\n      const keyString = this.keyFactory.toString(key);\n      const entry = this.cache.get(keyString);\n\n      if (!entry) {\n        return false;\n      }\n\n      // 从缓存中删除\n      this.cache.delete(keyString);\n      this.removeFromAccessOrder(keyString);\n      this.accessFrequency.delete(keyString);\n\n      // 更新统计\n      this.stats.totalEntries = this.cache.size;\n      this.stats.totalSize -= entry.size;\n      this.stats.averageSize =\n        this.stats.totalEntries > 0\n          ? this.stats.totalSize / this.stats.totalEntries\n          : 0;\n\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Error deleting cache value: ${(error as Error).message}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method exists\n   * @description 检查缓存键是否存在\n   * @param {CacheKey} key 缓存键\n   * @returns {Promise<boolean>} 是否存在\n   */\n  async exists(key: CacheKey): Promise<boolean> {\n    try {\n      const keyString = this.keyFactory.toString(key);\n      const entry = this.cache.get(keyString);\n\n      if (!entry) {\n        return false;\n      }\n\n      // 检查是否过期\n      if (this.isExpired(entry.value)) {\n        this.cache.delete(keyString);\n        this.removeFromAccessOrder(keyString);\n        this.accessFrequency.delete(keyString);\n        this.stats.expiredEntries++;\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Error checking cache key existence: ${(error as Error).message}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method clear\n   * @description 清空缓存\n   * @param {string} namespace 命名空间（可选）\n   * @returns {Promise<boolean>} 是否成功\n   */\n  async clear(namespace?: string): Promise<boolean> {\n    try {\n      if (namespace) {\n        // 清空指定命名空间\n        const keysToDelete: string[] = [];\n\n        for (const [keyString] of this.cache.entries()) {\n          try {\n            const parsedKey = this.keyFactory.parse(keyString);\n            if (parsedKey.namespace === namespace) {\n              keysToDelete.push(keyString);\n            }\n          } catch (parseError) {\n            // 如果解析失败，跳过这个键\n            continue;\n          }\n        }\n\n        // 如果通过解析没有找到键，尝试直接匹配（因为键格式可能包含版本号）\n        if (keysToDelete.length === 0) {\n          for (const [keyString] of this.cache.entries()) {\n            if (\n              keyString.includes(`:${namespace}:`) ||\n              keyString.startsWith(`${namespace}:`)\n            ) {\n              keysToDelete.push(keyString);\n            }\n          }\n        }\n\n        // 如果还是没有找到，尝试更宽松的匹配\n        if (keysToDelete.length === 0) {\n          for (const [keyString] of this.cache.entries()) {\n            if (keyString.includes(namespace)) {\n              keysToDelete.push(keyString);\n            }\n          }\n        }\n\n        // 如果还是没有找到，尝试最宽松的匹配（包含命名空间的任何键）\n        if (keysToDelete.length === 0) {\n          for (const [keyString] of this.cache.entries()) {\n            const parts = keyString.split(':');\n            if (parts.includes(namespace)) {\n              keysToDelete.push(keyString);\n            }\n          }\n        }\n\n        for (const keyString of keysToDelete) {\n          const entry = this.cache.get(keyString);\n          if (entry) {\n            this.cache.delete(keyString);\n            this.removeFromAccessOrder(keyString);\n            this.accessFrequency.delete(keyString);\n            this.stats.totalSize -= entry.size;\n          }\n        }\n\n        this.stats.totalEntries = this.cache.size;\n        this.stats.averageSize =\n          this.stats.totalEntries > 0\n            ? this.stats.totalSize / this.stats.totalEntries\n            : 0;\n      } else {\n        // 清空所有缓存\n        this.cache.clear();\n        this.accessOrder.length = 0;\n        this.accessFrequency.clear();\n        this.stats.totalEntries = 0;\n        this.stats.totalSize = 0;\n        this.stats.averageSize = 0;\n      }\n\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Error clearing cache: ${(error as Error).message}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method getStats\n   * @description 获取缓存统计\n   * @returns {Promise<CacheStats>} 缓存统计\n   */\n  async getStats(): Promise<CacheStats> {\n    return { ...this.stats };\n  }\n\n  /**\n   * @method getHealth\n   * @description 获取缓存健康状态\n   * @returns {Promise<CacheHealth>} 缓存健康状态\n   */\n  async getHealth(): Promise<CacheHealth> {\n    const startTime = Date.now();\n\n    try {\n      // 简单的健康检查：尝试设置和获取一个测试值\n      const testKey = this.keyFactory.create('health-check');\n      const testValue = { timestamp: Date.now() };\n\n      await this.set(testKey, testValue, { ttl: 1000 });\n      const retrieved = await this.get(testKey);\n\n      const responseTime = Date.now() - startTime;\n\n      return {\n        healthy: retrieved !== null,\n        connected: true,\n        responseTime,\n        lastCheck: Date.now(),\n      };\n    } catch (error) {\n      this.logger.error(\n        `Health check failed: ${(error as Error).message}`,\n        LogContext.CACHE,\n      );\n      return {\n        healthy: false,\n        connected: false,\n        responseTime: Date.now() - startTime,\n        error: (error as Error).message,\n        lastCheck: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * @method resetStats\n   * @description 重置缓存统计\n   * @returns {Promise<void>}\n   */\n  async resetStats(): Promise<void> {\n    this.stats = {\n      totalEntries: this.cache.size,\n      hits: 0,\n      misses: 0,\n      hitRate: 0,\n      totalSize: this.stats.totalSize,\n      averageSize: this.stats.averageSize,\n      expiredEntries: 0,\n      evictedEntries: 0,\n      lastReset: Date.now(),\n    };\n  }\n\n  /**\n   * @private\n   * @method startCleanupTimer\n   * @description 启动清理定时器\n   */\n  private startCleanupTimer(): void {\n    this.cleanupTimer = setInterval(() => {\n      this.cleanupExpiredEntries();\n    }, this.config.cleanupInterval);\n  }\n\n  /**\n   * @private\n   * @method cleanupExpiredEntries\n   * @description 清理过期条目\n   */\n  private cleanupExpiredEntries(): void {\n    if (this.isDestroyed) return;\n\n    const keysToDelete: string[] = [];\n\n    for (const [keyString, entry] of this.cache.entries()) {\n      if (this.isExpired(entry.value)) {\n        keysToDelete.push(keyString);\n      }\n    }\n\n    for (const keyString of keysToDelete) {\n      const entry = this.cache.get(keyString);\n      if (entry) {\n        this.cache.delete(keyString);\n        this.removeFromAccessOrder(keyString);\n        this.accessFrequency.delete(keyString);\n        this.stats.totalSize -= entry.size;\n        this.stats.expiredEntries++;\n      }\n    }\n\n    this.stats.totalEntries = this.cache.size;\n    this.stats.averageSize =\n      this.stats.totalEntries > 0\n        ? this.stats.totalSize / this.stats.totalEntries\n        : 0;\n\n    if (keysToDelete.length > 0) {\n      this.logger.debug(\n        `Cleaned up ${keysToDelete.length} expired entries`,\n        LogContext.CACHE,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method isExpired\n   * @description 检查缓存值是否过期\n   * @param {CacheValue} value 缓存值\n   * @returns {boolean} 是否过期\n   */\n  private isExpired(value: CacheValue): boolean {\n    return value.expiresAt !== undefined && Date.now() > value.expiresAt;\n  }\n\n  /**\n   * @private\n   * @method calculateSize\n   * @description 计算值大小\n   * @param {any} value 值\n   * @returns {number} 大小（字节）\n   */\n  private calculateSize(_value: unknown): number {\n    try {\n      return Buffer.byteLength(JSON.stringify(_value), 'utf8');\n    } catch {\n      return 0;\n    }\n  }\n\n  /**\n   * @private\n   * @method updateAccessInfo\n   * @description 更新访问信息\n   * @param {string} keyString 键字符串\n   * @param {MemoryCacheEntry} entry 缓存条目\n   */\n  private updateAccessInfo(keyString: string, entry: MemoryCacheEntry): void {\n    const now = Date.now();\n\n    // 更新访问次数和时间\n    entry.value.accessCount++;\n    entry.value.lastAccessed = now;\n    entry.lastAccessed = now;\n    entry.accessCount++;\n\n    // 更新访问频率（用于LFU策略）\n    const currentFreq = this.accessFrequency.get(keyString) ?? 0;\n    const newFreq = currentFreq + 1;\n    this.accessFrequency.set(keyString, newFreq);\n    entry.accessFrequency = newFreq;\n\n    // 更新访问顺序（用于LRU策略）\n    this.removeFromAccessOrder(keyString);\n    this.accessOrder.push(keyString);\n  }\n\n  /**\n   * @private\n   * @method addToAccessOrder\n   * @description 添加到访问顺序\n   * @param {string} keyString 键字符串\n   */\n  private addToAccessOrder(keyString: string): void {\n    this.accessOrder.push(keyString);\n  }\n\n  /**\n   * @private\n   * @method removeFromAccessOrder\n   * @description 从访问顺序中移除\n   * @param {string} keyString 键字符串\n   */\n  private removeFromAccessOrder(keyString: string): void {\n    const index = this.accessOrder.indexOf(keyString);\n    if (index > -1) {\n      this.accessOrder.splice(index, 1);\n    }\n  }\n\n  /**\n   * @private\n   * @method evictEntry\n   * @description 驱逐缓存条目\n   * @param {CacheStrategy} strategy 缓存策略\n   */\n  private evictEntry(strategy: CacheStrategy): void {\n    let keyToEvict: string | undefined;\n\n    switch (strategy) {\n      case CacheStrategy.LRU:\n        // 驱逐最近最少使用的条目（访问顺序中的第一个）\n        if (this.accessOrder.length > 0) {\n          keyToEvict = this.accessOrder[0];\n        }\n        break;\n\n      case CacheStrategy.LFU: {\n        // 驱逐最少使用频率的条目\n        let minFreq = Infinity;\n        for (const [key, freq] of this.accessFrequency.entries()) {\n          if (freq < minFreq) {\n            minFreq = freq;\n            keyToEvict = key;\n          }\n        }\n        break;\n      }\n\n      case CacheStrategy.FIFO: {\n        // 驱逐最早创建的条目\n        let oldestTime = Infinity;\n        for (const [key, entry] of this.cache.entries()) {\n          if (entry.createdAt < oldestTime) {\n            oldestTime = entry.createdAt;\n            keyToEvict = key;\n          }\n        }\n        break;\n      }\n\n      case CacheStrategy.TTL: {\n        // 驱逐最早过期的条目\n        let earliestExpiry = Infinity;\n        for (const [key, entry] of this.cache.entries()) {\n          if (entry.value.expiresAt && entry.value.expiresAt < earliestExpiry) {\n            earliestExpiry = entry.value.expiresAt;\n            keyToEvict = key;\n          }\n        }\n        break;\n      }\n    }\n\n    if (keyToEvict) {\n      const entry = this.cache.get(keyToEvict);\n      if (entry) {\n        this.cache.delete(keyToEvict);\n        this.removeFromAccessOrder(keyToEvict);\n        this.accessFrequency.delete(keyToEvict);\n        this.stats.totalSize -= entry.size;\n        this.stats.evictedEntries++;\n        this.stats.totalEntries = this.cache.size;\n        this.stats.averageSize =\n          this.stats.totalEntries > 0\n            ? this.stats.totalSize / this.stats.totalEntries\n            : 0;\n      }\n    } else {\n      // 如果没有找到要驱逐的键，使用默认策略（LRU）\n      if (this.accessOrder.length > 0) {\n        keyToEvict = this.accessOrder[0];\n        const entry = this.cache.get(keyToEvict);\n        if (entry) {\n          this.cache.delete(keyToEvict);\n          this.removeFromAccessOrder(keyToEvict);\n          this.accessFrequency.delete(keyToEvict);\n          this.stats.totalSize -= entry.size;\n          this.stats.evictedEntries++;\n          this.stats.totalEntries = this.cache.size;\n          this.stats.averageSize =\n            this.stats.totalEntries > 0\n              ? this.stats.totalSize / this.stats.totalEntries\n              : 0;\n        }\n      }\n    }\n\n    // 确保驱逐后访问顺序和频率映射的一致性\n    if (keyToEvict) {\n      this.removeFromAccessOrder(keyToEvict);\n      this.accessFrequency.delete(keyToEvict);\n    }\n  }\n\n  /**\n   * @private\n   * @method updateStats\n   * @description 更新统计信息\n   * @param {boolean} isHit 是否命中\n   */\n  private updateStats(isHit: boolean): void {\n    if (isHit) {\n      this.stats.hits++;\n    } else {\n      this.stats.misses++;\n    }\n\n    const total = this.stats.hits + this.stats.misses;\n    this.stats.hitRate = total > 0 ? this.stats.hits / total : 0;\n  }\n}\n"],"version":3}