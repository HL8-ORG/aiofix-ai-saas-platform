129e4c161689f2286d013fa5d33538c3
"use strict";
/**
 * @file database.module.spec.ts
 * @description 数据库模块单元测试
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the adapters to avoid actual database connections
jest.mock('./adapters/postgresql.adapter');
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const database_module_1 = require("./database.module");
const database_config_1 = require("./config/database.config");
describe('DatabaseModule', () => {
    let module;
    beforeEach(async () => {
        module = await testing_1.Test.createTestingModule({
            imports: [
                config_1.ConfigModule.forRoot({
                    isGlobal: true,
                    envFilePath: '.env.test',
                }),
                database_module_1.DatabaseModule.register({
                    postgresql: false, // 禁用PostgreSQL以避免连接测试
                }),
            ],
        }).compile();
    });
    afterEach(async () => {
        if (module) {
            await module.close();
        }
    });
    describe('Module Registration', () => {
        it('should be defined', () => {
            expect(module).toBeDefined();
        });
        it('should have database config provider', () => {
            const config = module.get('DATABASE_CONFIG');
            expect(config).toBeDefined();
            expect(config).toBeInstanceOf(database_config_1.DatabaseConfig);
        });
        it('should have database name provider', () => {
            const name = module.get('DATABASE_NAME');
            expect(name).toBeDefined();
            expect(name).toBe('postgresql');
        });
    });
    describe('Service Providers', () => {
        it('should provide DATABASE_CONFIG', () => {
            const config = module.get('DATABASE_CONFIG');
            expect(config).toBeDefined();
            expect(config).toBeInstanceOf(database_config_1.DatabaseConfig);
        });
        it('should provide DATABASE_NAME', () => {
            const name = module.get('DATABASE_NAME');
            expect(name).toBeDefined();
            expect(name).toBe('postgresql');
        });
    });
    describe('Configuration Validation', () => {
        it('should validate database configuration', () => {
            const config = module.get('DATABASE_CONFIG');
            expect(config).toBeDefined();
            expect(config).toBeInstanceOf(database_config_1.DatabaseConfig);
            // 测试配置方法是否存在
            expect(typeof config.getPostgresConfig).toBe('function');
            expect(typeof config.getMongoDBConfig).toBe('function');
        });
    });
    describe('Module Exports', () => {
        it('should export DATABASE_CONFIG', () => {
            const config = module.get('DATABASE_CONFIG');
            expect(config).toBeDefined();
        });
        it('should export DATABASE_NAME', () => {
            const name = module.get('DATABASE_NAME');
            expect(name).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJsaWdsZS9WMS9BaW9maXgvYWlvZml4LWFpLXNhYXMtcGxhdGZvcm0vcGFja2FnZXMvZGF0YWJhc2Uvc3JjL2RhdGFiYXNlLm1vZHVsZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7O0FBT0gseURBQXlEO0FBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQU4zQyw2Q0FBc0Q7QUFDdEQsMkNBQThDO0FBQzlDLHVEQUFtRDtBQUNuRCw4REFBMEQ7QUFLMUQsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixJQUFJLE1BQXFCLENBQUM7SUFFMUIsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1BQU0sR0FBRyxNQUFNLGNBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUN0QyxPQUFPLEVBQUU7Z0JBQ1AscUJBQVksQ0FBQyxPQUFPLENBQUM7b0JBQ25CLFFBQVEsRUFBRSxJQUFJO29CQUNkLFdBQVcsRUFBRSxXQUFXO2lCQUN6QixDQUFDO2dCQUNGLGdDQUFjLENBQUMsUUFBUSxDQUFDO29CQUN0QixVQUFVLEVBQUUsS0FBSyxFQUFFLHNCQUFzQjtpQkFDMUMsQ0FBQzthQUNIO1NBQ0YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2YsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNYLE1BQU0sTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZCLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUU7UUFDbkMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtZQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO1lB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c2Fhcy1wbGF0Zm9ybS9wYWNrYWdlcy9kYXRhYmFzZS9zcmMvZGF0YWJhc2UubW9kdWxlLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBkYXRhYmFzZS5tb2R1bGUuc3BlYy50c1xuICogQGRlc2NyaXB0aW9uIOaVsOaNruW6k+aooeWdl+WNleWFg+a1i+ivlVxuICovXG5cbmltcG9ydCB7IFRlc3QsIFRlc3RpbmdNb2R1bGUgfSBmcm9tICdAbmVzdGpzL3Rlc3RpbmcnO1xuaW1wb3J0IHsgQ29uZmlnTW9kdWxlIH0gZnJvbSAnQG5lc3Rqcy9jb25maWcnO1xuaW1wb3J0IHsgRGF0YWJhc2VNb2R1bGUgfSBmcm9tICcuL2RhdGFiYXNlLm1vZHVsZSc7XG5pbXBvcnQgeyBEYXRhYmFzZUNvbmZpZyB9IGZyb20gJy4vY29uZmlnL2RhdGFiYXNlLmNvbmZpZyc7XG5cbi8vIE1vY2sgdGhlIGFkYXB0ZXJzIHRvIGF2b2lkIGFjdHVhbCBkYXRhYmFzZSBjb25uZWN0aW9uc1xuamVzdC5tb2NrKCcuL2FkYXB0ZXJzL3Bvc3RncmVzcWwuYWRhcHRlcicpO1xuXG5kZXNjcmliZSgnRGF0YWJhc2VNb2R1bGUnLCAoKSA9PiB7XG4gIGxldCBtb2R1bGU6IFRlc3RpbmdNb2R1bGU7XG5cbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgbW9kdWxlID0gYXdhaXQgVGVzdC5jcmVhdGVUZXN0aW5nTW9kdWxlKHtcbiAgICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29uZmlnTW9kdWxlLmZvclJvb3Qoe1xuICAgICAgICAgIGlzR2xvYmFsOiB0cnVlLFxuICAgICAgICAgIGVudkZpbGVQYXRoOiAnLmVudi50ZXN0JyxcbiAgICAgICAgfSksXG4gICAgICAgIERhdGFiYXNlTW9kdWxlLnJlZ2lzdGVyKHtcbiAgICAgICAgICBwb3N0Z3Jlc3FsOiBmYWxzZSwgLy8g56aB55SoUG9zdGdyZVNRTOS7pemBv+WFjei/nuaOpea1i+ivlVxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgfSkuY29tcGlsZSgpO1xuICB9KTtcblxuICBhZnRlckVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGlmIChtb2R1bGUpIHtcbiAgICAgIGF3YWl0IG1vZHVsZS5jbG9zZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ01vZHVsZSBSZWdpc3RyYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBiZSBkZWZpbmVkJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KG1vZHVsZSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGF2ZSBkYXRhYmFzZSBjb25maWcgcHJvdmlkZXInLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb25maWcgPSBtb2R1bGUuZ2V0KCdEQVRBQkFTRV9DT05GSUcnKTtcbiAgICAgIGV4cGVjdChjb25maWcpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoY29uZmlnKS50b0JlSW5zdGFuY2VPZihEYXRhYmFzZUNvbmZpZyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhdmUgZGF0YWJhc2UgbmFtZSBwcm92aWRlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBtb2R1bGUuZ2V0KCdEQVRBQkFTRV9OQU1FJyk7XG4gICAgICBleHBlY3QobmFtZSkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChuYW1lKS50b0JlKCdwb3N0Z3Jlc3FsJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTZXJ2aWNlIFByb3ZpZGVycycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHByb3ZpZGUgREFUQUJBU0VfQ09ORklHJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29uZmlnID0gbW9kdWxlLmdldCgnREFUQUJBU0VfQ09ORklHJyk7XG4gICAgICBleHBlY3QoY29uZmlnKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGNvbmZpZykudG9CZUluc3RhbmNlT2YoRGF0YWJhc2VDb25maWcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwcm92aWRlIERBVEFCQVNFX05BTUUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBuYW1lID0gbW9kdWxlLmdldCgnREFUQUJBU0VfTkFNRScpO1xuICAgICAgZXhwZWN0KG5hbWUpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QobmFtZSkudG9CZSgncG9zdGdyZXNxbCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ29uZmlndXJhdGlvbiBWYWxpZGF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgZGF0YWJhc2UgY29uZmlndXJhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IG1vZHVsZS5nZXQoJ0RBVEFCQVNFX0NPTkZJRycpO1xuICAgICAgZXhwZWN0KGNvbmZpZykudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChjb25maWcpLnRvQmVJbnN0YW5jZU9mKERhdGFiYXNlQ29uZmlnKTtcbiAgICAgIFxuICAgICAgLy8g5rWL6K+V6YWN572u5pa55rOV5piv5ZCm5a2Y5ZyoXG4gICAgICBleHBlY3QodHlwZW9mIGNvbmZpZy5nZXRQb3N0Z3Jlc0NvbmZpZykudG9CZSgnZnVuY3Rpb24nKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgY29uZmlnLmdldE1vbmdvREJDb25maWcpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdNb2R1bGUgRXhwb3J0cycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGV4cG9ydCBEQVRBQkFTRV9DT05GSUcnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb25maWcgPSBtb2R1bGUuZ2V0KCdEQVRBQkFTRV9DT05GSUcnKTtcbiAgICAgIGV4cGVjdChjb25maWcpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGV4cG9ydCBEQVRBQkFTRV9OQU1FJywgKCkgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IG1vZHVsZS5nZXQoJ0RBVEFCQVNFX05BTUUnKTtcbiAgICAgIGV4cGVjdChuYW1lKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9