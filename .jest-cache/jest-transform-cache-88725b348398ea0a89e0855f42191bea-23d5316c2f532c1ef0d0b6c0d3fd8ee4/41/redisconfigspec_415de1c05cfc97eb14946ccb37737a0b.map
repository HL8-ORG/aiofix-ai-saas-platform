{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/config/redis.config.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/config/redis.config.spec.ts"],"sourcesContent":["/**\n * @file redis.config.spec.ts\n * @description Redis配置服务单元测试\n */\n\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { RedisConfig } from './redis.config';\n\ndescribe('RedisConfig', () => {\n  let service: RedisConfig;\n  let configService: ConfigService;\n\n  beforeEach(async () => {\n    const mockConfigService = {\n      get: jest.fn().mockReturnValue(undefined),\n    };\n\n    const mockLogger = { \n      error: jest.fn(),\n      info: jest.fn(),\n    };\n\n    service = new RedisConfig(mockConfigService as any, mockLogger as any);\n    configService = mockConfigService as any;\n  });\n\n  describe('getCacheConfig', () => {\n    it('should return default cache configuration', () => {\n      jest.spyOn(configService, 'get').mockReturnValue(undefined);\n\n      const config = service.getCacheConfig();\n\n      expect(config).toEqual({\n        host: 'localhost',\n        port: 6379,\n        password: '',\n        db: 0,\n        pool: {\n          min: 2,\n          max: 10,\n          idleTimeoutMillis: 30000,\n        },\n        cache: {\n          ttl: 3600,\n          maxItems: 1000,\n          checkPeriod: 600,\n        },\n        tenant: {\n          keyPrefix: 'tenant:',\n          namespaceSeparator: ':',\n          defaultTenant: 'platform',\n        },\n        retryDelayOnFailover: 100,\n        maxRetriesPerRequest: 3,\n        lazyConnect: true,\n        keepAlive: 30000,\n        cluster: {\n          enabled: false,\n          nodes: [],\n        },\n      });\n    });\n\n    it('should return configured cache configuration', () => {\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const configs: Record<string, string> = {\n          REDIS_HOST: 'redis-host',\n          REDIS_PORT: '6380',\n          REDIS_PASSWORD: 'redis_password',\n          REDIS_DB: '1',\n          REDIS_CACHE_PREFIX: 'custom:cache:',\n          REDIS_CACHE_TTL: '7200',\n          REDIS_MAX_RETRIES: '5',\n          REDIS_RETRY_DELAY: '200',\n          REDIS_CONNECT_TIMEOUT: '15000',\n          REDIS_COMMAND_TIMEOUT: '8000',\n        };\n        return configs[key];\n      });\n\n      const config = service.getCacheConfig();\n\n      expect(config).toEqual({\n        host: 'redis-host',\n        port: 6380,\n        password: 'redis_password',\n        db: 1,\n        pool: {\n          min: 2,\n          max: 10,\n          idleTimeoutMillis: 30000,\n        },\n        cache: {\n          ttl: 3600,\n          maxItems: 1000,\n          checkPeriod: 600,\n        },\n        tenant: {\n          keyPrefix: 'tenant:',\n          namespaceSeparator: ':',\n          defaultTenant: 'platform',\n        },\n        retryDelayOnFailover: 100,\n        maxRetriesPerRequest: 3,\n        lazyConnect: true,\n        keepAlive: 30000,\n        cluster: {\n          enabled: false,\n          nodes: [],\n        },\n      });\n    });\n  });\n\n  describe('getQueueConfig', () => {\n    it('should return default message queue configuration', () => {\n      jest.spyOn(configService, 'get').mockReturnValue(undefined);\n\n      const config = service.getQueueConfig();\n\n      expect(config).toEqual({\n        redis: {\n          host: 'localhost',\n          port: 6379,\n          password: '',\n          db: 1,\n        },\n        queue: {\n          concurrency: 5,\n          attempts: 3,\n          backoff: {\n            type: 'exponential',\n            delay: 2000,\n          },\n          removeOnComplete: 100,\n          removeOnFail: 50,\n        },\n        queues: {\n          'domain-events': {\n            concurrency: 10,\n            attempts: 5,\n            backoff: { type: 'exponential', delay: 2000 },\n          },\n          notifications: {\n            concurrency: 20,\n            attempts: 3,\n            backoff: { type: 'fixed', delay: 1000 },\n          },\n          emails: {\n            concurrency: 5,\n            attempts: 3,\n            backoff: { type: 'exponential', delay: 5000 },\n          },\n          'push-notifications': {\n            concurrency: 15,\n            attempts: 3,\n            backoff: { type: 'fixed', delay: 2000 },\n          },\n          sms: {\n            concurrency: 10,\n            attempts: 3,\n            backoff: { type: 'exponential', delay: 3000 },\n          },\n        },\n        tenant: {\n          keyPrefix: 'queue:tenant:',\n          namespaceSeparator: ':',\n        },\n      });\n    });\n\n    it('should return configured message queue configuration', () => {\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const configs: Record<string, string> = {\n          REDIS_HOST: 'redis-host',\n          REDIS_PORT: '6380',\n          REDIS_PASSWORD: 'redis_password',\n          REDIS_QUEUE_DB: '2',\n          REDIS_QUEUE_PREFIX: 'custom:queue:',\n          REDIS_MAX_RETRIES: '5',\n          REDIS_RETRY_DELAY: '200',\n        };\n        return configs[key];\n      });\n\n      const config = service.getQueueConfig();\n\n      expect(config).toEqual({\n        redis: {\n          host: 'localhost',\n          port: 6379,\n          password: '',\n          db: 1,\n        },\n        queue: {\n          concurrency: 5,\n          attempts: 3,\n          backoff: {\n            type: 'exponential',\n            delay: 2000,\n          },\n          removeOnComplete: 100,\n          removeOnFail: 50,\n        },\n        queues: {\n          'domain-events': {\n            concurrency: 10,\n            attempts: 5,\n            backoff: { type: 'exponential', delay: 2000 },\n          },\n          notifications: {\n            concurrency: 20,\n            attempts: 3,\n            backoff: { type: 'fixed', delay: 1000 },\n          },\n          emails: {\n            concurrency: 5,\n            attempts: 3,\n            backoff: { type: 'exponential', delay: 5000 },\n          },\n          'push-notifications': {\n            concurrency: 15,\n            attempts: 3,\n            backoff: { type: 'fixed', delay: 2000 },\n          },\n          sms: {\n            concurrency: 10,\n            attempts: 3,\n            backoff: { type: 'exponential', delay: 3000 },\n          },\n        },\n        tenant: {\n          keyPrefix: 'queue:tenant:',\n          namespaceSeparator: ':',\n        },\n      });\n    });\n  });\n\n  describe('validateConfig', () => {\n    it('should validate correct Redis config', () => {\n      // Mock configService to return valid values\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const configs: Record<string, string> = {\n          REDIS_HOST: 'localhost',\n          REDIS_PORT: '6379',\n          REDIS_PASSWORD: 'password',\n          REDIS_DB: '0',\n          BULL_REDIS_HOST: 'localhost',\n          BULL_REDIS_PORT: '6379',\n          BULL_REDIS_PASSWORD: 'password',\n          BULL_REDIS_DB: '1',\n        };\n        return configs[key];\n      });\n\n      const isValid = service.validateConfig();\n      expect(isValid).toBe(true);\n    });\n\n    it('should reject config with missing required fields', () => {\n      // Mock configService to return invalid values (missing required fields)\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const configs: Record<string, string> = {\n          REDIS_HOST: '', // 空主机名\n          REDIS_PORT: '6379',\n          REDIS_PASSWORD: 'password',\n          REDIS_DB: '0',\n          BULL_REDIS_HOST: 'localhost',\n          BULL_REDIS_PORT: '6379',\n          BULL_REDIS_PASSWORD: 'password',\n          BULL_REDIS_DB: '1',\n        };\n        return configs[key];\n      });\n\n      const isValid = service.validateConfig();\n      expect(isValid).toBe(false);\n    });\n\n    it('should reject config with invalid port', () => {\n      // Mock configService to return invalid port\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const configs: Record<string, string> = {\n          REDIS_HOST: 'localhost',\n          REDIS_PORT: 'invalid', // 无效端口\n          REDIS_PASSWORD: 'password',\n          REDIS_DB: '0',\n          BULL_REDIS_HOST: 'localhost',\n          BULL_REDIS_PORT: '6379',\n          BULL_REDIS_PASSWORD: 'password',\n          BULL_REDIS_DB: '1',\n        };\n        return configs[key];\n      });\n\n      const isValid = service.validateConfig();\n      expect(isValid).toBe(false);\n    });\n\n    it('should reject config with invalid db number', () => {\n      // Mock configService to return invalid db number\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const configs: Record<string, string> = {\n          REDIS_HOST: 'localhost',\n          REDIS_PORT: '6379',\n          REDIS_PASSWORD: 'password',\n          REDIS_DB: 'invalid', // 无效数据库号\n          BULL_REDIS_HOST: 'localhost',\n          BULL_REDIS_PORT: '6379',\n          BULL_REDIS_PASSWORD: 'password',\n          BULL_REDIS_DB: '1',\n        };\n        return configs[key];\n      });\n\n      const isValid = service.validateConfig();\n      expect(isValid).toBe(false);\n    });\n  });\n});\n"],"version":3}