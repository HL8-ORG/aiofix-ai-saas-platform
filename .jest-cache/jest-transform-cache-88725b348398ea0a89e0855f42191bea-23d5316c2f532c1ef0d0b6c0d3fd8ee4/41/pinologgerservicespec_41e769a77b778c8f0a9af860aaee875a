6e5c3c51690470a66aae69a9c48e0f1e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const event_emitter_1 = require("@nestjs/event-emitter");
const nestjs_cls_1 = require("nestjs-cls");
const pino_logger_service_1 = require("./pino-logger.service");
const pino_logger_config_service_1 = require("./pino-logger-config.service");
const pino_logger_factory_1 = require("../factories/pino-logger.factory");
const logging_interface_1 = require("../interfaces/logging.interface");
describe('PinoLoggerService', () => {
    let service;
    let eventEmitter;
    let configService;
    let loggerFactory;
    // let _clsService: ClsService; // 暂时注释掉，因为测试中没有使用
    beforeEach(async () => {
        const mockLogger = {
            debug: jest.fn(),
            info: jest.fn(),
            warn: jest.fn(),
            error: jest.fn(),
            fatal: jest.fn(),
            trace: jest.fn(),
            child: jest.fn(),
            flush: jest.fn(),
        };
        const mockConfigService = {
            getConfig: jest.fn().mockReturnValue({
                level: 'info',
                format: 'json',
                colorize: true,
                timestamp: true,
                requestId: true,
                tenantId: true,
                userId: true,
                performance: true,
                stackTrace: true,
                filePath: undefined,
                rotation: { maxSize: '10m', maxFiles: 5, interval: '1d' },
                remote: undefined,
            }),
            getLevel: jest.fn().mockReturnValue('info'),
            setLevel: jest.fn(),
            updateConfig: jest.fn(),
        };
        const mockLoggerFactory = {
            createLogger: jest.fn().mockReturnValue(mockLogger),
            createChildLogger: jest.fn().mockReturnValue(mockLogger),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                {
                    provide: pino_logger_service_1.PinoLoggerService,
                    useFactory: (eventEmitter, configService, loggerFactory, cls) => {
                        return new pino_logger_service_1.PinoLoggerService(eventEmitter, configService, loggerFactory, cls);
                    },
                    inject: [
                        event_emitter_1.EventEmitter2,
                        pino_logger_config_service_1.PinoLoggerConfigService,
                        pino_logger_factory_1.PinoLoggerFactory,
                        nestjs_cls_1.ClsService,
                    ],
                },
                {
                    provide: pino_logger_config_service_1.PinoLoggerConfigService,
                    useValue: mockConfigService,
                },
                {
                    provide: pino_logger_factory_1.PinoLoggerFactory,
                    useValue: mockLoggerFactory,
                },
                {
                    provide: event_emitter_1.EventEmitter2,
                    useValue: {
                        emit: jest.fn(),
                    },
                },
                {
                    provide: nestjs_cls_1.ClsService,
                    useValue: {
                        get: jest.fn(),
                        set: jest.fn(),
                        run: jest.fn(),
                        runWith: jest.fn(),
                        enter: jest.fn(),
                        exit: jest.fn(),
                        isActive: jest.fn().mockReturnValue(true),
                    },
                },
            ],
        }).compile();
        service = module.get(pino_logger_service_1.PinoLoggerService);
        eventEmitter = module.get(event_emitter_1.EventEmitter2);
        configService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
        loggerFactory = module.get(pino_logger_factory_1.PinoLoggerFactory);
        // _clsService = module.get<ClsService>(ClsService);
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('basic logging', () => {
        it('should log debug messages', () => {
            const spy = jest.spyOn(service, 'log');
            service.debug('Debug message', logging_interface_1.LogContext.SYSTEM, { test: 'data' });
            expect(spy).toHaveBeenCalledWith('debug', 'Debug message', logging_interface_1.LogContext.SYSTEM, { test: 'data' }, undefined);
        });
        it('should log info messages', () => {
            const spy = jest.spyOn(service, 'log');
            service.info('Info message', logging_interface_1.LogContext.BUSINESS, { operation: 'test' });
            expect(spy).toHaveBeenCalledWith('info', 'Info message', logging_interface_1.LogContext.BUSINESS, { operation: 'test' }, undefined);
        });
        it('should log warn messages', () => {
            const spy = jest.spyOn(service, 'log');
            service.warn('Warning message', logging_interface_1.LogContext.AUTH, { userId: '123' });
            expect(spy).toHaveBeenCalledWith('warn', 'Warning message', logging_interface_1.LogContext.AUTH, { userId: '123' }, undefined);
        });
        it('should log error messages', () => {
            const error = new Error('Test error');
            const spy = jest.spyOn(service, 'log');
            service.error('Error message', logging_interface_1.LogContext.DATABASE, { query: 'SELECT *' }, error);
            expect(spy).toHaveBeenCalledWith('error', 'Error message', logging_interface_1.LogContext.DATABASE, { query: 'SELECT *' }, error);
        });
        it('should log fatal messages', () => {
            const spy = jest.spyOn(service, 'log');
            service.fatal('Fatal message', logging_interface_1.LogContext.SYSTEM, { critical: true });
            expect(spy).toHaveBeenCalledWith('fatal', 'Fatal message', logging_interface_1.LogContext.SYSTEM, { critical: true }, undefined);
        });
        it('should log trace messages', () => {
            const spy = jest.spyOn(service, 'log');
            service.trace('Trace message', logging_interface_1.LogContext.PERFORMANCE, { duration: 100 });
            expect(spy).toHaveBeenCalledWith('trace', 'Trace message', logging_interface_1.LogContext.PERFORMANCE, { duration: 100 }, undefined);
        });
    });
    describe('specialized logging', () => {
        it('should log performance messages', () => {
            const spy = jest.spyOn(service, 'log');
            service.performance('database_query', 150, logging_interface_1.LogContext.DATABASE, {
                table: 'users',
            });
            expect(spy).toHaveBeenCalledWith('info', 'Performance: database_query took 150ms', logging_interface_1.LogContext.DATABASE, {
                table: 'users',
                operation: 'database_query',
                duration: 150,
                type: 'performance',
            });
        });
        it('should log business messages', () => {
            const spy = jest.spyOn(service, 'log');
            service.business('User registered', {
                userId: '123',
                email: 'test@example.com',
            });
            expect(spy).toHaveBeenCalledWith('info', 'User registered', logging_interface_1.LogContext.BUSINESS, {
                userId: '123',
                email: 'test@example.com',
            });
        });
        it('should log security messages', () => {
            const spy = jest.spyOn(service, 'log');
            service.security('Failed login attempt', {
                ip: '192.168.1.1',
                username: 'test',
            });
            expect(spy).toHaveBeenCalledWith('warn', 'Failed login attempt', logging_interface_1.LogContext.AUTH, {
                ip: '192.168.1.1',
                username: 'test',
            });
        });
    });
    describe('configuration', () => {
        it('should get and set log level', () => {
            jest.spyOn(configService, 'getLevel').mockReturnValue('info');
            jest.spyOn(configService, 'setLevel').mockImplementation(() => undefined);
            service.setLevel('debug');
            expect(configService.setLevel).toHaveBeenCalledWith('debug');
            expect(configService.getLevel).toHaveBeenCalled();
        });
        it('should get and update config', () => {
            const mockConfig = {
                level: 'warn',
                format: 'json',
                colorize: true,
                timestamp: true,
                requestId: true,
                tenantId: true,
                userId: true,
                performance: true,
                stackTrace: true,
                filePath: undefined,
                rotation: { maxSize: '10m', maxFiles: 5, interval: '1d' },
                remote: undefined,
            };
            jest.spyOn(configService, 'getConfig').mockReturnValue(mockConfig);
            jest
                .spyOn(configService, 'updateConfig')
                .mockImplementation(() => undefined);
            const config = service.getConfig();
            service.updateConfig({ level: 'warn' });
            expect(configService.getConfig).toHaveBeenCalled();
            expect(configService.updateConfig).toHaveBeenCalledWith({
                level: 'warn',
            });
            expect(config).toEqual(mockConfig);
        });
    });
    describe('child logger', () => {
        it('should create child logger', () => {
            const mockChildLogger = {
                debug: jest.fn(),
                info: jest.fn(),
                warn: jest.fn(),
                error: jest.fn(),
                fatal: jest.fn(),
                trace: jest.fn(),
            };
            jest
                .spyOn(loggerFactory, 'createChildLogger')
                .mockReturnValue(mockChildLogger);
            const childLogger = service.child(logging_interface_1.LogContext.DATABASE, {
                tenantId: '123',
            });
            expect(childLogger).toBeDefined();
            expect(childLogger).toBeInstanceOf(pino_logger_service_1.PinoLoggerService);
            expect(loggerFactory.createChildLogger).toHaveBeenCalledWith(expect.anything(), { context: logging_interface_1.LogContext.DATABASE, tenantId: '123' });
        });
    });
    describe('statistics', () => {
        it('should track log statistics', () => {
            // 重置统计
            service.resetStats();
            // 记录一些日志
            service.info('Test message 1', logging_interface_1.LogContext.BUSINESS);
            service.warn('Test message 2', logging_interface_1.LogContext.AUTH);
            service.error('Test message 3', logging_interface_1.LogContext.DATABASE);
            const stats = service.getStats();
            expect(stats.totalLogs).toBeGreaterThanOrEqual(3);
            expect(stats.logsByLevel.info).toBeGreaterThanOrEqual(1);
            expect(stats.logsByLevel.warn).toBeGreaterThanOrEqual(1);
            expect(stats.logsByLevel.error).toBeGreaterThanOrEqual(1);
            expect(stats.logsByContext[logging_interface_1.LogContext.BUSINESS]).toBeGreaterThanOrEqual(1);
            expect(stats.logsByContext[logging_interface_1.LogContext.AUTH]).toBeGreaterThanOrEqual(1);
            expect(stats.logsByContext[logging_interface_1.LogContext.DATABASE]).toBeGreaterThanOrEqual(1);
            expect(stats.averageLogSize).toBeGreaterThan(0);
            expect(stats.lastLogTime).toBeDefined();
        });
        it('should reset statistics', () => {
            // 记录一些日志
            service.info('Test message');
            // 重置统计
            service.resetStats();
            const stats = service.getStats();
            expect(stats.totalLogs).toBe(0);
            expect(stats.logsByLevel.info).toBe(0);
        });
    });
    describe('event emission', () => {
        it('should emit log events', () => {
            service.info('Test message', logging_interface_1.LogContext.BUSINESS, { test: 'data' });
            expect(eventEmitter.emit).toHaveBeenCalledWith('logger.log', expect.objectContaining({
                level: 'info',
                message: 'Test message',
                context: logging_interface_1.LogContext.BUSINESS,
                metadata: { test: 'data' },
            }));
        });
    });
    describe('lifecycle methods', () => {
        it('should flush and close logger', async () => {
            await expect(service.flush()).resolves.not.toThrow();
            await expect(service.close()).resolves.not.toThrow();
        });
        it('should handle module destruction', async () => {
            await expect(service.onModuleDestroy()).resolves.not.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,