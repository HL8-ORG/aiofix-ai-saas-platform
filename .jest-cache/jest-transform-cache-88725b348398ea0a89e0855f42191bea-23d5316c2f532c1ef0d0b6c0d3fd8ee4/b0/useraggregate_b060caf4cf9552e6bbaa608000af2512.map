{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/core/src/examples/user.aggregate.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/core/src/examples/user.aggregate.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { EventSourcedAggregateRoot } from '../domain/event-sourced-aggregate-root';\nimport { DomainEvent } from '../domain/domain-event';\nimport { IDomainEvent } from '../domain/interfaces/domain-event.interface';\n\n/**\n * 用户创建事件\n *\n * 表示用户被创建的业务事件。\n *\n * @class UserCreatedEvent\n * @extends {DomainEvent}\n * @author AI开发团队\n * @since 1.0.0\n */\nexport class UserCreatedEvent extends DomainEvent {\n  /**\n   * 用户邮箱\n   */\n  public readonly email: string;\n\n  /**\n   * 加密后的密码\n   */\n  public readonly hashedPassword: string;\n\n  /**\n   * 用户姓名\n   */\n  public readonly name: string;\n\n  /**\n   * 构造函数\n   *\n   * @param {string} aggregateId - 聚合根ID\n   * @param {string} email - 用户邮箱\n   * @param {string} hashedPassword - 加密后的密码\n   * @param {string} name - 用户姓名\n   */\n  constructor(\n    aggregateId: string,\n    email: string,\n    hashedPassword: string,\n    name: string,\n  ) {\n    super(aggregateId);\n    this.email = email;\n    this.hashedPassword = hashedPassword;\n    this.name = name;\n  }\n\n  /**\n   * 转换为JSON格式\n   *\n   * @returns {any} 事件的JSON表示\n   */\n  toJSON(): Record<string, unknown> {\n    return {\n      ...this.getBaseEventData(),\n      email: this.email,\n      hashedPassword: this.hashedPassword,\n      name: this.name,\n    };\n  }\n}\n\n/**\n * 用户资料更新事件\n *\n * 表示用户资料被更新的业务事件。\n *\n * @class UserProfileUpdatedEvent\n * @extends {DomainEvent}\n * @author AI开发团队\n * @since 1.0.0\n */\nexport class UserProfileUpdatedEvent extends DomainEvent {\n  /**\n   * 更新的资料信息\n   */\n  public readonly profile: {\n    name?: string;\n    phone?: string;\n    avatar?: string;\n  };\n\n  /**\n   * 构造函数\n   *\n   * @param {string} aggregateId - 聚合根ID\n   * @param {object} profile - 更新的资料信息\n   */\n  constructor(\n    aggregateId: string,\n    profile: { name?: string; phone?: string; avatar?: string },\n  ) {\n    super(aggregateId);\n    this.profile = profile;\n  }\n\n  /**\n   * 转换为JSON格式\n   *\n   * @returns {any} 事件的JSON表示\n   */\n  toJSON(): Record<string, unknown> {\n    return {\n      ...this.getBaseEventData(),\n      profile: this.profile,\n    };\n  }\n}\n\n/**\n * 用户聚合根\n *\n * 表示系统中的用户实体，使用事件溯源模式管理用户状态。\n *\n * 业务规则：\n * 1. 用户必须有唯一的邮箱地址\n * 2. 用户密码必须加密存储\n * 3. 用户资料更新需要验证数据有效性\n * 4. 用户状态变更需要记录审计日志\n *\n * @class User\n * @extends {EventSourcedAggregateRoot}\n * @author AI开发团队\n * @since 1.0.0\n */\nexport class User extends EventSourcedAggregateRoot {\n  /**\n   * 用户ID\n   */\n  public readonly id: string;\n\n  /**\n   * 用户邮箱\n   */\n  private _email: string = '';\n\n  /**\n   * 加密后的密码\n   */\n  private _hashedPassword: string = '';\n\n  /**\n   * 用户姓名\n   */\n  private _name: string = '';\n\n  /**\n   * 用户电话\n   */\n  private _phone: string = '';\n\n  /**\n   * 用户头像\n   */\n  private _avatar: string = '';\n\n  /**\n   * 用户状态\n   */\n  private _status: 'active' | 'inactive' | 'locked' = 'active';\n\n  /**\n   * 创建时间\n   */\n  private _createdAt: Date = new Date();\n\n  /**\n   * 更新时间\n   */\n  private _updatedAt: Date = new Date();\n\n  /**\n   * 构造函数\n   *\n   * @param {string} [id] - 用户ID，如果不提供则自动生成\n   */\n  constructor(id?: string) {\n    super();\n    this.id = id ?? uuidv4();\n  }\n\n  /**\n   * 创建用户\n   *\n   * 静态工厂方法，用于创建新用户。\n   *\n   * @param {string} email - 用户邮箱\n   * @param {string} password - 用户密码（明文）\n   * @param {string} name - 用户姓名\n   * @returns {User} 新创建的用户\n   *\n   * @throws {Error} 当邮箱格式无效时抛出错误\n   * @throws {Error} 当密码强度不足时抛出错误\n   */\n  public static create(email: string, password: string, name: string): User {\n    // 验证邮箱格式\n    if (!this.isValidEmail(email)) {\n      throw new Error('邮箱格式无效');\n    }\n\n    // 验证密码强度\n    if (!this.isValidPassword(password)) {\n      throw new Error(\n        '密码强度不足，必须包含大小写字母、数字和特殊字符，长度至少8位',\n      );\n    }\n\n    // 验证姓名\n    if (!name || name.trim().length === 0) {\n      throw new Error('用户姓名不能为空');\n    }\n\n    const user = new User();\n    const hashedPassword = user.hashPassword(password);\n\n    const event = new UserCreatedEvent(user.id, email, hashedPassword, name);\n\n    user.apply(event);\n    return user;\n  }\n\n  /**\n   * 更新用户资料\n   *\n   * @param {object} profile - 要更新的资料信息\n   *\n   * @throws {Error} 当用户状态不是活跃时抛出错误\n   * @throws {Error} 当资料信息无效时抛出错误\n   */\n  public updateProfile(profile: {\n    name?: string;\n    phone?: string;\n    avatar?: string;\n  }): void {\n    // 验证用户状态\n    if (this._status !== 'active') {\n      throw new Error('只有活跃用户才能更新资料');\n    }\n\n    // 验证资料信息\n    if (\n      profile.name !== undefined &&\n      (!profile.name || profile.name.trim().length === 0)\n    ) {\n      throw new Error('用户姓名不能为空');\n    }\n\n    if (profile.phone !== undefined && !this.isValidPhone(profile.phone)) {\n      throw new Error('电话号码格式无效');\n    }\n\n    const event = new UserProfileUpdatedEvent(this.id, profile);\n    this.apply(event);\n  }\n\n  /**\n   * 处理领域事件\n   *\n   * @param {IDomainEvent} event - 要处理的领域事件\n   * @param {boolean} _isFromHistory - 是否来自历史事件重放\n   */\n  protected handleEvent(event: IDomainEvent, _isFromHistory: boolean): void {\n    if (event instanceof UserCreatedEvent) {\n      this.whenUserCreated(event);\n    } else if (event instanceof UserProfileUpdatedEvent) {\n      this.whenUserProfileUpdated(event);\n    }\n  }\n\n  /**\n   * 处理用户创建事件\n   *\n   * @param {UserCreatedEvent} event - 用户创建事件\n   * @private\n   */\n  private whenUserCreated(event: UserCreatedEvent): void {\n    this._email = event.email;\n    this._hashedPassword = event.hashedPassword;\n    this._name = event.name;\n    this._status = 'active';\n    this._createdAt = event.occurredOn;\n    this._updatedAt = event.occurredOn;\n  }\n\n  /**\n   * 处理用户资料更新事件\n   *\n   * @param {UserProfileUpdatedEvent} event - 用户资料更新事件\n   * @private\n   */\n  private whenUserProfileUpdated(event: UserProfileUpdatedEvent): void {\n    if (event.profile.name !== undefined) {\n      this._name = event.profile.name;\n    }\n    if (event.profile.phone !== undefined) {\n      this._phone = event.profile.phone;\n    }\n    if (event.profile.avatar !== undefined) {\n      this._avatar = event.profile.avatar;\n    }\n    this._updatedAt = event.occurredOn;\n  }\n\n  /**\n   * 将聚合状态转换为快照数据\n   *\n   * @returns {Record<string, unknown>} 快照数据\n   */\n  protected toSnapshot(): Record<string, unknown> {\n    return {\n      id: this.id,\n      email: this._email,\n      name: this._name,\n      phone: this._phone,\n      avatar: this._avatar,\n      status: this._status,\n      createdAt: this._createdAt,\n      updatedAt: this._updatedAt,\n    };\n  }\n\n  /**\n   * 从快照数据恢复聚合状态\n   *\n   * @param {Record<string, unknown>} data - 快照数据\n   */\n  protected fromSnapshot(data: Record<string, unknown>): void {\n    this._email = data.email as string;\n    this._name = data.name as string;\n    this._phone = data.phone as string;\n    this._avatar = data.avatar as string;\n    this._status = data.status as 'active' | 'inactive' | 'locked';\n    this._createdAt = new Date(data.createdAt as string | number | Date);\n    this._updatedAt = new Date(data.updatedAt as string | number | Date);\n  }\n\n  // 私有辅助方法\n\n  /**\n   * 验证邮箱格式\n   *\n   * @param {string} email - 邮箱地址\n   * @returns {boolean} 是否有效\n   * @private\n   */\n  private static isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  /**\n   * 验证密码强度\n   *\n   * @param {string} password - 密码\n   * @returns {boolean} 是否有效\n   * @private\n   */\n  private static isValidPassword(password: string): boolean {\n    // 至少8位，包含大小写字母、数字和特殊字符\n    const passwordRegex =\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n    return passwordRegex.test(password);\n  }\n\n  /**\n   * 验证电话号码格式\n   *\n   * @param {string} phone - 电话号码\n   * @returns {boolean} 是否有效\n   * @private\n   */\n  private isValidPhone(phone: string): boolean {\n    const phoneRegex = /^\\+?[\\d\\s\\-()]+$/;\n    return phoneRegex.test(phone);\n  }\n\n  /**\n   * 加密密码\n   *\n   * @param {string} password - 明文密码\n   * @returns {string} 加密后的密码\n   * @private\n   */\n  private hashPassword(password: string): string {\n    // TODO: 实现实际的密码加密逻辑\n    // 这里应该使用bcrypt或其他安全的加密算法\n    return `hashed_${password}`;\n  }\n\n  // 公共访问器\n\n  /**\n   * 获取用户邮箱\n   */\n  public get email(): string {\n    return this._email;\n  }\n\n  /**\n   * 获取用户姓名\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n  /**\n   * 获取用户电话\n   */\n  public get phone(): string {\n    return this._phone;\n  }\n\n  /**\n   * 获取用户头像\n   */\n  public get avatar(): string {\n    return this._avatar;\n  }\n\n  /**\n   * 获取用户状态\n   */\n  public get status(): string {\n    return this._status;\n  }\n\n  /**\n   * 获取创建时间\n   */\n  public get createdAt(): Date {\n    return this._createdAt;\n  }\n\n  /**\n   * 获取更新时间\n   */\n  public get updatedAt(): Date {\n    return this._updatedAt;\n  }\n}\n"],"version":3}