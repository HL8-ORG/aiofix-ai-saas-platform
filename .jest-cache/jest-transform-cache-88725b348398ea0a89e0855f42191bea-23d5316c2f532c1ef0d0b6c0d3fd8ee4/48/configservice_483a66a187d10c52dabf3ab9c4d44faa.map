{"version":3,"names":["common_1","cov_db1hjtgq9","s","require","config_loader_1","logging_1","ConfigService","f","Injectable","constructor","logger","environment","production","process","env","NODE_ENV","config","initConfig","getConfig","b","Object","entries","forEach","key","value","info","LogContext","CONFIG","isProduction","nodeEnv","configKeys","keys","debug","timestamp","Date","toISOString","freeze","getConfigValue","error","String","requestedKey","availableKeys","Error","configKey","appConfig","app","databaseConfig","database","redisConfig","redis","jwtConfig","jwt","emailConfig","email","loggingConfig","logging","settingConfig","setting","keycloakConfig","keycloak","dbMikroOrmConnectionOptions","dbKnexConnectionOptions","get","availableEnvVars","filter","k","startsWith","envKey","hasValue","isProd","__esDecorate","_classDescriptor","_classThis","_classDecorators","kind","name","metadata","_metadata","_classExtraInitializers","__runInitializers","exports"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/config/src/config.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { MikroOrmModuleOptions } from '@mikro-orm/nestjs';\nimport { KnexModuleOptions } from 'nest-knexjs';\nimport { getConfig } from './config-loader';\nimport { PinoLoggerService, LogContext } from '@aiofix/logging';\n\n/**\n * @interface IamConfig\n * @description\n * IAM系统配置接口，定义了系统中所有配置模块的结构。\n * 该接口包含了应用基础配置、数据库配置、缓存配置、认证配置等各个模块的配置定义。\n *\n * 主要原理与机制如下：\n * 1. 使用TypeScript接口定义配置结构，确保类型安全\n * 2. 每个配置模块都有独立的命名空间，避免配置冲突\n * 3. 支持配置的嵌套结构，便于组织复杂的配置项\n * 4. 使用Record<string, unknown>类型提供灵活性，具体类型在运行时确定\n *\n * 功能与业务规则：\n * 1. 应用基础配置（app）：应用名称、版本、环境等\n * 2. 数据库配置（database）：数据库连接、ORM配置等\n * 3. 缓存配置（redis）：Redis连接、缓存策略等\n * 4. 认证配置（jwt）：JWT密钥、令牌配置等\n * 5. 邮件配置（email）：邮件服务、模板配置等\n * 6. 日志配置（logging）：日志级别、输出配置等\n * 7. 系统设置（setting）：系统级配置项\n * 8. 第三方集成（keycloak）：Keycloak认证服务配置\n */\nexport interface IamConfig {\n  /** 应用基础配置 */\n  app: Record<string, unknown>;\n  /** 数据库配置 */\n  database: Record<string, unknown>;\n  /** Redis缓存配置 */\n  redis: Record<string, unknown>;\n  /** JWT认证配置 */\n  jwt: Record<string, unknown>;\n  /** 邮件服务配置 */\n  email: Record<string, unknown>;\n  /** 日志系统配置 */\n  logging: Record<string, unknown>;\n  /** 系统设置配置 */\n  setting: Record<string, unknown>;\n  /** Keycloak集成配置 */\n  keycloak: Record<string, unknown>;\n}\n\n/**\n * @class ConfigService\n * @description\n * IAM系统配置服务，负责管理和提供系统中所有配置信息。\n * 该服务是配置管理的核心组件，提供了配置的加载、获取、验证等功能。\n *\n * 主要原理与机制如下：\n * 1. 使用NestJS的依赖注入机制，作为全局服务提供配置访问\n * 2. 在构造函数中异步初始化配置，确保配置在服务启动时加载完成\n * 3. 使用只读配置对象，防止运行时配置被意外修改\n * 4. 提供类型安全的配置访问方法，支持泛型约束\n * 5. 集成环境变量管理，支持动态配置更新\n * 6. 使用自定义的PinoLoggerService进行日志记录，提供高性能的结构化日志\n *\n * 功能与业务规则：\n * 1. 配置加载和初始化\n * 2. 配置获取和验证\n * 3. 环境变量管理\n * 4. 配置模块化访问\n * 5. 类型安全的配置操作\n * 6. 结构化日志记录\n */\n@Injectable()\nexport class ConfigService {\n  /** 环境配置对象 */\n  private readonly environment = {\n    production: process.env.NODE_ENV === 'production',\n    env: {} as Record<string, string>,\n  };\n  /** 日志服务实例 */\n  private readonly logger: PinoLoggerService;\n  /** 系统配置对象 */\n  private config: Partial<IamConfig> = {};\n\n  /**\n   * @constructor\n   * @description\n   * 配置服务构造函数，在服务实例化时自动初始化配置。\n   * 由于构造函数不能是异步的，所以使用void调用异步初始化方法。\n   *\n   * @param logger 自定义的Pino日志服务实例\n   */\n  constructor(logger: PinoLoggerService) {\n    this.logger = logger;\n    void this.initConfig();\n  }\n\n  /**\n   * @function initConfig\n   * @description\n   * 初始化配置和环境变量。该方法在服务启动时被调用，负责加载所有配置信息\n   * 并设置环境变量。由于构造函数不能是异步的，所以使用独立的异步方法。\n   *\n   * 主要原理与机制如下：\n   * 1. 调用getConfig()方法获取完整的配置对象\n   * 2. 遍历环境配置，动态设置process.env环境变量\n   * 3. 记录生产环境状态到日志中\n   * 4. 确保配置在服务启动前完成加载\n   * 5. 使用自定义的PinoLoggerService记录结构化日志\n   *\n   * 功能与业务规则：\n   * 1. 配置加载和初始化\n   * 2. 环境变量设置\n   * 3. 启动状态日志记录\n   * 4. 配置验证和错误处理\n   * 5. 结构化日志记录\n   *\n   * @returns {Promise<void>} 返回一个Promise，表示配置初始化过程\n   */\n  private async initConfig(): Promise<void> {\n    this.config = getConfig();\n\n    // 动态设置环境变量\n    if (this.environment.env) {\n      Object.entries(this.environment.env).forEach(([key, value]) => {\n        process.env[key] = value;\n      });\n    }\n\n    this.logger.info(\n      `配置服务初始化完成，生产环境状态: ${this.environment.production}`,\n      LogContext.CONFIG,\n      {\n        isProduction: this.environment.production,\n        nodeEnv: process.env.NODE_ENV,\n        configKeys: Object.keys(this.config),\n      },\n    );\n  }\n\n  /**\n   * @function getConfig\n   * @description\n   * 获取完整的配置对象，返回一个只读的配置副本。该方法提供了对系统所有配置的访问，\n   * 同时确保返回的配置对象不会被意外修改。\n   *\n   * 主要原理与机制如下：\n   * 1. 使用Object.freeze()创建不可变的配置对象\n   * 2. 使用展开运算符创建配置对象的深拷贝\n   * 3. 返回只读类型，防止运行时修改\n   * 4. 提供类型安全的配置访问\n   * 5. 记录配置访问日志，便于审计和调试\n   *\n   * 功能与业务规则：\n   * 1. 完整配置获取\n   * 2. 配置对象保护\n   * 3. 类型安全访问\n   * 4. 配置完整性保证\n   * 5. 配置访问审计\n   *\n   * @returns {Readonly<Partial<IamConfig>>} 返回只读的完整配置对象\n   */\n  public getConfig(): Readonly<Partial<IamConfig>> {\n    this.logger.debug('获取完整配置对象', LogContext.CONFIG, {\n      configKeys: Object.keys(this.config),\n      timestamp: new Date().toISOString(),\n    });\n    return Object.freeze({ ...this.config });\n  }\n\n  /**\n   * @function getConfigValue\n   * @description\n   * 获取指定的配置值，支持泛型类型安全。该方法提供了对特定配置模块的访问，\n   * 如果配置键不存在会抛出错误。\n   *\n   * 主要原理与机制如下：\n   * 1. 使用泛型K约束配置键的类型\n   * 2. 检查配置键是否存在，不存在则抛出错误\n   * 3. 返回只读的配置值，确保类型安全\n   * 4. 支持TypeScript的类型推断\n   * 5. 记录配置访问日志，便于审计和调试\n   *\n   * 功能与业务规则：\n   * 1. 特定配置获取\n   * 2. 配置键验证\n   * 3. 类型安全访问\n   * 4. 错误处理和提示\n   * 5. 配置访问审计\n   *\n   * @template K - 配置键的类型\n   * @param {K} key - 要获取的配置键\n   * @returns {Readonly<IamConfig[K]>} 返回只读的配置值\n   * @throws {Error} 当配置键不存在时抛出错误\n   */\n  public getConfigValue<K extends keyof IamConfig>(\n    key: K,\n  ): Readonly<IamConfig[K]> {\n    if (!(key in this.config)) {\n      this.logger.error(`配置键不存在: ${String(key)}`, LogContext.CONFIG, {\n        requestedKey: String(key),\n        availableKeys: Object.keys(this.config),\n        timestamp: new Date().toISOString(),\n      });\n      throw new Error(`Configuration key \"${String(key)}\" not found.`);\n    }\n\n    this.logger.debug(`获取配置值: ${String(key)}`, LogContext.CONFIG, {\n      configKey: String(key),\n      timestamp: new Date().toISOString(),\n    });\n\n    return this.config[key] as Readonly<IamConfig[K]>;\n  }\n\n  /**\n   * @getter appConfig\n   * @description\n   * 获取应用基础配置，包含应用名称、版本、环境等基础信息。\n   *\n   * @returns {Readonly<Record<string, unknown>>} 返回只读的应用配置对象\n   */\n  get appConfig(): Readonly<Record<string, unknown>> {\n    return this.config.app ?? {};\n  }\n\n  /**\n   * @getter databaseConfig\n   * @description\n   * 获取数据库配置，包含数据库连接、ORM配置、连接池等设置。\n   *\n   * @returns {Readonly<Record<string, unknown>>} 返回只读的数据库配置对象\n   */\n  get databaseConfig(): Readonly<Record<string, unknown>> {\n    return this.config.database ?? {};\n  }\n\n  /**\n   * @getter redisConfig\n   * @description\n   * 获取Redis缓存配置，包含连接信息、缓存策略、分布式锁等设置。\n   *\n   * @returns {Readonly<Record<string, unknown>>} 返回只读的Redis配置对象\n   */\n  get redisConfig(): Readonly<Record<string, unknown>> {\n    return this.config.redis ?? {};\n  }\n\n  /**\n   * @getter jwtConfig\n   * @description\n   * 获取JWT认证配置，包含密钥、令牌过期时间、多租户支持等设置。\n   *\n   * @returns {Readonly<Record<string, unknown>>} 返回只读的JWT配置对象\n   */\n  get jwtConfig(): Readonly<Record<string, unknown>> {\n    return this.config.jwt ?? {};\n  }\n\n  /**\n   * @getter emailConfig\n   * @description\n   * 获取邮件服务配置，包含SMTP设置、邮件模板、发送策略等配置。\n   *\n   * @returns {Readonly<Record<string, unknown>>} 返回只读的邮件配置对象\n   */\n  get emailConfig(): Readonly<Record<string, unknown>> {\n    return this.config.email ?? {};\n  }\n\n  /**\n   * @getter loggingConfig\n   * @description\n   * 获取日志系统配置，包含日志级别、输出格式、聚合设置等配置。\n   *\n   * @returns {Readonly<Record<string, unknown>>} 返回只读的日志配置对象\n   */\n  get loggingConfig(): Readonly<Record<string, unknown>> {\n    return this.config.logging ?? {};\n  }\n\n  /**\n   * @getter settingConfig\n   * @description\n   * 获取系统设置配置，包含系统级配置项和全局设置。\n   *\n   * @returns {Readonly<Record<string, unknown>>} 返回只读的系统设置配置对象\n   */\n  get settingConfig(): Readonly<Record<string, unknown>> {\n    return this.config.setting ?? {};\n  }\n\n  /**\n   * @getter keycloakConfig\n   * @description\n   * 获取Keycloak集成配置，包含第三方认证服务的连接和设置。\n   *\n   * @returns {Readonly<Record<string, unknown>>} 返回只读的Keycloak配置对象\n   */\n  get keycloakConfig(): Readonly<Record<string, unknown>> {\n    return this.config.keycloak ?? {};\n  }\n\n  /**\n   * @getter dbMikroOrmConnectionOptions\n   * @description\n   * 获取MikroORM连接配置选项，用于数据库连接和ORM操作。\n   *\n   * @returns {Readonly<MikroOrmModuleOptions>} 返回只读的MikroORM配置对象\n   */\n  get dbMikroOrmConnectionOptions(): Readonly<MikroOrmModuleOptions> {\n    return this.config.database?.dbMikroOrmConnectionOptions ?? {};\n  }\n\n  /**\n   * @getter dbKnexConnectionOptions\n   * @description\n   * 获取Knex连接配置选项，用于复杂查询和数据库迁移。\n   *\n   * @returns {Readonly<KnexModuleOptions>} 返回只读的Knex配置对象\n   */\n  get dbKnexConnectionOptions(): Readonly<KnexModuleOptions> {\n    return (this.config.database?.dbKnexConnectionOptions ?? {\n      config: {},\n    }) as Readonly<KnexModuleOptions>;\n  }\n\n  /**\n   * @function get\n   * @description\n   * 获取环境变量值，支持类型推断。该方法提供了对环境变量的类型安全访问，\n   * 如果环境变量不存在会抛出错误。\n   *\n   * 主要原理与机制如下：\n   * 1. 使用泛型K约束环境变量键的类型\n   * 2. 检查环境变量是否存在，不存在则抛出错误\n   * 3. 返回类型安全的环境变量值\n   * 4. 支持TypeScript的类型推断和自动补全\n   * 5. 记录环境变量访问日志，便于审计和调试\n   *\n   * 功能与业务规则：\n   * 1. 环境变量获取\n   * 2. 类型安全访问\n   * 3. 错误处理和提示\n   * 4. 环境变量验证\n   * 5. 环境变量访问审计\n   *\n   * @template K - 环境变量键的类型\n   * @param {K} key - 要获取的环境变量键\n   * @returns {string} 返回对应的环境变量值\n   * @throws {Error} 当环境变量不存在时抛出错误\n   */\n  get<K extends string>(key: K): string {\n    const value = process.env[key];\n    if (!value) {\n      this.logger.error(`环境变量未定义: ${key}`, LogContext.CONFIG, {\n        requestedKey: key,\n        availableEnvVars: Object.keys(process.env).filter(\n          k =>\n            k.startsWith('DB_') || k.startsWith('LOG_') || k.startsWith('JWT_'),\n        ),\n        timestamp: new Date().toISOString(),\n      });\n      throw new Error(`Environment variable \"${key}\" is not defined.`);\n    }\n\n    this.logger.debug(`获取环境变量: ${key}`, LogContext.CONFIG, {\n      envKey: key,\n      hasValue: !!value,\n      timestamp: new Date().toISOString(),\n    });\n\n    return value;\n  }\n\n  /**\n   * @function isProd\n   * @description\n   * 检查应用是否运行在生产环境模式。该方法用于判断当前运行环境，\n   * 帮助应用根据环境调整行为。\n   *\n   * 主要原理与机制如下：\n   * 1. 从环境配置中获取production标志\n   * 2. 返回布尔值表示是否为生产环境\n   * 3. 用于条件逻辑和环境相关配置\n   *\n   * 功能与业务规则：\n   * 1. 环境判断\n   * 2. 条件逻辑支持\n   * 3. 环境相关配置\n   * 4. 调试和部署支持\n   *\n   * @returns {boolean} 返回true表示生产环境，false表示非生产环境\n   */\n  isProd(): boolean {\n    return this.environment.production;\n  }\n}\n"],"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","ignoreList":[]}