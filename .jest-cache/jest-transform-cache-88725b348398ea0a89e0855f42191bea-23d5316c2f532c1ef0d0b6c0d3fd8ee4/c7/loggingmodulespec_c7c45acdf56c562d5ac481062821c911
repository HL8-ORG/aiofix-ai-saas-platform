b27a986abbefaa8d6a7498f8ff8d8aca
"use strict";
/**
 * @file logging.module.spec.ts
 * @description 日志模块单元测试
 *
 * 测试Pino日志服务的核心功能，包括：
 * - 日志级别控制
 * - 结构化日志输出
 * - 上下文管理
 * - 性能监控
 * - 错误处理
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const event_emitter_1 = require("@nestjs/event-emitter");
const nestjs_cls_1 = require("nestjs-cls");
const pino_logger_service_1 = require("./services/pino-logger.service");
const pino_logger_config_service_1 = require("./services/pino-logger-config.service");
const pino_logger_factory_1 = require("./factories/pino-logger.factory");
const pino_logging_middleware_1 = require("./middleware/pino-logging.middleware");
const pino_logging_interceptor_1 = require("./interceptors/pino-logging.interceptor");
const logging_interface_1 = require("./interfaces/logging.interface");
describe('LoggingModule', () => {
    let module;
    let loggerService;
    let configService;
    let loggerFactory;
    beforeAll(async () => {
        module = await testing_1.Test.createTestingModule({
            imports: [
                event_emitter_1.EventEmitterModule.forRoot(),
                nestjs_cls_1.ClsModule.forRoot({
                    global: true,
                    middleware: {
                        mount: true,
                        setup: (cls, _req) => {
                            cls.set('requestId', 'test-request-id');
                            cls.set('tenantId', 'test-tenant-id');
                            cls.set('userId', 'test-user-id');
                        },
                    },
                }),
            ],
            providers: [
                {
                    provide: pino_logger_config_service_1.PinoLoggerConfigService,
                    useFactory: () => {
                        return new pino_logger_config_service_1.PinoLoggerConfigService();
                    },
                },
                {
                    provide: pino_logger_factory_1.PinoLoggerFactory,
                    useFactory: (configService) => {
                        return new pino_logger_factory_1.PinoLoggerFactory(configService);
                    },
                    inject: [pino_logger_config_service_1.PinoLoggerConfigService],
                },
                {
                    provide: pino_logger_service_1.PinoLoggerService,
                    useFactory: (eventEmitter, configService, loggerFactory, cls) => {
                        return new pino_logger_service_1.PinoLoggerService(eventEmitter, configService, loggerFactory, cls);
                    },
                    inject: [
                        event_emitter_1.EventEmitter2,
                        pino_logger_config_service_1.PinoLoggerConfigService,
                        pino_logger_factory_1.PinoLoggerFactory,
                        nestjs_cls_1.ClsService,
                    ],
                },
                {
                    provide: pino_logging_middleware_1.PinoLoggingMiddleware,
                    useFactory: (logger) => {
                        return new pino_logging_middleware_1.PinoLoggingMiddleware(logger);
                    },
                    inject: [pino_logger_service_1.PinoLoggerService],
                },
                {
                    provide: pino_logging_interceptor_1.PinoLoggingInterceptor,
                    useFactory: (logger) => {
                        return new pino_logging_interceptor_1.PinoLoggingInterceptor(logger);
                    },
                    inject: [pino_logger_service_1.PinoLoggerService],
                },
            ],
        }).compile();
        loggerService = module.get(pino_logger_service_1.PinoLoggerService);
        configService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
        loggerFactory = module.get(pino_logger_factory_1.PinoLoggerFactory);
    });
    afterAll(async () => {
        if (module) {
            await module.close();
        }
    });
    describe('Module Initialization', () => {
        it('should be defined', () => {
            expect(module).toBeDefined();
        });
        it('should have PinoLoggerService', () => {
            expect(loggerService).toBeDefined();
        });
        it('should have PinoLoggerConfigService', () => {
            expect(configService).toBeDefined();
        });
        it('should have PinoLoggerFactory', () => {
            expect(loggerFactory).toBeDefined();
        });
    });
    describe('PinoLoggerService', () => {
        it('should log different levels', () => {
            const spy = jest
                .spyOn(loggerService, 'log')
                .mockImplementation(() => undefined);
            loggerService.debug('Debug message', logging_interface_1.LogContext.SYSTEM);
            loggerService.info('Info message', logging_interface_1.LogContext.BUSINESS);
            loggerService.warn('Warning message', logging_interface_1.LogContext.AUTH);
            loggerService.error('Error message', logging_interface_1.LogContext.SYSTEM);
            expect(spy).toHaveBeenCalledTimes(4);
            expect(spy).toHaveBeenCalledWith('debug', 'Debug message', logging_interface_1.LogContext.SYSTEM, undefined, undefined);
            expect(spy).toHaveBeenCalledWith('info', 'Info message', logging_interface_1.LogContext.BUSINESS, undefined, undefined);
            expect(spy).toHaveBeenCalledWith('warn', 'Warning message', logging_interface_1.LogContext.AUTH, undefined, undefined);
            expect(spy).toHaveBeenCalledWith('error', 'Error message', logging_interface_1.LogContext.SYSTEM, undefined, undefined);
            spy.mockRestore();
        });
        it('should log with metadata', () => {
            const spy = jest
                .spyOn(loggerService, 'log')
                .mockImplementation(() => undefined);
            const metadata = {
                requestId: 'test-request-id',
                tenantId: 'test-tenant-id',
                userId: 'test-user-id',
                operation: 'test-operation',
            };
            loggerService.info('Test message', logging_interface_1.LogContext.BUSINESS, metadata);
            expect(spy).toHaveBeenCalledWith('info', 'Test message', logging_interface_1.LogContext.BUSINESS, metadata, undefined);
            spy.mockRestore();
        });
        it('should log errors with stack trace', () => {
            const spy = jest
                .spyOn(loggerService, 'log')
                .mockImplementation(() => undefined);
            const error = new Error('Test error');
            loggerService.error('Error occurred', logging_interface_1.LogContext.SYSTEM, undefined, error);
            expect(spy).toHaveBeenCalledWith('error', 'Error occurred', logging_interface_1.LogContext.SYSTEM, undefined, error);
            spy.mockRestore();
        });
        it('should log performance metrics', () => {
            const spy = jest
                .spyOn(loggerService, 'log')
                .mockImplementation(() => undefined);
            loggerService.performance('test-operation', 150, logging_interface_1.LogContext.PERFORMANCE);
            expect(spy).toHaveBeenCalledWith('info', 'Performance: test-operation took 150ms', logging_interface_1.LogContext.PERFORMANCE, {
                operation: 'test-operation',
                duration: 150,
                type: 'performance',
            });
            spy.mockRestore();
        });
        it('should create child logger', () => {
            const childLogger = loggerService.child(logging_interface_1.LogContext.BUSINESS, {
                tenantId: 'child-tenant',
            });
            expect(childLogger).toBeDefined();
            expect(childLogger).toHaveProperty('info');
            expect(childLogger).toHaveProperty('error');
            expect(childLogger).toHaveProperty('warn');
        });
        it('should get and set log level', () => {
            const originalLevel = loggerService.getLevel();
            loggerService.setLevel('debug');
            expect(loggerService.getLevel()).toBe('debug');
            loggerService.setLevel(originalLevel);
            expect(loggerService.getLevel()).toBe(originalLevel);
        });
        it('should get stats', () => {
            const stats = loggerService.getStats();
            expect(stats).toHaveProperty('totalLogs');
            expect(stats).toHaveProperty('logsByLevel');
            expect(stats).toHaveProperty('logsByContext');
            expect(stats).toHaveProperty('averageLogSize');
        });
    });
    describe('PinoLoggerConfigService', () => {
        it('should get default config', () => {
            const config = configService.getConfig();
            expect(config).toBeDefined();
            expect(config).toHaveProperty('level');
            expect(config).toHaveProperty('format');
            expect(config).toHaveProperty('timestamp');
        });
        it('should update config', () => {
            const originalConfig = configService.getConfig();
            const newConfig = { level: 'debug' };
            configService.updateConfig(newConfig);
            expect(configService.getLevel()).toBe('debug');
            // 恢复原始配置
            configService.updateConfig(originalConfig);
        });
        it('should detect environment', () => {
            const isDev = configService.isDevelopment();
            const isProd = configService.isProduction();
            expect(typeof isDev).toBe('boolean');
            expect(typeof isProd).toBe('boolean');
        });
    });
    describe('PinoLoggerFactory', () => {
        it('should create logger', () => {
            const logger = loggerFactory.createLogger();
            expect(logger).toBeDefined();
            expect(logger).toHaveProperty('info');
            expect(logger).toHaveProperty('error');
            expect(logger).toHaveProperty('warn');
        });
        it('should create child logger', () => {
            const parentLogger = loggerFactory.createLogger();
            const childLogger = loggerFactory.createChildLogger(parentLogger, {
                context: 'test',
            });
            expect(childLogger).toBeDefined();
            expect(childLogger).toHaveProperty('info');
            expect(childLogger).toHaveProperty('error');
        });
    });
    describe('Logging Middleware and Interceptor', () => {
        it('should have middleware defined', () => {
            const middleware = module.get(pino_logging_middleware_1.PinoLoggingMiddleware);
            expect(middleware).toBeDefined();
            expect(middleware).toHaveProperty('use');
        });
        it('should have interceptor defined', () => {
            const interceptor = module.get(pino_logging_interceptor_1.PinoLoggingInterceptor);
            expect(interceptor).toBeDefined();
            expect(interceptor).toHaveProperty('intercept');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,