{"version":3,"names":["uuid_1","cov_26bclgofvz","s","require","Query","constructor","f","queryId","v4","timestamp","Date","queryType","name","validateQuery","b","trim","length","Error","isNaN","getTime","getBaseQueryData","toISOString","exports"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/core/src/application/queries/query.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\n/**\n * @class Query\n * @description\n * 查询基类，封装用户查询操作的参数和过滤条件。\n *\n * 查询职责：\n * 1. 封装数据查询所需的所有参数\n * 2. 提供灵活的过滤和排序选项\n * 3. 支持分页和性能优化\n * 4. 确保查询结果的数据隔离\n *\n * 数据隔离要求：\n * 1. 查询必须基于租户ID进行数据隔离\n * 2. 根据查询者权限过滤可访问的数据\n * 3. 支持组织级和部门级的数据过滤\n * 4. 确保敏感信息的安全访问\n *\n * CQRS特性：\n * 1. 表示数据检索的请求\n * 2. 是不可变的，一旦创建就不能修改\n * 3. 包含查询所需的所有参数\n * 4. 具有唯一标识符和时间戳\n * 5. 不产生副作用，只返回数据\n *\n * @property {string} queryId 查询的唯一标识符\n * @property {Date} timestamp 查询创建的时间戳\n * @property {string} queryType 查询的类型名称\n *\n * @example\n * ```typescript\n * class GetUsersQuery extends Query {\n *   constructor(\n *     public readonly tenantId: string,\n *     public readonly organizationId?: string,\n *     public readonly page: number = 1,\n *     public readonly limit: number = 20\n *   ) {\n *     super();\n *     this.validate();\n *   }\n *\n *   private validate(): void {\n *     if (!this.tenantId) {\n *       throw new Error('Tenant ID is required');\n *     }\n *   }\n *\n *   toJSON(): any {\n *     return {\n *       ...this.getBaseQueryData(),\n *       tenantId: this.tenantId,\n *       organizationId: this.organizationId,\n *       page: this.page,\n *       limit: this.limit\n *     };\n *   }\n * }\n * ```\n * @abstract\n * @since 1.0.0\n */\nexport abstract class Query {\n  /**\n   * 查询的唯一标识符\n   * 使用UUID确保全局唯一性\n   */\n  public readonly queryId: string;\n\n  /**\n   * 查询创建的时间戳\n   * 记录查询创建的时间\n   */\n  public readonly timestamp: Date;\n\n  /**\n   * 查询的类型名称\n   * 使用构造函数名称作为查询类型\n   */\n  public readonly queryType: string;\n\n  /**\n   * 构造函数\n   *\n   * 初始化查询的基本属性，包括唯一标识符、时间戳和类型名称。\n   */\n  constructor() {\n    this.queryId = uuidv4();\n    this.timestamp = new Date();\n    this.queryType = this.constructor.name;\n  }\n\n  /**\n   * 验证查询数据的有效性\n   *\n   * 子类可以重写此方法，添加特定的查询数据验证逻辑。\n   * 基类提供基本的验证，确保查询的基本属性有效。\n   *\n   * @throws {Error} 当查询数据无效时抛出错误\n   */\n  protected validateQuery(): void {\n    if (!this.queryId || this.queryId.trim().length === 0) {\n      throw new Error('查询ID不能为空');\n    }\n\n    if (!this.timestamp || isNaN(this.timestamp.getTime())) {\n      throw new Error('查询时间戳无效');\n    }\n\n    if (!this.queryType || this.queryType.trim().length === 0) {\n      throw new Error('查询类型不能为空');\n    }\n  }\n\n  /**\n   * 获取查询的基本信息\n   *\n   * @returns {object} 包含查询基本信息的对象\n   */\n  protected getBaseQueryData(): object {\n    return {\n      queryId: this.queryId,\n      timestamp: this.timestamp.toISOString(),\n      queryType: this.queryType,\n    };\n  }\n\n  /**\n   * 将查询转换为JSON格式\n   *\n   * 子类应该重写此方法，提供具体的查询数据序列化。\n   * 基类提供默认实现，包含查询的基本属性。\n   *\n   * @returns {Record<string, unknown>} 查询的JSON表示\n   */\n  abstract toJSON(): Record<string, unknown>;\n}\n"],"mappingscAAA,GAAAC,CAAA,OAAAC,OAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA,MAAsBC,KAAK;EAmBzB;;;;;EAKAC,YAAA;IAAA;IAAAJ,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAC,CAAA;IACE,IAAI,CAACK,OAAO,GAAG,IAAAP,MAAA,CAAAQ,EAAM,GAAE;IAAC;IAAAP,cAAA,GAAAC,CAAA;IACxB,IAAI,CAACO,SAAS,GAAG,IAAIC,IAAI,EAAE;IAAC;IAAAT,cAAA,GAAAC,CAAA;IAC5B,IAAI,CAACS,SAAS,GAAG,IAAI,CAACN,WAAW,CAACO,IAAI;EACxC;EAEA;;;;;;;;EAQUC,aAAaA,CAAA;IAAA;IAAAZ,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAC,CAAA;IACrB;IAAI;IAAA,CAAAD,cAAA,GAAAa,CAAA,WAAC,IAAI,CAACP,OAAO;IAAA;IAAA,CAAAN,cAAA,GAAAa,CAAA,UAAI,IAAI,CAACP,OAAO,CAACQ,IAAI,EAAE,CAACC,MAAM,KAAK,CAAC,GAAE;MAAA;MAAAf,cAAA,GAAAa,CAAA;MAAAb,cAAA,GAAAC,CAAA;MACrD,MAAM,IAAIe,KAAK,CAAC,UAAU,CAAC;IAC7B,CAAC;IAAA;IAAA;MAAAhB,cAAA,GAAAa,CAAA;IAAA;IAAAb,cAAA,GAAAC,CAAA;IAED;IAAI;IAAA,CAAAD,cAAA,GAAAa,CAAA,WAAC,IAAI,CAACL,SAAS;IAAA;IAAA,CAAAR,cAAA,GAAAa,CAAA,UAAII,KAAK,CAAC,IAAI,CAACT,SAAS,CAACU,OAAO,EAAE,CAAC,GAAE;MAAA;MAAAlB,cAAA,GAAAa,CAAA;MAAAb,cAAA,GAAAC,CAAA;MACtD,MAAM,IAAIe,KAAK,CAAC,SAAS,CAAC;IAC5B,CAAC;IAAA;IAAA;MAAAhB,cAAA,GAAAa,CAAA;IAAA;IAAAb,cAAA,GAAAC,CAAA;IAED;IAAI;IAAA,CAAAD,cAAA,GAAAa,CAAA,WAAC,IAAI,CAACH,SAAS;IAAA;IAAA,CAAAV,cAAA,GAAAa,CAAA,UAAI,IAAI,CAACH,SAAS,CAACI,IAAI,EAAE,CAACC,MAAM,KAAK,CAAC,GAAE;MAAA;MAAAf,cAAA,GAAAa,CAAA;MAAAb,cAAA,GAAAC,CAAA;MACzD,MAAM,IAAIe,KAAK,CAAC,UAAU,CAAC;IAC7B,CAAC;IAAA;IAAA;MAAAhB,cAAA,GAAAa,CAAA;IAAA;EACH;EAEA;;;;;EAKUM,gBAAgBA,CAAA;IAAA;IAAAnB,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAC,CAAA;IACxB,OAAO;MACLK,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBE,SAAS,EAAE,IAAI,CAACA,SAAS,CAACY,WAAW,EAAE;MACvCV,SAAS,EAAE,IAAI,CAACA;KACjB;EACH;;AAWD;AAAAV,cAAA,GAAAC,CAAA;AA1EDoB,OAAA,CAAAlB,KAAA,GAAAA,KAAA","ignoreList":[]}