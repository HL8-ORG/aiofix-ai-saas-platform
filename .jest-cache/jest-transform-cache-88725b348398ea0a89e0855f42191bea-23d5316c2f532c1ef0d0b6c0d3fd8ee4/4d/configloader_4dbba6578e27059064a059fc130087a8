69172e69699cb61dff49395f6d6ed44d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineConfig = defineConfig;
exports.getConfig = getConfig;
exports.resetConfig = resetConfig;
const default_config_1 = require("./default-config");
/**
 * @function deepMerge
 * @description
 * 深度合并工具函数，用于合并两个对象的属性，支持嵌套对象的递归合并。
 * 该函数是配置系统的核心工具，用于合并默认配置和用户自定义配置。
 *
 * 主要原理与机制如下：
 * 1. 使用展开运算符创建目标对象的浅拷贝
 * 2. 遍历源对象的所有属性
 * 3. 对于嵌套对象进行递归合并
 * 4. 对于基本类型直接覆盖
 * 5. 保持数组类型不变
 *
 * 功能与业务规则：
 * 1. 对象深度合并
 * 2. 配置覆盖机制
 * 3. 类型安全保证
 * 4. 递归处理支持
 *
 * @param {Record<string, unknown>} target - 目标对象，将被合并的对象
 * @param {Record<string, unknown>} source - 源对象，提供要合并的属性
 * @returns {Record<string, unknown>} 返回合并后的新对象
 */
function deepMerge(target, source) {
    const result = { ...target };
    for (const key in source) {
        if (source[key] &&
            typeof source[key] === 'object' &&
            !Array.isArray(source[key])) {
            result[key] = deepMerge(result[key] || {}, source[key]);
        }
        else {
            result[key] = source[key];
        }
    }
    return result;
}
let currentAppConfig = { ...default_config_1.defaultConfiguration };
/**
 * @function defineConfig
 * @description
 * 定义配置，将提供的配置与现有的默认配置进行合并。
 * 该函数是配置系统的核心API，用于动态更新系统配置。
 *
 * 主要原理与机制如下：
 * 1. 验证提供的配置对象是否有效
 * 2. 使用deepMerge函数合并配置
 * 3. 更新全局配置对象
 * 4. 支持异步配置更新
 *
 * 功能与业务规则：
 * 1. 配置验证和合并
 * 2. 动态配置更新
 * 3. 错误处理和验证
 * 4. 配置完整性保证
 *
 * @param {Partial<IamConfig>} providedConfig - 要合并的配置对象
 * @returns {Promise<void>} 返回一个Promise，表示配置更新过程
 * @throws {Error} 当提供的配置无效时抛出错误
 */
async function defineConfig(providedConfig) {
    if (!providedConfig || typeof providedConfig !== 'object') {
        throw new Error('Invalid configuration provided. Expected a non-empty object.');
    }
    currentAppConfig = await deepMerge(currentAppConfig, providedConfig);
}
/**
 * @function getConfig
 * @description
 * 获取当前应用配置，返回一个只读的配置副本。
 * 该函数提供了对系统当前配置的安全访问。
 *
 * 主要原理与机制如下：
 * 1. 使用Object.freeze()创建不可变配置对象
 * 2. 使用展开运算符创建配置对象的深拷贝
 * 3. 返回只读类型，防止运行时修改
 * 4. 提供类型安全的配置访问
 *
 * 功能与业务规则：
 * 1. 配置获取和访问
 * 2. 配置对象保护
 * 3. 类型安全保证
 * 4. 配置完整性保证
 *
 * @returns {Readonly<Partial<IamConfig>>} 返回只读的当前配置对象
 */
function getConfig() {
    return Object.freeze({ ...currentAppConfig });
}
/**
 * @function resetConfig
 * @description
 * 重置配置到默认值，将当前配置恢复为系统默认配置。
 * 该函数用于配置恢复和调试目的。
 *
 * 主要原理与机制如下：
 * 1. 使用展开运算符复制默认配置
 * 2. 更新全局配置对象
 * 3. 记录重置操作到控制台
 * 4. 提供配置恢复机制
 *
 * 功能与业务规则：
 * 1. 配置重置和恢复
 * 2. 调试支持
 * 3. 配置回滚
 * 4. 系统状态恢复
 */
function resetConfig() {
    currentAppConfig = { ...default_config_1.defaultConfiguration };
    console.log('Aiofix IAM Config Reset to Defaults');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJsaWdsZS9WMS9BaW9maXgvYWlvZml4LWFpLXNhYXMtcGxhdGZvcm0vcGFja2FnZXMvY29uZmlnL3NyYy9jb25maWctbG9hZGVyLnRzIiwibWFwcGluZ3MiOiI7O0FBMEVBLG9DQVVDO0FBc0JELDhCQUVDO0FBb0JELGtDQUdDO0FBbklELHFEQUF3RDtBQUd4RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNCRztBQUNILFNBQVMsU0FBUyxDQUNoQixNQUErQixFQUMvQixNQUErQjtJQUUvQixNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUM7SUFFN0IsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUN6QixJQUNFLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDWCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRO1lBQy9CLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFDM0IsQ0FBQztZQUNELE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQ3BCLE1BQU0sQ0FBQyxHQUFHLENBQTZCLElBQUksRUFBRSxFQUM5QyxNQUFNLENBQUMsR0FBRyxDQUE0QixDQUN2QyxDQUFDO1FBQ0osQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELElBQUksZ0JBQWdCLEdBQXVCLEVBQUUsR0FBRyxxQ0FBb0IsRUFBRSxDQUFDO0FBRXZFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FxQkc7QUFDSSxLQUFLLFVBQVUsWUFBWSxDQUNoQyxjQUFrQztJQUVsQyxJQUFJLENBQUMsY0FBYyxJQUFJLE9BQU8sY0FBYyxLQUFLLFFBQVEsRUFBRSxDQUFDO1FBQzFELE1BQU0sSUFBSSxLQUFLLENBQ2IsOERBQThELENBQy9ELENBQUM7SUFDSixDQUFDO0lBRUQsZ0JBQWdCLEdBQUcsTUFBTSxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDdkUsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBQ0gsU0FBZ0IsU0FBUztJQUN2QixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLGdCQUFnQixFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBQ0gsU0FBZ0IsV0FBVztJQUN6QixnQkFBZ0IsR0FBRyxFQUFFLEdBQUcscUNBQW9CLEVBQUUsQ0FBQztJQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7QUFDckQsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9hcmxpZ2xlL1YxL0Fpb2ZpeC9haW9maXgtYWktc2Fhcy1wbGF0Zm9ybS9wYWNrYWdlcy9jb25maWcvc3JjL2NvbmZpZy1sb2FkZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmYXVsdENvbmZpZ3VyYXRpb24gfSBmcm9tICcuL2RlZmF1bHQtY29uZmlnJztcbmltcG9ydCB7IElhbUNvbmZpZyB9IGZyb20gJy4vY29uZmlnLnNlcnZpY2UnO1xuXG4vKipcbiAqIEBmdW5jdGlvbiBkZWVwTWVyZ2VcbiAqIEBkZXNjcmlwdGlvblxuICog5rex5bqm5ZCI5bm25bel5YW35Ye95pWw77yM55So5LqO5ZCI5bm25Lik5Liq5a+56LGh55qE5bGe5oCn77yM5pSv5oyB5bWM5aWX5a+56LGh55qE6YCS5b2S5ZCI5bm244CCXG4gKiDor6Xlh73mlbDmmK/phY3nva7ns7vnu5/nmoTmoLjlv4Plt6XlhbfvvIznlKjkuo7lkIjlubbpu5jorqTphY3nva7lkoznlKjmiLfoh6rlrprkuYnphY3nva7jgIJcbiAqXG4gKiDkuLvopoHljp/nkIbkuI7mnLrliLblpoLkuIvvvJpcbiAqIDEuIOS9v+eUqOWxleW8gOi/kOeul+espuWIm+W7uuebruagh+WvueixoeeahOa1heaLt+i0nVxuICogMi4g6YGN5Y6G5rqQ5a+56LGh55qE5omA5pyJ5bGe5oCnXG4gKiAzLiDlr7nkuo7ltYzlpZflr7nosaHov5vooYzpgJLlvZLlkIjlubZcbiAqIDQuIOWvueS6juWfuuacrOexu+Wei+ebtOaOpeimhuebllxuICogNS4g5L+d5oyB5pWw57uE57G75Z6L5LiN5Y+YXG4gKlxuICog5Yqf6IO95LiO5Lia5Yqh6KeE5YiZ77yaXG4gKiAxLiDlr7nosaHmt7HluqblkIjlubZcbiAqIDIuIOmFjee9ruimhuebluacuuWItlxuICogMy4g57G75Z6L5a6J5YWo5L+d6K+BXG4gKiA0LiDpgJLlvZLlpITnkIbmlK/mjIFcbiAqXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSB0YXJnZXQgLSDnm67moIflr7nosaHvvIzlsIbooqvlkIjlubbnmoTlr7nosaFcbiAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgdW5rbm93bj59IHNvdXJjZSAtIOa6kOWvueixoe+8jOaPkOS+m+imgeWQiOW5tueahOWxnuaAp1xuICogQHJldHVybnMge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSDov5Tlm57lkIjlubblkI7nmoTmlrDlr7nosaFcbiAqL1xuZnVuY3Rpb24gZGVlcE1lcmdlKFxuICB0YXJnZXQ6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuICBzb3VyY2U6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuKTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4ge1xuICBjb25zdCByZXN1bHQgPSB7IC4uLnRhcmdldCB9O1xuXG4gIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xuICAgIGlmIChcbiAgICAgIHNvdXJjZVtrZXldICYmXG4gICAgICB0eXBlb2Ygc291cmNlW2tleV0gPT09ICdvYmplY3QnICYmXG4gICAgICAhQXJyYXkuaXNBcnJheShzb3VyY2Vba2V5XSlcbiAgICApIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKFxuICAgICAgICAocmVzdWx0W2tleV0gYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pIHx8IHt9LFxuICAgICAgICBzb3VyY2Vba2V5XSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubGV0IGN1cnJlbnRBcHBDb25maWc6IFBhcnRpYWw8SWFtQ29uZmlnPiA9IHsgLi4uZGVmYXVsdENvbmZpZ3VyYXRpb24gfTtcblxuLyoqXG4gKiBAZnVuY3Rpb24gZGVmaW5lQ29uZmlnXG4gKiBAZGVzY3JpcHRpb25cbiAqIOWumuS5iemFjee9ru+8jOWwhuaPkOS+m+eahOmFjee9ruS4jueOsOacieeahOm7mOiupOmFjee9rui/m+ihjOWQiOW5tuOAglxuICog6K+l5Ye95pWw5piv6YWN572u57O757uf55qE5qC45b+DQVBJ77yM55So5LqO5Yqo5oCB5pu05paw57O757uf6YWN572u44CCXG4gKlxuICog5Li76KaB5Y6f55CG5LiO5py65Yi25aaC5LiL77yaXG4gKiAxLiDpqozor4Hmj5DkvpvnmoTphY3nva7lr7nosaHmmK/lkKbmnInmlYhcbiAqIDIuIOS9v+eUqGRlZXBNZXJnZeWHveaVsOWQiOW5tumFjee9rlxuICogMy4g5pu05paw5YWo5bGA6YWN572u5a+56LGhXG4gKiA0LiDmlK/mjIHlvILmraXphY3nva7mm7TmlrBcbiAqXG4gKiDlip/og73kuI7kuJrliqHop4TliJnvvJpcbiAqIDEuIOmFjee9rumqjOivgeWSjOWQiOW5tlxuICogMi4g5Yqo5oCB6YWN572u5pu05pawXG4gKiAzLiDplJnor6/lpITnkIblkozpqozor4FcbiAqIDQuIOmFjee9ruWujOaVtOaAp+S/neivgVxuICpcbiAqIEBwYXJhbSB7UGFydGlhbDxJYW1Db25maWc+fSBwcm92aWRlZENvbmZpZyAtIOimgeWQiOW5tueahOmFjee9ruWvueixoVxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IOi/lOWbnuS4gOS4qlByb21pc2XvvIzooajnpLrphY3nva7mm7TmlrDov4fnqItcbiAqIEB0aHJvd3Mge0Vycm9yfSDlvZPmj5DkvpvnmoTphY3nva7ml6DmlYjml7bmipvlh7rplJnor69cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlZmluZUNvbmZpZyhcbiAgcHJvdmlkZWRDb25maWc6IFBhcnRpYWw8SWFtQ29uZmlnPixcbik6IFByb21pc2U8dm9pZD4ge1xuICBpZiAoIXByb3ZpZGVkQ29uZmlnIHx8IHR5cGVvZiBwcm92aWRlZENvbmZpZyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnSW52YWxpZCBjb25maWd1cmF0aW9uIHByb3ZpZGVkLiBFeHBlY3RlZCBhIG5vbi1lbXB0eSBvYmplY3QuJyxcbiAgICApO1xuICB9XG5cbiAgY3VycmVudEFwcENvbmZpZyA9IGF3YWl0IGRlZXBNZXJnZShjdXJyZW50QXBwQ29uZmlnLCBwcm92aWRlZENvbmZpZyk7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uIGdldENvbmZpZ1xuICogQGRlc2NyaXB0aW9uXG4gKiDojrflj5blvZPliY3lupTnlKjphY3nva7vvIzov5Tlm57kuIDkuKrlj6ror7vnmoTphY3nva7lia/mnKzjgIJcbiAqIOivpeWHveaVsOaPkOS+m+S6huWvueezu+e7n+W9k+WJjemFjee9rueahOWuieWFqOiuv+mXruOAglxuICpcbiAqIOS4u+imgeWOn+eQhuS4juacuuWItuWmguS4i++8mlxuICogMS4g5L2/55SoT2JqZWN0LmZyZWV6ZSgp5Yib5bu65LiN5Y+v5Y+Y6YWN572u5a+56LGhXG4gKiAyLiDkvb/nlKjlsZXlvIDov5DnrpfnrKbliJvlu7rphY3nva7lr7nosaHnmoTmt7Hmi7fotJ1cbiAqIDMuIOi/lOWbnuWPquivu+exu+Wei++8jOmYsuatoui/kOihjOaXtuS/ruaUuVxuICogNC4g5o+Q5L6b57G75Z6L5a6J5YWo55qE6YWN572u6K6/6ZeuXG4gKlxuICog5Yqf6IO95LiO5Lia5Yqh6KeE5YiZ77yaXG4gKiAxLiDphY3nva7ojrflj5blkozorr/pl65cbiAqIDIuIOmFjee9ruWvueixoeS/neaKpFxuICogMy4g57G75Z6L5a6J5YWo5L+d6K+BXG4gKiA0LiDphY3nva7lrozmlbTmgKfkv53or4FcbiAqXG4gKiBAcmV0dXJucyB7UmVhZG9ubHk8UGFydGlhbDxJYW1Db25maWc+Pn0g6L+U5Zue5Y+q6K+755qE5b2T5YmN6YWN572u5a+56LGhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb25maWcoKTogUmVhZG9ubHk8UGFydGlhbDxJYW1Db25maWc+PiB7XG4gIHJldHVybiBPYmplY3QuZnJlZXplKHsgLi4uY3VycmVudEFwcENvbmZpZyB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb24gcmVzZXRDb25maWdcbiAqIEBkZXNjcmlwdGlvblxuICog6YeN572u6YWN572u5Yiw6buY6K6k5YC877yM5bCG5b2T5YmN6YWN572u5oGi5aSN5Li657O757uf6buY6K6k6YWN572u44CCXG4gKiDor6Xlh73mlbDnlKjkuo7phY3nva7mgaLlpI3lkozosIPor5Xnm67nmoTjgIJcbiAqXG4gKiDkuLvopoHljp/nkIbkuI7mnLrliLblpoLkuIvvvJpcbiAqIDEuIOS9v+eUqOWxleW8gOi/kOeul+espuWkjeWItum7mOiupOmFjee9rlxuICogMi4g5pu05paw5YWo5bGA6YWN572u5a+56LGhXG4gKiAzLiDorrDlvZXph43nva7mk43kvZzliLDmjqfliLblj7BcbiAqIDQuIOaPkOS+m+mFjee9ruaBouWkjeacuuWItlxuICpcbiAqIOWKn+iDveS4juS4muWKoeinhOWIme+8mlxuICogMS4g6YWN572u6YeN572u5ZKM5oGi5aSNXG4gKiAyLiDosIPor5XmlK/mjIFcbiAqIDMuIOmFjee9ruWbnua7mlxuICogNC4g57O757uf54q25oCB5oGi5aSNXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldENvbmZpZygpOiB2b2lkIHtcbiAgY3VycmVudEFwcENvbmZpZyA9IHsgLi4uZGVmYXVsdENvbmZpZ3VyYXRpb24gfTtcbiAgY29uc29sZS5sb2coJ0Fpb2ZpeCBJQU0gQ29uZmlnIFJlc2V0IHRvIERlZmF1bHRzJyk7XG59XG4iXSwidmVyc2lvbiI6M30=