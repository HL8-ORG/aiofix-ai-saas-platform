{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/adapters/postgresql.adapter.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/adapters/postgresql.adapter.spec.ts"],"sourcesContent":["/// <reference types=\"jest\" />\n/* eslint-env jest */\nimport {\n  describe,\n  it,\n  expect,\n  jest,\n  beforeEach,\n  afterEach,\n} from '@jest/globals';\n/**\n * @file postgresql.adapter.spec.ts\n * @description PostgreSQL适配器单元测试\n *\n * 测试PostgreSQL适配器的连接管理、查询执行、事务管理、健康检查等功能。\n */\n\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { PinoLoggerService, LogContext } from '@aiofix/logging';\nimport { PostgreSQLAdapter } from './postgresql.adapter';\nimport type { DatabaseConfig } from '../interfaces/database.interface';\n\n// Mock pg and knex\njest.mock('pg', () => ({\n  Pool: jest.fn().mockImplementation(() => ({\n    connect: jest.fn(),\n    query: jest.fn(),\n    end: jest.fn(),\n    on: jest.fn(),\n    totalCount: 0,\n    idleCount: 0,\n    waitingCount: 0,\n  })),\n}));\n\njest.mock('knex', () => ({\n  knex: jest.fn().mockImplementation(() => ({\n    raw: jest.fn(),\n    select: jest.fn(),\n    insert: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    transaction: jest.fn(),\n    destroy: jest.fn(),\n  })),\n}));\n\ndescribe('PostgreSQLAdapter', () => {\n  let adapter: PostgreSQLAdapter;\n  let mockEventEmitter: jest.Mocked<EventEmitter2>;\n  let mockLogger: jest.Mocked<PinoLoggerService>;\n  let mockConfig: DatabaseConfig;\n\n  beforeEach(async () => {\n    mockEventEmitter = {\n      emit: jest.fn(),\n      on: jest.fn(),\n      once: jest.fn(),\n      removeListener: jest.fn(),\n      removeAllListeners: jest.fn(),\n      setMaxListeners: jest.fn(),\n      getMaxListeners: jest.fn(),\n      listeners: jest.fn(),\n      rawListeners: jest.fn(),\n      listenerCount: jest.fn(),\n      prependListener: jest.fn(),\n      prependOnceListener: jest.fn(),\n      eventNames: jest.fn(),\n    } as unknown;\n\n    mockLogger = {\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n      debug: jest.fn(),\n      trace: jest.fn(),\n      fatal: jest.fn(),\n      child: jest.fn(),\n    } as unknown;\n\n    mockConfig = {\n      type: 'postgresql',\n      host: 'localhost',\n      port: 5432,\n      username: 'test',\n      password: 'test',\n      database: 'test',\n      schema: 'public',\n      ssl: false,\n      pool: {\n        min: 2,\n        max: 10,\n        acquireTimeoutMillis: 60000,\n        createTimeoutMillis: 30000,\n        destroyTimeoutMillis: 5000,\n        idleTimeoutMillis: 30000,\n        reapIntervalMillis: 1000,\n        createRetryIntervalMillis: 200,\n      },\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        {\n          provide: 'DATABASE_CONFIG',\n          useValue: mockConfig,\n        },\n        {\n          provide: 'DATABASE_NAME',\n          useValue: 'test-postgresql',\n        },\n        {\n          provide: EventEmitter2,\n          useValue: mockEventEmitter,\n        },\n        {\n          provide: PinoLoggerService,\n          useValue: mockLogger,\n        },\n        PostgreSQLAdapter,\n      ],\n    }).compile();\n\n    adapter = module.get<PostgreSQLAdapter>(PostgreSQLAdapter);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('初始化', () => {\n    it('应该正确初始化适配器', () => {\n      expect(adapter.name).toBe('test-postgresql');\n      expect(adapter.type).toBe('postgresql');\n      expect(adapter.config).toEqual(mockConfig);\n      expect(adapter.eventEmitter).toBe(mockEventEmitter);\n    });\n\n    it('应该初始化统计信息', () => {\n      const stats = (adapter as unknown).stats;\n      expect(stats.totalQueries).toBe(0);\n      expect(stats.successfulQueries).toBe(0);\n      expect(stats.failedQueries).toBe(0);\n      expect(stats.averageResponseTime).toBe(0);\n      expect(stats.maxResponseTime).toBe(0);\n      expect(stats.minResponseTime).toBe(0);\n      expect(stats.activeConnections).toBe(0);\n      expect(stats.idleConnections).toBe(0);\n    });\n  });\n\n  describe('连接管理', () => {\n    it('应该能够连接到数据库', async () => {\n      const mockPool = (adapter as unknown).pool as unknown;\n      const mockClient = {\n        query: (jest.fn() as unknown).mockResolvedValue({\n          rows: [{ result: 1 }],\n        }) as unknown,\n        release: jest.fn() as unknown,\n      };\n      mockPool.connect.mockResolvedValue(mockClient as unknown);\n\n      await adapter.connect();\n\n      expect(mockPool.connect).toHaveBeenCalled();\n      expect(adapter.isConnected).toBe(true);\n      expect(mockEventEmitter.emit).toHaveBeenCalledWith(\n        'database.connected',\n        expect.objectContaining({\n          adapter: 'test-postgresql',\n          timestamp: expect.unknown(Date),\n        }),\n      );\n    });\n\n    it('应该能够断开数据库连接', async () => {\n      const mockPool = (adapter as unknown).pool as unknown;\n      mockPool.end.mockResolvedValue(undefined);\n\n      await adapter.disconnect();\n\n      expect(mockPool.end).toHaveBeenCalled();\n      expect(adapter.isConnected).toBe(false);\n      expect(mockEventEmitter.emit).toHaveBeenCalledWith(\n        'database.disconnected',\n        expect.objectContaining({\n          adapter: 'test-postgresql',\n          timestamp: expect.unknown(Date),\n        }),\n      );\n    });\n\n    it('应该处理连接错误', async () => {\n      const mockPool = (adapter as unknown).pool as unknown;\n      const error = new Error('Connection failed');\n      mockPool.connect.mockRejectedValue(error);\n\n      await expect(adapter.connect()).rejects.toThrow('Connection failed');\n\n      // 检查最后一次错误日志调用\n      const errorCalls = mockLogger.error.mock.calls;\n      const lastErrorCall = errorCalls[errorCalls.length - 1];\n      expect(lastErrorCall[0]).toContain(\n        'Failed to connect to PostgreSQL database',\n      );\n      expect(lastErrorCall[1]).toBe(LogContext.DATABASE);\n      expect(lastErrorCall[2]).toMatchObject({\n        adapter: 'test-postgresql',\n      });\n    });\n  });\n\n  describe('查询执行', () => {\n    beforeEach(async () => {\n      const mockPool = (adapter as unknown).pool as unknown;\n      const mockClient = {\n        query: (jest.fn() as unknown).mockResolvedValue({\n          rows: [{ result: 1 }],\n        }) as unknown,\n        release: jest.fn() as unknown,\n      };\n      mockPool.connect.mockResolvedValue(mockClient);\n      await adapter.connect();\n    });\n\n    it('应该能够执行查询', async () => {\n      const mockPool = (adapter as unknown).pool as unknown;\n      const mockResult = {\n        rows: [{ id: 1, name: 'test' }],\n        rowCount: 1,\n        command: 'SELECT',\n      };\n      (mockPool.query as unknown).mockResolvedValue(mockResult);\n\n      const result = await adapter.query('SELECT * FROM users WHERE id = $1', [\n        1,\n      ]);\n\n      expect(mockPool.query).toHaveBeenCalledWith(\n        expect.objectContaining({\n          text: 'SELECT * FROM users WHERE id = $1',\n          values: [1],\n        }),\n      );\n      expect(result).toEqual(mockResult);\n      expect(mockEventEmitter.emit).toHaveBeenCalledWith(\n        'database.query_executed',\n        expect.objectContaining({\n          adapter: 'test-postgresql',\n          sql: 'SELECT * FROM users WHERE id = $1',\n          params: [1],\n          responseTime: expect.unknown(Number),\n        }),\n      );\n    });\n\n    it('应该能够执行命令', async () => {\n      const mockPool = (adapter as unknown).pool as unknown;\n      const mockResult = {\n        rowCount: 1,\n        command: 'INSERT',\n      };\n      (mockPool.query as unknown).mockResolvedValue(mockResult);\n\n      const result = await adapter.execute(\n        'INSERT INTO users (name) VALUES ($1)',\n        ['test'],\n      );\n\n      expect(mockPool.query).toHaveBeenCalledWith(\n        expect.objectContaining({\n          text: 'INSERT INTO users (name) VALUES ($1)',\n          values: ['test'],\n        }),\n      );\n      expect(result).toEqual(mockResult);\n    });\n\n    it('应该处理查询错误', async () => {\n      const mockPool = (adapter as unknown).pool;\n      const error = new Error('Query failed');\n      (mockPool.query as unknown).mockRejectedValue(error);\n\n      await expect(\n        adapter.query('SELECT * FROM invalid_table'),\n      ).rejects.toThrow('Query failed');\n\n      // 检查最后一次错误日志调用\n      const errorCalls = mockLogger.error.mock.calls;\n      const lastErrorCall = errorCalls[errorCalls.length - 1];\n      expect(lastErrorCall[0]).toContain('Query failed');\n      expect(lastErrorCall[1]).toBe(LogContext.DATABASE);\n      expect(lastErrorCall[2]).toMatchObject({\n        adapter: 'test-postgresql',\n      });\n    });\n\n    it('应该更新统计信息', async () => {\n      const mockPool = (adapter as unknown).pool;\n      const mockResult = { rows: [], rowCount: 0, command: 'SELECT' };\n      (mockPool.query as unknown).mockResolvedValue(mockResult);\n\n      await adapter.query('SELECT 1');\n\n      const stats = await adapter.getStats();\n      expect(stats.totalQueries).toBe(1);\n      expect(stats.successfulQueries).toBe(1);\n      expect(stats.failedQueries).toBe(0);\n      expect(stats.averageResponseTime).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('事务管理', () => {\n    beforeEach(async () => {\n      const mockPool = (adapter as unknown).pool;\n      const mockClient = {\n        query: (jest.fn() as unknown).mockResolvedValue({\n          rows: [{ result: 1 }],\n        }) as unknown,\n        release: jest.fn() as unknown,\n      };\n      mockPool.connect.mockResolvedValue(mockClient);\n      await adapter.connect();\n    });\n\n    it('应该能够执行事务', async () => {\n      const mockKnex = (adapter as unknown).knexInstance;\n      mockKnex.transaction.mockImplementation(async (callback: unknown) => {\n        return await callback({});\n      });\n\n      const transactionCallback: unknown = jest.fn();\n      (transactionCallback as unknown).mockResolvedValue('success');\n      const result = await adapter.transaction(transactionCallback);\n\n      expect(mockKnex.transaction).toHaveBeenCalled();\n      expect(transactionCallback).toHaveBeenCalled();\n      expect(result).toBe('success');\n    });\n\n    it('应该在事务失败时回滚', async () => {\n      const mockKnex = (adapter as unknown).knexInstance;\n      mockKnex.transaction.mockImplementation(async (callback: unknown) => {\n        return await callback({});\n      });\n\n      const transactionCallback: unknown = jest.fn();\n      (transactionCallback as unknown).mockRejectedValue(\n        new Error('Transaction failed'),\n      );\n\n      await expect(adapter.transaction(transactionCallback)).rejects.toThrow(\n        'Transaction failed',\n      );\n    });\n  });\n\n  describe('健康检查', () => {\n    it('应该返回健康状态', async () => {\n      const mockPool = (adapter as unknown).pool;\n      mockPool.totalCount = 10;\n      mockPool.idleCount = 8;\n      mockPool.waitingCount = 0;\n\n      // 确保连接状态为 true\n      (adapter as unknown).isConnectedFlag = true;\n\n      // Mock 查询成功\n      (mockPool.query as unknown).mockResolvedValue({\n        rows: [{ health_check: 1 }],\n      });\n\n      const health = await adapter.getHealth();\n\n      expect(health.healthy).toBe(true);\n      expect(health.connected).toBe(adapter.isConnected);\n      expect(health.responseTime).toBeGreaterThanOrEqual(0);\n      expect(health.lastCheck).toBeInstanceOf(Date);\n      expect(health.poolStatus).toEqual({\n        total: 10,\n        idle: 8,\n        active: 2,\n        waiting: 0,\n      });\n    });\n\n    it('应该处理连接池错误', async () => {\n      const mockPool = (adapter as unknown).pool;\n      mockPool.totalCount = 0;\n      mockPool.idleCount = 0;\n      mockPool.waitingCount = 0;\n\n      const health = await adapter.getHealth();\n\n      expect(health.healthy).toBe(false);\n      expect(health.error).toBeDefined();\n    });\n  });\n\n  describe('统计信息', () => {\n    it('应该返回统计信息', async () => {\n      const stats = await adapter.getStats();\n\n      expect(stats.totalQueries).toBeGreaterThanOrEqual(0);\n      expect(stats.successfulQueries).toBeGreaterThanOrEqual(0);\n      expect(stats.failedQueries).toBeGreaterThanOrEqual(0);\n      expect(stats.averageResponseTime).toBeGreaterThanOrEqual(0);\n      expect(stats.maxResponseTime).toBeGreaterThanOrEqual(0);\n      expect(stats.minResponseTime).toBeGreaterThanOrEqual(0);\n      expect(stats.activeConnections).toBeGreaterThanOrEqual(0);\n      expect(stats.idleConnections).toBeGreaterThanOrEqual(0);\n      expect(stats.lastReset).toBeInstanceOf(Date);\n    });\n\n    it('应该能够重置统计信息', async () => {\n      await adapter.resetStats();\n\n      const stats = await adapter.getStats();\n      expect(stats.totalQueries).toBe(0);\n      expect(stats.successfulQueries).toBe(0);\n      expect(stats.failedQueries).toBe(0);\n      expect(stats.averageResponseTime).toBe(0);\n      expect(stats.maxResponseTime).toBe(0);\n      expect(stats.minResponseTime).toBe(0);\n    });\n  });\n\n  describe('连接测试', () => {\n    it('应该能够ping数据库', async () => {\n      const mockPool = (adapter as unknown).pool;\n      (mockPool.query as unknown).mockResolvedValue({ rows: [{ result: 1 }] });\n\n      const result = await adapter.ping();\n\n      expect(result).toBe(true);\n      expect(mockPool.query).toHaveBeenCalledWith(\n        expect.objectContaining({\n          text: 'SELECT 1',\n          values: [],\n        }),\n      );\n    });\n\n    it('应该在ping失败时返回false', async () => {\n      const mockPool = (adapter as unknown).pool;\n      (mockPool.query as unknown).mockRejectedValue(new Error('Ping failed'));\n\n      const result = await adapter.ping();\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('事件通知', () => {\n    it('应该在查询执行时发出事件', async () => {\n      const mockPool = (adapter as unknown).pool;\n      const mockClient = {\n        query: (jest.fn() as unknown).mockResolvedValue({\n          rows: [{ result: 1 }],\n        }) as unknown,\n        release: jest.fn() as unknown,\n      };\n      mockPool.connect.mockResolvedValue(mockClient as unknown);\n      await adapter.connect();\n\n      const mockResult = { rows: [], rowCount: 0, command: 'SELECT' };\n      (mockPool.query as unknown).mockResolvedValue(mockResult);\n\n      await adapter.query('SELECT 1');\n\n      expect(mockEventEmitter.emit).toHaveBeenCalledWith(\n        'database.query_executed',\n        expect.objectContaining({\n          adapter: 'test-postgresql',\n          sql: 'SELECT 1',\n          responseTime: expect.unknown(Number),\n        }),\n      );\n    });\n\n    it('应该在连接状态变化时发出事件', async () => {\n      const mockPool = (adapter as unknown).pool;\n      const mockClient = {\n        query: (jest.fn() as unknown).mockResolvedValue({\n          rows: [{ result: 1 }],\n        }) as unknown,\n        release: jest.fn() as unknown,\n      };\n      mockPool.connect.mockResolvedValue(mockClient);\n\n      await adapter.connect();\n\n      expect(mockEventEmitter.emit).toHaveBeenCalledWith(\n        'database.connected',\n        expect.objectContaining({\n          adapter: 'test-postgresql',\n          timestamp: expect.unknown(Date),\n        }),\n      );\n    });\n  });\n});\n"],"version":3}