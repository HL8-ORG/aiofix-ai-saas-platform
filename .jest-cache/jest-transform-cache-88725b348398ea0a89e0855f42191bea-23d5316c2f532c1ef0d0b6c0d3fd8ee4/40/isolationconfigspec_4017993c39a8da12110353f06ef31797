598f31e12b4ed9148af759d157adf490
"use strict";
/**
 * @file isolation.config.spec.ts
 * @description 隔离配置服务单元测试
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const isolation_config_1 = require("./isolation.config");
describe('IsolationConfigService', () => {
    let service;
    let configService;
    beforeEach(async () => {
        const mockConfigService = {
            get: jest.fn().mockReturnValue(undefined),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                isolation_config_1.IsolationConfigService,
                {
                    provide: config_1.ConfigService,
                    useValue: mockConfigService,
                },
            ],
        }).compile();
        service = module.get(isolation_config_1.IsolationConfigService);
        configService = module.get(config_1.ConfigService);
    });
    describe('getStrategy', () => {
        it('should return TABLE_LEVEL as default strategy', () => {
            // 模拟环境变量未设置
            jest.spyOn(configService, 'get').mockReturnValue(undefined);
            const strategy = service.getStrategy();
            expect(strategy).toBe(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
        });
        it('should return DATABASE_LEVEL when configured', () => {
            jest.spyOn(configService, 'get').mockReturnValue('DATABASE_LEVEL');
            const strategy = service.getStrategy();
            expect(strategy).toBe(isolation_config_1.IsolationStrategy.DATABASE_LEVEL);
        });
        it('should return SCHEMA_LEVEL when configured', () => {
            jest.spyOn(configService, 'get').mockReturnValue('SCHEMA_LEVEL');
            const strategy = service.getStrategy();
            expect(strategy).toBe(isolation_config_1.IsolationStrategy.SCHEMA_LEVEL);
        });
        it('should return TABLE_LEVEL when configured', () => {
            jest.spyOn(configService, 'get').mockReturnValue('TABLE_LEVEL');
            const strategy = service.getStrategy();
            expect(strategy).toBe(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
        });
        it('should throw error for invalid strategy', () => {
            jest.spyOn(configService, 'get').mockReturnValue('INVALID_STRATEGY');
            expect(() => service.getStrategy()).toThrow('Invalid isolation strategy: INVALID_STRATEGY');
        });
    });
    describe('getConnectionConfig', () => {
        beforeEach(() => {
            // 设置默认环境变量
            jest.spyOn(configService, 'get').mockImplementation((key) => {
                const defaults = {
                    PLATFORM_DB_NAME: 'aiofix_platform',
                    EVENTS_DB_NAME: 'aiofix_events',
                    AI_VECTORS_DB_NAME: 'aiofix_ai_vectors',
                    TENANT_DB_PREFIX: 'tenant_',
                    TENANT_SCHEMA_PREFIX: 'tenant_',
                    SHARED_SCHEMA_NAME: 'shared',
                };
                return defaults[key];
            });
        });
        it('should return platform database config for TABLE_LEVEL strategy', () => {
            jest
                .spyOn(service, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
            const config = service.getConnectionConfig('tenant-123');
            expect(config).toEqual({
                database: 'aiofix_platform',
                tenantId: 'tenant-123',
            });
        });
        it('should return tenant database config for DATABASE_LEVEL strategy', () => {
            jest
                .spyOn(service, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.DATABASE_LEVEL);
            const config = service.getConnectionConfig('tenant-123');
            expect(config).toEqual({
                database: 'tenant_tenant-123',
                tenantId: 'tenant-123',
            });
        });
        it('should return schema config for SCHEMA_LEVEL strategy', () => {
            jest
                .spyOn(service, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.SCHEMA_LEVEL);
            const config = service.getConnectionConfig('tenant-123');
            expect(config).toEqual({
                database: 'aiofix_platform',
                schema: 'tenant_tenant-123',
                tenantId: 'tenant-123',
            });
        });
        it('should return platform config when no tenantId provided', () => {
            jest
                .spyOn(service, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
            const config = service.getConnectionConfig();
            expect(config).toEqual({
                database: 'aiofix_platform',
            });
        });
    });
    describe('shouldEnableRLS', () => {
        it('should return true by default', () => {
            jest.spyOn(configService, 'get').mockReturnValue(undefined);
            const result = service.shouldEnableRLS();
            expect(result).toBe(true);
        });
        it('should return true when ENABLE_RLS is true', () => {
            jest.spyOn(configService, 'get').mockReturnValue('true');
            const result = service.shouldEnableRLS();
            expect(result).toBe(true);
        });
        it('should return false when ENABLE_RLS is false', () => {
            jest.spyOn(configService, 'get').mockReturnValue('false');
            const result = service.shouldEnableRLS();
            expect(result).toBe(false);
        });
    });
    describe('getDatabaseNames', () => {
        beforeEach(() => {
            jest.spyOn(configService, 'get').mockImplementation((key) => {
                const defaults = {
                    PLATFORM_DB_NAME: 'aiofix_platform',
                    EVENTS_DB_NAME: 'aiofix_events',
                    AI_VECTORS_DB_NAME: 'aiofix_ai_vectors',
                };
                return defaults[key];
            });
        });
        it('should return correct database names', () => {
            expect(service.getPlatformDatabaseName()).toBe('aiofix_platform');
            expect(service.getEventsDatabaseName()).toBe('aiofix_events');
            expect(service.getAiVectorsDatabaseName()).toBe('aiofix_ai_vectors');
        });
    });
    describe('getTenantIdField', () => {
        it('should return default tenant field name', () => {
            jest.spyOn(configService, 'get').mockReturnValue(undefined);
            const fieldName = service.getTenantIdField();
            expect(fieldName).toBe('tenant_id');
        });
        it('should return configured tenant field name', () => {
            jest.spyOn(configService, 'get').mockReturnValue('custom_tenant_id');
            const fieldName = service.getTenantIdField();
            expect(fieldName).toBe('custom_tenant_id');
        });
    });
    describe('shouldAutoAddTenantCondition', () => {
        it('should return true by default', () => {
            jest.spyOn(configService, 'get').mockReturnValue(undefined);
            const result = service.shouldAutoAddTenantCondition();
            expect(result).toBe(true);
        });
        it('should return configured value', () => {
            jest.spyOn(configService, 'get').mockReturnValue('false');
            const result = service.shouldAutoAddTenantCondition();
            expect(result).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJsaWdsZS9WMS9BaW9maXgvYWlvZml4LWFpLXNhYXMtcGxhdGZvcm0vcGFja2FnZXMvZGF0YWJhc2Uvc3JjL2NvbmZpZy9pc29sYXRpb24uY29uZmlnLnNwZWMudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7QUFFSCw2Q0FBc0Q7QUFDdEQsMkNBQTZEO0FBQzdELHlEQUErRTtBQUUvRSxRQUFRLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ3RDLElBQUksT0FBK0IsQ0FBQztJQUNwQyxJQUFJLGFBQTRCLENBQUM7SUFFakMsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1BQU0saUJBQWlCLEdBQUc7WUFDeEIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDO1NBQzFDLENBQUM7UUFFRixNQUFNLE1BQU0sR0FBa0IsTUFBTSxjQUFJLENBQUMsbUJBQW1CLENBQUM7WUFDM0QsU0FBUyxFQUFFO2dCQUNULHlDQUFzQjtnQkFDdEI7b0JBQ0UsT0FBTyxFQUFFLHNCQUFhO29CQUN0QixRQUFRLEVBQUUsaUJBQWlCO2lCQUM1QjthQUNGO1NBQ0YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWIsT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQXlCLHlDQUFzQixDQUFDLENBQUM7UUFDckUsYUFBYSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQWdCLHNCQUFhLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO1FBQzNCLEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxHQUFHLEVBQUU7WUFDdkQsWUFBWTtZQUNaLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUU1RCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDdkMsTUFBTSxD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LGtCQUFrQixDQUFDLENBQUM7WUFFckUsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDN0MsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO1FBQzVDLEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7WUFDdkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRTVELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyw0QkFBNEIsRUFBRSxDQUFDO1lBQ3RELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsZ0NBQWdDLEVBQUUsR0FBRyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUUxRCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztZQUN0RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9hcmxpZ2xlL1YxL0Fpb2ZpeC9haW9maXgtYWktc2Fhcy1wbGF0Zm9ybS9wYWNrYWdlcy9kYXRhYmFzZS9zcmMvY29uZmlnL2lzb2xhdGlvbi5jb25maWcuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIGlzb2xhdGlvbi5jb25maWcuc3BlYy50c1xuICogQGRlc2NyaXB0aW9uIOmalOemu+mFjee9ruacjeWKoeWNleWFg+a1i+ivlVxuICovXG5cbmltcG9ydCB7IFRlc3QsIFRlc3RpbmdNb2R1bGUgfSBmcm9tICdAbmVzdGpzL3Rlc3RpbmcnO1xuaW1wb3J0IHsgQ29uZmlnTW9kdWxlLCBDb25maWdTZXJ2aWNlIH0gZnJvbSAnQG5lc3Rqcy9jb25maWcnO1xuaW1wb3J0IHsgSXNvbGF0aW9uQ29uZmlnU2VydmljZSwgSXNvbGF0aW9uU3RyYXRlZ3kgfSBmcm9tICcuL2lzb2xhdGlvbi5jb25maWcnO1xuXG5kZXNjcmliZSgnSXNvbGF0aW9uQ29uZmlnU2VydmljZScsICgpID0+IHtcbiAgbGV0IHNlcnZpY2U6IElzb2xhdGlvbkNvbmZpZ1NlcnZpY2U7XG4gIGxldCBjb25maWdTZXJ2aWNlOiBDb25maWdTZXJ2aWNlO1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tDb25maWdTZXJ2aWNlID0ge1xuICAgICAgZ2V0OiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHVuZGVmaW5lZCksXG4gICAgfTtcblxuICAgIGNvbnN0IG1vZHVsZTogVGVzdGluZ01vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgSXNvbGF0aW9uQ29uZmlnU2VydmljZSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IENvbmZpZ1NlcnZpY2UsXG4gICAgICAgICAgdXNlVmFsdWU6IG1vY2tDb25maWdTZXJ2aWNlLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KS5jb21waWxlKCk7XG5cbiAgICBzZXJ2aWNlID0gbW9kdWxlLmdldDxJc29sYXRpb25Db25maWdTZXJ2aWNlPihJc29sYXRpb25Db25maWdTZXJ2aWNlKTtcbiAgICBjb25maWdTZXJ2aWNlID0gbW9kdWxlLmdldDxDb25maWdTZXJ2aWNlPihDb25maWdTZXJ2aWNlKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldFN0cmF0ZWd5JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIFRBQkxFX0xFVkVMIGFzIGRlZmF1bHQgc3RyYXRlZ3knLCAoKSA9PiB7XG4gICAgICAvLyDmqKHmi5/njq/looPlj5jph4/mnKrorr7nva5cbiAgICAgIGplc3Quc3B5T24oY29uZmlnU2VydmljZSwgJ2dldCcpLm1vY2tSZXR1cm5WYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICBjb25zdCBzdHJhdGVneSA9IHNlcnZpY2UuZ2V0U3RyYXRlZ3koKTtcbiAgICAgIGV4cGVjdChzdHJhdGVneSkudG9CZShJc29sYXRpb25TdHJhdGVneS5UQUJMRV9MRVZFTCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBEQVRBQkFTRV9MRVZFTCB3aGVuIGNvbmZpZ3VyZWQnLCAoKSA9PiB7XG4gICAgICBqZXN0LnNweU9uKGNvbmZpZ1NlcnZpY2UsICdnZXQnKS5tb2NrUmV0dXJuVmFsdWUoJ0RBVEFCQVNFX0xFVkVMJyk7XG5cbiAgICAgIGNvbnN0IHN0cmF0ZWd5ID0gc2VydmljZS5nZXRTdHJhdGVneSgpO1xuICAgICAgZXhwZWN0KHN0cmF0ZWd5KS50b0JlKElzb2xhdGlvblN0cmF0ZWd5LkRBVEFCQVNFX0xFVkVMKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIFNDSEVNQV9MRVZFTCB3aGVuIGNvbmZpZ3VyZWQnLCAoKSA9PiB7XG4gICAgICBqZXN0LnNweU9uKGNvbmZpZ1NlcnZpY2UsICdnZXQnKS5tb2NrUmV0dXJuVmFsdWUoJ1NDSEVNQV9MRVZFTCcpO1xuXG4gICAgICBjb25zdCBzdHJhdGVneSA9IHNlcnZpY2UuZ2V0U3RyYXRlZ3koKTtcbiAgICAgIGV4cGVjdChzdHJhdGVneSkudG9CZShJc29sYXRpb25TdHJhdGVneS5TQ0hFTUFfTEVWRUwpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gVEFCTEVfTEVWRUwgd2hlbiBjb25maWd1cmVkJywgKCkgPT4ge1xuICAgICAgamVzdC5zcHlPbihjb25maWdTZXJ2aWNlLCAnZ2V0JykubW9ja1JldHVyblZhbHVlKCdUQUJMRV9MRVZFTCcpO1xuXG4gICAgICBjb25zdCBzdHJhdGVneSA9IHNlcnZpY2UuZ2V0U3RyYXRlZ3koKTtcbiAgICAgIGV4cGVjdChzdHJhdGVneSkudG9CZShJc29sYXRpb25TdHJhdGVneS5UQUJMRV9MRVZFTCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IGVycm9yIGZvciBpbnZhbGlkIHN0cmF0ZWd5JywgKCkgPT4ge1xuICAgICAgamVzdC5zcHlPbihjb25maWdTZXJ2aWNlLCAnZ2V0JykubW9ja1JldHVyblZhbHVlKCdJTlZBTElEX1NUUkFURUdZJyk7XG5cbiAgICAgIGV4cGVjdCgoKSA9PiBzZXJ2aWNlLmdldFN0cmF0ZWd5KCkpLnRvVGhyb3coXG4gICAgICAgICdJbnZhbGlkIGlzb2xhdGlvbiBzdHJhdGVneTogSU5WQUxJRF9TVFJBVEVHWScsXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0Q29ubmVjdGlvbkNvbmZpZycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIC8vIOiuvue9rum7mOiupOeOr+Wig+WPmOmHj1xuICAgICAgamVzdC5zcHlPbihjb25maWdTZXJ2aWNlLCAnZ2V0JykubW9ja0ltcGxlbWVudGF0aW9uKChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICBjb25zdCBkZWZhdWx0czogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgICAgICBQTEFURk9STV9EQl9OQU1FOiAnYWlvZml4X3BsYXRmb3JtJyxcbiAgICAgICAgICBFVkVOVFNfREJfTkFNRTogJ2Fpb2ZpeF9ldmVudHMnLFxuICAgICAgICAgIEFJX1ZFQ1RPUlNfREJfTkFNRTogJ2Fpb2ZpeF9haV92ZWN0b3JzJyxcbiAgICAgICAgICBURU5BTlRfREJfUFJFRklYOiAndGVuYW50XycsXG4gICAgICAgICAgVEVOQU5UX1NDSEVNQV9QUkVGSVg6ICd0ZW5hbnRfJyxcbiAgICAgICAgICBTSEFSRURfU0NIRU1BX05BTUU6ICdzaGFyZWQnLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZGVmYXVsdHNba2V5XTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gcGxhdGZvcm0gZGF0YWJhc2UgY29uZmlnIGZvciBUQUJMRV9MRVZFTCBzdHJhdGVneScsICgpID0+IHtcbiAgICAgIGplc3RcbiAgICAgICAgLnNweU9uKHNlcnZpY2UsICdnZXRTdHJhdGVneScpXG4gICAgICAgIC5tb2NrUmV0dXJuVmFsdWUoSXNvbGF0aW9uU3RyYXRlZ3kuVEFCTEVfTEVWRUwpO1xuXG4gICAgICBjb25zdCBjb25maWcgPSBzZXJ2aWNlLmdldENvbm5lY3Rpb25Db25maWcoJ3RlbmFudC0xMjMnKTtcblxuICAgICAgZXhwZWN0KGNvbmZpZykudG9FcXVhbCh7XG4gICAgICAgIGRhdGFiYXNlOiAnYWlvZml4X3BsYXRmb3JtJyxcbiAgICAgICAgdGVuYW50SWQ6ICd0ZW5hbnQtMTIzJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gdGVuYW50IGRhdGFiYXNlIGNvbmZpZyBmb3IgREFUQUJBU0VfTEVWRUwgc3RyYXRlZ3knLCAoKSA9PiB7XG4gICAgICBqZXN0XG4gICAgICAgIC5zcHlPbihzZXJ2aWNlLCAnZ2V0U3RyYXRlZ3knKVxuICAgICAgICAubW9ja1JldHVyblZhbHVlKElzb2xhdGlvblN0cmF0ZWd5LkRBVEFCQVNFX0xFVkVMKTtcblxuICAgICAgY29uc3QgY29uZmlnID0gc2VydmljZS5nZXRDb25uZWN0aW9uQ29uZmlnKCd0ZW5hbnQtMTIzJyk7XG5cbiAgICAgIGV4cGVjdChjb25maWcpLnRvRXF1YWwoe1xuICAgICAgICBkYXRhYmFzZTogJ3RlbmFudF90ZW5hbnQtMTIzJyxcbiAgICAgICAgdGVuYW50SWQ6ICd0ZW5hbnQtMTIzJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gc2NoZW1hIGNvbmZpZyBmb3IgU0NIRU1BX0xFVkVMIHN0cmF0ZWd5JywgKCkgPT4ge1xuICAgICAgamVzdFxuICAgICAgICAuc3B5T24oc2VydmljZSwgJ2dldFN0cmF0ZWd5JylcbiAgICAgICAgLm1vY2tSZXR1cm5WYWx1ZShJc29sYXRpb25TdHJhdGVneS5TQ0hFTUFfTEVWRUwpO1xuXG4gICAgICBjb25zdCBjb25maWcgPSBzZXJ2aWNlLmdldENvbm5lY3Rpb25Db25maWcoJ3RlbmFudC0xMjMnKTtcblxuICAgICAgZXhwZWN0KGNvbmZpZykudG9FcXVhbCh7XG4gICAgICAgIGRhdGFiYXNlOiAnYWlvZml4X3BsYXRmb3JtJyxcbiAgICAgICAgc2NoZW1hOiAndGVuYW50X3RlbmFudC0xMjMnLFxuICAgICAgICB0ZW5hbnRJZDogJ3RlbmFudC0xMjMnLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBwbGF0Zm9ybSBjb25maWcgd2hlbiBubyB0ZW5hbnRJZCBwcm92aWRlZCcsICgpID0+IHtcbiAgICAgIGplc3RcbiAgICAgICAgLnNweU9uKHNlcnZpY2UsICdnZXRTdHJhdGVneScpXG4gICAgICAgIC5tb2NrUmV0dXJuVmFsdWUoSXNvbGF0aW9uU3RyYXRlZ3kuVEFCTEVfTEVWRUwpO1xuXG4gICAgICBjb25zdCBjb25maWcgPSBzZXJ2aWNlLmdldENvbm5lY3Rpb25Db25maWcoKTtcblxuICAgICAgZXhwZWN0KGNvbmZpZykudG9FcXVhbCh7XG4gICAgICAgIGRhdGFiYXNlOiAnYWlvZml4X3BsYXRmb3JtJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnc2hvdWxkRW5hYmxlUkxTJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIHRydWUgYnkgZGVmYXVsdCcsICgpID0+IHtcbiAgICAgIGplc3Quc3B5T24oY29uZmlnU2VydmljZSwgJ2dldCcpLm1vY2tSZXR1cm5WYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBzZXJ2aWNlLnNob3VsZEVuYWJsZVJMUygpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHRydWUgd2hlbiBFTkFCTEVfUkxTIGlzIHRydWUnLCAoKSA9PiB7XG4gICAgICBqZXN0LnNweU9uKGNvbmZpZ1NlcnZpY2UsICdnZXQnKS5tb2NrUmV0dXJuVmFsdWUoJ3RydWUnKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gc2VydmljZS5zaG91bGRFbmFibGVSTFMoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZSB3aGVuIEVOQUJMRV9STFMgaXMgZmFsc2UnLCAoKSA9PiB7XG4gICAgICBqZXN0LnNweU9uKGNvbmZpZ1NlcnZpY2UsICdnZXQnKS5tb2NrUmV0dXJuVmFsdWUoJ2ZhbHNlJyk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IHNlcnZpY2Uuc2hvdWxkRW5hYmxlUkxTKCk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldERhdGFiYXNlTmFtZXMnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBqZXN0LnNweU9uKGNvbmZpZ1NlcnZpY2UsICdnZXQnKS5tb2NrSW1wbGVtZW50YXRpb24oKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICAgICAgIFBMQVRGT1JNX0RCX05BTUU6ICdhaW9maXhfcGxhdGZvcm0nLFxuICAgICAgICAgIEVWRU5UU19EQl9OQU1FOiAnYWlvZml4X2V2ZW50cycsXG4gICAgICAgICAgQUlfVkVDVE9SU19EQl9OQU1FOiAnYWlvZml4X2FpX3ZlY3RvcnMnLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZGVmYXVsdHNba2V5XTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gY29ycmVjdCBkYXRhYmFzZSBuYW1lcycsICgpID0+IHtcbiAgICAgIGV4cGVjdChzZXJ2aWNlLmdldFBsYXRmb3JtRGF0YWJhc2VOYW1lKCkpLnRvQmUoJ2Fpb2ZpeF9wbGF0Zm9ybScpO1xuICAgICAgZXhwZWN0KHNlcnZpY2UuZ2V0RXZlbnRzRGF0YWJhc2VOYW1lKCkpLnRvQmUoJ2Fpb2ZpeF9ldmVudHMnKTtcbiAgICAgIGV4cGVjdChzZXJ2aWNlLmdldEFpVmVjdG9yc0RhdGFiYXNlTmFtZSgpKS50b0JlKCdhaW9maXhfYWlfdmVjdG9ycycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0VGVuYW50SWRGaWVsZCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBkZWZhdWx0IHRlbmFudCBmaWVsZCBuYW1lJywgKCkgPT4ge1xuICAgICAgamVzdC5zcHlPbihjb25maWdTZXJ2aWNlLCAnZ2V0JykubW9ja1JldHVyblZhbHVlKHVuZGVmaW5lZCk7XG5cbiAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IHNlcnZpY2UuZ2V0VGVuYW50SWRGaWVsZCgpO1xuICAgICAgZXhwZWN0KGZpZWxkTmFtZSkudG9CZSgndGVuYW50X2lkJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBjb25maWd1cmVkIHRlbmFudCBmaWVsZCBuYW1lJywgKCkgPT4ge1xuICAgICAgamVzdC5zcHlPbihjb25maWdTZXJ2aWNlLCAnZ2V0JykubW9ja1JldHVyblZhbHVlKCdjdXN0b21fdGVuYW50X2lkJyk7XG5cbiAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IHNlcnZpY2UuZ2V0VGVuYW50SWRGaWVsZCgpO1xuICAgICAgZXhwZWN0KGZpZWxkTmFtZSkudG9CZSgnY3VzdG9tX3RlbmFudF9pZCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnc2hvdWxkQXV0b0FkZFRlbmFudENvbmRpdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiB0cnVlIGJ5IGRlZmF1bHQnLCAoKSA9PiB7XG4gICAgICBqZXN0LnNweU9uKGNvbmZpZ1NlcnZpY2UsICdnZXQnKS5tb2NrUmV0dXJuVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gc2VydmljZS5zaG91bGRBdXRvQWRkVGVuYW50Q29uZGl0aW9uKCk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gY29uZmlndXJlZCB2YWx1ZScsICgpID0+IHtcbiAgICAgIGplc3Quc3B5T24oY29uZmlnU2VydmljZSwgJ2dldCcpLm1vY2tSZXR1cm5WYWx1ZSgnZmFsc2UnKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gc2VydmljZS5zaG91bGRBdXRvQWRkVGVuYW50Q29uZGl0aW9uKCk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==