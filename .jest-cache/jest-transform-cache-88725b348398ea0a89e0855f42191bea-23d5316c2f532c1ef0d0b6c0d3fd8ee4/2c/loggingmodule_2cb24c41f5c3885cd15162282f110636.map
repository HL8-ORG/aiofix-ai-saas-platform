{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/logging.module.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/logging.module.ts"],"sourcesContent":["/**\n * @file logging.module.ts\n * @description 日志管理模块\n *\n * 该模块整合了所有日志相关的服务，包括：\n * - Pino日志服务\n * - 日志配置服务\n * - 日志传输器\n * - 日志格式化器\n * - 日志中间件\n * - 日志拦截器\n *\n * 遵循DDD和Clean Architecture原则，提供统一的日志管理功能。\n */\n\nimport { DynamicModule, Module } from '@nestjs/common';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { ClsModule } from 'nestjs-cls';\nimport { PinoLoggerService } from './services/pino-logger.service';\nimport { PinoLoggerConfigService } from './services/pino-logger-config.service';\nimport { PinoLoggerFactory } from './factories/pino-logger.factory';\nimport { PinoLoggingMiddleware } from './middleware/pino-logging.middleware';\nimport { PinoLoggingInterceptor } from './interceptors/pino-logging.interceptor';\nimport { LogConfig } from './interfaces/logging.interface';\n\n/**\n * @interface LoggingModuleOptions\n * @description\n * 日志模块配置选项接口，用于自定义日志模块的行为。\n *\n * 主要配置项：\n * 1. config: 日志配置对象\n * 2. global: 是否注册为全局模块\n * 3. middleware: 是否自动注册中间件\n * 4. interceptor: 是否自动注册拦截器\n */\nexport interface LoggingModuleOptions {\n  /** 日志配置 */\n  config?: Partial<LogConfig>;\n  /** 是否注册为全局模块 */\n  global?: boolean;\n  /** 是否自动注册中间件 */\n  middleware?: boolean;\n  /** 是否自动注册拦截器 */\n  interceptor?: boolean;\n}\n\n/**\n * @class LoggingModule\n * @description\n * Aiofix IAM平台日志模块，提供高性能的日志服务。\n *\n * 主要功能：\n * 1. 提供PinoLoggerService日志服务\n * 2. 提供PinoLoggerConfigService配置服务\n * 3. 提供PinoLoggerFactory日志工厂\n * 4. 提供PinoLoggingMiddleware日志中间件\n * 5. 提供PinoLoggingInterceptor日志拦截器\n *\n * 使用示例：\n * ```typescript\n * import { LoggingModule } from '@aiofix/logging';\n *\n * @Module({\n *   imports: [\n *     LoggingModule.register({\n *       config: {\n *         level: 'info',\n *         format: 'json',\n *         colorize: false\n *       },\n *       global: true,\n *       middleware: true,\n *       interceptor: true\n *     })\n *   ]\n * })\n * export class AppModule {}\n * ```\n */\n@Module({})\nexport class LoggingModule {\n  /**\n   * @function register\n   * @description\n   * 注册日志模块，支持自定义配置。\n   *\n   * @param {LoggingModuleOptions} options - 模块配置选项\n   * @returns {DynamicModule} 动态模块配置\n   */\n  static register(options: LoggingModuleOptions = {}): DynamicModule {\n    const {\n      config = {},\n      global = false,\n      middleware = false,\n      interceptor = false,\n    } = options;\n\n    const moduleConfig: DynamicModule = {\n      module: LoggingModule,\n      imports: [\n        EventEmitterModule.forRoot(),\n        ClsModule.forRoot({\n          global: true,\n          middleware: {\n            mount: true,\n            setup: (cls, req) => {\n              // 设置请求上下文\n              cls.set(\n                'requestId',\n                req.headers['x-request-id'] || cls.get('requestId'),\n              );\n              cls.set(\n                'tenantId',\n                req.headers['x-tenant-id'] || cls.get('tenantId'),\n              );\n              cls.set('userId', req.headers['x-user-id'] || cls.get('userId'));\n              cls.set(\n                'sessionId',\n                req.headers['x-session-id'] || cls.get('sessionId'),\n              );\n            },\n          },\n        }),\n      ],\n      providers: [\n        {\n          provide: 'LOGGING_CONFIG',\n          useValue: config,\n        },\n        PinoLoggerConfigService,\n        PinoLoggerService,\n        PinoLoggerFactory,\n      ],\n      exports: [PinoLoggerService, PinoLoggerConfigService, PinoLoggerFactory],\n    };\n\n    // 根据配置添加中间件和拦截器\n    if (middleware) {\n      moduleConfig.providers!.push(PinoLoggingMiddleware);\n      moduleConfig.exports!.push(PinoLoggingMiddleware);\n    }\n\n    if (interceptor) {\n      moduleConfig.providers!.push(PinoLoggingInterceptor);\n      moduleConfig.exports!.push(PinoLoggingInterceptor);\n    }\n\n    // 设置为全局模块\n    if (global) {\n      moduleConfig.global = true;\n    }\n\n    return moduleConfig;\n  }\n\n  /**\n   * @function forRoot\n   * @description\n   * 注册日志模块的便捷方法，使用默认配置。\n   *\n   * @param {LoggingModuleOptions} options - 模块配置选项\n   * @returns {DynamicModule} 动态模块配置\n   */\n  static forRoot(options: LoggingModuleOptions = {}): DynamicModule {\n    return this.register({\n      global: true,\n      middleware: true,\n      interceptor: true,\n      ...options,\n    });\n  }\n\n  /**\n   * @function forFeature\n   * @description\n   * 注册日志模块的特性版本，不包含中间件和拦截器。\n   *\n   * @param {LoggingModuleOptions} options - 模块配置选项\n   * @returns {DynamicModule} 动态模块配置\n   */\n  static forFeature(options: LoggingModuleOptions = {}): DynamicModule {\n    return this.register({\n      global: false,\n      middleware: false,\n      interceptor: false,\n      ...options,\n    });\n  }\n}\n"],"version":3}