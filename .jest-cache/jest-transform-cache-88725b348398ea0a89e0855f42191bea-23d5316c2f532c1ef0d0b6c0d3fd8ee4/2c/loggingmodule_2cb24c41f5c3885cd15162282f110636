a1ff56652f4528ae59f7bca53216ec21
"use strict";
/**
 * @file logging.module.ts
 * @description 日志管理模块
 *
 * 该模块整合了所有日志相关的服务，包括：
 * - Pino日志服务
 * - 日志配置服务
 * - 日志传输器
 * - 日志格式化器
 * - 日志中间件
 * - 日志拦截器
 *
 * 遵循DDD和Clean Architecture原则，提供统一的日志管理功能。
 */
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggingModule = void 0;
const common_1 = require("@nestjs/common");
const event_emitter_1 = require("@nestjs/event-emitter");
const nestjs_cls_1 = require("nestjs-cls");
const pino_logger_service_1 = require("./services/pino-logger.service");
const pino_logger_config_service_1 = require("./services/pino-logger-config.service");
const pino_logger_factory_1 = require("./factories/pino-logger.factory");
const pino_logging_middleware_1 = require("./middleware/pino-logging.middleware");
const pino_logging_interceptor_1 = require("./interceptors/pino-logging.interceptor");
/**
 * @class LoggingModule
 * @description
 * Aiofix IAM平台日志模块，提供高性能的日志服务。
 *
 * 主要功能：
 * 1. 提供PinoLoggerService日志服务
 * 2. 提供PinoLoggerConfigService配置服务
 * 3. 提供PinoLoggerFactory日志工厂
 * 4. 提供PinoLoggingMiddleware日志中间件
 * 5. 提供PinoLoggingInterceptor日志拦截器
 *
 * 使用示例：
 * ```typescript
 * import { LoggingModule } from '@aiofix/logging';
 *
 * @Module({
 *   imports: [
 *     LoggingModule.register({
 *       config: {
 *         level: 'info',
 *         format: 'json',
 *         colorize: false
 *       },
 *       global: true,
 *       middleware: true,
 *       interceptor: true
 *     })
 *   ]
 * })
 * export class AppModule {}
 * ```
 */
let LoggingModule = (() => {
    let _classDecorators = [(0, common_1.Module)({})];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    var LoggingModule = _classThis = class {
        /**
         * @function register
         * @description
         * 注册日志模块，支持自定义配置。
         *
         * @param {LoggingModuleOptions} options - 模块配置选项
         * @returns {DynamicModule} 动态模块配置
         */
        static register(options = {}) {
            const { config = {}, global = false, middleware = false, interceptor = false, } = options;
            const moduleConfig = {
                module: LoggingModule,
                imports: [
                    event_emitter_1.EventEmitterModule.forRoot(),
                    nestjs_cls_1.ClsModule.forRoot({
                        global: true,
                        middleware: {
                            mount: true,
                            setup: (cls, req) => {
                                // 设置请求上下文
                                cls.set('requestId', req.headers['x-request-id'] || cls.get('requestId'));
                                cls.set('tenantId', req.headers['x-tenant-id'] || cls.get('tenantId'));
                                cls.set('userId', req.headers['x-user-id'] || cls.get('userId'));
                                cls.set('sessionId', req.headers['x-session-id'] || cls.get('sessionId'));
                            },
                        },
                    }),
                ],
                providers: [
                    {
                        provide: 'LOGGING_CONFIG',
                        useValue: config,
                    },
                    pino_logger_config_service_1.PinoLoggerConfigService,
                    pino_logger_service_1.PinoLoggerService,
                    pino_logger_factory_1.PinoLoggerFactory,
                ],
                exports: [pino_logger_service_1.PinoLoggerService, pino_logger_config_service_1.PinoLoggerConfigService, pino_logger_factory_1.PinoLoggerFactory],
            };
            // 根据配置添加中间件和拦截器
            if (middleware) {
                moduleConfig.providers.push(pino_logging_middleware_1.PinoLoggingMiddleware);
                moduleConfig.exports.push(pino_logging_middleware_1.PinoLoggingMiddleware);
            }
            if (interceptor) {
                moduleConfig.providers.push(pino_logging_interceptor_1.PinoLoggingInterceptor);
                moduleConfig.exports.push(pino_logging_interceptor_1.PinoLoggingInterceptor);
            }
            // 设置为全局模块
            if (global) {
                moduleConfig.global = true;
            }
            return moduleConfig;
        }
        /**
         * @function forRoot
         * @description
         * 注册日志模块的便捷方法，使用默认配置。
         *
         * @param {LoggingModuleOptions} options - 模块配置选项
         * @returns {DynamicModule} 动态模块配置
         */
        static forRoot(options = {}) {
            return this.register({
                global: true,
                middleware: true,
                interceptor: true,
                ...options,
            });
        }
        /**
         * @function forFeature
         * @description
         * 注册日志模块的特性版本，不包含中间件和拦截器。
         *
         * @param {LoggingModuleOptions} options - 模块配置选项
         * @returns {DynamicModule} 动态模块配置
         */
        static forFeature(options = {}) {
            return this.register({
                global: false,
                middleware: false,
                interceptor: false,
                ...options,
            });
        }
    };
    __setFunctionName(_classThis, "LoggingModule");
    (() => {
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        LoggingModule = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return LoggingModule = _classThis;
})();
exports.LoggingModule = LoggingModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,