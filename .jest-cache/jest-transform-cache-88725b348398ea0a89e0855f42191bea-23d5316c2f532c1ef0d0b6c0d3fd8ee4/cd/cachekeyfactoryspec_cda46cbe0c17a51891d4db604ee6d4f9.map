{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/factories/cache-key.factory.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/factories/cache-key.factory.spec.ts"],"sourcesContent":["/**\n * @file cache-key.factory.spec.ts\n * @description 缓存键工厂单元测试\n */\n\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { CacheKeyFactory } from './cache-key.factory';\nimport { CacheKey } from '../interfaces/cache.interface';\n\ndescribe('CacheKeyFactory', () => {\n  let factory: CacheKeyFactory;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [CacheKeyFactory],\n    }).compile();\n\n    factory = module.get<CacheKeyFactory>(CacheKeyFactory);\n  });\n\n  describe('create', () => {\n    it('should create basic cache key', () => {\n      const result = factory.create('test-key');\n\n      expect(result).toEqual({\n        key: 'test-key',\n        tags: [],\n      });\n    });\n\n    it('should create cache key with options', () => {\n      const options: Partial<CacheKey> = {\n        namespace: 'test-namespace',\n        version: 'v2',\n        tenantId: 'tenant-123',\n        userId: 'user-456',\n        tags: ['tag1', 'tag2'],\n      };\n\n      const result = factory.create('test-key', options);\n\n      expect(result).toEqual({\n        key: 'test-key',\n        namespace: 'test-namespace',\n        version: 'v2',\n        tenantId: 'tenant-123',\n        userId: 'user-456',\n        tags: ['tag1', 'tag2'],\n      });\n    });\n\n    it('should sanitize key name', () => {\n      const result = factory.create('test key with spaces!@#');\n\n      expect(result.key).toBe('test_key_with_spaces___');\n    });\n\n    it('should throw error for empty key', () => {\n      expect(() => factory.create('')).toThrow(\n        'Cache key must be a non-empty string',\n      );\n    });\n\n    it('should throw error for null key', () => {\n      expect(() => factory.create(null as unknown)).toThrow(\n        'Cache key must be a non-empty string',\n      );\n    });\n  });\n\n  describe('createNamespace', () => {\n    it('should create namespace cache key', () => {\n      const result = factory.createNamespace('test-namespace', 'test-key');\n\n      expect(result).toEqual({\n        key: 'test-key',\n        namespace: 'test-namespace',\n        tags: [],\n      });\n    });\n\n    it('should sanitize namespace', () => {\n      const result = factory.createNamespace('Test Namespace!@#', 'test-key');\n\n      expect(result.namespace).toBe('test_namespace___');\n    });\n  });\n\n  describe('createTenant', () => {\n    it('should create tenant cache key', () => {\n      const result = factory.createTenant('tenant-123', 'test-key');\n\n      expect(result).toEqual({\n        key: 'test-key',\n        tenantId: 'tenant-123',\n        tags: [],\n      });\n    });\n\n    it('should sanitize tenant ID', () => {\n      const result = factory.createTenant('tenant 123!@#', 'test-key');\n\n      expect(result.tenantId).toBe('tenant_123___');\n    });\n  });\n\n  describe('createUser', () => {\n    it('should create user cache key', () => {\n      const result = factory.createUser('user-456', 'test-key');\n\n      expect(result).toEqual({\n        key: 'test-key',\n        userId: 'user-456',\n        tags: [],\n      });\n    });\n\n    it('should sanitize user ID', () => {\n      const result = factory.createUser('user 456!@#', 'test-key');\n\n      expect(result.userId).toBe('user_456___');\n    });\n  });\n\n  describe('createTagged', () => {\n    it('should create tagged cache key', () => {\n      const result = factory.createTagged('test-key', ['tag1', 'tag2']);\n\n      expect(result).toEqual({\n        key: 'test-key',\n        tags: ['tag1', 'tag2'],\n      });\n    });\n\n    it('should sanitize and deduplicate tags', () => {\n      const result = factory.createTagged('test-key', [\n        'tag1',\n        'tag 1!@#',\n        'tag1',\n        'tag2',\n      ]);\n\n      expect(result.tags).toEqual(['tag1', 'tag_1___', 'tag2']);\n    });\n\n    it('should handle empty tags array', () => {\n      const result = factory.createTagged('test-key', []);\n\n      expect(result.tags).toEqual([]);\n    });\n  });\n\n  describe('toString', () => {\n    it('should convert basic cache key to string', () => {\n      const cacheKey: CacheKey = {\n        key: 'test-key',\n        tags: [],\n      };\n\n      const result = factory.toString(cacheKey);\n\n      expect(result).toBe('v1:test-key');\n    });\n\n    it('should convert complex cache key to string', () => {\n      const cacheKey: CacheKey = {\n        key: 'test-key',\n        namespace: 'test-namespace',\n        version: 'v2',\n        tenantId: 'tenant-123',\n        userId: 'user-456',\n        tags: ['tag1', 'tag2'],\n      };\n\n      const result = factory.toString(cacheKey);\n\n      expect(result).toBe(\n        'v2:test-namespace:tenant:tenant-123:user:user-456:tags:tag1,tag2:test-key',\n      );\n    });\n\n    it('should handle cache key without version', () => {\n      const cacheKey: CacheKey = {\n        key: 'test-key',\n        tags: [],\n      };\n      delete cacheKey.version;\n\n      const result = factory.toString(cacheKey);\n\n      expect(result).toBe('v1:test-key');\n    });\n\n    it('should handle cache key with only namespace', () => {\n      const cacheKey: CacheKey = {\n        key: 'test-key',\n        namespace: 'test-namespace',\n        tags: [],\n      };\n\n      const result = factory.toString(cacheKey);\n\n      expect(result).toBe('v1:test-namespace:test-key');\n    });\n  });\n\n  describe('parse', () => {\n    it('should parse basic cache key string', () => {\n      const keyString = 'v1:test-key';\n      const result = factory.parse(keyString);\n\n      expect(result).toEqual({\n        key: 'test-key',\n        version: 'v1',\n        tags: [],\n      });\n    });\n\n    it('should parse complex cache key string', () => {\n      const keyString =\n        'v2:test-namespace:tenant:tenant-123:user:user-456:tags:tag1,tag2:test-key';\n      const result = factory.parse(keyString);\n\n      expect(result).toEqual({\n        key: 'test-key',\n        namespace: 'test-namespace',\n        version: 'v2',\n        tenantId: 'tenant-123',\n        userId: 'user-456',\n        tags: ['tag1', 'tag2'],\n      });\n    });\n\n    it('should parse cache key without version', () => {\n      const keyString = 'v1:test-key';\n      const result = factory.parse(keyString);\n\n      expect(result).toEqual({\n        key: 'test-key',\n        version: 'v1',\n        tags: [],\n      });\n    });\n\n    it('should parse cache key with only namespace', () => {\n      const keyString = 'v1:test-namespace:test-key';\n      const result = factory.parse(keyString);\n\n      expect(result).toEqual({\n        key: 'test-key',\n        namespace: 'test-namespace',\n        version: 'v1',\n        tags: [],\n      });\n    });\n  });\n\n  describe('createPattern', () => {\n    it('should create pattern for wildcard matching', () => {\n      const result = factory.createPattern('user:*:profile', {\n        namespace: 'test-namespace',\n        tenantId: 'tenant-123',\n      });\n\n      expect(result).toBe('v1:test-namespace:tenant:tenant-123:user:*:profile');\n    });\n  });\n\n  describe('matchPattern', () => {\n    it('should match exact pattern', () => {\n      const cacheKey: CacheKey = {\n        key: 'user-123-profile',\n        namespace: 'test-namespace',\n        tenantId: 'tenant-123',\n        tags: [],\n      };\n\n      const pattern = 'v1:test-namespace:tenant:tenant-123:user-123-profile';\n      const result = factory.matchPattern(cacheKey, pattern);\n\n      expect(result).toBe(true);\n    });\n\n    it('should match wildcard pattern', () => {\n      const cacheKey: CacheKey = {\n        key: 'user-123-profile',\n        namespace: 'test-namespace',\n        tenantId: 'tenant-123',\n        tags: [],\n      };\n\n      const pattern = 'v1:test-namespace:tenant:tenant-123:user-*-profile';\n      const result = factory.matchPattern(cacheKey, pattern);\n\n      expect(result).toBe(true);\n    });\n\n    it('should not match different pattern', () => {\n      const cacheKey: CacheKey = {\n        key: 'user-123-profile',\n        namespace: 'test-namespace',\n        tenantId: 'tenant-123',\n        tags: [],\n      };\n\n      const pattern = 'v1:test-namespace:tenant:tenant-123:user-456-profile';\n      const result = factory.matchPattern(cacheKey, pattern);\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('extract methods', () => {\n    const cacheKey: CacheKey = {\n      key: 'test-key',\n      namespace: 'test-namespace',\n      version: 'v2',\n      tenantId: 'tenant-123',\n      userId: 'user-456',\n      tags: ['tag1', 'tag2'],\n    };\n\n    it('should extract namespace', () => {\n      const result = factory.extractNamespace(cacheKey);\n      expect(result).toBe('test-namespace');\n    });\n\n    it('should extract tenant ID', () => {\n      const result = factory.extractTenantId(cacheKey);\n      expect(result).toBe('tenant-123');\n    });\n\n    it('should extract user ID', () => {\n      const result = factory.extractUserId(cacheKey);\n      expect(result).toBe('user-456');\n    });\n\n    it('should extract tags', () => {\n      const result = factory.extractTags(cacheKey);\n      expect(result).toEqual(['tag1', 'tag2']);\n    });\n  });\n\n  describe('edge cases', () => {\n    it('should handle cache key with special characters in key', () => {\n      const result = factory.create('test@key#with$special%chars');\n\n      expect(result.key).toBe('test_key_with_special_chars');\n    });\n\n    it('should handle cache key with multiple spaces', () => {\n      const result = factory.create('test   key   with   spaces');\n\n      expect(result.key).toBe('test___key___with___spaces');\n    });\n\n    it('should handle empty tags array', () => {\n      const result = factory.create('test-key', { tags: [] });\n\n      expect(result.tags).toEqual([]);\n    });\n\n    it('should handle undefined tags', () => {\n      const result = factory.create('test-key', { tags: undefined });\n\n      expect(result.tags).toEqual([]);\n    });\n  });\n});\n"],"version":3}