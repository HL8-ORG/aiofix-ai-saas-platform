da41f792e271c7c607ed6907092805c7
"use strict";
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheInvalidationService = exports.InvalidationTrigger = exports.InvalidationStrategy = void 0;
const common_1 = require("@nestjs/common");
const uuid_1 = require("uuid");
const logging_1 = require("@aiofix/logging");
/**
 * @enum InvalidationStrategy
 * @description
 * 缓存失效策略枚举，定义不同的失效策略。
 */
var InvalidationStrategy;
(function (InvalidationStrategy) {
    /** 精确匹配 */
    InvalidationStrategy["EXACT"] = "exact";
    /** 前缀匹配 */
    InvalidationStrategy["PREFIX"] = "prefix";
    /** 后缀匹配 */
    InvalidationStrategy["SUFFIX"] = "suffix";
    /** 通配符匹配 */
    InvalidationStrategy["WILDCARD"] = "wildcard";
    /** 正则表达式匹配 */
    InvalidationStrategy["REGEX"] = "regex";
    /** 标签匹配 */
    InvalidationStrategy["TAG"] = "tag";
    /** 命名空间匹配 */
    InvalidationStrategy["NAMESPACE"] = "namespace";
    /** 批量失效 */
    InvalidationStrategy["BATCH"] = "batch";
})(InvalidationStrategy || (exports.InvalidationStrategy = InvalidationStrategy = {}));
/**
 * @enum InvalidationTrigger
 * @description
 * 缓存失效触发器枚举，定义失效的触发方式。
 */
var InvalidationTrigger;
(function (InvalidationTrigger) {
    /** 手动触发 */
    InvalidationTrigger["MANUAL"] = "manual";
    /** 定时触发 */
    InvalidationTrigger["SCHEDULED"] = "scheduled";
    /** 事件触发 */
    InvalidationTrigger["EVENT"] = "event";
    /** 条件触发 */
    InvalidationTrigger["CONDITIONAL"] = "conditional";
    /** 依赖触发 */
    InvalidationTrigger["DEPENDENCY"] = "dependency";
})(InvalidationTrigger || (exports.InvalidationTrigger = InvalidationTrigger = {}));
/**
 * @class CacheInvalidationService
 * @description
 * 缓存失效服务，提供灵活的缓存失效管理功能。
 *
 * 主要功能包括：
 * 1. 支持多种失效策略（精确匹配、通配符、正则表达式等）
 * 2. 支持多种触发方式（手动、定时、事件、条件等）
 * 3. 提供规则管理和优先级控制
 * 4. 支持批量失效和并发处理
 * 5. 提供详细的统计和监控
 * 6. 支持依赖关系和条件表达式
 *
 * @implements {ICacheService}
 */
let CacheInvalidationService = (() => {
    let _classDecorators = [(0, common_1.Injectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    var CacheInvalidationService = _classThis = class {
        constructor(config, keyFactory, eventEmitter, logger) {
            this.keyFactory = keyFactory;
            this.eventEmitter = eventEmitter;
            /**
             * 失效规则映射
             */
            this.rules = new Map();
            /**
             * 缓存服务实例
             */
            this.cacheService = null;
            this.logger = logger;
            this.config = {
                enabled: true,
                defaultStrategy: InvalidationStrategy.EXACT,
                batchSize: 100,
                concurrency: 5,
                timeout: 30000,
                retries: 3,
                retryDelay: 1000,
                enableStats: true,
                enableEvents: true,
                monitoringInterval: 60000,
                ...config,
            };
            this.stats = this.initializeStats();
            this.startMonitoring();
            this.logger.info('CacheInvalidationService initialized', logging_1.LogContext.CACHE);
        }
        /**
         * @method setCacheService
         * @description 设置缓存服务实例
         * @param cacheService 缓存服务实例
         */
        setCacheService(cacheService) {
            this.cacheService = cacheService;
            this.logger.info('Cache service set for invalidation service', logging_1.LogContext.CACHE);
        }
        /**
         * @method addRule
         * @description 添加失效规则
         * @param rule 失效规则
         * @returns {boolean} 是否成功
         */
        addRule(rule) {
            try {
                const ruleId = rule.id || (0, uuid_1.v4)();
                const now = new Date();
                const fullRule = {
                    ...rule,
                    id: ruleId,
                    createdAt: now,
                    updatedAt: now,
                };
                this.rules.set(ruleId, fullRule);
                this.logger.info(`Added invalidation rule: ${rule.name}`, logging_1.LogContext.CACHE);
                this.emitEvent('rule_added', { rule: fullRule });
                return true;
            }
            catch (error) {
                this.logger.error(`Failed to add invalidation rule: ${rule.name}`, logging_1.LogContext.CACHE, undefined, error);
                return false;
            }
        }
        /**
         * @method removeRule
         * @description 移除失效规则
         * @param ruleId 规则ID
         * @returns {boolean} 是否成功
         */
        removeRule(ruleId) {
            try {
                if (!this.rules.has(ruleId)) {
                    this.logger.warn(`Invalidation rule not found: ${ruleId}`, logging_1.LogContext.CACHE);
                    return false;
                }
                const rule = this.rules.get(ruleId);
                if (!rule) {
                    throw new Error(`Invalidation rule not found: ${ruleId}`);
                }
                this.rules.delete(ruleId);
                this.logger.info(`Removed invalidation rule: ${rule.name}`, logging_1.LogContext.CACHE);
                this.emitEvent('rule_removed', { rule });
                return true;
            }
            catch (error) {
                this.logger.error(`Failed to remove invalidation rule: ${ruleId}`, logging_1.LogContext.CACHE, undefined, error);
                return false;
            }
        }
        /**
         * @method updateRule
         * @description 更新失效规则
         * @param ruleId 规则ID
         * @param updates 更新内容
         * @returns {boolean} 是否成功
         */
        updateRule(ruleId, updates) {
            try {
                if (!this.rules.has(ruleId)) {
                    this.logger.warn(`Invalidation rule not found: ${ruleId}`, logging_1.LogContext.CACHE);
                    return false;
                }
                const existingRule = this.rules.get(ruleId);
                const updatedRule = {
                    ...existingRule,
                    ...updates,
                    updatedAt: new Date(),
                };
                this.rules.set(ruleId, updatedRule);
                this.logger.info(`Updated invalidation rule: ${updatedRule.name}`, logging_1.LogContext.CACHE);
                this.emitEvent('rule_updated', { rule: updatedRule });
                return true;
            }
            catch (error) {
                this.logger.error(`Failed to update invalidation rule: ${ruleId}`, logging_1.LogContext.CACHE, undefined, error);
                return false;
            }
        }
        /**
         * @method getRule
         * @description 获取失效规则
         * @param ruleId 规则ID
         * @returns {InvalidationRule | null} 失效规则
         */
        getRule(ruleId) {
            return this.rules.get(ruleId) || null;
        }
        /**
         * @method getAllRules
         * @description 获取所有失效规则
         * @param enabledOnly 是否只返回启用的规则
         * @returns {InvalidationRule[]} 失效规则列表
         */
        getAllRules(enabledOnly) {
            const rules = Array.from(this.rules.values());
            if (enabledOnly) {
                return rules.filter(rule => rule.enabled);
            }
            return rules;
        }
        /**
         * @method invalidate
         * @description 执行缓存失效
         * @param target 失效目标（键、模式、标签等）
         * @param strategy 失效策略
         * @param options 失效选项
         * @returns {Promise<InvalidationResult>} 失效结果
         */
        async invalidate(target, strategy = this.config.defaultStrategy, options) {
            const startTime = Date.now();
            const targets = Array.isArray(target) ? target : [target];
            try {
                if (!this.cacheService) {
                    throw new Error('Cache service not set');
                }
                const result = {
                    invalidatedKeys: 0,
                    invalidatedNamespaces: 0,
                    invalidatedTags: 0,
                    keys: [],
                    namespaces: [],
                    tags: [],
                    invalidatedAt: new Date(),
                    executionTime: 0,
                    success: false,
                    metadata: options?.metadata || {},
                };
                // 根据策略执行失效
                switch (strategy) {
                    case InvalidationStrategy.EXACT:
                        result.keys = await this.invalidateExact(targets);
                        break;
                    case InvalidationStrategy.PREFIX:
                        result.namespaces = await this.invalidatePrefix(targets);
                        break;
                    case InvalidationStrategy.SUFFIX:
                        result.keys = await this.invalidateSuffix(targets);
                        break;
                    case InvalidationStrategy.WILDCARD:
                        result.keys = await this.invalidateWildcard(targets);
                        break;
                    case InvalidationStrategy.REGEX:
                        result.keys = await this.invalidateRegex(targets);
                        break;
                    case InvalidationStrategy.TAG:
                        result.tags = await this.invalidateTags(targets);
                        break;
                    case InvalidationStrategy.NAMESPACE:
                        result.namespaces = await this.invalidateNamespaces(targets);
                        break;
                    case InvalidationStrategy.BATCH:
                        result.keys = await this.invalidateBatch(targets);
                        break;
                    default:
                        throw new Error(`Unsupported invalidation strategy: ${strategy}`);
                }
                result.invalidatedKeys = result.keys.length;
                result.invalidatedNamespaces = result.namespaces.length;
                result.invalidatedTags = result.tags.length;
                result.executionTime = Date.now() - startTime;
                result.success = true;
                // 更新统计
                this.updateStats(strategy, result.executionTime, result.invalidatedKeys);
                this.logger.info(`Cache invalidation completed: ${result.invalidatedKeys} keys, ${result.executionTime}ms`, logging_1.LogContext.CACHE);
                this.emitEvent('invalidation_completed', { result, strategy });
                return result;
            }
            catch (error) {
                const executionTime = Date.now() - startTime;
                this.updateStats(strategy, executionTime, 0, true);
                this.logger.error(`Cache invalidation failed: ${error.message}`, logging_1.LogContext.CACHE, undefined, error);
                this.emitEvent('invalidation_failed', { error, strategy, targets });
                return {
                    invalidatedKeys: 0,
                    invalidatedNamespaces: 0,
                    invalidatedTags: 0,
                    keys: [],
                    namespaces: [],
                    tags: [],
                    invalidatedAt: new Date(),
                    executionTime,
                    success: false,
                    error: error.message,
                    metadata: options?.metadata || {},
                };
            }
        }
        /**
         * @method invalidateByRule
         * @description 根据规则执行缓存失效
         * @param ruleId 规则ID
         * @param _context 执行上下文
         * @returns {Promise<InvalidationResult>} 失效结果
         */
        async invalidateByRule(ruleId, _context) {
            const rule = this.getRule(ruleId);
            if (!rule) {
                throw new Error(`Invalidation rule not found: ${ruleId}`);
            }
            if (!rule.enabled) {
                this.logger.warn(`Invalidation rule is disabled: ${rule.name}`, logging_1.LogContext.CACHE);
                return {
                    invalidatedKeys: 0,
                    invalidatedNamespaces: 0,
                    invalidatedTags: 0,
                    keys: [],
                    namespaces: [],
                    tags: [],
                    invalidatedAt: new Date(),
                    executionTime: 0,
                    success: false,
                    error: 'Rule is disabled',
                };
            }
            // 检查条件
            if (rule.condition && !this.evaluateCondition(rule.condition, _context)) {
                this.logger.debug(`Invalidation rule condition not met: ${rule.name}`, logging_1.LogContext.CACHE);
                return {
                    invalidatedKeys: 0,
                    invalidatedNamespaces: 0,
                    invalidatedTags: 0,
                    keys: [],
                    namespaces: [],
                    tags: [],
                    invalidatedAt: new Date(),
                    executionTime: 0,
                    success: false,
                    error: 'Condition not met',
                };
            }
            // 检查依赖
            if (rule.dependencies && rule.dependencies.length > 0) {
                for (const depId of rule.dependencies) {
                    const depRule = this.getRule(depId);
                    if (!depRule?.enabled) {
                        this.logger.warn(`Dependency rule not found or disabled: ${depId}`, logging_1.LogContext.CACHE);
                        return {
                            invalidatedKeys: 0,
                            invalidatedNamespaces: 0,
                            invalidatedTags: 0,
                            keys: [],
                            namespaces: [],
                            tags: [],
                            invalidatedAt: new Date(),
                            executionTime: 0,
                            success: false,
                            error: 'Dependency not satisfied',
                        };
                    }
                }
            }
            return this.invalidate(rule.pattern, rule.strategy, {
                metadata: { ruleId, ruleName: rule.name, _context },
            });
        }
        /**
         * @method getStats
         * @description 获取失效统计信息
         * @returns {InvalidationStats} 统计信息
         */
        getStats() {
            return { ...this.stats };
        }
        /**
         * @method resetStats
         * @description 重置失效统计信息
         */
        resetStats() {
            this.stats = this.initializeStats();
            this.logger.info('Invalidation stats reset', logging_1.LogContext.CACHE);
        }
        /**
         * @method onDestroy
         * @description 销毁时清理资源
         */
        onDestroy() {
            this.stopMonitoring();
            this.logger.info('CacheInvalidationService destroyed', logging_1.LogContext.CACHE);
        }
        // 私有方法
        /**
         * @private
         * @method initializeStats
         * @description 初始化统计信息
         * @returns {InvalidationStats} 初始统计信息
         */
        initializeStats() {
            return {
                totalInvalidations: 0,
                successfulInvalidations: 0,
                failedInvalidations: 0,
                averageExecutionTime: 0,
                totalInvalidatedKeys: 0,
                activeRules: 0,
                lastInvalidation: new Date(),
                strategyUsage: Object.values(InvalidationStrategy).reduce((acc, strategy) => {
                    acc[strategy] = 0;
                    return acc;
                }, {}),
                triggerUsage: Object.values(InvalidationTrigger).reduce((acc, trigger) => {
                    acc[trigger] = 0;
                    return acc;
                }, {}),
            };
        }
        /**
         * @private
         * @method invalidateExact
         * @description 精确匹配失效
         * @param keys 缓存键列表
         * @returns {Promise<string[]>} 失效的键列表
         */
        async invalidateExact(keys) {
            const invalidatedKeys = [];
            for (const key of keys) {
                try {
                    // 解析完整的键字符串
                    const cacheKey = this.keyFactory.parse(key);
                    const deleted = await this.cacheService.delete(cacheKey);
                    if (deleted) {
                        invalidatedKeys.push(key);
                    }
                }
                catch (error) {
                    this.logger.warn(`Failed to invalidate exact key: ${key}`, logging_1.LogContext.CACHE, undefined, error);
                }
            }
            return invalidatedKeys;
        }
        /**
         * @private
         * @method invalidatePrefix
         * @description 前缀匹配失效
         * @param prefixes 前缀列表
         * @returns {Promise<string[]>} 失效的键列表
         */
        async invalidatePrefix(prefixes) {
            // 这里需要缓存服务支持前缀查询，简化实现
            const invalidatedKeys = [];
            for (const prefix of prefixes) {
                try {
                    // 假设缓存服务支持按命名空间清除
                    const cleared = await this.cacheService.clear(prefix);
                    if (cleared) {
                        invalidatedKeys.push(prefix);
                    }
                }
                catch (error) {
                    this.logger.warn(`Failed to invalidate prefix: ${prefix}`, logging_1.LogContext.CACHE, undefined, error);
                }
            }
            return invalidatedKeys;
        }
        /**
         * @private
         * @method invalidateSuffix
         * @description 后缀匹配失效
         * @param _suffixes 后缀列表
         * @returns {Promise<string[]>} 失效的键列表
         */
        async invalidateSuffix(_suffixes) {
            // 简化实现，实际需要缓存服务支持后缀查询
            const invalidatedKeys = [];
            // 这里需要遍历所有缓存键来匹配后缀
            // 实际实现中可能需要缓存服务提供键列表查询功能
            return invalidatedKeys;
        }
        /**
         * @private
         * @method invalidateWildcard
         * @description 通配符匹配失效
         * @param patterns 通配符模式列表
         * @returns {Promise<string[]>} 失效的键列表
         */
        async invalidateWildcard(patterns) {
            const invalidatedKeys = [];
            for (const pattern of patterns) {
                try {
                    // 仅记录模式，实际匹配依赖具体缓存实现
                    this.logger.debug(`Wildcard invalidation pattern: ${pattern}`, logging_1.LogContext.CACHE);
                }
                catch (error) {
                    this.logger.warn(`Failed to invalidate wildcard pattern: ${pattern}`, logging_1.LogContext.CACHE, undefined, error);
                }
            }
            return invalidatedKeys;
        }
        /**
         * @private
         * @method invalidateRegex
         * @description 正则表达式匹配失效
         * @param patterns 正则表达式模式列表
         * @returns {Promise<string[]>} 失效的键列表
         */
        async invalidateRegex(patterns) {
            const invalidatedKeys = [];
            for (const pattern of patterns) {
                try {
                    // 仅记录模式，实际匹配依赖具体缓存实现
                    this.logger.debug(`Regex invalidation pattern: ${pattern}`, logging_1.LogContext.CACHE);
                }
                catch (error) {
                    this.logger.warn(`Failed to invalidate regex pattern: ${pattern}`, logging_1.LogContext.CACHE, undefined, error);
                }
            }
            return invalidatedKeys;
        }
        /**
         * @private
         * @method invalidateTags
         * @description 标签匹配失效
         * @param tags 标签列表
         * @returns {Promise<string[]>} 失效的标签列表
         */
        async invalidateTags(tags) {
            // 简化实现，实际需要缓存服务支持标签查询
            const invalidatedTags = [];
            for (const tag of tags) {
                try {
                    // 这里需要缓存服务支持标签失效
                    this.logger.debug(`Tag invalidation: ${tag}`, logging_1.LogContext.CACHE);
                    invalidatedTags.push(tag);
                }
                catch (error) {
                    this.logger.warn(`Failed to invalidate tag: ${tag}`, logging_1.LogContext.CACHE, undefined, error);
                }
            }
            return invalidatedTags;
        }
        /**
         * @private
         * @method invalidateNamespaces
         * @description 命名空间匹配失效
         * @param namespaces 命名空间列表
         * @returns {Promise<string[]>} 失效的命名空间列表
         */
        async invalidateNamespaces(namespaces) {
            const invalidatedNamespaces = [];
            for (const namespace of namespaces) {
                try {
                    const cleared = await this.cacheService.clear(namespace);
                    if (cleared) {
                        invalidatedNamespaces.push(namespace);
                    }
                }
                catch (error) {
                    this.logger.warn(`Failed to invalidate namespace: ${namespace}`, logging_1.LogContext.CACHE, undefined, error);
                }
            }
            return invalidatedNamespaces;
        }
        /**
         * @private
         * @method invalidateBatch
         * @description 批量失效
         * @param targets 目标列表
         * @returns {Promise<string[]>} 失效的键列表
         */
        async invalidateBatch(targets) {
            const invalidatedKeys = [];
            const batchSize = this.config.batchSize || 100;
            // 分批处理
            for (let i = 0; i < targets.length; i += batchSize) {
                const batch = targets.slice(i, i + batchSize);
                try {
                    const batchKeys = await this.invalidateExact(batch);
                    invalidatedKeys.push(...batchKeys);
                }
                catch (error) {
                    this.logger.warn(`Failed to invalidate batch ${i / batchSize + 1}`, logging_1.LogContext.CACHE, undefined, error);
                }
            }
            return invalidatedKeys;
        }
        /**
         * @private
         * @method evaluateCondition
         * @description 评估条件表达式
         * @param condition 条件表达式
         * @param _context 执行上下文
         * @returns {boolean} 条件是否满足
         */
        evaluateCondition(condition, _context) {
            try {
                // 简化实现，实际可以使用表达式引擎
                // 这里只是示例，实际实现需要更复杂的表达式解析
                return true;
            }
            catch (error) {
                this.logger.warn(`Failed to evaluate condition: ${condition}`, logging_1.LogContext.CACHE, undefined, error);
                return false;
            }
        }
        /**
         * @private
         * @method updateStats
         * @description 更新统计信息
         * @param strategy 失效策略
         * @param executionTime 执行时间
         * @param invalidatedKeys 失效键数
         * @param failed 是否失败
         */
        updateStats(strategy, executionTime, invalidatedKeys, failed = false) {
            this.stats.totalInvalidations++;
            if (failed) {
                this.stats.failedInvalidations++;
            }
            else {
                this.stats.successfulInvalidations++;
                this.stats.totalInvalidatedKeys += invalidatedKeys;
            }
            this.stats.averageExecutionTime =
                (this.stats.averageExecutionTime * (this.stats.totalInvalidations - 1) +
                    executionTime) /
                    this.stats.totalInvalidations;
            this.stats.lastInvalidation = new Date();
            this.stats.activeRules = Array.from(this.rules.values()).filter(rule => rule.enabled).length;
            if (this.stats.strategyUsage[strategy] !== undefined) {
                this.stats.strategyUsage[strategy]++;
            }
        }
        /**
         * @private
         * @method emitEvent
         * @description 发送失效事件
         * @param type 事件类型
         * @param _data 事件数据
         */
        emitEvent(type, _data) {
            if (this.config.enableEvents) {
                try {
                    this.eventEmitter.emit(`cache.invalidation.${type}`, {
                        type,
                        data: _data,
                        timestamp: new Date(),
                        serviceId: 'cache-invalidation',
                    });
                }
                catch (error) {
                    this.logger.warn(`Failed to emit invalidation event: ${type}`, logging_1.LogContext.CACHE, undefined, error);
                }
            }
        }
        /**
         * @private
         * @method startMonitoring
         * @description 开始监控
         */
        startMonitoring() {
            if (this.config.monitoringInterval && this.config.monitoringInterval > 0) {
                this.monitoringTimer = setInterval(async () => {
                    try {
                        await this.performMonitoring();
                    }
                    catch (error) {
                        this.logger.error('Invalidation monitoring failed', logging_1.LogContext.CACHE, undefined, error);
                    }
                }, this.config.monitoringInterval);
                this.logger.info(`Started invalidation monitoring, interval: ${this.config.monitoringInterval}ms`, logging_1.LogContext.CACHE);
            }
        }
        /**
         * @private
         * @method stopMonitoring
         * @description 停止监控
         */
        stopMonitoring() {
            if (this.monitoringTimer) {
                clearInterval(this.monitoringTimer);
                this.monitoringTimer = undefined;
                this.logger.info('Stopped invalidation monitoring', logging_1.LogContext.CACHE);
            }
        }
        /**
         * @private
         * @method performMonitoring
         * @description 执行监控
         */
        async performMonitoring() {
            try {
                const stats = this.getStats();
                this.emitEvent('monitoring', { stats });
                // 检查活跃规则
                const activeRules = Array.from(this.rules.values()).filter(rule => rule.enabled);
                this.logger.debug(`Active invalidation rules: ${activeRules.length}`, logging_1.LogContext.CACHE);
            }
            catch (error) {
                this.logger.error('Invalidation monitoring execution failed', logging_1.LogContext.CACHE, undefined, error);
            }
        }
    };
    __setFunctionName(_classThis, "CacheInvalidationService");
    (() => {
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        CacheInvalidationService = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return CacheInvalidationService = _classThis;
})();
exports.CacheInvalidationService = CacheInvalidationService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,