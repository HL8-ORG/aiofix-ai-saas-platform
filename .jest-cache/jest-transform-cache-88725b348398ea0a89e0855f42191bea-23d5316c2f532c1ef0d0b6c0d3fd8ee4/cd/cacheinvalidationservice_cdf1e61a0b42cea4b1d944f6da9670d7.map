{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-invalidation.service.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-invalidation.service.ts"],"sourcesContent":["import { Injectable, Inject } from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport type { ICacheService } from '../interfaces/cache.interface';\nimport type { ICacheKeyFactory } from '../interfaces/cache.interface';\nimport type { InvalidationResult } from '../interfaces/cache.interface';\nimport { PinoLoggerService, LogContext } from '@aiofix/logging';\n\n/**\n * @enum InvalidationStrategy\n * @description\n * 缓存失效策略枚举，定义不同的失效策略。\n */\nexport enum InvalidationStrategy {\n  /** 精确匹配 */\n  EXACT = 'exact',\n  /** 前缀匹配 */\n  PREFIX = 'prefix',\n  /** 后缀匹配 */\n  SUFFIX = 'suffix',\n  /** 通配符匹配 */\n  WILDCARD = 'wildcard',\n  /** 正则表达式匹配 */\n  REGEX = 'regex',\n  /** 标签匹配 */\n  TAG = 'tag',\n  /** 命名空间匹配 */\n  NAMESPACE = 'namespace',\n  /** 批量失效 */\n  BATCH = 'batch',\n}\n\n/**\n * @enum InvalidationTrigger\n * @description\n * 缓存失效触发器枚举，定义失效的触发方式。\n */\nexport enum InvalidationTrigger {\n  /** 手动触发 */\n  MANUAL = 'manual',\n  /** 定时触发 */\n  SCHEDULED = 'scheduled',\n  /** 事件触发 */\n  EVENT = 'event',\n  /** 条件触发 */\n  CONDITIONAL = 'conditional',\n  /** 依赖触发 */\n  DEPENDENCY = 'dependency',\n}\n\n/**\n * @interface InvalidationRule\n * @description\n * 缓存失效规则接口，定义失效规则的信息。\n */\nexport interface InvalidationRule {\n  /** 规则ID */\n  readonly id: string;\n  /** 规则名称 */\n  readonly name: string;\n  /** 规则描述 */\n  readonly description?: string;\n  /** 失效策略 */\n  readonly strategy: InvalidationStrategy;\n  /** 匹配模式 */\n  readonly pattern: string;\n  /** 触发器 */\n  readonly trigger: InvalidationTrigger;\n  /** 是否启用 */\n  readonly enabled: boolean;\n  /** 优先级 */\n  readonly priority: number;\n  /** 条件表达式 */\n  readonly condition?: string;\n  /** 依赖规则 */\n  readonly dependencies?: string[];\n  /** 定时表达式 */\n  readonly schedule?: string;\n  /** 事件类型 */\n  readonly eventType?: string;\n  /** 标签 */\n  readonly tags?: string[];\n  /** 元数据 */\n  readonly metadata?: Record<string, unknown>;\n  /** 创建时间 */\n  readonly createdAt: Date;\n  /** 更新时间 */\n  readonly updatedAt: Date;\n}\n\n/**\n * @interface InvalidationStats\n * @description\n * 缓存失效统计信息接口。\n */\nexport interface InvalidationStats {\n  /** 总失效次数 */\n  totalInvalidations: number;\n  /** 成功失效次数 */\n  successfulInvalidations: number;\n  /** 失败失效次数 */\n  failedInvalidations: number;\n  /** 平均执行时间 */\n  averageExecutionTime: number;\n  /** 总失效键数 */\n  totalInvalidatedKeys: number;\n  /** 活跃规则数 */\n  activeRules: number;\n  /** 最后失效时间 */\n  lastInvalidation: Date;\n  /** 各策略使用统计 */\n  strategyUsage: Record<InvalidationStrategy, number>;\n  /** 各触发器使用统计 */\n  triggerUsage: Record<InvalidationTrigger, number>;\n}\n\n/**\n * @interface CacheInvalidationConfig\n * @description\n * 缓存失效服务配置接口。\n */\nexport interface CacheInvalidationConfig {\n  /** 是否启用自动失效 */\n  enabled?: boolean;\n  /** 默认失效策略 */\n  defaultStrategy?: InvalidationStrategy;\n  /** 批量失效大小 */\n  batchSize?: number;\n  /** 并发失效数 */\n  concurrency?: number;\n  /** 超时时间（毫秒） */\n  timeout?: number;\n  /** 重试次数 */\n  retries?: number;\n  /** 重试延迟（毫秒） */\n  retryDelay?: number;\n  /** 是否启用统计 */\n  enableStats?: boolean;\n  /** 是否启用事件 */\n  enableEvents?: boolean;\n  /** 监控间隔（毫秒） */\n  monitoringInterval?: number;\n}\n\n/**\n * @class CacheInvalidationService\n * @description\n * 缓存失效服务，提供灵活的缓存失效管理功能。\n *\n * 主要功能包括：\n * 1. 支持多种失效策略（精确匹配、通配符、正则表达式等）\n * 2. 支持多种触发方式（手动、定时、事件、条件等）\n * 3. 提供规则管理和优先级控制\n * 4. 支持批量失效和并发处理\n * 5. 提供详细的统计和监控\n * 6. 支持依赖关系和条件表达式\n *\n * @implements {ICacheService}\n */\n@Injectable()\nexport class CacheInvalidationService {\n  private readonly logger: PinoLoggerService;\n\n  /**\n   * 失效规则映射\n   */\n  private readonly rules = new Map<string, InvalidationRule>();\n\n  /**\n   * 缓存服务实例\n   */\n  private cacheService: ICacheService | null = null;\n\n  /**\n   * 服务配置\n   */\n  private config: CacheInvalidationConfig;\n\n  /**\n   * 统计信息\n   */\n  private stats: InvalidationStats;\n\n  /**\n   * 监控定时器\n   */\n  private monitoringTimer?: NodeJS.Timeout;\n\n  constructor(\n    @Inject('CACHE_INVALIDATION_CONFIG') config: CacheInvalidationConfig,\n    @Inject('ICacheKeyFactory') private readonly keyFactory: ICacheKeyFactory,\n    private readonly eventEmitter: EventEmitter2,\n    logger: PinoLoggerService,\n  ) {\n    this.logger = logger;\n    this.config = {\n      enabled: true,\n      defaultStrategy: InvalidationStrategy.EXACT,\n      batchSize: 100,\n      concurrency: 5,\n      timeout: 30000,\n      retries: 3,\n      retryDelay: 1000,\n      enableStats: true,\n      enableEvents: true,\n      monitoringInterval: 60000,\n      ...config,\n    };\n\n    this.stats = this.initializeStats();\n    this.startMonitoring();\n\n    this.logger.info('CacheInvalidationService initialized', LogContext.CACHE);\n  }\n\n  /**\n   * @method setCacheService\n   * @description 设置缓存服务实例\n   * @param cacheService 缓存服务实例\n   */\n  setCacheService(cacheService: ICacheService): void {\n    this.cacheService = cacheService;\n    this.logger.info(\n      'Cache service set for invalidation service',\n      LogContext.CACHE,\n    );\n  }\n\n  /**\n   * @method addRule\n   * @description 添加失效规则\n   * @param rule 失效规则\n   * @returns {boolean} 是否成功\n   */\n  addRule(\n    rule: Omit<InvalidationRule, 'id' | 'createdAt' | 'updatedAt'> & {\n      id?: string;\n    },\n  ): boolean {\n    try {\n      const ruleId = rule.id || uuidv4();\n      const now = new Date();\n\n      const fullRule: InvalidationRule = {\n        ...rule,\n        id: ruleId,\n        createdAt: now,\n        updatedAt: now,\n      };\n\n      this.rules.set(ruleId, fullRule);\n\n      this.logger.info(\n        `Added invalidation rule: ${rule.name}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('rule_added', { rule: fullRule });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to add invalidation rule: ${rule.name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method removeRule\n   * @description 移除失效规则\n   * @param ruleId 规则ID\n   * @returns {boolean} 是否成功\n   */\n  removeRule(ruleId: string): boolean {\n    try {\n      if (!this.rules.has(ruleId)) {\n        this.logger.warn(\n          `Invalidation rule not found: ${ruleId}`,\n          LogContext.CACHE,\n        );\n        return false;\n      }\n\n      const rule = this.rules.get(ruleId);\n      if (!rule) {\n        throw new Error(`Invalidation rule not found: ${ruleId}`);\n      }\n      this.rules.delete(ruleId);\n\n      this.logger.info(\n        `Removed invalidation rule: ${rule.name}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('rule_removed', { rule });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to remove invalidation rule: ${ruleId}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method updateRule\n   * @description 更新失效规则\n   * @param ruleId 规则ID\n   * @param updates 更新内容\n   * @returns {boolean} 是否成功\n   */\n  updateRule(\n    ruleId: string,\n    updates: Partial<Omit<InvalidationRule, 'id' | 'createdAt'>>,\n  ): boolean {\n    try {\n      if (!this.rules.has(ruleId)) {\n        this.logger.warn(\n          `Invalidation rule not found: ${ruleId}`,\n          LogContext.CACHE,\n        );\n        return false;\n      }\n\n      const existingRule = this.rules.get(ruleId)!;\n      const updatedRule: InvalidationRule = {\n        ...existingRule,\n        ...updates,\n        updatedAt: new Date(),\n      };\n\n      this.rules.set(ruleId, updatedRule);\n\n      this.logger.info(\n        `Updated invalidation rule: ${updatedRule.name}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('rule_updated', { rule: updatedRule });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to update invalidation rule: ${ruleId}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method getRule\n   * @description 获取失效规则\n   * @param ruleId 规则ID\n   * @returns {InvalidationRule | null} 失效规则\n   */\n  getRule(ruleId: string): InvalidationRule | null {\n    return this.rules.get(ruleId) || null;\n  }\n\n  /**\n   * @method getAllRules\n   * @description 获取所有失效规则\n   * @param enabledOnly 是否只返回启用的规则\n   * @returns {InvalidationRule[]} 失效规则列表\n   */\n  getAllRules(enabledOnly?: boolean): InvalidationRule[] {\n    const rules = Array.from(this.rules.values());\n\n    if (enabledOnly) {\n      return rules.filter(rule => rule.enabled);\n    }\n\n    return rules;\n  }\n\n  /**\n   * @method invalidate\n   * @description 执行缓存失效\n   * @param target 失效目标（键、模式、标签等）\n   * @param strategy 失效策略\n   * @param options 失效选项\n   * @returns {Promise<InvalidationResult>} 失效结果\n   */\n  async invalidate(\n    target: string | string[],\n    strategy: InvalidationStrategy = this.config.defaultStrategy!,\n    options?: {\n      namespace?: string;\n      tags?: string[];\n      timeout?: number;\n      retries?: number;\n      metadata?: Record<string, unknown>;\n    },\n  ): Promise<InvalidationResult> {\n    const startTime = Date.now();\n    const targets = Array.isArray(target) ? target : [target];\n\n    try {\n      if (!this.cacheService) {\n        throw new Error('Cache service not set');\n      }\n\n      const result: InvalidationResult = {\n        invalidatedKeys: 0,\n        invalidatedNamespaces: 0,\n        invalidatedTags: 0,\n        keys: [],\n        namespaces: [],\n        tags: [],\n        invalidatedAt: new Date(),\n        executionTime: 0,\n        success: false,\n        metadata: options?.metadata || {},\n      };\n\n      // 根据策略执行失效\n      switch (strategy) {\n        case InvalidationStrategy.EXACT:\n          result.keys = await this.invalidateExact(targets);\n          break;\n        case InvalidationStrategy.PREFIX:\n          result.namespaces = await this.invalidatePrefix(targets);\n          break;\n        case InvalidationStrategy.SUFFIX:\n          result.keys = await this.invalidateSuffix(targets);\n          break;\n        case InvalidationStrategy.WILDCARD:\n          result.keys = await this.invalidateWildcard(targets);\n          break;\n        case InvalidationStrategy.REGEX:\n          result.keys = await this.invalidateRegex(targets);\n          break;\n        case InvalidationStrategy.TAG:\n          result.tags = await this.invalidateTags(targets);\n          break;\n        case InvalidationStrategy.NAMESPACE:\n          result.namespaces = await this.invalidateNamespaces(targets);\n          break;\n        case InvalidationStrategy.BATCH:\n          result.keys = await this.invalidateBatch(targets);\n          break;\n        default:\n          throw new Error(`Unsupported invalidation strategy: ${strategy}`);\n      }\n\n      result.invalidatedKeys = result.keys.length;\n      result.invalidatedNamespaces = result.namespaces.length;\n      result.invalidatedTags = result.tags.length;\n      result.executionTime = Date.now() - startTime;\n      result.success = true;\n\n      // 更新统计\n      this.updateStats(strategy, result.executionTime, result.invalidatedKeys);\n\n      this.logger.info(\n        `Cache invalidation completed: ${result.invalidatedKeys} keys, ${result.executionTime}ms`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('invalidation_completed', { result, strategy });\n\n      return result;\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      this.updateStats(strategy, executionTime, 0, true);\n\n      this.logger.error(\n        `Cache invalidation failed: ${(error as Error).message}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('invalidation_failed', { error, strategy, targets });\n\n      return {\n        invalidatedKeys: 0,\n        invalidatedNamespaces: 0,\n        invalidatedTags: 0,\n        keys: [],\n        namespaces: [],\n        tags: [],\n        invalidatedAt: new Date(),\n        executionTime,\n        success: false,\n        error: (error as Error).message,\n        metadata: options?.metadata || {},\n      };\n    }\n  }\n\n  /**\n   * @method invalidateByRule\n   * @description 根据规则执行缓存失效\n   * @param ruleId 规则ID\n   * @param _context 执行上下文\n   * @returns {Promise<InvalidationResult>} 失效结果\n   */\n  async invalidateByRule(\n    ruleId: string,\n    _context?: Record<string, unknown>,\n  ): Promise<InvalidationResult> {\n    const rule = this.getRule(ruleId);\n    if (!rule) {\n      throw new Error(`Invalidation rule not found: ${ruleId}`);\n    }\n\n    if (!rule.enabled) {\n      this.logger.warn(\n        `Invalidation rule is disabled: ${rule.name}`,\n        LogContext.CACHE,\n      );\n      return {\n        invalidatedKeys: 0,\n        invalidatedNamespaces: 0,\n        invalidatedTags: 0,\n        keys: [],\n        namespaces: [],\n        tags: [],\n        invalidatedAt: new Date(),\n        executionTime: 0,\n        success: false,\n        error: 'Rule is disabled',\n      };\n    }\n\n    // 检查条件\n    if (rule.condition && !this.evaluateCondition(rule.condition, _context)) {\n      this.logger.debug(\n        `Invalidation rule condition not met: ${rule.name}`,\n        LogContext.CACHE,\n      );\n      return {\n        invalidatedKeys: 0,\n        invalidatedNamespaces: 0,\n        invalidatedTags: 0,\n        keys: [],\n        namespaces: [],\n        tags: [],\n        invalidatedAt: new Date(),\n        executionTime: 0,\n        success: false,\n        error: 'Condition not met',\n      };\n    }\n\n    // 检查依赖\n    if (rule.dependencies && rule.dependencies.length > 0) {\n      for (const depId of rule.dependencies) {\n        const depRule = this.getRule(depId);\n        if (!depRule?.enabled) {\n          this.logger.warn(\n            `Dependency rule not found or disabled: ${depId}`,\n            LogContext.CACHE,\n          );\n          return {\n            invalidatedKeys: 0,\n            invalidatedNamespaces: 0,\n            invalidatedTags: 0,\n            keys: [],\n            namespaces: [],\n            tags: [],\n            invalidatedAt: new Date(),\n            executionTime: 0,\n            success: false,\n            error: 'Dependency not satisfied',\n          };\n        }\n      }\n    }\n\n    return this.invalidate(rule.pattern, rule.strategy, {\n      metadata: { ruleId, ruleName: rule.name, _context },\n    });\n  }\n\n  /**\n   * @method getStats\n   * @description 获取失效统计信息\n   * @returns {InvalidationStats} 统计信息\n   */\n  getStats(): InvalidationStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * @method resetStats\n   * @description 重置失效统计信息\n   */\n  resetStats(): void {\n    this.stats = this.initializeStats();\n    this.logger.info('Invalidation stats reset', LogContext.CACHE);\n  }\n\n  /**\n   * @method onDestroy\n   * @description 销毁时清理资源\n   */\n  onDestroy(): void {\n    this.stopMonitoring();\n    this.logger.info('CacheInvalidationService destroyed', LogContext.CACHE);\n  }\n\n  // 私有方法\n\n  /**\n   * @private\n   * @method initializeStats\n   * @description 初始化统计信息\n   * @returns {InvalidationStats} 初始统计信息\n   */\n  private initializeStats(): InvalidationStats {\n    return {\n      totalInvalidations: 0,\n      successfulInvalidations: 0,\n      failedInvalidations: 0,\n      averageExecutionTime: 0,\n      totalInvalidatedKeys: 0,\n      activeRules: 0,\n      lastInvalidation: new Date(),\n      strategyUsage: Object.values(InvalidationStrategy).reduce(\n        (acc, strategy) => {\n          acc[strategy] = 0;\n          return acc;\n        },\n        {} as Record<InvalidationStrategy, number>,\n      ),\n      triggerUsage: Object.values(InvalidationTrigger).reduce(\n        (acc, trigger) => {\n          acc[trigger] = 0;\n          return acc;\n        },\n        {} as Record<InvalidationTrigger, number>,\n      ),\n    };\n  }\n\n  /**\n   * @private\n   * @method invalidateExact\n   * @description 精确匹配失效\n   * @param keys 缓存键列表\n   * @returns {Promise<string[]>} 失效的键列表\n   */\n  private async invalidateExact(keys: string[]): Promise<string[]> {\n    const invalidatedKeys: string[] = [];\n\n    for (const key of keys) {\n      try {\n        // 解析完整的键字符串\n        const cacheKey = this.keyFactory.parse(key);\n        const deleted = await this.cacheService!.delete(cacheKey);\n        if (deleted) {\n          invalidatedKeys.push(key);\n        }\n      } catch (error) {\n        this.logger.warn(\n          `Failed to invalidate exact key: ${key}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n\n    return invalidatedKeys;\n  }\n\n  /**\n   * @private\n   * @method invalidatePrefix\n   * @description 前缀匹配失效\n   * @param prefixes 前缀列表\n   * @returns {Promise<string[]>} 失效的键列表\n   */\n  private async invalidatePrefix(prefixes: string[]): Promise<string[]> {\n    // 这里需要缓存服务支持前缀查询，简化实现\n    const invalidatedKeys: string[] = [];\n\n    for (const prefix of prefixes) {\n      try {\n        // 假设缓存服务支持按命名空间清除\n        const cleared = await this.cacheService!.clear(prefix);\n        if (cleared) {\n          invalidatedKeys.push(prefix);\n        }\n      } catch (error) {\n        this.logger.warn(\n          `Failed to invalidate prefix: ${prefix}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n\n    return invalidatedKeys;\n  }\n\n  /**\n   * @private\n   * @method invalidateSuffix\n   * @description 后缀匹配失效\n   * @param _suffixes 后缀列表\n   * @returns {Promise<string[]>} 失效的键列表\n   */\n  private async invalidateSuffix(_suffixes: string[]): Promise<string[]> {\n    // 简化实现，实际需要缓存服务支持后缀查询\n    const invalidatedKeys: string[] = [];\n\n    // 这里需要遍历所有缓存键来匹配后缀\n    // 实际实现中可能需要缓存服务提供键列表查询功能\n\n    return invalidatedKeys;\n  }\n\n  /**\n   * @private\n   * @method invalidateWildcard\n   * @description 通配符匹配失效\n   * @param patterns 通配符模式列表\n   * @returns {Promise<string[]>} 失效的键列表\n   */\n  private async invalidateWildcard(patterns: string[]): Promise<string[]> {\n    const invalidatedKeys: string[] = [];\n\n    for (const pattern of patterns) {\n      try {\n        // 仅记录模式，实际匹配依赖具体缓存实现\n        this.logger.debug(\n          `Wildcard invalidation pattern: ${pattern}`,\n          LogContext.CACHE,\n        );\n      } catch (error) {\n        this.logger.warn(\n          `Failed to invalidate wildcard pattern: ${pattern}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n\n    return invalidatedKeys;\n  }\n\n  /**\n   * @private\n   * @method invalidateRegex\n   * @description 正则表达式匹配失效\n   * @param patterns 正则表达式模式列表\n   * @returns {Promise<string[]>} 失效的键列表\n   */\n  private async invalidateRegex(patterns: string[]): Promise<string[]> {\n    const invalidatedKeys: string[] = [];\n\n    for (const pattern of patterns) {\n      try {\n        // 仅记录模式，实际匹配依赖具体缓存实现\n        this.logger.debug(\n          `Regex invalidation pattern: ${pattern}`,\n          LogContext.CACHE,\n        );\n      } catch (error) {\n        this.logger.warn(\n          `Failed to invalidate regex pattern: ${pattern}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n\n    return invalidatedKeys;\n  }\n\n  /**\n   * @private\n   * @method invalidateTags\n   * @description 标签匹配失效\n   * @param tags 标签列表\n   * @returns {Promise<string[]>} 失效的标签列表\n   */\n  private async invalidateTags(tags: string[]): Promise<string[]> {\n    // 简化实现，实际需要缓存服务支持标签查询\n    const invalidatedTags: string[] = [];\n\n    for (const tag of tags) {\n      try {\n        // 这里需要缓存服务支持标签失效\n        this.logger.debug(`Tag invalidation: ${tag}`, LogContext.CACHE);\n        invalidatedTags.push(tag);\n      } catch (error) {\n        this.logger.warn(\n          `Failed to invalidate tag: ${tag}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n\n    return invalidatedTags;\n  }\n\n  /**\n   * @private\n   * @method invalidateNamespaces\n   * @description 命名空间匹配失效\n   * @param namespaces 命名空间列表\n   * @returns {Promise<string[]>} 失效的命名空间列表\n   */\n  private async invalidateNamespaces(namespaces: string[]): Promise<string[]> {\n    const invalidatedNamespaces: string[] = [];\n\n    for (const namespace of namespaces) {\n      try {\n        const cleared = await this.cacheService!.clear(namespace);\n        if (cleared) {\n          invalidatedNamespaces.push(namespace);\n        }\n      } catch (error) {\n        this.logger.warn(\n          `Failed to invalidate namespace: ${namespace}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n\n    return invalidatedNamespaces;\n  }\n\n  /**\n   * @private\n   * @method invalidateBatch\n   * @description 批量失效\n   * @param targets 目标列表\n   * @returns {Promise<string[]>} 失效的键列表\n   */\n  private async invalidateBatch(targets: string[]): Promise<string[]> {\n    const invalidatedKeys: string[] = [];\n    const batchSize = this.config.batchSize || 100;\n\n    // 分批处理\n    for (let i = 0; i < targets.length; i += batchSize) {\n      const batch = targets.slice(i, i + batchSize);\n\n      try {\n        const batchKeys = await this.invalidateExact(batch);\n        invalidatedKeys.push(...batchKeys);\n      } catch (error) {\n        this.logger.warn(\n          `Failed to invalidate batch ${i / batchSize + 1}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n\n    return invalidatedKeys;\n  }\n\n  /**\n   * @private\n   * @method evaluateCondition\n   * @description 评估条件表达式\n   * @param condition 条件表达式\n   * @param _context 执行上下文\n   * @returns {boolean} 条件是否满足\n   */\n  private evaluateCondition(\n    condition: string,\n    _context?: Record<string, unknown>,\n  ): boolean {\n    try {\n      // 简化实现，实际可以使用表达式引擎\n      // 这里只是示例，实际实现需要更复杂的表达式解析\n      return true;\n    } catch (error) {\n      this.logger.warn(\n        `Failed to evaluate condition: ${condition}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @private\n   * @method updateStats\n   * @description 更新统计信息\n   * @param strategy 失效策略\n   * @param executionTime 执行时间\n   * @param invalidatedKeys 失效键数\n   * @param failed 是否失败\n   */\n  private updateStats(\n    strategy: InvalidationStrategy,\n    executionTime: number,\n    invalidatedKeys: number,\n    failed = false,\n  ): void {\n    this.stats.totalInvalidations++;\n\n    if (failed) {\n      this.stats.failedInvalidations++;\n    } else {\n      this.stats.successfulInvalidations++;\n      this.stats.totalInvalidatedKeys += invalidatedKeys;\n    }\n\n    this.stats.averageExecutionTime =\n      (this.stats.averageExecutionTime * (this.stats.totalInvalidations - 1) +\n        executionTime) /\n      this.stats.totalInvalidations;\n\n    this.stats.lastInvalidation = new Date();\n    this.stats.activeRules = Array.from(this.rules.values()).filter(\n      rule => rule.enabled,\n    ).length;\n\n    if (this.stats.strategyUsage[strategy] !== undefined) {\n      this.stats.strategyUsage[strategy]++;\n    }\n  }\n\n  /**\n   * @private\n   * @method emitEvent\n   * @description 发送失效事件\n   * @param type 事件类型\n   * @param _data 事件数据\n   */\n  private emitEvent(type: string, _data: Record<string, unknown>): void {\n    if (this.config.enableEvents) {\n      try {\n        this.eventEmitter.emit(`cache.invalidation.${type}`, {\n          type,\n          data: _data,\n          timestamp: new Date(),\n          serviceId: 'cache-invalidation',\n        });\n      } catch (error) {\n        this.logger.warn(\n          `Failed to emit invalidation event: ${type}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @method startMonitoring\n   * @description 开始监控\n   */\n  private startMonitoring(): void {\n    if (this.config.monitoringInterval && this.config.monitoringInterval > 0) {\n      this.monitoringTimer = setInterval(async () => {\n        try {\n          await this.performMonitoring();\n        } catch (error) {\n          this.logger.error(\n            'Invalidation monitoring failed',\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }, this.config.monitoringInterval);\n\n      this.logger.info(\n        `Started invalidation monitoring, interval: ${this.config.monitoringInterval}ms`,\n        LogContext.CACHE,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method stopMonitoring\n   * @description 停止监控\n   */\n  private stopMonitoring(): void {\n    if (this.monitoringTimer) {\n      clearInterval(this.monitoringTimer);\n      this.monitoringTimer = undefined;\n      this.logger.info('Stopped invalidation monitoring', LogContext.CACHE);\n    }\n  }\n\n  /**\n   * @private\n   * @method performMonitoring\n   * @description 执行监控\n   */\n  private async performMonitoring(): Promise<void> {\n    try {\n      const stats = this.getStats();\n      this.emitEvent('monitoring', { stats });\n\n      // 检查活跃规则\n      const activeRules = Array.from(this.rules.values()).filter(\n        rule => rule.enabled,\n      );\n      this.logger.debug(\n        `Active invalidation rules: ${activeRules.length}`,\n        LogContext.CACHE,\n      );\n    } catch (error) {\n      this.logger.error(\n        'Invalidation monitoring execution failed',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n}\n"],"version":3}