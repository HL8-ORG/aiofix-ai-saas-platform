{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/redis-cache.service.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/redis-cache.service.spec.ts"],"sourcesContent":["/**\n * @file redis-cache.service.spec.ts\n * @description Redis缓存服务单元测试\n *\n * 该文件包含RedisCacheService的完整单元测试，包括：\n * - 基础的CRUD操作测试\n * - 缓存统计和健康检查测试\n * - 连接管理和错误处理测试\n * - 边界情况和异常情况测试\n */\n\nimport { Test, TestingModule } from '@nestjs/testing';\nimport Redis from 'ioredis';\nimport { RedisCacheService, RedisConfig } from './redis-cache.service';\nimport { CacheKeyFactory } from '../factories/cache-key.factory';\nimport { CacheType, CacheStrategy } from '../interfaces/cache.interface';\nimport { PinoLoggerService } from '@aiofix/logging';\n\n// Mock ioredis\njest.mock('ioredis');\n\ndescribe('RedisCacheService', () => {\n  let service: RedisCacheService;\n  let mockRedis: jest.Mocked<Redis>;\n  let keyFactory: CacheKeyFactory;\n\n  const mockConfig: RedisConfig = {\n    host: 'localhost',\n    port: 6379,\n    password: 'test-password',\n    db: 0,\n    connectTimeout: 10000,\n    commandTimeout: 5000,\n    retries: 3,\n    retryDelay: 100,\n  };\n\n  beforeEach(async () => {\n    // 创建模拟的Redis实例\n    mockRedis = {\n      ping: jest.fn(),\n      get: jest.fn(),\n      set: jest.fn(),\n      setex: jest.fn(),\n      del: jest.fn(),\n      exists: jest.fn(),\n      keys: jest.fn(),\n      flushdb: jest.fn(),\n      info: jest.fn(),\n      quit: jest.fn(),\n      on: jest.fn(),\n    } as unknown;\n\n    // 模拟Redis构造函数\n    (Redis as jest.MockedClass<typeof Redis>).mockImplementation(\n      () => mockRedis,\n    );\n\n    const mockLogger = {\n      info: jest.fn(),\n      error: jest.fn(),\n      debug: jest.fn(),\n      warn: jest.fn(),\n      trace: jest.fn(),\n      fatal: jest.fn(),\n      child: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        {\n          provide: 'REDIS_CONFIG',\n          useValue: mockConfig,\n        },\n        {\n          provide: 'ICacheKeyFactory',\n          useValue: {\n            create: jest.fn().mockReturnValue('test:key'),\n            createNamespace: jest.fn().mockReturnValue('test:namespace:key'),\n            createTenant: jest.fn().mockReturnValue('test:tenant:123:key'),\n            createUser: jest.fn().mockReturnValue('test:user:456:key'),\n            createTagged: jest.fn().mockReturnValue('test:tagged:key'),\n            toString: jest.fn().mockReturnValue('test:key'),\n            parse: jest.fn().mockReturnValue({ key: 'test:key' }),\n            createPattern: jest.fn().mockReturnValue('test:*'),\n            matchPattern: jest.fn().mockReturnValue(true),\n            extractNamespace: jest.fn().mockReturnValue('test'),\n            extractTenantId: jest.fn().mockReturnValue('123'),\n            extractUserId: jest.fn().mockReturnValue('456'),\n            extractTags: jest.fn().mockReturnValue(['tag1', 'tag2']),\n          },\n        },\n        {\n          provide: PinoLoggerService,\n          useValue: mockLogger,\n        },\n        RedisCacheService,\n      ],\n    }).compile();\n\n    service = module.get<RedisCacheService>(RedisCacheService);\n    keyFactory = module.get('ICacheKeyFactory');\n\n    // 验证 logger 是否正确注入\n    expect(service['logger']).toBeDefined();\n\n    // 设置默认的mock返回值\n    mockRedis.ping.mockResolvedValue('PONG');\n    mockRedis.get.mockResolvedValue(null);\n    mockRedis.set.mockResolvedValue('OK');\n    mockRedis.setex.mockResolvedValue('OK');\n    mockRedis.del.mockResolvedValue(1);\n    mockRedis.exists.mockResolvedValue(1);\n    mockRedis.keys.mockResolvedValue([]);\n    mockRedis.flushdb.mockResolvedValue('OK');\n    mockRedis.info.mockResolvedValue(\n      'redis_version:6.0.0\\r\\nconnected_clients:1\\r\\nused_memory:1000000\\r\\n',\n    );\n    mockRedis.quit.mockResolvedValue('OK');\n    mockRedis.on.mockImplementation((event, callback) => {\n      if (event === 'connect' || event === 'ready') {\n        callback();\n      }\n      return mockRedis;\n    });\n\n    // 手动设置Redis实例，避免连接失败\n    (service as unknown).redis = mockRedis;\n    (service as unknown).isConnected = true;\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('onModuleInit', () => {\n    it('should connect to Redis successfully', async () => {\n      await service.onModuleInit();\n\n      expect(Redis).toHaveBeenCalledWith({\n        host: 'localhost',\n        port: 6379,\n        password: 'test-password',\n        db: 0,\n        connectTimeout: 10000,\n        commandTimeout: 5000,\n        maxRetriesPerRequest: 3,\n      });\n      expect(mockRedis.ping).toHaveBeenCalled();\n    });\n\n    it('should handle connection error', async () => {\n      const error = new Error('Connection failed');\n      mockRedis.ping.mockRejectedValue(error);\n\n      await expect(service.onModuleInit()).rejects.toThrow('Connection failed');\n    });\n  });\n\n  describe('onModuleDestroy', () => {\n    it('should disconnect from Redis', async () => {\n      await service.onModuleDestroy();\n\n      expect(mockRedis.quit).toHaveBeenCalled();\n    });\n  });\n\n  describe('get', () => {\n    it('should get cache value successfully', async () => {\n      const key = keyFactory.create('test-key');\n      const cacheValue = {\n        value: { data: 'test-data' },\n        createdAt: Date.now(),\n        accessCount: 0,\n        lastAccessed: Date.now(),\n        version: 'v1',\n        tags: ['test'],\n        metadata: {\n          type: CacheType.REDIS,\n          strategy: CacheStrategy.TTL,\n        },\n      };\n\n      mockRedis.get.mockResolvedValue(JSON.stringify(cacheValue));\n      mockRedis.set.mockResolvedValue('OK');\n\n      const result = await service.get(key);\n\n      expect(result).toEqual({ data: 'test-data' });\n      expect(mockRedis.get).toHaveBeenCalledWith(keyFactory.toString(key));\n      expect(mockRedis.set).toHaveBeenCalledWith(\n        keyFactory.toString(key),\n        expect.stringContaining('\"accessCount\":1'),\n      );\n    });\n\n    it('should return null for non-existent key', async () => {\n      const key = keyFactory.create('non-existent-key');\n      mockRedis.get.mockResolvedValue(null);\n\n      const result = await service.get(key);\n\n      expect(result).toBeNull();\n    });\n\n    it('should return null for expired cache', async () => {\n      const key = keyFactory.create('expired-key');\n      const expiredValue = {\n        value: { data: 'expired-data' },\n        createdAt: Date.now() - 2000,\n        expiresAt: Date.now() - 1000, // 已过期\n        accessCount: 0,\n        lastAccessed: Date.now() - 2000,\n      };\n\n      mockRedis.get.mockResolvedValue(JSON.stringify(expiredValue));\n      mockRedis.del.mockResolvedValue(1);\n\n      const result = await service.get(key);\n\n      expect(result).toBeNull();\n      expect(mockRedis.del).toHaveBeenCalledWith(keyFactory.toString(key));\n    });\n\n    it('should handle Redis error', async () => {\n      const key = keyFactory.create('error-key');\n      mockRedis.get.mockRejectedValue(new Error('Redis error'));\n\n      const result = await service.get(key);\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('set', () => {\n    it('should set cache value successfully', async () => {\n      const key = keyFactory.create('test-key');\n      const value = { data: 'test-data' };\n      const options = { ttl: 60000, strategy: CacheStrategy.TTL };\n\n      mockRedis.setex.mockResolvedValue('OK');\n\n      const result = await service.set(key, value, options);\n\n      expect(result).toBe(true);\n      expect(mockRedis.setex).toHaveBeenCalledWith(\n        keyFactory.toString(key),\n        60, // TTL in seconds\n        expect.stringContaining('\"data\":\"test-data\"'),\n      );\n    });\n\n    it('should set cache value without TTL', async () => {\n      const key = keyFactory.create('test-key');\n      const value = { data: 'test-data' };\n\n      mockRedis.set.mockResolvedValue('OK');\n\n      const result = await service.set(key, value);\n\n      expect(result).toBe(true);\n      expect(mockRedis.set).toHaveBeenCalledWith(\n        keyFactory.toString(key),\n        expect.stringContaining('\"data\":\"test-data\"'),\n      );\n    });\n\n    it('should handle Redis error', async () => {\n      const key = keyFactory.create('error-key');\n      const value = { data: 'test-data' };\n\n      mockRedis.set.mockRejectedValue(new Error('Redis error'));\n\n      const result = await service.set(key, value);\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('delete', () => {\n    it('should delete cache value successfully', async () => {\n      const key = keyFactory.create('test-key');\n      mockRedis.del.mockResolvedValue(1);\n\n      const result = await service.delete(key);\n\n      expect(result).toBe(true);\n      expect(mockRedis.del).toHaveBeenCalledWith(keyFactory.toString(key));\n    });\n\n    it('should return false for non-existent key', async () => {\n      const key = keyFactory.create('non-existent-key');\n      mockRedis.del.mockResolvedValue(0);\n\n      const result = await service.delete(key);\n\n      expect(result).toBe(false);\n    });\n\n    it('should handle Redis error', async () => {\n      const key = keyFactory.create('error-key');\n      mockRedis.del.mockRejectedValue(new Error('Redis error'));\n\n      const result = await service.delete(key);\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('exists', () => {\n    it('should return true for existing key', async () => {\n      const key = keyFactory.create('existing-key');\n      mockRedis.exists.mockResolvedValue(1);\n\n      const result = await service.exists(key);\n\n      expect(result).toBe(true);\n      expect(mockRedis.exists).toHaveBeenCalledWith(keyFactory.toString(key));\n    });\n\n    it('should return false for non-existing key', async () => {\n      const key = keyFactory.create('non-existing-key');\n      mockRedis.exists.mockResolvedValue(0);\n\n      const result = await service.exists(key);\n\n      expect(result).toBe(false);\n    });\n\n    it('should handle Redis error', async () => {\n      const key = keyFactory.create('error-key');\n      mockRedis.exists.mockRejectedValue(new Error('Redis error'));\n\n      const result = await service.exists(key);\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('clear', () => {\n    it('should clear all cache', async () => {\n      mockRedis.flushdb.mockResolvedValue('OK');\n\n      const result = await service.clear();\n\n      expect(result).toBe(true);\n      expect(mockRedis.flushdb).toHaveBeenCalled();\n    });\n\n    it('should clear cache by namespace', async () => {\n      const namespace = 'test-namespace';\n      const keys = ['test-namespace:key1', 'test-namespace:key2'];\n\n      mockRedis.keys.mockResolvedValue(keys);\n      mockRedis.del.mockResolvedValue(2);\n\n      const result = await service.clear(namespace);\n\n      expect(result).toBe(true);\n      expect(mockRedis.keys).toHaveBeenCalledWith(`${namespace}:*`);\n      expect(mockRedis.del).toHaveBeenCalledWith(...keys);\n    });\n\n    it('should handle Redis error', async () => {\n      mockRedis.flushdb.mockRejectedValue(new Error('Redis error'));\n\n      const result = await service.clear();\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getStats', () => {\n    it('should return cache statistics', async () => {\n      const redisInfo = `\n# Keyspace\ndb0:keys=100,expires=10,avg_ttl=3600000\n      `.trim();\n\n      mockRedis.info.mockResolvedValue(redisInfo);\n\n      const stats = await service.getStats();\n\n      expect(stats).toHaveProperty('totalEntries');\n      expect(stats).toHaveProperty('hits');\n      expect(stats).toHaveProperty('misses');\n      expect(stats).toHaveProperty('hitRate');\n      expect(mockRedis.info).toHaveBeenCalled();\n    });\n\n    it('should handle Redis error', async () => {\n      mockRedis.info.mockRejectedValue(new Error('Redis error'));\n\n      const stats = await service.getStats();\n\n      expect(stats).toHaveProperty('totalEntries');\n      expect(stats).toHaveProperty('hits');\n      expect(stats).toHaveProperty('misses');\n    });\n  });\n\n  describe('getHealth', () => {\n    it('should return healthy status', async () => {\n      mockRedis.ping.mockResolvedValue('PONG');\n\n      const health = await service.getHealth();\n\n      expect(health.healthy).toBe(true);\n      expect(health.connected).toBe(true);\n      expect(health.responseTime).toBeGreaterThanOrEqual(0);\n      expect(health.lastCheck).toBeGreaterThan(0);\n      expect(mockRedis.ping).toHaveBeenCalled();\n    });\n\n    it('should return unhealthy status on error', async () => {\n      const error = new Error('Connection failed');\n      mockRedis.ping.mockRejectedValue(error);\n\n      const health = await service.getHealth();\n\n      expect(health.healthy).toBe(false);\n      expect(health.connected).toBe(false);\n      expect(health.error).toBe('Connection failed');\n      expect(health.responseTime).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('resetStats', () => {\n    it('should reset cache statistics', async () => {\n      await service.resetStats();\n\n      const stats = await service.getStats();\n      expect(stats.hits).toBe(0);\n      expect(stats.misses).toBe(0);\n      expect(stats.hitRate).toBe(0);\n      expect(stats.totalEntries).toBe(0);\n      expect(stats.totalSize).toBe(0);\n      expect(stats.averageSize).toBe(0);\n    });\n  });\n});\n"],"version":3}