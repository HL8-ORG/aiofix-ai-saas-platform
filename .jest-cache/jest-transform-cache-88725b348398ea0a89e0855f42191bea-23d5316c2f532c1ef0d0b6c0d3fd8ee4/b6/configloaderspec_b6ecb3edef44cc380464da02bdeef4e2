79b09b82df1fcd7a2287163245b3fb80
"use strict";
/**
 * @fileoverview 配置加载器测试
 * @description 测试配置加载器的核心功能，包括配置合并、获取、重置等操作
 * @author AI开发团队
 * @since 1.0.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types="jest" />
const config_loader_1 = require("./config-loader");
describe('ConfigLoader', () => {
    beforeEach(() => {
        // 每个测试前重置配置
        (0, config_loader_1.resetConfig)();
    });
    describe('getConfig', () => {
        it('应该返回默认配置', () => {
            const config = (0, config_loader_1.getConfig)();
            expect(config).toBeDefined();
            expect(config.app).toBeDefined();
            expect(config.database).toBeDefined();
            expect(config.redis).toBeDefined();
            expect(config.jwt).toBeDefined();
            expect(config.email).toBeDefined();
            expect(config.logging).toBeDefined();
        });
        it('应该返回只读配置对象', () => {
            const config = (0, config_loader_1.getConfig)();
            expect(() => {
                config.app = {};
            }).toThrow();
        });
        it('应该返回配置的深拷贝', () => {
            const config1 = (0, config_loader_1.getConfig)();
            const config2 = (0, config_loader_1.getConfig)();
            expect(config1).not.toBe(config2);
            expect(config1.app).not.toBe(config2.app);
        });
    });
    describe('defineConfig', () => {
        it('应该成功合并有效配置', async () => {
            const customConfig = {
                app: {
                    app_name: 'Test App',
                    custom_setting: 'test_value',
                },
            };
            await (0, config_loader_1.defineConfig)(customConfig);
            const config = (0, config_loader_1.getConfig)();
            expect(config.app?.app_name).toBe('Test App');
            expect(config.app?.custom_setting).toBe('test_value');
        });
        it('应该深度合并嵌套配置', async () => {
            const customConfig = {
                database: {
                    postgresql: {
                        host: 'custom-host',
                        port: 5433,
                    },
                },
            };
            await (0, config_loader_1.defineConfig)(customConfig);
            const config = (0, config_loader_1.getConfig)();
            expect(config.database?.postgresql?.host).toBe('custom-host');
            expect(config.database?.postgresql?.port).toBe(5433);
            // 其他默认配置应该保持不变
            expect(config.database?.postgresql?.username).toBeDefined();
        });
        it('应该覆盖数组配置', async () => {
            const customConfig = {
                redis: {
                    cluster: {
                        nodes: ['node1:6379', 'node2:6379'],
                    },
                },
            };
            await (0, config_loader_1.defineConfig)(customConfig);
            const config = (0, config_loader_1.getConfig)();
            expect(config.redis?.cluster?.nodes).toEqual([
                'node1:6379',
                'node2:6379',
            ]);
        });
        it('应该抛出错误当配置无效时', async () => {
            await expect((0, config_loader_1.defineConfig)(null)).rejects.toThrow('Invalid configuration provided. Expected a non-empty object.');
            await expect((0, config_loader_1.defineConfig)(undefined)).rejects.toThrow('Invalid configuration provided. Expected a non-empty object.');
            await expect((0, config_loader_1.defineConfig)('invalid')).rejects.toThrow('Invalid configuration provided. Expected a non-empty object.');
        });
        it('应该支持多次配置合并', async () => {
            const config1 = {
                app: {
                    app_name: 'First App',
                },
            };
            const config2 = {
                app: {
                    app_version: '2.0.0',
                },
            };
            await (0, config_loader_1.defineConfig)(config1);
            await (0, config_loader_1.defineConfig)(config2);
            const config = (0, config_loader_1.getConfig)();
            expect(config.app?.app_name).toBe('First App');
            expect(config.app?.app_version).toBe('2.0.0');
        });
    });
    describe('resetConfig', () => {
        it('应该重置配置到默认值', async () => {
            // 先设置自定义配置
            const customConfig = {
                app: {
                    app_name: 'Custom App',
                },
            };
            await (0, config_loader_1.defineConfig)(customConfig);
            expect((0, config_loader_1.getConfig)().app?.app_name).toBe('Custom App');
            // 重置配置
            (0, config_loader_1.resetConfig)();
            // 验证配置已重置
            const config = (0, config_loader_1.getConfig)();
            expect(config.app?.app_name).toBe('Aiofix IAM');
        });
        it('应该清空所有自定义配置', async () => {
            // 设置多个自定义配置
            await (0, config_loader_1.defineConfig)({
                app: { custom1: 'value1' },
                database: { custom2: 'value2' },
            });
            (0, config_loader_1.resetConfig)();
            const config = (0, config_loader_1.getConfig)();
            expect(config.app?.custom1).toBeUndefined();
            expect(config.database?.custom2).toBeUndefined();
        });
    });
    describe('配置合并逻辑', () => {
        it('应该正确处理复杂嵌套对象', async () => {
            const customConfig = {
                jwt: {
                    secret: {
                        accessToken: 'custom-access-secret',
                    },
                    accessToken: {
                        expiresIn: 7200,
                    },
                },
            };
            await (0, config_loader_1.defineConfig)(customConfig);
            const config = (0, config_loader_1.getConfig)();
            expect(config.jwt?.secret?.accessToken).toBe('custom-access-secret');
            expect(config.jwt?.accessToken?.expiresIn).toBe(7200);
            // 其他JWT配置应该保持默认值
            expect(config.jwt?.secret?.refreshToken).toBeDefined();
            expect(config.jwt?.refreshToken?.expiresIn).toBeDefined();
        });
        it('应该正确处理空值和undefined', async () => {
            const customConfig = {
                app: {
                    nullValue: null,
                    undefinedValue: undefined,
                    emptyString: '',
                    zeroValue: 0,
                },
            };
            await (0, config_loader_1.defineConfig)(customConfig);
            const config = (0, config_loader_1.getConfig)();
            expect(config.app?.nullValue).toBeNull();
            expect(config.app?.undefinedValue).toBeUndefined();
            expect(config.app?.emptyString).toBe('');
            expect(config.app?.zeroValue).toBe(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,