{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/config/database.config.spec.ts","mappings":";AAAA;;;GAGG;;AAIH,uDAAmD;AAEnD,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,OAAuB,CAAC;IAC5B,IAAI,aAA4B,CAAC;IAEjC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,iBAAiB,GAAG;YACxB,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,SAAS,CAAC;SAC1C,CAAC;QAEF,MAAM,UAAU,GAAG;YACjB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;SAChB,CAAC;QAEF,OAAO,GAAG,IAAI,gCAAc,CAAC,iBAAwB,EAAE,UAAiB,CAAC,CAAC;QAC1E,aAAa,GAAG,iBAAwB,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,YAAY;YACZ,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAE5D,MAAM,MAAM,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;YAE3C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,IAAI,EAAE,WAAW;gBACjB,IAAI,EAAE,IAAI;gBACV,QAAQ,EAAE,aAAa;gBACvB,QAAQ,EAAE,iBAAiB;gBAC3B,QAAQ,EAAE,iBAAiB;gBAC3B,GAAG,EAAE,KAAK;gBACV,IAAI,EAAE;oBACJ,GAAG,EAAE,CAAC;oBACN,GAAG,EAAE,EAAE;oBACP,oBAAoB,EAAE,KAAK;oBAC3B,mBAAmB,EAAE,KAAK;oBAC1B,oBAAoB,EAAE,IAAI;oBAC1B,iBAAiB,EAAE,KAAK;oBACxB,kBAAkB,EAAE,IAAI;oBACxB,yBAAyB,EAAE,GAAG;iBAC/B;gBACD,eAAe,EAAE;oBACf,UAAU,EAAE,iBAAiB;oBAC7B,UAAU,EAAE,iBAAiB;oBAC7B,UAAU,EAAE,iBAAiB;iBAC9B;gBACD,WAAW,EAAE,KAAK;gBAClB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE;oBACL,QAAQ,EAAE,KAAK;iBAChB;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,kBAAkB,CAAC,CAAC,GAAW,EAAE,EAAE;gBAClE,MAAM,OAAO,GAA2B;oBACtC,aAAa,EAAE,aAAa;oBAC5B,aAAa,EAAE,MAAM;oBACrB,aAAa,EAAE,aAAa;oBAC5B,iBAAiB,EAAE,iBAAiB;oBACpC,WAAW,EAAE,iBAAiB;oBAC9B,YAAY,EAAE,MAAM;oBACpB,iBAAiB,EAAE,GAAG;oBACtB,iBAAiB,EAAE,IAAI;iBACxB,CAAC;gBACF,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;YAE3C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,IAAI,EAAE,aAAa;gBACnB,IAAI,EAAE,IAAI;gBACV,QAAQ,EAAE,aAAa;gBACvB,QAAQ,EAAE,iBAAiB;gBAC3B,QAAQ,EAAE,iBAAiB;gBAC3B,GAAG,EAAE,KAAK;gBACV,IAAI,EAAE;oBACJ,GAAG,EAAE,CAAC;oBACN,GAAG,EAAE,EAAE;oBACP,oBAAoB,EAAE,KAAK;oBAC3B,mBAAmB,EAAE,KAAK;oBAC1B,oBAAoB,EAAE,IAAI;oBAC1B,iBAAiB,EAAE,KAAK;oBACxB,kBAAkB,EAAE,IAAI;oBACxB,yBAAyB,EAAE,GAAG;iBAC/B;gBACD,eAAe,EAAE;oBACf,UAAU,EAAE,iBAAiB;oBAC7B,UAAU,EAAE,iBAAiB;oBAC7B,UAAU,EAAE,iBAAiB;iBAC9B;gBACD,WAAW,EAAE,KAAK;gBAClB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE;oBACL,QAAQ,EAAE,KAAK;iBAChB;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,kBAAkB,CAAC,CAAC,GAAW,EAAE,EAAE;gBAClE,IAAI,GAAG,KAAK,UAAU,EAAE,CAAC;oBACvB,OAAO,YAAY,CAAC;gBACtB,CAAC;gBACD,OAAO,SAAS,CAAC;YACnB,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;YAE3C,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,kBAAkB,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAE5D,MAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;YAE1C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,GAAG,EAAE,uFAAuF;gBAC5F,SAAS,EAAE;oBACT,MAAM,EAAE,eAAe;oBACvB,aAAa,EAAE,sBAAsB;iBACtC;gBACD,OAAO,EAAE;oBACP,WAAW,EAAE,EAAE;oBACf,WAAW,EAAE,CAAC;oBACd,aAAa,EAAE,KAAK;oBACpB,wBAAwB,EAAE,IAAI;oBAC9B,eAAe,EAAE,KAAK;oBACtB,gBAAgB,EAAE,CAAC;oBACnB,eAAe,EAAE,IAAI;oBACrB,kBAAkB,EAAE,IAAI;iBACzB;gBACD,UAAU,EAAE;oBACV,UAAU,EAAE,eAAe;oBAC3B,kBAAkB,EAAE,qBAAqB;oBACzC,oBAAoB,EAAE,GAAG;iBAC1B;gBACD,aAAa,EAAE;oBACb,UAAU,EAAE,eAAe;oBAC3B,OAAO,EAAE;wBACP,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;wBAC9C,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE;wBAChC,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE;wBACpC,EAAE,IAAI,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,EAAE;qBAC3B;iBACF;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,kBAAkB,CAAC,CAAC,GAAW,EAAE,EAAE;gBAClE,MAAM,OAAO,GAA2B;oBACtC,WAAW,EACT,sFAAsF;oBACxF,iBAAiB,EAAE,eAAe;oBAClC,wBAAwB,EAAE,sBAAsB;iBACjD,CAAC;gBACF,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;YAE1C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,GAAG,EAAE,sFAAsF;gBAC3F,SAAS,EAAE;oBACT,MAAM,EAAE,eAAe;oBACvB,aAAa,EAAE,sBAAsB;iBACtC;gBACD,OAAO,EAAE;oBACP,WAAW,EAAE,EAAE;oBACf,WAAW,EAAE,CAAC;oBACd,aAAa,EAAE,KAAK;oBACpB,wBAAwB,EAAE,IAAI;oBAC9B,eAAe,EAAE,KAAK;oBACtB,gBAAgB,EAAE,CAAC;oBACnB,eAAe,EAAE,IAAI;oBACrB,kBAAkB,EAAE,IAAI;iBACzB;gBACD,UAAU,EAAE;oBACV,UAAU,EAAE,eAAe;oBAC3B,kBAAkB,EAAE,qBAAqB;oBACzC,oBAAoB,EAAE,GAAG;iBAC1B;gBACD,aAAa,EAAE;oBACb,UAAU,EAAE,eAAe;oBAC3B,OAAO,EAAE;wBACP,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;wBAC9C,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE;wBAChC,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE;wBACpC,EAAE,IAAI,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,EAAE;qBAC3B;iBACF;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,MAAM,GAAG,OAAO,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;YAE3D,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;YAChE,MAAM,MAAM,GAAG,OAAO,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,CAAC;YAEjE,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,4CAA4C;YAC5C,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,kBAAkB,CAAC,CAAC,GAAW,EAAE,EAAE;gBAClE,MAAM,OAAO,GAA2B;oBACtC,aAAa,EAAE,WAAW;oBAC1B,WAAW,EAAE,SAAS;oBACtB,aAAa,EAAE,WAAW;oBAC1B,iBAAiB,EAAE,eAAe;oBAClC,WAAW,EAAE,mCAAmC;iBACjD,CAAC;gBACF,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,OAAO,CAAC,cAAc,EAAE,CAAC;YACzC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,8CAA8C;YAC9C,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,kBAAkB,CAAC,CAAC,GAAW,EAAE,EAAE;gBAClE,MAAM,OAAO,GAA2B;oBACtC,aAAa,EAAE,EAAE,EAAE,QAAQ;oBAC3B,WAAW,EAAE,SAAS;oBACtB,aAAa,EAAE,WAAW;oBAC1B,WAAW,EAAE,mCAAmC;iBACjD,CAAC;gBACF,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,OAAO,CAAC,cAAc,EAAE,CAAC;YACzC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,8CAA8C;YAC9C,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,kBAAkB,CAAC,CAAC,GAAW,EAAE,EAAE;gBAClE,MAAM,OAAO,GAA2B;oBACtC,aAAa,EAAE,WAAW;oBAC1B,WAAW,EAAE,SAAS;oBACtB,aAAa,EAAE,WAAW;oBAC1B,WAAW,EAAE,EAAE,EAAE,SAAS;iBAC3B,CAAC;gBACF,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,OAAO,CAAC,cAAc,EAAE,CAAC;YACzC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/config/database.config.spec.ts"],"sourcesContent":["/**\n * @file database.config.spec.ts\n * @description 数据库配置服务单元测试\n */\n\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { DatabaseConfig } from './database.config';\n\ndescribe('DatabaseConfig', () => {\n  let service: DatabaseConfig;\n  let configService: ConfigService;\n\n  beforeEach(async () => {\n    const mockConfigService = {\n      get: jest.fn().mockReturnValue(undefined),\n    };\n\n    const mockLogger = { \n      error: jest.fn(),\n      info: jest.fn(),\n    };\n\n    service = new DatabaseConfig(mockConfigService as any, mockLogger as any);\n    configService = mockConfigService as any;\n  });\n\n  describe('getPostgreSQLConfig', () => {\n    it('should return default PostgreSQL configuration', () => {\n      // 模拟环境变量未设置\n      jest.spyOn(configService, 'get').mockReturnValue(undefined);\n\n      const config = service.getPostgresConfig();\n\n      expect(config).toEqual({\n        host: 'localhost',\n        port: 5432,\n        username: 'aiofix_user',\n        password: 'aiofix_password',\n        database: 'aiofix_platform',\n        ssl: false,\n        pool: {\n          min: 2,\n          max: 10,\n          acquireTimeoutMillis: 30000,\n          createTimeoutMillis: 30000,\n          destroyTimeoutMillis: 5000,\n          idleTimeoutMillis: 30000,\n          reapIntervalMillis: 1000,\n          createRetryIntervalMillis: 200,\n        },\n        tenantDatabases: {\n          'tenant-1': 'aiofix_tenant_1',\n          'tenant-2': 'aiofix_tenant_2',\n          'tenant-3': 'aiofix_tenant_3',\n        },\n        synchronize: false,\n        logging: false,\n        cache: {\n          duration: 30000,\n        },\n      });\n    });\n\n    it('should return configured PostgreSQL configuration', () => {\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const configs: Record<string, string> = {\n          POSTGRES_HOST: 'custom-host',\n          POSTGRES_PORT: '5433',\n          POSTGRES_USER: 'custom_user',\n          POSTGRES_PASSWORD: 'custom_password',\n          POSTGRES_DB: 'custom_database',\n          POSTGRES_SSL: 'true',\n          POSTGRES_POOL_MIN: '5',\n          POSTGRES_POOL_MAX: '20',\n        };\n        return configs[key];\n      });\n\n      const config = service.getPostgresConfig();\n\n      expect(config).toEqual({\n        host: 'custom-host',\n        port: 5433,\n        username: 'custom_user',\n        password: 'custom_password',\n        database: 'custom_database',\n        ssl: false,\n        pool: {\n          min: 5,\n          max: 20,\n          acquireTimeoutMillis: 30000,\n          createTimeoutMillis: 30000,\n          destroyTimeoutMillis: 5000,\n          idleTimeoutMillis: 30000,\n          reapIntervalMillis: 1000,\n          createRetryIntervalMillis: 200,\n        },\n        tenantDatabases: {\n          'tenant-1': 'aiofix_tenant_1',\n          'tenant-2': 'aiofix_tenant_2',\n          'tenant-3': 'aiofix_tenant_3',\n        },\n        synchronize: false,\n        logging: false,\n        cache: {\n          duration: 30000,\n        },\n      });\n    });\n\n    it('should handle SSL configuration as object', () => {\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        if (key === 'NODE_ENV') {\n          return 'production';\n        }\n        return undefined;\n      });\n\n      const config = service.getPostgresConfig();\n\n      expect(config.ssl).toEqual({ rejectUnauthorized: false });\n    });\n  });\n\n  describe('getMongoDBConfig', () => {\n    it('should return default MongoDB configuration', () => {\n      jest.spyOn(configService, 'get').mockReturnValue(undefined);\n\n      const config = service.getMongoDBConfig();\n\n      expect(config).toEqual({\n        uri: 'mongodb://aiofix_admin:aiofix_password@localhost:27017/aiofix_events?authSource=admin',\n        databases: {\n          events: 'aiofix_events',\n          notifications: 'aiofix_notifications',\n        },\n        options: {\n          maxPoolSize: 10,\n          minPoolSize: 2,\n          maxIdleTimeMS: 30000,\n          serverSelectionTimeoutMS: 5000,\n          socketTimeoutMS: 45000,\n          bufferMaxEntries: 0,\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n        },\n        eventStore: {\n          collection: 'domain_events',\n          snapshotCollection: 'aggregate_snapshots',\n          maxEventsPerSnapshot: 100,\n        },\n        notifications: {\n          collection: 'notifications',\n          indexes: [\n            { keys: { id: 1 }, options: { unique: true } },\n            { keys: { type: 1, status: 1 } },\n            { keys: { tenantId: 1, userId: 1 } },\n            { keys: { createdAt: 1 } },\n          ],\n        },\n      });\n    });\n\n    it('should return configured MongoDB configuration', () => {\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const configs: Record<string, string> = {\n          MONGODB_URI:\n            'mongodb://mongo_user:mongo_password@mongo-host:27018/mongo_database?authSource=admin',\n          MONGODB_EVENTS_DB: 'custom_events',\n          MONGODB_NOTIFICATIONS_DB: 'custom_notifications',\n        };\n        return configs[key];\n      });\n\n      const config = service.getMongoDBConfig();\n\n      expect(config).toEqual({\n        uri: 'mongodb://mongo_user:mongo_password@mongo-host:27018/mongo_database?authSource=admin',\n        databases: {\n          events: 'custom_events',\n          notifications: 'custom_notifications',\n        },\n        options: {\n          maxPoolSize: 10,\n          minPoolSize: 2,\n          maxIdleTimeMS: 30000,\n          serverSelectionTimeoutMS: 5000,\n          socketTimeoutMS: 45000,\n          bufferMaxEntries: 0,\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n        },\n        eventStore: {\n          collection: 'domain_events',\n          snapshotCollection: 'aggregate_snapshots',\n          maxEventsPerSnapshot: 100,\n        },\n        notifications: {\n          collection: 'notifications',\n          indexes: [\n            { keys: { id: 1 }, options: { unique: true } },\n            { keys: { type: 1, status: 1 } },\n            { keys: { tenantId: 1, userId: 1 } },\n            { keys: { createdAt: 1 } },\n          ],\n        },\n      });\n    });\n  });\n\n  describe('getTenantPostgresConfig', () => {\n    it('should return tenant-specific PostgreSQL config', () => {\n      const config = service.getTenantPostgresConfig('tenant-1');\n\n      expect(config).toHaveProperty('database');\n      expect(config.database).toBe('aiofix_tenant_1');\n    });\n\n    it('should return default tenant config for unknown tenant', () => {\n      const config = service.getTenantPostgresConfig('unknown-tenant');\n\n      expect(config).toHaveProperty('database');\n      expect(config.database).toBe('aiofix_tenant_unknown-tenant');\n    });\n  });\n\n  describe('validateConfig', () => {\n    it('should validate correct configuration', () => {\n      // Mock configService to return valid values\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const configs: Record<string, string> = {\n          POSTGRES_HOST: 'localhost',\n          POSTGRES_DB: 'test_db',\n          POSTGRES_USER: 'test_user',\n          POSTGRES_PASSWORD: 'test_password',\n          MONGODB_URI: 'mongodb://localhost:27017/test_db',\n        };\n        return configs[key];\n      });\n\n      const isValid = service.validateConfig();\n      expect(isValid).toBe(true);\n    });\n\n    it('should reject invalid PostgreSQL config', () => {\n      // Mock configService to return invalid values\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const configs: Record<string, string> = {\n          POSTGRES_HOST: '', // 无效的主机\n          POSTGRES_DB: 'test_db',\n          POSTGRES_USER: 'test_user',\n          MONGODB_URI: 'mongodb://localhost:27017/test_db',\n        };\n        return configs[key];\n      });\n\n      const isValid = service.validateConfig();\n      expect(isValid).toBe(false);\n    });\n\n    it('should reject invalid MongoDB config', () => {\n      // Mock configService to return invalid values\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const configs: Record<string, string> = {\n          POSTGRES_HOST: 'localhost',\n          POSTGRES_DB: 'test_db',\n          POSTGRES_USER: 'test_user',\n          MONGODB_URI: '', // 无效的URI\n        };\n        return configs[key];\n      });\n\n      const isValid = service.validateConfig();\n      expect(isValid).toBe(false);\n    });\n  });\n});\n"],"version":3}