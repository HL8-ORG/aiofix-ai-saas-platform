{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/interceptors/pino-logging.interceptor.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/interceptors/pino-logging.interceptor.ts"],"sourcesContent":["import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\n\nimport { tap, catchError } from 'rxjs/operators';\nimport { v4 as uuidv4 } from 'uuid';\nimport { PinoLoggerService } from '../services/pino-logger.service';\nimport { LogContext } from '../interfaces/logging.interface';\n\n/**\n * @interface MethodLogData\n * @description 方法日志数据结构\n */\ninterface MethodLogData {\n  methodId: string;\n  className: string;\n  methodName: string;\n  startTime: number;\n  requestId?: string;\n  tenantId?: string;\n  userId?: string;\n  parameters?: unknown[];\n  result?: unknown;\n  error?: Error;\n  duration?: number;\n}\n\n/**\n * @class PinoLoggingInterceptor\n * @description\n * Pino日志拦截器，负责记录方法调用的详细日志。\n *\n * 主要功能包括：\n * 1. 为每个方法调用生成唯一ID\n * 2. 记录方法调用的开始和结束时间\n * 3. 记录方法参数和返回值\n * 4. 计算方法执行时间\n * 5. 记录异常信息\n * 6. 支持请求上下文追踪\n *\n * 设计原则：\n * - 高性能：最小化对方法执行的影响\n * - 结构化：提供结构化的日志数据\n * - 可配置：支持不同级别的日志记录\n * - 安全性：敏感参数过滤\n */\n@Injectable()\nexport class PinoLoggingInterceptor implements NestInterceptor {\n  private readonly sensitiveParameters = [\n    'password',\n    'token',\n    'secret',\n    'apikey',\n    'api_key',\n    'api-key',\n  ];\n\n  constructor(private readonly logger: PinoLoggerService) {}\n\n  /**\n   * @method intercept\n   * @description 拦截器主方法\n   * @param {ExecutionContext} context 执行上下文\n   * @param {CallHandler} next 下一个处理器\n   * @returns {Observable<unknown>} 可观察对象\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable<unknown> {\n    const startTime = Date.now();\n    const methodId = this.generateMethodId();\n    const request = context.switchToHttp().getRequest();\n\n    // 提取上下文信息\n    const requestId = request?.requestId;\n    const tenantId = request?.tenantId;\n    const userId = request?.userId;\n\n    // 获取方法信息\n    const handler = context.getHandler();\n    const className = context.getClass().name;\n    const methodName = handler.name;\n\n    // 获取方法参数\n    const parameters = this.extractParameters(context);\n\n    // 创建方法日志数据\n    const methodLogData: MethodLogData = {\n      methodId,\n      className,\n      methodName,\n      startTime,\n      requestId,\n      tenantId,\n      userId,\n      parameters: this.sanitizeParameters(parameters),\n    };\n\n    // 记录方法开始日志\n    this.logMethodStart(methodLogData);\n\n    return next.handle().pipe(\n      tap(result => {\n        // 记录方法成功完成\n        const duration = Date.now() - startTime;\n        const completedLogData: MethodLogData = {\n          ...methodLogData,\n          result: this.sanitizeResult(result),\n          duration,\n        };\n        this.logMethodSuccess(completedLogData);\n      }),\n      catchError(error => {\n        // 记录方法异常\n        const duration = Date.now() - startTime;\n        const errorLogData: MethodLogData = {\n          ...methodLogData,\n          error,\n          duration,\n        };\n        this.logMethodError(errorLogData);\n        return throwError(() => error);\n      }),\n    );\n  }\n\n  /**\n   * @private\n   * @method generateMethodId\n   * @description 生成方法调用ID\n   * @returns {string} 方法调用ID\n   */\n  private generateMethodId(): string {\n    return uuidv4();\n  }\n\n  /**\n   * @private\n   * @method extractParameters\n   * @description 提取方法参数\n   * @param {ExecutionContext} context 执行上下文\n   * @returns {unknown[]} 方法参数\n   */\n  private extractParameters(context: ExecutionContext): unknown[] {\n    const args = context.getArgs();\n\n    // 过滤掉请求和响应对象，只保留业务参数\n    return args.filter((arg, index) => {\n      // 通常前两个参数是 request 和 response\n      if (index === 0 && arg?.method) return false; // HTTP request\n      if (index === 1 && arg?.statusCode !== undefined) return false; // HTTP response\n      return true;\n    });\n  }\n\n  /**\n   * @private\n   * @method sanitizeParameters\n   * @description 清理方法参数，移除敏感信息\n   * @param {unknown[]} parameters 方法参数\n   * @returns {unknown[]} 清理后的参数\n   */\n  private sanitizeParameters(parameters: unknown[]): unknown[] {\n    return parameters.map(param => this.sanitizeObject(param));\n  }\n\n  /**\n   * @private\n   * @method sanitizeResult\n   * @description 清理方法返回值，移除敏感信息\n   * @param {unknown} result 方法返回值\n   * @returns {unknown} 清理后的返回值\n   */\n  private sanitizeResult(result: unknown): unknown {\n    return this.sanitizeObject(result);\n  }\n\n  /**\n   * @private\n   * @method sanitizeObject\n   * @description 清理对象，移除敏感信息\n   * @param {unknown} obj 要清理的对象\n   * @returns {unknown} 清理后的对象\n   */\n  private sanitizeObject(obj: unknown): unknown {\n    if (!obj || typeof obj !== 'object') {\n      return obj;\n    }\n\n    // 如果是数组，递归处理每个元素\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.sanitizeObject(item));\n    }\n\n    // 如果是对象，递归处理每个属性\n    const sanitized = { ...(obj as Record<string, unknown>) };\n\n    for (const [key, value] of Object.entries(sanitized)) {\n      if (this.sensitiveParameters.includes(key.toLowerCase())) {\n        (sanitized as Record<string, unknown>)[key] = '[REDACTED]';\n      } else if (typeof value === 'object' && value !== null) {\n        (sanitized as Record<string, unknown>)[key] =\n          this.sanitizeObject(value);\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * @private\n   * @method logMethodStart\n   * @description 记录方法开始日志\n   * @param {MethodLogData} data 方法日志数据\n   */\n  private logMethodStart(data: MethodLogData): void {\n    this.logger.debug(\n      `Method Start: ${data.className}.${data.methodName}`,\n      LogContext.BUSINESS,\n      {\n        methodId: data.methodId,\n        className: data.className,\n        methodName: data.methodName,\n        requestId: data.requestId,\n        tenantId: data.tenantId,\n        userId: data.userId,\n        parameters: data.parameters,\n      },\n    );\n  }\n\n  /**\n   * @private\n   * @method logMethodSuccess\n   * @description 记录方法成功完成日志\n   * @param {MethodLogData} data 方法日志数据\n   */\n  private logMethodSuccess(data: MethodLogData): void {\n    this.logger.info(\n      `Method Success: ${data.className}.${data.methodName} - ${data.duration}ms`,\n      LogContext.BUSINESS,\n      {\n        methodId: data.methodId,\n        className: data.className,\n        methodName: data.methodName,\n        requestId: data.requestId,\n        tenantId: data.tenantId,\n        userId: data.userId,\n        result: data.result,\n        duration: data.duration,\n      },\n    );\n\n    // 记录性能日志\n    this.logger.performance(\n      'method_execution',\n      data.duration ?? 0,\n      LogContext.PERFORMANCE,\n      {\n        methodId: data.methodId,\n        className: data.className,\n        methodName: data.methodName,\n        requestId: data.requestId,\n        tenantId: data.tenantId,\n        userId: data.userId,\n      },\n    );\n  }\n\n  /**\n   * @private\n   * @method logMethodError\n   * @description 记录方法异常日志\n   * @param {MethodLogData} data 方法日志数据\n   */\n  private logMethodError(data: MethodLogData): void {\n    this.logger.error(\n      `Method Error: ${data.className}.${data.methodName} - ${data.duration}ms`,\n      LogContext.BUSINESS,\n      {\n        methodId: data.methodId,\n        className: data.className,\n        methodName: data.methodName,\n        requestId: data.requestId,\n        tenantId: data.tenantId,\n        userId: data.userId,\n        parameters: data.parameters,\n        duration: data.duration,\n      },\n      data.error,\n    );\n  }\n}\n"],"version":3}