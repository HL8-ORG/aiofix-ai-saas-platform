a346af5fba724c4c632af0d7b1a2d524
"use strict";
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinoLoggingInterceptor = void 0;
const common_1 = require("@nestjs/common");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const uuid_1 = require("uuid");
const logging_interface_1 = require("../interfaces/logging.interface");
/**
 * @class PinoLoggingInterceptor
 * @description
 * Pino日志拦截器，负责记录方法调用的详细日志。
 *
 * 主要功能包括：
 * 1. 为每个方法调用生成唯一ID
 * 2. 记录方法调用的开始和结束时间
 * 3. 记录方法参数和返回值
 * 4. 计算方法执行时间
 * 5. 记录异常信息
 * 6. 支持请求上下文追踪
 *
 * 设计原则：
 * - 高性能：最小化对方法执行的影响
 * - 结构化：提供结构化的日志数据
 * - 可配置：支持不同级别的日志记录
 * - 安全性：敏感参数过滤
 */
let PinoLoggingInterceptor = (() => {
    let _classDecorators = [(0, common_1.Injectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    var PinoLoggingInterceptor = _classThis = class {
        constructor(logger) {
            this.logger = logger;
            this.sensitiveParameters = [
                'password',
                'token',
                'secret',
                'apikey',
                'api_key',
                'api-key',
            ];
        }
        /**
         * @method intercept
         * @description 拦截器主方法
         * @param {ExecutionContext} context 执行上下文
         * @param {CallHandler} next 下一个处理器
         * @returns {Observable<unknown>} 可观察对象
         */
        intercept(context, next) {
            const startTime = Date.now();
            const methodId = this.generateMethodId();
            const request = context.switchToHttp().getRequest();
            // 提取上下文信息
            const requestId = request?.requestId;
            const tenantId = request?.tenantId;
            const userId = request?.userId;
            // 获取方法信息
            const handler = context.getHandler();
            const className = context.getClass().name;
            const methodName = handler.name;
            // 获取方法参数
            const parameters = this.extractParameters(context);
            // 创建方法日志数据
            const methodLogData = {
                methodId,
                className,
                methodName,
                startTime,
                requestId,
                tenantId,
                userId,
                parameters: this.sanitizeParameters(parameters),
            };
            // 记录方法开始日志
            this.logMethodStart(methodLogData);
            return next.handle().pipe((0, operators_1.tap)(result => {
                // 记录方法成功完成
                const duration = Date.now() - startTime;
                const completedLogData = {
                    ...methodLogData,
                    result: this.sanitizeResult(result),
                    duration,
                };
                this.logMethodSuccess(completedLogData);
            }), (0, operators_1.catchError)(error => {
                // 记录方法异常
                const duration = Date.now() - startTime;
                const errorLogData = {
                    ...methodLogData,
                    error,
                    duration,
                };
                this.logMethodError(errorLogData);
                return (0, rxjs_1.throwError)(() => error);
            }));
        }
        /**
         * @private
         * @method generateMethodId
         * @description 生成方法调用ID
         * @returns {string} 方法调用ID
         */
        generateMethodId() {
            return (0, uuid_1.v4)();
        }
        /**
         * @private
         * @method extractParameters
         * @description 提取方法参数
         * @param {ExecutionContext} context 执行上下文
         * @returns {unknown[]} 方法参数
         */
        extractParameters(context) {
            const args = context.getArgs();
            // 过滤掉请求和响应对象，只保留业务参数
            return args.filter((arg, index) => {
                // 通常前两个参数是 request 和 response
                if (index === 0 && arg?.method)
                    return false; // HTTP request
                if (index === 1 && arg?.statusCode !== undefined)
                    return false; // HTTP response
                return true;
            });
        }
        /**
         * @private
         * @method sanitizeParameters
         * @description 清理方法参数，移除敏感信息
         * @param {unknown[]} parameters 方法参数
         * @returns {unknown[]} 清理后的参数
         */
        sanitizeParameters(parameters) {
            return parameters.map(param => this.sanitizeObject(param));
        }
        /**
         * @private
         * @method sanitizeResult
         * @description 清理方法返回值，移除敏感信息
         * @param {unknown} result 方法返回值
         * @returns {unknown} 清理后的返回值
         */
        sanitizeResult(result) {
            return this.sanitizeObject(result);
        }
        /**
         * @private
         * @method sanitizeObject
         * @description 清理对象，移除敏感信息
         * @param {unknown} obj 要清理的对象
         * @returns {unknown} 清理后的对象
         */
        sanitizeObject(obj) {
            if (!obj || typeof obj !== 'object') {
                return obj;
            }
            // 如果是数组，递归处理每个元素
            if (Array.isArray(obj)) {
                return obj.map(item => this.sanitizeObject(item));
            }
            // 如果是对象，递归处理每个属性
            const sanitized = { ...obj };
            for (const [key, value] of Object.entries(sanitized)) {
                if (this.sensitiveParameters.includes(key.toLowerCase())) {
                    sanitized[key] = '[REDACTED]';
                }
                else if (typeof value === 'object' && value !== null) {
                    sanitized[key] =
                        this.sanitizeObject(value);
                }
            }
            return sanitized;
        }
        /**
         * @private
         * @method logMethodStart
         * @description 记录方法开始日志
         * @param {MethodLogData} data 方法日志数据
         */
        logMethodStart(data) {
            this.logger.debug(`Method Start: ${data.className}.${data.methodName}`, logging_interface_1.LogContext.BUSINESS, {
                methodId: data.methodId,
                className: data.className,
                methodName: data.methodName,
                requestId: data.requestId,
                tenantId: data.tenantId,
                userId: data.userId,
                parameters: data.parameters,
            });
        }
        /**
         * @private
         * @method logMethodSuccess
         * @description 记录方法成功完成日志
         * @param {MethodLogData} data 方法日志数据
         */
        logMethodSuccess(data) {
            this.logger.info(`Method Success: ${data.className}.${data.methodName} - ${data.duration}ms`, logging_interface_1.LogContext.BUSINESS, {
                methodId: data.methodId,
                className: data.className,
                methodName: data.methodName,
                requestId: data.requestId,
                tenantId: data.tenantId,
                userId: data.userId,
                result: data.result,
                duration: data.duration,
            });
            // 记录性能日志
            this.logger.performance('method_execution', data.duration ?? 0, logging_interface_1.LogContext.PERFORMANCE, {
                methodId: data.methodId,
                className: data.className,
                methodName: data.methodName,
                requestId: data.requestId,
                tenantId: data.tenantId,
                userId: data.userId,
            });
        }
        /**
         * @private
         * @method logMethodError
         * @description 记录方法异常日志
         * @param {MethodLogData} data 方法日志数据
         */
        logMethodError(data) {
            this.logger.error(`Method Error: ${data.className}.${data.methodName} - ${data.duration}ms`, logging_interface_1.LogContext.BUSINESS, {
                methodId: data.methodId,
                className: data.className,
                methodName: data.methodName,
                requestId: data.requestId,
                tenantId: data.tenantId,
                userId: data.userId,
                parameters: data.parameters,
                duration: data.duration,
            }, data.error);
        }
    };
    __setFunctionName(_classThis, "PinoLoggingInterceptor");
    (() => {
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        PinoLoggingInterceptor = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return PinoLoggingInterceptor = _classThis;
})();
exports.PinoLoggingInterceptor = PinoLoggingInterceptor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,