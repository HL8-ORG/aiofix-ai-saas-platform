{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-manager.service.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-manager.service.ts"],"sourcesContent":["import { Injectable, Inject } from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\n\nimport type { ICacheService } from '../interfaces/cache.interface';\n\nimport type {\n  CacheOptions,\n  CacheKey,\n  CacheStats,\n  CacheHealth,\n} from '../interfaces/cache.interface';\nimport { CacheStrategy } from '../interfaces/cache.interface';\nimport { PinoLoggerService, LogContext } from '@aiofix/logging';\n\n/**\n * @interface CacheManagerConfig\n * @description\n * 缓存管理器配置接口，定义缓存管理器的配置选项。\n */\nexport interface CacheManagerConfig {\n  /** 默认缓存选项 */\n  defaultOptions?: CacheOptions;\n  /** 默认缓存策略 */\n  defaultStrategy?: CacheStrategy;\n  /** 是否启用缓存 */\n  enabled?: boolean;\n  /** 缓存层配置 */\n  layers?: CacheLayerConfig[];\n  /** 监控间隔（毫秒） */\n  monitoringInterval?: number;\n  /** 自动清理间隔（毫秒） */\n  cleanupInterval?: number;\n  /** 最大缓存大小 */\n  maxSize?: number;\n  /** 是否启用统计 */\n  enableStats?: boolean;\n  /** 是否启用事件 */\n  enableEvents?: boolean;\n}\n\n/**\n * @interface CacheLayerConfig\n * @description\n * 缓存层配置接口，定义单个缓存层的配置。\n */\nexport interface CacheLayerConfig {\n  /** 缓存层名称 */\n  name: string;\n  /** 缓存层优先级（数字越小优先级越高） */\n  priority: number;\n  /** 缓存服务实例 */\n  service: ICacheService;\n  /** 缓存层选项 */\n  options?: CacheOptions;\n  /** 是否启用 */\n  enabled?: boolean;\n  /** 是否只读 */\n  readOnly?: boolean;\n  /** 是否作为后备缓存 */\n  fallback?: boolean;\n}\n\n/**\n * @interface CacheManagerStats\n * @description\n * 缓存管理器统计信息接口。\n */\nexport interface CacheManagerStats extends CacheStats {\n  /** 活跃缓存层数量 */\n  activeLayers: number;\n  /** 各层统计信息 */\n  layerStats: Record<string, any>;\n  /** 最后更新时间 */\n  lastUpdated: Date;\n}\n\n/**\n * @class CacheManagerService\n * @description\n * 缓存管理器服务，作为缓存系统的核心协调器。\n *\n * 主要功能包括：\n * 1. 管理多个缓存层（L1、L2、L3等）\n * 2. 实现缓存策略（LRU、LFU、FIFO等）\n * 3. 提供统一的缓存接口\n * 4. 监控缓存性能和健康状态\n * 5. 处理缓存失效和更新\n * 6. 提供缓存统计和分析\n *\n * @implements {ICacheService}\n */\n@Injectable()\nexport class CacheManagerService implements ICacheService {\n  private readonly logger: PinoLoggerService;\n\n  /**\n   * 缓存层映射，按优先级排序\n   */\n  private readonly layers = new Map<string, CacheLayerConfig>();\n\n  /**\n   * 缓存管理器配置\n   */\n  private config: CacheManagerConfig;\n\n  /**\n   * 统计信息\n   */\n  private stats: CacheManagerStats;\n\n  /**\n   * 监控定时器\n   */\n  private monitoringTimer?: NodeJS.Timeout;\n\n  /**\n   * 清理定时器\n   */\n  private cleanupTimer?: NodeJS.Timeout;\n\n  /**\n   * 请求计数器\n   */\n  private requestCount = 0;\n\n  /**\n   * 命中计数器\n   */\n  private hitCount = 0;\n\n  /**\n   * 响应时间累计\n   */\n  private totalResponseTime = 0;\n\n  constructor(\n    @Inject('CACHE_MANAGER_CONFIG') config: CacheManagerConfig,\n\n    private readonly eventEmitter: EventEmitter2,\n    logger: PinoLoggerService,\n  ) {\n    this.logger = logger;\n    this.config = {\n      enabled: true,\n      defaultStrategy: CacheStrategy.LRU,\n      monitoringInterval: 30000,\n      cleanupInterval: 60000,\n      maxSize: 10000,\n      enableStats: true,\n      enableEvents: true,\n      ...config,\n    };\n\n    this.stats = this.initializeStats();\n    this.initializeLayers();\n    this.startMonitoring();\n    this.startCleanup();\n\n    this.logger.info('CacheManagerService initialized', LogContext.CACHE);\n  }\n\n  /**\n   * @method get\n   * @description 从缓存中获取值\n   * @param key 缓存键\n   * @returns {Promise<T | null>} 缓存值\n   */\n  async get<T = any>(key: CacheKey): Promise<T | null> {\n    const startTime = Date.now();\n    this.requestCount++;\n\n    try {\n      // 按优先级遍历缓存层\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled) continue;\n\n        const value = await layer.service.get<T>(key);\n\n        if (value !== null) {\n          // 缓存命中，更新统计\n          this.hitCount++;\n          this.updateStats(startTime);\n\n          // 如果命中的是低优先级层，尝试提升到高优先级层\n          if (layer.priority > 1) {\n            this.promoteToHigherLayer(key, value, layer.priority);\n          }\n\n          this.emitEvent('cache_hit', { key, layer: layer.name, value });\n          return value;\n        }\n      }\n\n      // 缓存未命中\n      this.updateStats(startTime);\n      this.emitEvent('cache_miss', { key });\n      return null;\n    } catch (error) {\n      this.logger.error(\n        `Error getting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return null;\n    }\n  }\n\n  /**\n   * @method set\n   * @description 设置缓存值\n   * @param key 缓存键\n   * @param value 缓存值\n   * @param options 缓存选项\n   * @returns {Promise<boolean>} 是否成功\n   */\n  async set<T = any>(\n    key: CacheKey,\n    value: T,\n    options?: Partial<CacheOptions>,\n  ): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      const mergedOptions = { ...this.config.defaultOptions, ...options };\n      let success = false;\n\n      // 按优先级设置到所有启用的缓存层\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.set(key, value, {\n            ...layer.options,\n            ...mergedOptions,\n          });\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_set', { key, layer: layer.name, value });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to set cache in layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        `Error setting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method delete\n   * @description 删除缓存值\n   * @param key 缓存键\n   * @returns {Promise<boolean>} 是否成功\n   */\n  async delete(key: CacheKey): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      let success = false;\n\n      // 从所有缓存层删除\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.delete(key);\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_delete', { key, layer: layer.name });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to delete cache from layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        `Error deleting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method exists\n   * @description 检查缓存键是否存在\n   * @param key 缓存键\n   * @returns {Promise<boolean>} 是否存在\n   */\n  async exists(key: CacheKey): Promise<boolean> {\n    const startTime = Date.now();\n    this.requestCount++;\n\n    try {\n      // 检查所有缓存层\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled) continue;\n\n        const exists = await layer.service.exists(key);\n        if (exists) {\n          this.hitCount++;\n          this.updateStats(startTime);\n          this.emitEvent('cache_exists', { key, layer: layer.name });\n          return true;\n        }\n      }\n\n      this.updateStats(startTime);\n      return false;\n    } catch (error) {\n      this.logger.error(\n        `Error checking cache existence: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method clear\n   * @description 清空缓存\n   * @param namespace 命名空间\n   * @returns {Promise<boolean>} 是否成功\n   */\n  async clear(namespace?: string): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      let success = false;\n\n      // 清空所有缓存层\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.clear(namespace);\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_clear', { layer: layer.name, namespace });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to clear cache layer ${layer.name}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        'Error clearing cache',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { error });\n      return false;\n    }\n  }\n\n  /**\n   * @method getStats\n   * @description 获取缓存统计信息\n   * @returns {Promise<CacheStats>} 统计信息\n   */\n  async getStats(): Promise<CacheStats> {\n    try {\n      // 更新各层统计信息\n      const layerStats: Record<string, any> = {};\n      for (const [name, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            layerStats[name] = await layer.service.getStats();\n          } catch (error) {\n            this.logger.warn(\n              `Failed to get stats for layer ${name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n            layerStats[name] = null;\n          }\n        }\n      }\n\n      // 计算总体统计\n      this.stats.hitRate =\n        this.requestCount > 0 ? this.hitCount / this.requestCount : 0;\n      this.stats.activeLayers = Array.from(this.layers.values()).filter(\n        layer => layer.enabled,\n      ).length;\n      this.stats.layerStats = layerStats;\n      this.stats.lastUpdated = new Date();\n\n      return { ...this.stats };\n    } catch (error) {\n      this.logger.error(\n        'Error getting cache stats',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return this.stats;\n    }\n  }\n\n  /**\n   * @method getHealth\n   * @description 获取缓存健康状态\n   * @returns {Promise<CacheHealth>} 健康状态\n   */\n  async getHealth(): Promise<CacheHealth> {\n    try {\n      let healthyLayers = 0;\n      let totalResponseTime = 0;\n      let hasError = false;\n      let errorMessage = '';\n\n      // 检查各层健康状态\n      for (const [, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            const layerHealth = await layer.service.getHealth();\n            totalResponseTime += layerHealth.responseTime;\n            if (layerHealth.healthy) {\n              healthyLayers++;\n            } else {\n              hasError = true;\n              errorMessage = layerHealth.error || 'Layer unhealthy';\n            }\n          } catch (error) {\n            hasError = true;\n            errorMessage = (error as Error).message;\n          }\n        }\n      }\n\n      const activeLayers = Array.from(this.layers.values()).filter(\n        layer => layer.enabled,\n      ).length;\n      const averageResponseTime =\n        activeLayers > 0 ? totalResponseTime / activeLayers : 0;\n\n      return {\n        healthy: !hasError && healthyLayers === activeLayers,\n        connected: healthyLayers > 0,\n        responseTime: averageResponseTime,\n        error: hasError ? errorMessage : undefined,\n        lastCheck: Date.now(),\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error getting cache health',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return {\n        healthy: false,\n        connected: false,\n        responseTime: 0,\n        error: (error as Error).message,\n        lastCheck: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * @method addLayer\n   * @description 添加缓存层\n   * @param config 缓存层配置\n   * @returns {boolean} 是否成功\n   */\n  addLayer(config: CacheLayerConfig): boolean {\n    try {\n      if (this.layers.has(config.name)) {\n        this.logger.warn(\n          `Cache layer ${config.name} already exists, replacing...`,\n          LogContext.CACHE,\n        );\n      }\n\n      this.layers.set(config.name, {\n        enabled: true,\n        readOnly: false,\n        fallback: false,\n        ...config,\n      });\n\n      this.logger.info(\n        `Added cache layer: ${config.name} with priority ${config.priority}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('layer_added', {\n        layer: config.name,\n        priority: config.priority,\n      });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to add cache layer: ${config.name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method removeLayer\n   * @description 移除缓存层\n   * @param name 缓存层名称\n   * @returns {boolean} 是否成功\n   */\n  removeLayer(name: string): boolean {\n    try {\n      if (!this.layers.has(name)) {\n        this.logger.warn(\n          `Cache layer ${name} does not exist`,\n          LogContext.CACHE,\n        );\n        return false;\n      }\n\n      this.layers.delete(name);\n      this.logger.info(`Removed cache layer: ${name}`, LogContext.CACHE);\n      this.emitEvent('layer_removed', { layer: name });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to remove cache layer: ${name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method enableLayer\n   * @description 启用缓存层\n   * @param name 缓存层名称\n   * @param enabled 是否启用\n   * @returns {boolean} 是否成功\n   */\n  enableLayer(name: string, enabled: boolean): boolean {\n    try {\n      const layer = this.layers.get(name);\n      if (!layer) {\n        this.logger.warn(\n          `Cache layer ${name} does not exist`,\n          LogContext.CACHE,\n        );\n        return false;\n      }\n\n      layer.enabled = enabled;\n      this.logger.info(\n        `${enabled ? 'Enabled' : 'Disabled'} cache layer: ${name}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('layer_toggled', { layer: name, enabled });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to toggle cache layer: ${name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method getLayers\n   * @description 获取所有缓存层信息\n   * @returns {CacheLayerConfig[]} 缓存层配置列表\n   */\n  getLayers(): CacheLayerConfig[] {\n    return Array.from(this.layers.values()).map(layer => ({ ...layer }));\n  }\n\n  /**\n   * @method resetStats\n   * @description 重置缓存统计信息\n   */\n  async resetStats(): Promise<void> {\n    try {\n      // 重置各层统计\n      for (const [name, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            await layer.service.resetStats();\n          } catch (error) {\n            this.logger.warn(\n              `Failed to reset stats for layer ${name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n          }\n        }\n      }\n\n      // 重置管理器统计\n      this.requestCount = 0;\n      this.hitCount = 0;\n      this.totalResponseTime = 0;\n      this.stats = this.initializeStats();\n\n      this.logger.info('Cache stats reset successfully', LogContext.CACHE);\n      this.emitEvent('stats_reset', {});\n    } catch (error) {\n      this.logger.error(\n        'Failed to reset cache stats',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @method onDestroy\n   * @description 销毁时清理资源\n   */\n  onDestroy(): void {\n    this.stopMonitoring();\n    this.stopCleanup();\n    this.logger.info('CacheManagerService destroyed', LogContext.CACHE);\n  }\n\n  // 私有方法\n\n  /**\n   * @private\n   * @method initializeStats\n   * @description 初始化统计信息\n   * @returns {CacheManagerStats} 初始统计信息\n   */\n  private initializeStats(): CacheManagerStats {\n    return {\n      totalEntries: 0,\n      hits: 0,\n      misses: 0,\n      hitRate: 0,\n      totalSize: 0,\n      averageSize: 0,\n      expiredEntries: 0,\n      evictedEntries: 0,\n      lastReset: Date.now(),\n      activeLayers: 0,\n      layerStats: {},\n      lastUpdated: new Date(),\n    };\n  }\n\n  /**\n   * @private\n   * @method initializeLayers\n   * @description 初始化缓存层\n   */\n  private initializeLayers(): void {\n    if (this.config.layers) {\n      for (const layerConfig of this.config.layers) {\n        this.addLayer(layerConfig);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @method getSortedLayers\n   * @description 获取按优先级排序的缓存层\n   * @returns {CacheLayerConfig[]} 排序后的缓存层\n   */\n  private getSortedLayers(): CacheLayerConfig[] {\n    return Array.from(this.layers.values())\n      .filter(layer => layer.enabled)\n      .sort((a, b) => a.priority - b.priority);\n  }\n\n  /**\n   * @private\n   * @method promoteToHigherLayer\n   * @description 将缓存值提升到更高优先级的层\n   * @param key 缓存键\n   * @param value 缓存值\n   * @param currentPriority 当前优先级\n   */\n  private async promoteToHigherLayer<T>(\n    key: CacheKey,\n    value: T,\n    currentPriority: number,\n  ): Promise<void> {\n    try {\n      const higherLayers = Array.from(this.layers.values())\n        .filter(\n          layer =>\n            layer.enabled &&\n            !layer.readOnly &&\n            layer.priority < currentPriority,\n        )\n        .sort((a, b) => a.priority - b.priority);\n\n      for (const layer of higherLayers) {\n        try {\n          await layer.service.set(key, value);\n          this.emitEvent('cache_promoted', {\n            key,\n            fromPriority: currentPriority,\n            toPriority: layer.priority,\n            layer: layer.name,\n          });\n        } catch (error) {\n          this.logger.warn(\n            `Failed to promote cache to layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        `Error promoting cache: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method updateStats\n   * @description 更新统计信息\n   * @param startTime 开始时间\n   */\n  private updateStats(startTime: number): void {\n    const responseTime = Date.now() - startTime;\n    this.totalResponseTime += responseTime;\n    this.stats.hits = this.hitCount;\n    this.stats.misses = this.requestCount - this.hitCount;\n  }\n\n  /**\n   * @private\n   * @method emitEvent\n   * @description 发送缓存事件\n   * @param type 事件类型\n   * @param data 事件数据\n   */\n  private emitEvent(type: string, _data: Record<string, unknown>): void {\n    if (this.config.enableEvents) {\n      try {\n        this.eventEmitter.emit(`cache.${type}`, {\n          type,\n          data: _data,\n          timestamp: new Date(),\n          managerId: 'cache-manager',\n        });\n      } catch (error) {\n        this.logger.warn(\n          `Failed to emit cache event: ${type}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @method startMonitoring\n   * @description 开始监控\n   */\n  private startMonitoring(): void {\n    if (this.config.monitoringInterval && this.config.monitoringInterval > 0) {\n      this.monitoringTimer = setInterval(async () => {\n        try {\n          await this.performMonitoring();\n        } catch (error) {\n          this.logger.error(\n            'Cache monitoring failed',\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }, this.config.monitoringInterval);\n\n      this.logger.info(\n        `Started cache monitoring, interval: ${this.config.monitoringInterval}ms`,\n        LogContext.CACHE,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method stopMonitoring\n   * @description 停止监控\n   */\n  private stopMonitoring(): void {\n    if (this.monitoringTimer) {\n      clearInterval(this.monitoringTimer);\n      this.monitoringTimer = undefined;\n      this.logger.info('Stopped cache monitoring', LogContext.CACHE);\n    }\n  }\n\n  /**\n   * @private\n   * @method startCleanup\n   * @description 开始清理\n   */\n  private startCleanup(): void {\n    if (this.config.cleanupInterval && this.config.cleanupInterval > 0) {\n      this.cleanupTimer = setInterval(async () => {\n        try {\n          await this.performCleanup();\n        } catch (error) {\n          this.logger.error(\n            'Cache cleanup failed',\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }, this.config.cleanupInterval);\n\n      this.logger.info(\n        `Started cache cleanup, interval: ${this.config.cleanupInterval}ms`,\n        LogContext.CACHE,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method stopCleanup\n   * @description 停止清理\n   */\n  private stopCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = undefined;\n      this.logger.info('Stopped cache cleanup', LogContext.CACHE);\n    }\n  }\n\n  /**\n   * @private\n   * @method performMonitoring\n   * @description 执行监控\n   */\n  private async performMonitoring(): Promise<void> {\n    try {\n      const health = await this.getHealth();\n      const stats = await this.getStats();\n\n      this.emitEvent('monitoring', { health, stats });\n\n      // 检查健康状态\n      if (!health.healthy) {\n        this.logger.warn('Cache health check failed', LogContext.CACHE);\n      }\n    } catch (error) {\n      this.logger.error(\n        'Cache monitoring execution failed',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method performCleanup\n   * @description 执行清理\n   */\n  private async performCleanup(): Promise<void> {\n    try {\n      // 清理过期的缓存项\n      for (const layer of this.getSortedLayers()) {\n        if (layer.enabled && !layer.readOnly) {\n          try {\n            // 这里可以调用各层的清理方法，如果有的话\n            this.emitEvent('cleanup', { layer: layer.name });\n          } catch (error) {\n            this.logger.warn(\n              `Failed to cleanup layer ${layer.name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n          }\n        }\n      }\n\n      this.logger.debug('Cache cleanup completed', LogContext.CACHE);\n    } catch (error) {\n      this.logger.error(\n        'Cache cleanup execution failed',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n}\n"],"version":3}