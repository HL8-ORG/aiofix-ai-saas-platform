b97f80b1106ba141effc10db07af4f5d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const config_service_1 = require("./config.service");
const logging_1 = require("@aiofix/logging");
/**
 * @describe ConfigService
 * @description
 * ConfigService 的单元测试套件，测试配置服务的各种功能。
 *
 * 主要测试内容：
 * 1. 服务实例化测试
 * 2. 配置获取测试
 * 3. 环境变量处理测试
 * 4. 配置验证测试
 */
describe('ConfigService', () => {
    let service;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                config_service_1.ConfigService,
                {
                    provide: logging_1.PinoLoggerService,
                    useValue: {
                        info: jest.fn(),
                        error: jest.fn(),
                        warn: jest.fn(),
                        debug: jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(config_service_1.ConfigService);
    });
    /**
     * @test 服务实例化测试
     * @description 验证 ConfigService 能够正确实例化
     */
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    /**
     * @test 配置获取测试
     * @description 验证能够正确获取各种配置
     */
    it('should return app config', () => {
        const appConfig = service.appConfig;
        expect(appConfig).toBeDefined();
        expect(typeof appConfig).toBe('object');
    });
    /**
     * @test 数据库配置测试
     * @description 验证能够正确获取数据库配置
     */
    it('should return database config', () => {
        const dbConfig = service.databaseConfig;
        expect(dbConfig).toBeDefined();
        expect(typeof dbConfig).toBe('object');
    });
    /**
     * @test Redis配置测试
     * @description 验证能够正确获取Redis配置
     */
    it('should return redis config', () => {
        const redisConfig = service.redisConfig;
        expect(redisConfig).toBeDefined();
        expect(typeof redisConfig).toBe('object');
    });
    /**
     * @test JWT配置测试
     * @description 验证能够正确获取JWT配置
     */
    it('should return jwt config', () => {
        const jwtConfig = service.jwtConfig;
        expect(jwtConfig).toBeDefined();
        expect(typeof jwtConfig).toBe('object');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJsaWdsZS9WMS9BaW9maXgvYWlvZml4LWFpLXNhYXMtcGxhdGZvcm0vcGFja2FnZXMvY29uZmlnL3NyYy9jb25maWcuc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXNEO0FBQ3RELHFEQUFpRDtBQUNqRCw2Q0FBb0Q7QUFFcEQ7Ozs7Ozs7Ozs7R0FVRztBQUNILFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO0lBQzdCLElBQUksT0FBc0IsQ0FBQztJQUUzQixVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsTUFBTSxNQUFNLEdBQWtCLE1BQU0sY0FBSSxDQUFDLG1CQUFtQixDQUFDO1lBQzNELFNBQVMsRUFBRTtnQkFDVCw4QkFBYTtnQkFDYjtvQkFDRSxPQUFPLEVBQUUsMkJBQWlCO29CQUMxQixRQUFRLEVBQUU7d0JBQ1IsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7d0JBQ2YsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7d0JBQ2hCLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO3dCQUNmLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO3FCQUNqQjtpQkFDRjthQUNGO1NBQ0YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWIsT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQWdCLDhCQUFhLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztJQUVIOzs7T0FHRztJQUNILEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDM0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBRUg7OztPQUdHO0lBQ0gsRUFBRSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtRQUNsQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNoQyxNQUFNLENBQUMsT0FBTyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFFSDs7O09BR0c7SUFDSCxFQUFFLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1FBQ3ZDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUM7UUFDeEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxPQUFPLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUMsQ0FBQztJQUVIOzs7T0FHRztJQUNILEVBQUUsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7UUFDcEMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUN4QyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEMsTUFBTSxDQUFDLE9BQU8sV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQyxDQUFDO0lBRUg7OztPQUdHO0lBQ0gsRUFBRSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtRQUNsQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNoQyxNQUFNLENBQUMsT0FBTyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9hcmxpZ2xlL1YxL0Fpb2ZpeC9haW9maXgtYWktc2Fhcy1wbGF0Zm9ybS9wYWNrYWdlcy9jb25maWcvc3JjL2NvbmZpZy5zZXJ2aWNlLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCwgVGVzdGluZ01vZHVsZSB9IGZyb20gJ0BuZXN0anMvdGVzdGluZyc7XG5pbXBvcnQgeyBDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi9jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBQaW5vTG9nZ2VyU2VydmljZSB9IGZyb20gJ0BhaW9maXgvbG9nZ2luZyc7XG5cbi8qKlxuICogQGRlc2NyaWJlIENvbmZpZ1NlcnZpY2VcbiAqIEBkZXNjcmlwdGlvblxuICogQ29uZmlnU2VydmljZSDnmoTljZXlhYPmtYvor5XlpZfku7bvvIzmtYvor5XphY3nva7mnI3liqHnmoTlkITnp43lip/og73jgIJcbiAqXG4gKiDkuLvopoHmtYvor5XlhoXlrrnvvJpcbiAqIDEuIOacjeWKoeWunuS+i+WMlua1i+ivlVxuICogMi4g6YWN572u6I635Y+W5rWL6K+VXG4gKiAzLiDnjq/looPlj5jph4/lpITnkIbmtYvor5VcbiAqIDQuIOmFjee9rumqjOivgea1i+ivlVxuICovXG5kZXNjcmliZSgnQ29uZmlnU2VydmljZScsICgpID0+IHtcbiAgbGV0IHNlcnZpY2U6IENvbmZpZ1NlcnZpY2U7XG5cbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9kdWxlOiBUZXN0aW5nTW9kdWxlID0gYXdhaXQgVGVzdC5jcmVhdGVUZXN0aW5nTW9kdWxlKHtcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBDb25maWdTZXJ2aWNlLFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogUGlub0xvZ2dlclNlcnZpY2UsXG4gICAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgIGluZm86IGplc3QuZm4oKSxcbiAgICAgICAgICAgIGVycm9yOiBqZXN0LmZuKCksXG4gICAgICAgICAgICB3YXJuOiBqZXN0LmZuKCksXG4gICAgICAgICAgICBkZWJ1ZzogamVzdC5mbigpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pLmNvbXBpbGUoKTtcblxuICAgIHNlcnZpY2UgPSBtb2R1bGUuZ2V0PENvbmZpZ1NlcnZpY2U+KENvbmZpZ1NlcnZpY2UpO1xuICB9KTtcblxuICAvKipcbiAgICogQHRlc3Qg5pyN5Yqh5a6e5L6L5YyW5rWL6K+VXG4gICAqIEBkZXNjcmlwdGlvbiDpqozor4EgQ29uZmlnU2VydmljZSDog73lpJ/mraPnoa7lrp7kvovljJZcbiAgICovXG4gIGl0KCdzaG91bGQgYmUgZGVmaW5lZCcsICgpID0+IHtcbiAgICBleHBlY3Qoc2VydmljZSkudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEB0ZXN0IOmFjee9ruiOt+WPlua1i+ivlVxuICAgKiBAZGVzY3JpcHRpb24g6aqM6K+B6IO95aSf5q2j56Gu6I635Y+W5ZCE56eN6YWN572uXG4gICAqL1xuICBpdCgnc2hvdWxkIHJldHVybiBhcHAgY29uZmlnJywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcENvbmZpZyA9IHNlcnZpY2UuYXBwQ29uZmlnO1xuICAgIGV4cGVjdChhcHBDb25maWcpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHR5cGVvZiBhcHBDb25maWcpLnRvQmUoJ29iamVjdCcpO1xuICB9KTtcblxuICAvKipcbiAgICogQHRlc3Qg5pWw5o2u5bqT6YWN572u5rWL6K+VXG4gICAqIEBkZXNjcmlwdGlvbiDpqozor4Hog73lpJ/mraPnoa7ojrflj5bmlbDmja7lupPphY3nva5cbiAgICovXG4gIGl0KCdzaG91bGQgcmV0dXJuIGRhdGFiYXNlIGNvbmZpZycsICgpID0+IHtcbiAgICBjb25zdCBkYkNvbmZpZyA9IHNlcnZpY2UuZGF0YWJhc2VDb25maWc7XG4gICAgZXhwZWN0KGRiQ29uZmlnKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdCh0eXBlb2YgZGJDb25maWcpLnRvQmUoJ29iamVjdCcpO1xuICB9KTtcblxuICAvKipcbiAgICogQHRlc3QgUmVkaXPphY3nva7mtYvor5VcbiAgICogQGRlc2NyaXB0aW9uIOmqjOivgeiDveWkn+ato+ehruiOt+WPllJlZGlz6YWN572uXG4gICAqL1xuICBpdCgnc2hvdWxkIHJldHVybiByZWRpcyBjb25maWcnLCAoKSA9PiB7XG4gICAgY29uc3QgcmVkaXNDb25maWcgPSBzZXJ2aWNlLnJlZGlzQ29uZmlnO1xuICAgIGV4cGVjdChyZWRpc0NvbmZpZykudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QodHlwZW9mIHJlZGlzQ29uZmlnKS50b0JlKCdvYmplY3QnKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEB0ZXN0IEpXVOmFjee9rua1i+ivlVxuICAgKiBAZGVzY3JpcHRpb24g6aqM6K+B6IO95aSf5q2j56Gu6I635Y+WSldU6YWN572uXG4gICAqL1xuICBpdCgnc2hvdWxkIHJldHVybiBqd3QgY29uZmlnJywgKCkgPT4ge1xuICAgIGNvbnN0IGp3dENvbmZpZyA9IHNlcnZpY2Uuand0Q29uZmlnO1xuICAgIGV4cGVjdChqd3RDb25maWcpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHR5cGVvZiBqd3RDb25maWcpLnRvQmUoJ29iamVjdCcpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9