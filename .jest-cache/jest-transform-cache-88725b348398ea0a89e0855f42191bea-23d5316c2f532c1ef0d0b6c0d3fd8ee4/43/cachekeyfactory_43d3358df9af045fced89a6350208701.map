{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/factories/cache-key.factory.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/factories/cache-key.factory.ts"],"sourcesContent":["/**\n * @file cache-key.factory.ts\n * @description 缓存键工厂\n *\n * 该文件实现了缓存键的创建和管理功能，包括：\n * - 缓存键的创建和解析\n * - 命名空间管理\n * - 租户和用户隔离\n * - 标签支持\n * - 版本控制\n *\n * 遵循DDD和Clean Architecture原则，提供统一的缓存键管理。\n */\n\nimport { Injectable } from '@nestjs/common';\nimport { ICacheKeyFactory, CacheKey } from '../interfaces/cache.interface';\nimport { minimatch } from 'minimatch';\n\n/**\n * @class CacheKeyFactory\n * @description 缓存键工厂实现\n *\n * 提供缓存键的创建和管理功能，包括：\n * - 基础键创建\n * - 命名空间键创建\n * - 租户隔离键创建\n * - 用户隔离键创建\n * - 标签键创建\n * - 键字符串转换\n */\n@Injectable()\nexport class CacheKeyFactory implements ICacheKeyFactory {\n  /** 默认命名空间分隔符 */\n  private readonly DEFAULT_SEPARATOR = ':';\n  /** 默认版本号 */\n  private readonly DEFAULT_VERSION = 'v1';\n\n  /**\n   * @method create\n   * @description 创建缓存键\n   * @param key 基础键名\n   * @param options 键选项\n   * @returns 缓存键\n   */\n  create(key: string, options?: Partial<CacheKey>): CacheKey {\n    return {\n      key: this.sanitizeKey(key),\n      namespace: options?.namespace,\n      version: options?.version,\n      tenantId: options?.tenantId,\n      userId: options?.userId,\n      tags: options?.tags || [],\n    };\n  }\n\n  /**\n   * @method createNamespace\n   * @description 创建命名空间键\n   * @param namespace 命名空间\n   * @param key 键名\n   * @param options 键选项\n   * @returns 缓存键\n   */\n  createNamespace(\n    namespace: string,\n    key: string,\n    options?: Partial<CacheKey>,\n  ): CacheKey {\n    return this.create(key, {\n      ...options,\n      namespace: this.sanitizeNamespace(namespace),\n    });\n  }\n\n  /**\n   * @method createTenant\n   * @description 创建租户键\n   * @param tenantId 租户ID\n   * @param key 键名\n   * @param options 键选项\n   * @returns 缓存键\n   */\n  createTenant(\n    tenantId: string,\n    key: string,\n    options?: Partial<CacheKey>,\n  ): CacheKey {\n    return this.create(key, {\n      ...options,\n      tenantId: this.sanitizeId(tenantId),\n    });\n  }\n\n  /**\n   * @method createUser\n   * @description 创建用户键\n   * @param userId 用户ID\n   * @param key 键名\n   * @param options 键选项\n   * @returns 缓存键\n   */\n  createUser(\n    userId: string,\n    key: string,\n    options?: Partial<CacheKey>,\n  ): CacheKey {\n    return this.create(key, {\n      ...options,\n      userId: this.sanitizeId(userId),\n    });\n  }\n\n  /**\n   * @method createTagged\n   * @description 创建带标签的键\n   * @param key 键名\n   * @param tags 标签数组\n   * @param options 键选项\n   * @returns 缓存键\n   */\n  createTagged(\n    key: string,\n    tags: string[],\n    options?: Partial<CacheKey>,\n  ): CacheKey {\n    return this.create(key, {\n      ...options,\n      tags: this.sanitizeTags(tags),\n    });\n  }\n\n  /**\n   * @method toString\n   * @description 将缓存键转换为字符串\n   * @param cacheKey 缓存键\n   * @returns 字符串形式的键\n   */\n  toString(cacheKey: CacheKey): string {\n    const parts: string[] = [];\n\n    // 添加版本号（总是添加默认版本号，确保序列化和反序列化一致）\n    parts.push(cacheKey.version || this.DEFAULT_VERSION);\n\n    // 添加命名空间\n    if (cacheKey.namespace) {\n      parts.push(cacheKey.namespace);\n    }\n\n    // 添加租户ID\n    if (cacheKey.tenantId) {\n      parts.push(`tenant:${cacheKey.tenantId}`);\n    }\n\n    // 添加用户ID\n    if (cacheKey.userId) {\n      parts.push(`user:${cacheKey.userId}`);\n    }\n\n    // 添加标签\n    if (cacheKey.tags && cacheKey.tags.length > 0) {\n      parts.push(`tags:${cacheKey.tags.sort().join(',')}`);\n    }\n\n    // 添加基础键名\n    parts.push(cacheKey.key);\n\n    return parts.join(this.DEFAULT_SEPARATOR);\n  }\n\n  /**\n   * @method parse\n   * @description 解析字符串为缓存键\n   * @param keyString 键字符串\n   * @returns 缓存键\n   */\n  parse(keyString: string): CacheKey {\n    const parts = keyString.split(this.DEFAULT_SEPARATOR);\n    const cacheKey: CacheKey = {\n      key: '',\n      tags: [],\n    };\n\n    let currentIndex = 0;\n\n    // 解析版本号（第一个部分，总是存在）\n    if (parts.length > 0) {\n      cacheKey.version = parts[currentIndex];\n      currentIndex++;\n    }\n\n    // 解析命名空间（如果存在且不是特殊前缀）\n    if (\n      currentIndex < parts.length &&\n      parts[currentIndex] !== 'tenant' &&\n      parts[currentIndex] !== 'user' &&\n      parts[currentIndex] !== 'tags' &&\n      currentIndex < parts.length - 1\n    ) {\n      // 确保不是最后一个部分（键名）\n      cacheKey.namespace = parts[currentIndex];\n      currentIndex++;\n    }\n\n    // 解析租户ID\n    if (currentIndex < parts.length && parts[currentIndex] === 'tenant') {\n      currentIndex++; // 跳过 'tenant'\n      if (currentIndex < parts.length) {\n        cacheKey.tenantId = parts[currentIndex];\n        currentIndex++;\n      }\n    }\n\n    // 解析用户ID\n    if (currentIndex < parts.length && parts[currentIndex] === 'user') {\n      currentIndex++; // 跳过 'user'\n      if (currentIndex < parts.length) {\n        cacheKey.userId = parts[currentIndex];\n        currentIndex++;\n      }\n    }\n\n    // 解析标签\n    if (currentIndex < parts.length && parts[currentIndex] === 'tags') {\n      currentIndex++; // 跳过 'tags'\n      if (currentIndex < parts.length) {\n        const tagsString = parts[currentIndex];\n        cacheKey.tags = tagsString.split(',').filter(tag => tag.length > 0);\n        currentIndex++;\n      }\n    }\n\n    // 剩余部分作为基础键名\n    if (currentIndex < parts.length) {\n      cacheKey.key = parts.slice(currentIndex).join(this.DEFAULT_SEPARATOR);\n    }\n\n    return cacheKey;\n  }\n\n  /**\n   * @method createPattern\n   * @description 创建模式匹配键\n   * @param pattern 模式字符串\n   * @param options 键选项\n   * @returns 模式键\n   */\n  createPattern(pattern: string, options?: Partial<CacheKey>): string {\n    const parts: string[] = [];\n\n    // 添加版本号\n    if (options?.version) {\n      parts.push(options.version);\n    } else {\n      parts.push(this.DEFAULT_VERSION);\n    }\n\n    // 添加命名空间\n    if (options?.namespace) {\n      parts.push(this.sanitizeNamespace(options.namespace));\n    }\n\n    // 添加租户ID\n    if (options?.tenantId) {\n      parts.push(`tenant:${this.sanitizeId(options.tenantId)}`);\n    }\n\n    // 添加用户ID\n    if (options?.userId) {\n      parts.push(`user:${this.sanitizeId(options.userId)}`);\n    }\n\n    // 添加标签\n    if (options?.tags && options.tags.length > 0) {\n      parts.push(`tags:${this.sanitizeTags(options.tags).sort().join(',')}`);\n    }\n\n    // 添加模式（不清理特殊字符）\n    parts.push(pattern);\n\n    return parts.join(this.DEFAULT_SEPARATOR);\n  }\n\n  /**\n   * @method matchPattern\n   * @description 检查键是否匹配模式\n   * @param key 缓存键\n   * @param pattern 模式字符串\n   * @returns 是否匹配\n   */\n  matchPattern(key: CacheKey, pattern: string): boolean {\n    const keyString = this.toString(key);\n\n    // 使用 minimatch 进行模式匹配\n    return minimatch(keyString, pattern);\n  }\n\n  /**\n   * @method extractNamespace\n   * @description 从键中提取命名空间\n   * @param cacheKey 缓存键\n   * @returns 命名空间\n   */\n  extractNamespace(cacheKey: CacheKey): string | undefined {\n    return cacheKey.namespace;\n  }\n\n  /**\n   * @method extractTenantId\n   * @description 从键中提取租户ID\n   * @param cacheKey 缓存键\n   * @returns 租户ID\n   */\n  extractTenantId(cacheKey: CacheKey): string | undefined {\n    return cacheKey.tenantId;\n  }\n\n  /**\n   * @method extractUserId\n   * @description 从键中提取用户ID\n   * @param cacheKey 缓存键\n   * @returns 用户ID\n   */\n  extractUserId(cacheKey: CacheKey): string | undefined {\n    return cacheKey.userId;\n  }\n\n  /**\n   * @method extractTags\n   * @description 从键中提取标签\n   * @param cacheKey 缓存键\n   * @returns 标签数组\n   */\n  extractTags(cacheKey: CacheKey): string[] {\n    return cacheKey.tags || [];\n  }\n\n  /**\n   * @private sanitizeKey\n   * @description 清理键名\n   * @param key 原始键名\n   * @returns 清理后的键名\n   */\n  private sanitizeKey(key: string): string {\n    if (!key || typeof key !== 'string') {\n      throw new Error('Cache key must be a non-empty string');\n    }\n\n    // 移除首尾空格\n    let sanitized = key.trim();\n\n    // 替换特殊字符\n    sanitized = sanitized.replace(/[^a-zA-Z0-9\\-_.]/g, '_');\n\n    // 确保不为空\n    if (sanitized.length === 0) {\n      throw new Error('Cache key cannot be empty after sanitization');\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * @private sanitizeNamespace\n   * @description 清理命名空间\n   * @param namespace 原始命名空间\n   * @returns 清理后的命名空间\n   */\n  private sanitizeNamespace(namespace: string): string {\n    if (!namespace || typeof namespace !== 'string') {\n      throw new Error('Namespace must be a non-empty string');\n    }\n\n    // 移除首尾空格\n    let sanitized = namespace.trim();\n\n    // 替换特殊字符\n    sanitized = sanitized.replace(/[^a-zA-Z0-9\\-_.]/g, '_');\n\n    // 确保不为空\n    if (sanitized.length === 0) {\n      throw new Error('Namespace cannot be empty after sanitization');\n    }\n\n    return sanitized.toLowerCase();\n  }\n\n  /**\n   * @private sanitizeId\n   * @description 清理ID\n   * @param id 原始ID\n   * @returns 清理后的ID\n   */\n  private sanitizeId(id: string): string {\n    if (!id || typeof id !== 'string') {\n      throw new Error('ID must be a non-empty string');\n    }\n\n    // 移除首尾空格\n    let sanitized = id.trim();\n\n    // 替换特殊字符\n    sanitized = sanitized.replace(/[^a-zA-Z0-9\\-_]/g, '_');\n\n    // 确保不为空\n    if (sanitized.length === 0) {\n      throw new Error('ID cannot be empty after sanitization');\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * @private sanitizeTags\n   * @description 清理标签数组\n   * @param tags 原始标签数组\n   * @returns 清理后的标签数组\n   */\n  private sanitizeTags(tags: string[]): string[] {\n    if (!Array.isArray(tags)) {\n      return [];\n    }\n\n    return tags\n      .filter(tag => tag && typeof tag === 'string')\n      .map(tag => tag.trim())\n      .filter(tag => tag.length > 0)\n      .map(tag => tag.replace(/[^a-zA-Z0-9\\-_]/g, '_'))\n      .filter((tag, index, array) => array.indexOf(tag) === index); // 去重\n  }\n}\n"],"version":3}