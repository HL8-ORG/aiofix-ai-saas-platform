{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/memory-cache.service.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,iEAA+E;AAC/E,sEAAiE;AACjE,mEAA8D;AAC9D,6CAAoD;AAEpD,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,OAA2B,CAAC;IAChC,IAAI,UAA2B,CAAC;IAEhC,MAAM,UAAU,GAAsB;QACpC,UAAU,EAAE,MAAM,EAAE,MAAM;QAC1B,OAAO,EAAE,GAAG;QACZ,eAAe,EAAE,+BAAa,CAAC,GAAG;QAClC,eAAe,EAAE,KAAK,EAAE,MAAM;QAC9B,iBAAiB,EAAE,KAAK;QACxB,gBAAgB,EAAE,KAAK;KACxB,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,yCAAkB;gBAClB;oBACE,OAAO,EAAE,qBAAqB;oBAC9B,QAAQ,EAAE,UAAU;iBACrB;gBACD;oBACE,OAAO,EAAE,kBAAkB;oBAC3B,QAAQ,EAAE,mCAAe;iBAC1B;gBACD;oBACE,OAAO,EAAE,2BAAiB;oBAC1B,QAAQ,EAAE;wBACR,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;wBACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;wBAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;wBAChB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;wBACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;wBAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;wBAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;qBACjB;iBACF;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAqB,yCAAkB,CAAC,CAAC;QAC7D,UAAU,GAAG,MAAM,CAAC,GAAG,CAAkB,kBAAkB,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,OAAO,CAAC,eAAe,EAAE,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC1C,MAAM,KAAK,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;YAErC,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAChD,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE7B,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACzC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAC9C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YACzC,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC1C,MAAM,KAAK,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;YAErC,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC9B,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC/C,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEhC,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACzC,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAC9C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC1C,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC1C,MAAM,KAAK,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;YAErC,MAAM,CAAC,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAE9C,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC9B,MAAM,CAAC,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE7C,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC1B,MAAM,CAAC,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;YACtC,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACvC,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEvC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAClC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAElC,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE/B,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC3C,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC/C,MAAM,IAAI,GAAG,UAAU,CAAC,eAAe,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YACvD,MAAM,IAAI,GAAG,UAAU,CAAC,eAAe,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAEvD,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAClC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAElC,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE/B,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC3C,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC1C,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC1C,MAAM,KAAK,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;YAErC,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,YAAY;YAEzD,WAAW;YACX,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAE9C,OAAO;YACP,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAEvD,cAAc;YACd,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC1C,MAAM,KAAK,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;YAErC,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;YAE1C,kBAAkB;YAClB,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC1C,MAAM,KAAK,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;YAErC,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW;YAEvD,OAAO;YACP,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAEvD,sBAAsB;YACtB,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAEvB,SAAS;YACT,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,QAAQ,EAAE,CAAC;YACvC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,WAAW;YACX,MAAM,MAAM,GAAsB,EAAE,GAAG,UAAU,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;YAChE,MAAM,MAAM,GAAG,MAAM,cAAI,CAAC,mBAAmB,CAAC;gBAC5C,SAAS,EAAE;oBACT,yCAAkB;oBAClB,EAAE,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,MAAM,EAAE;oBACpD,EAAE,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,mCAAe,EAAE;oBAC1D;wBACE,OAAO,EAAE,2BAAiB;wBAC1B,QAAQ,EAAE;4BACR,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;4BACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;4BACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;yBACjB;qBACF;iBACF;aACF,CAAC,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAAqB,yCAAkB,CAAC,CAAC;YAEtE,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACvC,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACvC,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEvC,gBAAgB;YAChB,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACrC,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACrC,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAErC,YAAY;YACZ,MAAM,CAAC,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC9C,MAAM,CAAC,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACrD,MAAM,CAAC,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAErD,MAAM,UAAU,CAAC,eAAe,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,MAAM,GAAsB;gBAChC,GAAG,UAAU;gBACb,OAAO,EAAE,CAAC;gBACV,eAAe,EAAE,+BAAa,CAAC,GAAG;aACnC,CAAC;YACF,MAAM,MAAM,GAAG,MAAM,cAAI,CAAC,mBAAmB,CAAC;gBAC5C,SAAS,EAAE;oBACT,yCAAkB;oBAClB,EAAE,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,MAAM,EAAE;oBACpD,EAAE,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,mCAAe,EAAE;oBAC1D;wBACE,OAAO,EAAE,2BAAiB;wBAC1B,QAAQ,EAAE;4BACR,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;4BACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;4BACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;yBACjB;qBACF;iBACF;aACF,CAAC,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAAqB,yCAAkB,CAAC,CAAC;YAEtE,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACvC,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACvC,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEvC,QAAQ;YACR,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACrC,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAErC,kBAAkB;YAClB,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC3B,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC3B,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAE3B,0BAA0B;YAC1B,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAErC,wBAAwB;YACxB,MAAM,CAAC,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACrD,MAAM,CAAC,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC9C,MAAM,CAAC,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAErD,MAAM,UAAU,CAAC,eAAe,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,MAAM,GAAsB;gBAChC,GAAG,UAAU;gBACb,OAAO,EAAE,CAAC;gBACV,eAAe,EAAE,+BAAa,CAAC,IAAI;aACpC,CAAC;YACF,MAAM,MAAM,GAAG,MAAM,cAAI,CAAC,mBAAmB,CAAC;gBAC5C,SAAS,EAAE;oBACT,yCAAkB;oBAClB,EAAE,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,MAAM,EAAE;oBACpD,EAAE,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,mCAAe,EAAE;oBAC1D;wBACE,OAAO,EAAE,2BAAiB;wBAC1B,QAAQ,EAAE;4BACR,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;4BACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;4BACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;yBACjB;qBACF;iBACF;aACF,CAAC,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAqB,yCAAkB,CAAC,CAAC;YAEvE,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACvC,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACvC,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEvC,WAAW;YACX,MAAM,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACtC,MAAM,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACtC,MAAM,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAEtC,kBAAkB;YAClB,MAAM,CAAC,MAAM,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC/C,MAAM,CAAC,MAAM,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACtD,MAAM,CAAC,MAAM,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAEtD,MAAM,WAAW,CAAC,eAAe,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACvC,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEvC,OAAO;YACP,IAAI,KAAK,GAAG,MAAM,OAAO,CAAC,QAAQ,EAAE,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAE9B,OAAO;YACP,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAClC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAElC,KAAK,GAAG,MAAM,OAAO,CAAC,QAAQ,EAAE,CAAC;YACjC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAE7C,KAAK;YACL,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACxB,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAExB,MAAM;YACN,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;YAErD,KAAK,GAAG,MAAM,OAAO,CAAC,QAAQ,EAAE,CAAC;YACjC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YACvC,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC1C,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAChC,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAEvB,MAAM,OAAO,CAAC,UAAU,EAAE,CAAC;YAE3B,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,QAAQ,EAAE,CAAC;YACvC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC;YAEzC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,aAAa,EAAE,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,kCAAkC;YAClC,MAAM,MAAM,GAAG,MAAM,cAAI,CAAC,mBAAmB,CAAC;gBAC5C,SAAS,EAAE;oBACT,yCAAkB;oBAClB,EAAE,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,UAAU,EAAE;oBACxD;wBACE,OAAO,EAAE,kBAAkB;wBAC3B,QAAQ,EAAE;4BACR,MAAM,EAAE,GAAG,EAAE;gCACX,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;4BAChC,CAAC;4BACD,QAAQ,EAAE,GAAG,EAAE,CAAC,MAAM;4BACtB,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;yBAC/B;qBACF;oBACD;wBACE,OAAO,EAAE,2BAAiB;wBAC1B,QAAQ,EAAE;4BACR,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;4BACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;4BACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;4BAChB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;yBACjB;qBACF;iBACF;aACF,CAAC,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG,CAAqB,yCAAkB,CAAC,CAAC;YAExE,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,SAAS,EAAE,CAAC;YAC9C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YAEnC,MAAM,YAAY,CAAC,eAAe,EAAE,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAC7C,MAAM,KAAK,GAAG;gBACZ,IAAI,EAAE;oBACJ,EAAE,EAAE,KAAK;oBACT,IAAI,EAAE,UAAU;oBAChB,KAAK,EAAE,kBAAkB;oBACzB,KAAK,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;iBACzB;gBACD,QAAQ,EAAE;oBACR,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,OAAO,EAAE,OAAO;iBACjB;aACF,CAAC;YAEF,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC9B,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAEzC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;YACpC,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAC3C,MAAM,KAAK,GAAG;gBACZ,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;gBACzB,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;gBACzB,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE;aAC1B,CAAC;YAEF,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAC9B,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAEzC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAClD,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAClD,MAAM,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAEpD,MAAM,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;YAC5C,MAAM,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YACjC,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAEpC,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACzD,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC9C,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,QAAQ,GAAuB,EAAE,CAAC;YACxC,MAAM,SAAS,GAAG,gBAAgB,CAAC;YAEnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,SAAS,IAAI,CAAC,EAAE,CAAC,CAAC;gBACnD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YAChD,CAAC;YAED,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAE5B,cAAc;YACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,SAAS,IAAI,CAAC,EAAE,CAAC,CAAC;gBACnD,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;YACpD,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;YACpD,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;YAErC,MAAM,QAAQ,GAAuB,EAAE,CAAC;YACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YAClC,CAAC;YAED,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC5C,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACvB,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YAC/C,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;YAErC,WAAW;YACX,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAElD,OAAO;YACP,MAAM,OAAO,CAAC,eAAe,EAAE,CAAC;YAEhC,UAAU;YACV,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/memory-cache.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { MemoryCacheService, MemoryCacheConfig } from './memory-cache.service';\nimport { CacheKeyFactory } from '../factories/cache-key.factory';\nimport { CacheStrategy } from '../interfaces/cache.interface';\nimport { PinoLoggerService } from '@aiofix/logging';\n\ndescribe('MemoryCacheService', () => {\n  let service: MemoryCacheService;\n  let keyFactory: CacheKeyFactory;\n\n  const mockConfig: MemoryCacheConfig = {\n    defaultTtl: 300000, // 5分钟\n    maxSize: 100,\n    defaultStrategy: CacheStrategy.LRU,\n    cleanupInterval: 60000, // 1分钟\n    enableCompression: false,\n    enableEncryption: false,\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        MemoryCacheService,\n        {\n          provide: 'MEMORY_CACHE_CONFIG',\n          useValue: mockConfig,\n        },\n        {\n          provide: 'ICacheKeyFactory',\n          useClass: CacheKeyFactory,\n        },\n        {\n          provide: PinoLoggerService,\n          useValue: {\n            info: jest.fn(),\n            error: jest.fn(),\n            debug: jest.fn(),\n            warn: jest.fn(),\n            trace: jest.fn(),\n            fatal: jest.fn(),\n            child: jest.fn(),\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<MemoryCacheService>(MemoryCacheService);\n    keyFactory = module.get<CacheKeyFactory>('ICacheKeyFactory');\n  });\n\n  afterEach(async () => {\n    await service.onModuleDestroy();\n  });\n\n  describe('basic operations', () => {\n    it('should be defined', () => {\n      expect(service).toBeDefined();\n    });\n\n    it('should set and get cache value', async () => {\n      const key = keyFactory.create('test-key');\n      const value = { data: 'test-value' };\n\n      const setResult = await service.set(key, value);\n      expect(setResult).toBe(true);\n\n      const retrieved = await service.get(key);\n      expect(retrieved).toEqual(value);\n    });\n\n    it('should return null for non-existent key', async () => {\n      const key = keyFactory.create('non-existent');\n      const result = await service.get(key);\n      expect(result).toBeNull();\n    });\n\n    it('should delete cache value', async () => {\n      const key = keyFactory.create('test-key');\n      const value = { data: 'test-value' };\n\n      await service.set(key, value);\n      const deleteResult = await service.delete(key);\n      expect(deleteResult).toBe(true);\n\n      const retrieved = await service.get(key);\n      expect(retrieved).toBeNull();\n    });\n\n    it('should return false when deleting non-existent key', async () => {\n      const key = keyFactory.create('non-existent');\n      const result = await service.delete(key);\n      expect(result).toBe(false);\n    });\n\n    it('should check if key exists', async () => {\n      const key = keyFactory.create('test-key');\n      const value = { data: 'test-value' };\n\n      expect(await service.exists(key)).toBe(false);\n\n      await service.set(key, value);\n      expect(await service.exists(key)).toBe(true);\n\n      await service.delete(key);\n      expect(await service.exists(key)).toBe(false);\n    });\n\n    it('should clear all cache', async () => {\n      const key1 = keyFactory.create('key1');\n      const key2 = keyFactory.create('key2');\n\n      await service.set(key1, 'value1');\n      await service.set(key2, 'value2');\n\n      const clearResult = await service.clear();\n      expect(clearResult).toBe(true);\n\n      expect(await service.get(key1)).toBeNull();\n      expect(await service.get(key2)).toBeNull();\n    });\n\n    it('should clear cache by namespace', async () => {\n      const key1 = keyFactory.createNamespace('ns1', 'key1');\n      const key2 = keyFactory.createNamespace('ns2', 'key2');\n\n      await service.set(key1, 'value1');\n      await service.set(key2, 'value2');\n\n      const clearResult = await service.clear('ns1');\n      expect(clearResult).toBe(true);\n\n      expect(await service.get(key1)).toBeNull();\n      expect(await service.get(key2)).toEqual('value2');\n    });\n  });\n\n  describe('TTL and expiration', () => {\n    it('should respect TTL setting', async () => {\n      const key = keyFactory.create('test-key');\n      const value = { data: 'test-value' };\n\n      await service.set(key, value, { ttl: 100 }); // 100ms TTL\n\n      // 立即获取应该成功\n      expect(await service.get(key)).toEqual(value);\n\n      // 等待过期\n      await new Promise(resolve => setTimeout(resolve, 150));\n\n      // 过期后应该返回null\n      expect(await service.get(key)).toBeNull();\n    });\n\n    it('should handle zero TTL (no expiration)', async () => {\n      const key = keyFactory.create('test-key');\n      const value = { data: 'test-value' };\n\n      await service.set(key, value, { ttl: 0 });\n\n      // 等待一段时间后仍然应该能获取到\n      await new Promise(resolve => setTimeout(resolve, 100));\n      expect(await service.get(key)).toEqual(value);\n    });\n\n    it('should clean up expired entries automatically', async () => {\n      const key = keyFactory.create('test-key');\n      const value = { data: 'test-value' };\n\n      await service.set(key, value, { ttl: 50 }); // 50ms TTL\n\n      // 等待过期\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      // 手动触发清理（通过访问来触发过期检查）\n      await service.get(key);\n\n      // 检查统计信息\n      const stats = await service.getStats();\n      expect(stats.expiredEntries).toBeGreaterThan(0);\n    });\n  });\n\n  describe('cache strategies', () => {\n    it('should use LRU strategy for eviction', async () => {\n      // 设置最大大小为2\n      const config: MemoryCacheConfig = { ...mockConfig, maxSize: 2 };\n      const module = await Test.createTestingModule({\n        providers: [\n          MemoryCacheService,\n          { provide: 'MEMORY_CACHE_CONFIG', useValue: config },\n          { provide: 'ICacheKeyFactory', useClass: CacheKeyFactory },\n          {\n            provide: PinoLoggerService,\n            useValue: {\n              info: jest.fn(),\n              error: jest.fn(),\n              debug: jest.fn(),\n              warn: jest.fn(),\n              trace: jest.fn(),\n              fatal: jest.fn(),\n              child: jest.fn(),\n            },\n          },\n        ],\n      }).compile();\n      const lruService = module.get<MemoryCacheService>(MemoryCacheService);\n\n      const key1 = keyFactory.create('key1');\n      const key2 = keyFactory.create('key2');\n      const key3 = keyFactory.create('key3');\n\n      // 添加3个键，应该驱逐第一个\n      await lruService.set(key1, 'value1');\n      await lruService.set(key2, 'value2');\n      await lruService.set(key3, 'value3');\n\n      // key1应该被驱逐\n      expect(await lruService.get(key1)).toBeNull();\n      expect(await lruService.get(key2)).toEqual('value2');\n      expect(await lruService.get(key3)).toEqual('value3');\n\n      await lruService.onModuleDestroy();\n    });\n\n    it('should use LFU strategy for eviction', async () => {\n      const config: MemoryCacheConfig = {\n        ...mockConfig,\n        maxSize: 2,\n        defaultStrategy: CacheStrategy.LFU,\n      };\n      const module = await Test.createTestingModule({\n        providers: [\n          MemoryCacheService,\n          { provide: 'MEMORY_CACHE_CONFIG', useValue: config },\n          { provide: 'ICacheKeyFactory', useClass: CacheKeyFactory },\n          {\n            provide: PinoLoggerService,\n            useValue: {\n              info: jest.fn(),\n              error: jest.fn(),\n              debug: jest.fn(),\n              warn: jest.fn(),\n              trace: jest.fn(),\n              fatal: jest.fn(),\n              child: jest.fn(),\n            },\n          },\n        ],\n      }).compile();\n      const lfuService = module.get<MemoryCacheService>(MemoryCacheService);\n\n      const key1 = keyFactory.create('key1');\n      const key2 = keyFactory.create('key2');\n      const key3 = keyFactory.create('key3');\n\n      // 添加2个键\n      await lfuService.set(key1, 'value1');\n      await lfuService.set(key2, 'value2');\n\n      // 访问key1多次，key2一次\n      await lfuService.get(key1);\n      await lfuService.get(key1);\n      await lfuService.get(key2);\n\n      // 添加第3个键，应该驱逐key2（访问频率最低）\n      await lfuService.set(key3, 'value3');\n\n      // key1和key3应该存在，key2被驱逐\n      expect(await lfuService.get(key1)).toEqual('value1');\n      expect(await lfuService.get(key2)).toBeNull();\n      expect(await lfuService.get(key3)).toEqual('value3');\n\n      await lfuService.onModuleDestroy();\n    });\n\n    it('should use FIFO strategy for eviction', async () => {\n      const config: MemoryCacheConfig = {\n        ...mockConfig,\n        maxSize: 2,\n        defaultStrategy: CacheStrategy.FIFO,\n      };\n      const module = await Test.createTestingModule({\n        providers: [\n          MemoryCacheService,\n          { provide: 'MEMORY_CACHE_CONFIG', useValue: config },\n          { provide: 'ICacheKeyFactory', useClass: CacheKeyFactory },\n          {\n            provide: PinoLoggerService,\n            useValue: {\n              info: jest.fn(),\n              error: jest.fn(),\n              debug: jest.fn(),\n              warn: jest.fn(),\n              trace: jest.fn(),\n              fatal: jest.fn(),\n              child: jest.fn(),\n            },\n          },\n        ],\n      }).compile();\n      const fifoService = module.get<MemoryCacheService>(MemoryCacheService);\n\n      const key1 = keyFactory.create('key1');\n      const key2 = keyFactory.create('key2');\n      const key3 = keyFactory.create('key3');\n\n      // 按顺序添加3个键\n      await fifoService.set(key1, 'value1');\n      await fifoService.set(key2, 'value2');\n      await fifoService.set(key3, 'value3');\n\n      // key1应该被驱逐（最早添加）\n      expect(await fifoService.get(key1)).toBeNull();\n      expect(await fifoService.get(key2)).toEqual('value2');\n      expect(await fifoService.get(key3)).toEqual('value3');\n\n      await fifoService.onModuleDestroy();\n    });\n  });\n\n  describe('statistics', () => {\n    it('should track cache statistics', async () => {\n      const key1 = keyFactory.create('key1');\n      const key2 = keyFactory.create('key2');\n\n      // 初始统计\n      let stats = await service.getStats();\n      expect(stats.totalEntries).toBe(0);\n      expect(stats.hits).toBe(0);\n      expect(stats.misses).toBe(0);\n      expect(stats.hitRate).toBe(0);\n\n      // 设置缓存\n      await service.set(key1, 'value1');\n      await service.set(key2, 'value2');\n\n      stats = await service.getStats();\n      expect(stats.totalEntries).toBe(2);\n      expect(stats.totalSize).toBeGreaterThan(0);\n      expect(stats.averageSize).toBeGreaterThan(0);\n\n      // 命中\n      await service.get(key1);\n      await service.get(key1);\n\n      // 未命中\n      await service.get(keyFactory.create('non-existent'));\n\n      stats = await service.getStats();\n      expect(stats.hits).toBe(2);\n      expect(stats.misses).toBe(1);\n      expect(stats.hitRate).toBe(2 / 3);\n    });\n\n    it('should reset statistics', async () => {\n      const key = keyFactory.create('test-key');\n      await service.set(key, 'value');\n      await service.get(key);\n\n      await service.resetStats();\n\n      const stats = await service.getStats();\n      expect(stats.hits).toBe(0);\n      expect(stats.misses).toBe(0);\n      expect(stats.hitRate).toBe(0);\n      expect(stats.lastReset).toBeGreaterThan(0);\n    });\n  });\n\n  describe('health check', () => {\n    it('should return healthy status', async () => {\n      const health = await service.getHealth();\n\n      expect(health.healthy).toBe(true);\n      expect(health.connected).toBe(true);\n      expect(health.responseTime).toBeGreaterThanOrEqual(0);\n      expect(health.lastCheck).toBeGreaterThan(0);\n      expect(health.error).toBeUndefined();\n    });\n\n    it('should handle health check errors', async () => {\n      // 模拟错误情况（通过破坏keyFactory的create方法）\n      const module = await Test.createTestingModule({\n        providers: [\n          MemoryCacheService,\n          { provide: 'MEMORY_CACHE_CONFIG', useValue: mockConfig },\n          {\n            provide: 'ICacheKeyFactory',\n            useValue: {\n              create: () => {\n                throw new Error('Mock error');\n              },\n              toString: () => 'test',\n              parse: () => ({ key: 'test' }),\n            },\n          },\n          {\n            provide: PinoLoggerService,\n            useValue: {\n              info: jest.fn(),\n              error: jest.fn(),\n              debug: jest.fn(),\n              warn: jest.fn(),\n              trace: jest.fn(),\n              fatal: jest.fn(),\n              child: jest.fn(),\n            },\n          },\n        ],\n      }).compile();\n      const errorService = module.get<MemoryCacheService>(MemoryCacheService);\n\n      const health = await errorService.getHealth();\n      expect(health.healthy).toBe(false);\n      expect(health.connected).toBe(false);\n      expect(health.error).toBeDefined();\n\n      await errorService.onModuleDestroy();\n    });\n  });\n\n  describe('complex data types', () => {\n    it('should handle complex objects', async () => {\n      const key = keyFactory.create('complex-key');\n      const value = {\n        user: {\n          id: '123',\n          name: 'John Doe',\n          email: 'john@example.com',\n          roles: ['admin', 'user'],\n        },\n        metadata: {\n          createdAt: new Date(),\n          version: '1.0.0',\n        },\n      };\n\n      await service.set(key, value);\n      const retrieved = await service.get(key);\n\n      expect(retrieved).toEqual(value);\n    });\n\n    it('should handle arrays', async () => {\n      const key = keyFactory.create('array-key');\n      const value = [\n        { id: 1, name: 'Item 1' },\n        { id: 2, name: 'Item 2' },\n        { id: 3, name: 'Item 3' },\n      ];\n\n      await service.set(key, value);\n      const retrieved = await service.get(key);\n\n      expect(retrieved).toEqual(value);\n    });\n\n    it('should handle primitive values', async () => {\n      const stringKey = keyFactory.create('string-key');\n      const numberKey = keyFactory.create('number-key');\n      const booleanKey = keyFactory.create('boolean-key');\n\n      await service.set(stringKey, 'test string');\n      await service.set(numberKey, 42);\n      await service.set(booleanKey, true);\n\n      expect(await service.get(stringKey)).toBe('test string');\n      expect(await service.get(numberKey)).toBe(42);\n      expect(await service.get(booleanKey)).toBe(true);\n    });\n  });\n\n  describe('concurrent access', () => {\n    it('should handle concurrent set operations', async () => {\n      const promises: Promise<boolean>[] = [];\n      const keyPrefix = 'concurrent-key';\n\n      for (let i = 0; i < 10; i++) {\n        const key = keyFactory.create(`${keyPrefix}-${i}`);\n        promises.push(service.set(key, `value-${i}`));\n      }\n\n      await Promise.all(promises);\n\n      // 验证所有值都被正确设置\n      for (let i = 0; i < 10; i++) {\n        const key = keyFactory.create(`${keyPrefix}-${i}`);\n        expect(await service.get(key)).toBe(`value-${i}`);\n      }\n    });\n\n    it('should handle concurrent get operations', async () => {\n      const key = keyFactory.create('concurrent-get-key');\n      await service.set(key, 'test-value');\n\n      const promises: Promise<unknown>[] = [];\n      for (let i = 0; i < 10; i++) {\n        promises.push(service.get(key));\n      }\n\n      const results = await Promise.all(promises);\n      results.forEach(result => {\n        expect(result).toBe('test-value');\n      });\n    });\n  });\n\n  describe('module lifecycle', () => {\n    it('should clean up resources on destroy', async () => {\n      const key = keyFactory.create('lifecycle-key');\n      await service.set(key, 'test-value');\n\n      // 验证缓存中有数据\n      expect(await service.get(key)).toBe('test-value');\n\n      // 销毁模块\n      await service.onModuleDestroy();\n\n      // 验证缓存被清空\n      expect(await service.get(key)).toBeNull();\n    });\n  });\n});\n"],"version":3}