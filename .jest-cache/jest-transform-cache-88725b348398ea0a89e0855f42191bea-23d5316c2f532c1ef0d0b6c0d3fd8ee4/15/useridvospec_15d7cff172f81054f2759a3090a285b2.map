{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/shared/src/identifiers/user-id.vo.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/shared/src/identifiers/user-id.vo.spec.ts"],"sourcesContent":["import { describe, it, expect } from '@jest/globals';\n\nimport { UserId, InvalidUserIdError } from './user-id.vo';\n\n/**\n * @file user-id.vo.spec.ts\n * @description 用户ID值对象单元测试\n *\n * 测试覆盖：\n * - 用户ID创建和验证\n * - 用户ID相等性比较\n * - 用户ID字符串转换\n * - 异常情况处理\n *\n * @author AI开发团队\n * @since 1.0.0\n */\ndescribe('UserId', () => {\n  describe('constructor', () => {\n    it('should create UserId with valid UUID', () => {\n      // Arrange\n      const validUuid = '123e4567-e89b-12d3-a456-426614174000';\n\n      // Act\n      const userId = new UserId(validUuid);\n\n      // Assert\n      expect(userId).toBeInstanceOf(UserId);\n      expect(userId.value).toBe(validUuid);\n    });\n\n    it('should create UserId with generated UUID when no value provided', () => {\n      // Act\n      const userId = new UserId();\n\n      // Assert\n      expect(userId).toBeInstanceOf(UserId);\n      expect(userId.value).toMatch(\n        /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,\n      );\n    });\n\n    it('should throw InvalidUserIdError for invalid UUID format', () => {\n      // Arrange\n      const invalidUuid = 'invalid-uuid';\n\n      // Act & Assert\n      expect(() => {\n        new UserId(invalidUuid);\n      }).toThrow(InvalidUserIdError);\n    });\n\n    it('should throw InvalidUserIdError for empty string', () => {\n      // Arrange\n      const emptyString = '';\n\n      // Act & Assert\n      expect(() => {\n        new UserId(emptyString);\n      }).toThrow(InvalidUserIdError);\n    });\n\n    it('should throw InvalidUserIdError for null value', () => {\n      // Act & Assert\n      expect(() => {\n        new UserId(null as any);\n      }).toThrow(InvalidUserIdError);\n    });\n\n    it('should throw InvalidUserIdError for undefined value', () => {\n      // Act & Assert\n      expect(() => {\n        new UserId(undefined as any);\n      }).toThrow(InvalidUserIdError);\n    });\n  });\n\n  describe('equals', () => {\n    it('should return true for same UserId instances', () => {\n      // Arrange\n      const uuid = '123e4567-e89b-12d3-a456-426614174000';\n      const userId1 = new UserId(uuid);\n      const userId2 = new UserId(uuid);\n\n      // Act\n      const result = userId1.equals(userId2);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for different UserId instances', () => {\n      // Arrange\n      const userId1 = new UserId('123e4567-e89b-12d3-a456-426614174000');\n      const userId2 = new UserId('987fcdeb-51a2-43d1-b789-123456789abc');\n\n      // Act\n      const result = userId1.equals(userId2);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n\n    it('should return false when comparing with non-UserId object', () => {\n      // Arrange\n      const userId = new UserId('123e4567-e89b-12d3-a456-426614174000');\n      const otherObject = { value: '123e4567-e89b-12d3-a456-426614174000' };\n\n      // Act\n      const result = userId.equals(otherObject as any);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('toString', () => {\n    it('should return UUID string representation', () => {\n      // Arrange\n      const uuid = '123e4567-e89b-12d3-a456-426614174000';\n      const userId = new UserId(uuid);\n\n      // Act\n      const result = userId.toString();\n\n      // Assert\n      expect(result).toBe(uuid);\n    });\n  });\n\n  describe('fromString', () => {\n    it('should create UserId from valid UUID string', () => {\n      // Arrange\n      const uuid = '123e4567-e89b-12d3-a456-426614174000';\n\n      // Act\n      const userId = UserId.fromString(uuid);\n\n      // Assert\n      expect(userId).toBeInstanceOf(UserId);\n      expect(userId.value).toBe(uuid);\n    });\n\n    it('should throw InvalidUserIdError for invalid UUID string', () => {\n      // Arrange\n      const invalidUuid = 'invalid-uuid';\n\n      // Act & Assert\n      expect(() => {\n        UserId.fromString(invalidUuid);\n      }).toThrow(InvalidUserIdError);\n    });\n  });\n\n  describe('isValid', () => {\n    it('should return true for valid UUID', () => {\n      // Arrange\n      const validUuid = '123e4567-e89b-12d3-a456-426614174000';\n\n      // Act\n      const result = UserId.isValid(validUuid);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for invalid UUID', () => {\n      // Arrange\n      const invalidUuid = 'invalid-uuid';\n\n      // Act\n      const result = UserId.isValid(invalidUuid);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n\n    it('should return false for empty string', () => {\n      // Arrange\n      const emptyString = '';\n\n      // Act\n      const result = UserId.isValid(emptyString);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n\n    it('should return false for null value', () => {\n      // Act\n      const result = UserId.isValid(null as any);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n});\n\ndescribe('InvalidUserIdError', () => {\n  it('should create error with correct name and message', () => {\n    // Arrange\n    const message = 'Invalid user ID format';\n\n    // Act\n    const error = new InvalidUserIdError(message);\n\n    // Assert\n    expect(error).toBeInstanceOf(Error);\n    expect(error).toBeInstanceOf(InvalidUserIdError);\n    expect(error.name).toBe('InvalidUserIdError');\n    expect(error.message).toBe(message);\n  });\n});\n"],"version":3}