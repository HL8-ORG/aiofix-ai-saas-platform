66066d5d094c489a215603e988e5bd9d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types="jest" />
/* eslint-env jest */
const globals_1 = require("@jest/globals");
// Mock pg and knex
globals_1.jest.mock('pg', () => ({
    Pool: globals_1.jest.fn().mockImplementation(() => ({
        connect: globals_1.jest.fn(),
        query: globals_1.jest.fn(),
        end: globals_1.jest.fn(),
        on: globals_1.jest.fn(),
        totalCount: 0,
        idleCount: 0,
        waitingCount: 0,
    })),
}));
globals_1.jest.mock('knex', () => ({
    knex: globals_1.jest.fn().mockImplementation(() => ({
        raw: globals_1.jest.fn(),
        select: globals_1.jest.fn(),
        insert: globals_1.jest.fn(),
        update: globals_1.jest.fn(),
        delete: globals_1.jest.fn(),
        transaction: globals_1.jest.fn(),
        destroy: globals_1.jest.fn(),
    })),
}));
/**
 * @file postgresql.adapter.spec.ts
 * @description PostgreSQL适配器单元测试
 *
 * 测试PostgreSQL适配器的连接管理、查询执行、事务管理、健康检查等功能。
 */
const testing_1 = require("@nestjs/testing");
const event_emitter_1 = require("@nestjs/event-emitter");
const logging_1 = require("@aiofix/logging");
const postgresql_adapter_1 = require("./postgresql.adapter");
(0, globals_1.describe)('PostgreSQLAdapter', () => {
    let adapter;
    let mockEventEmitter;
    let mockLogger;
    let mockConfig;
    (0, globals_1.beforeEach)(async () => {
        mockEventEmitter = {
            emit: globals_1.jest.fn(),
            on: globals_1.jest.fn(),
            once: globals_1.jest.fn(),
            removeListener: globals_1.jest.fn(),
            removeAllListeners: globals_1.jest.fn(),
            setMaxListeners: globals_1.jest.fn(),
            getMaxListeners: globals_1.jest.fn(),
            listeners: globals_1.jest.fn(),
            rawListeners: globals_1.jest.fn(),
            listenerCount: globals_1.jest.fn(),
            prependListener: globals_1.jest.fn(),
            prependOnceListener: globals_1.jest.fn(),
            eventNames: globals_1.jest.fn(),
        };
        mockLogger = {
            info: globals_1.jest.fn(),
            warn: globals_1.jest.fn(),
            error: globals_1.jest.fn(),
            debug: globals_1.jest.fn(),
            trace: globals_1.jest.fn(),
            fatal: globals_1.jest.fn(),
            child: globals_1.jest.fn(),
        };
        mockConfig = {
            type: 'postgresql',
            host: 'localhost',
            port: 5432,
            username: 'test',
            password: 'test',
            database: 'test',
            schema: 'public',
            ssl: false,
            pool: {
                min: 2,
                max: 10,
                acquireTimeoutMillis: 60000,
                createTimeoutMillis: 30000,
                destroyTimeoutMillis: 5000,
                idleTimeoutMillis: 30000,
                reapIntervalMillis: 1000,
                createRetryIntervalMillis: 200,
            },
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                {
                    provide: 'DATABASE_CONFIG',
                    useValue: mockConfig,
                },
                {
                    provide: 'DATABASE_NAME',
                    useValue: 'test-postgresql',
                },
                {
                    provide: event_emitter_1.EventEmitter2,
                    useValue: mockEventEmitter,
                },
                {
                    provide: logging_1.PinoLoggerService,
                    useValue: mockLogger,
                },
                postgresql_adapter_1.PostgreSQLAdapter,
            ],
        }).compile();
        adapter = module.get(postgresql_adapter_1.PostgreSQLAdapter);
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('初始化', () => {
        (0, globals_1.it)('应该正确初始化适配器', () => {
            (0, globals_1.expect)(adapter.name).toBe('test-postgresql');
            (0, globals_1.expect)(adapter.type).toBe('postgresql');
            (0, globals_1.expect)(adapter.config).toEqual(mockConfig);
            (0, globals_1.expect)(adapter.eventEmitter).toBe(mockEventEmitter);
        });
        (0, globals_1.it)('应该初始化统计信息', () => {
            const stats = adapter.stats;
            (0, globals_1.expect)(stats.totalQueries).toBe(0);
            (0, globals_1.expect)(stats.successfulQueries).toBe(0);
            (0, globals_1.expect)(stats.failedQueries).toBe(0);
            (0, globals_1.expect)(stats.averageResponseTime).toBe(0);
            (0, globals_1.expect)(stats.maxResponseTime).toBe(0);
            (0, globals_1.expect)(stats.minResponseTime).toBe(0);
            (0, globals_1.expect)(stats.activeConnections).toBe(0);
            (0, globals_1.expect)(stats.idleConnections).toBe(0);
        });
    });
    (0, globals_1.describe)('连接管理', () => {
        (0, globals_1.it)('应该能够连接到数据库', async () => {
            const mockPool = adapter.pool;
            const mockClient = {
                query: globals_1.jest.fn().mockResolvedValue({
                    rows: [{ result: 1 }],
                }),
                release: globals_1.jest.fn(),
            };
            mockPool.connect.mockResolvedValue(mockClient);
            await adapter.connect();
            (0, globals_1.expect)(mockPool.connect).toHaveBeenCalled();
            (0, globals_1.expect)(adapter.isConnected).toBe(true);
            (0, globals_1.expect)(mockEventEmitter.emit).toHaveBeenCalledWith('database.connected', globals_1.expect.objectContaining({
                adapter: 'test-postgresql',
                timestamp: globals_1.expect.unknown(Date),
            }));
        });
        (0, globals_1.it)('应该能够断开数据库连接', async () => {
            const mockPool = adapter.pool;
            mockPool.end.mockResolvedValue(undefined);
            await adapter.disconnect();
            (0, globals_1.expect)(mockPool.end).toHaveBeenCalled();
            (0, globals_1.expect)(adapter.isConnected).toBe(false);
            (0, globals_1.expect)(mockEventEmitter.emit).toHaveBeenCalledWith('database.disconnected', globals_1.expect.objectContaining({
                adapter: 'test-postgresql',
                timestamp: globals_1.expect.unknown(Date),
            }));
        });
        (0, globals_1.it)('应该处理连接错误', async () => {
            const mockPool = adapter.pool;
            const error = new Error('Connection failed');
            mockPool.connect.mockRejectedValue(error);
            await (0, globals_1.expect)(adapter.connect()).rejects.toThrow('Connection failed');
            // 检查最后一次错误日志调用
            const errorCalls = mockLogger.error.mock.calls;
            const lastErrorCall = errorCalls[errorCalls.length - 1];
            (0, globals_1.expect)(lastErrorCall[0]).toContain('Failed to connect to PostgreSQL database');
            (0, globals_1.expect)(lastErrorCall[1]).toBe(logging_1.LogContext.DATABASE);
            (0, globals_1.expect)(lastErrorCall[2]).toMatchObject({
                adapter: 'test-postgresql',
            });
        });
    });
    (0, globals_1.describe)('查询执行', () => {
        (0, globals_1.beforeEach)(async () => {
            const mockPool = adapter.pool;
            const mockClient = {
                query: globals_1.jest.fn().mockResolvedValue({
                    rows: [{ result: 1 }],
                }),
                release: globals_1.jest.fn(),
            };
            mockPool.connect.mockResolvedValue(mockClient);
            await adapter.connect();
        });
        (0, globals_1.it)('应该能够执行查询', async () => {
            const mockPool = adapter.pool;
            const mockResult = {
                rows: [{ id: 1, name: 'test' }],
                rowCount: 1,
                command: 'SELECT',
            };
            mockPool.query.mockResolvedValue(mockResult);
            const result = await adapter.query('SELECT * FROM users WHERE id = $1', [
                1,
            ]);
            (0, globals_1.expect)(mockPool.query).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                text: 'SELECT * FROM users WHERE id = $1',
                values: [1],
            }));
            (0, globals_1.expect)(result).toEqual(mockResult);
            (0, globals_1.expect)(mockEventEmitter.emit).toHaveBeenCalledWith('database.query_executed', globals_1.expect.objectContaining({
                adapter: 'test-postgresql',
                sql: 'SELECT * FROM users WHERE id = $1',
                params: [1],
                responseTime: globals_1.expect.unknown(Number),
            }));
        });
        (0, globals_1.it)('应该能够执行命令', async () => {
            const mockPool = adapter.pool;
            const mockResult = {
                rowCount: 1,
                command: 'INSERT',
            };
            mockPool.query.mockResolvedValue(mockResult);
            const result = await adapter.execute('INSERT INTO users (name) VALUES ($1)', ['test']);
            (0, globals_1.expect)(mockPool.query).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                text: 'INSERT INTO users (name) VALUES ($1)',
                values: ['test'],
            }));
            (0, globals_1.expect)(result).toEqual(mockResult);
        });
        (0, globals_1.it)('应该处理查询错误', async () => {
            const mockPool = adapter.pool;
            const error = new Error('Query failed');
            mockPool.query.mockRejectedValue(error);
            await (0, globals_1.expect)(adapter.query('SELECT * FROM invalid_table')).rejects.toThrow('Query failed');
            // 检查最后一次错误日志调用
            const errorCalls = mockLogger.error.mock.calls;
            const lastErrorCall = errorCalls[errorCalls.length - 1];
            (0, globals_1.expect)(lastErrorCall[0]).toContain('Query failed');
            (0, globals_1.expect)(lastErrorCall[1]).toBe(logging_1.LogContext.DATABASE);
            (0, globals_1.expect)(lastErrorCall[2]).toMatchObject({
                adapter: 'test-postgresql',
            });
        });
        (0, globals_1.it)('应该更新统计信息', async () => {
            const mockPool = adapter.pool;
            const mockResult = { rows: [], rowCount: 0, command: 'SELECT' };
            mockPool.query.mockResolvedValue(mockResult);
            await adapter.query('SELECT 1');
            const stats = await adapter.getStats();
            (0, globals_1.expect)(stats.totalQueries).toBe(1);
            (0, globals_1.expect)(stats.successfulQueries).toBe(1);
            (0, globals_1.expect)(stats.failedQueries).toBe(0);
            (0, globals_1.expect)(stats.averageResponseTime).toBeGreaterThanOrEqual(0);
        });
    });
    (0, globals_1.describe)('事务管理', () => {
        (0, globals_1.beforeEach)(async () => {
            const mockPool = adapter.pool;
            const mockClient = {
                query: globals_1.jest.fn().mockResolvedValue({
                    rows: [{ result: 1 }],
                }),
                release: globals_1.jest.fn(),
            };
            mockPool.connect.mockResolvedValue(mockClient);
            await adapter.connect();
        });
        (0, globals_1.it)('应该能够执行事务', async () => {
            const mockKnex = adapter.knexInstance;
            mockKnex.transaction.mockImplementation(async (callback) => {
                return await callback({});
            });
            const transactionCallback = globals_1.jest.fn();
            transactionCallback.mockResolvedValue('success');
            const result = await adapter.transaction(transactionCallback);
            (0, globals_1.expect)(mockKnex.transaction).toHaveBeenCalled();
            (0, globals_1.expect)(transactionCallback).toHaveBeenCalled();
            (0, globals_1.expect)(result).toBe('success');
        });
        (0, globals_1.it)('应该在事务失败时回滚', async () => {
            const mockKnex = adapter.knexInstance;
            mockKnex.transaction.mockImplementation(async (callback) => {
                return await callback({});
            });
            const transactionCallback = globals_1.jest.fn();
            transactionCallback.mockRejectedValue(new Error('Transaction failed'));
            await (0, globals_1.expect)(adapter.transaction(transactionCallback)).rejects.toThrow('Transaction failed');
        });
    });
    (0, globals_1.describe)('健康检查', () => {
        (0, globals_1.it)('应该返回健康状态', async () => {
            const mockPool = adapter.pool;
            mockPool.totalCount = 10;
            mockPool.idleCount = 8;
            mockPool.waitingCount = 0;
            // 确保连接状态为 true
            adapter.isConnectedFlag = true;
            // Mock 查询成功
            mockPool.query.mockResolvedValue({
                rows: [{ health_check: 1 }],
            });
            const health = await adapter.getHealth();
            (0, globals_1.expect)(health.healthy).toBe(true);
            (0, globals_1.expect)(health.connected).toBe(adapter.isConnected);
            (0, globals_1.expect)(health.responseTime).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(health.lastCheck).toBeInstanceOf(Date);
            (0, globals_1.expect)(health.poolStatus).toEqual({
                total: 10,
                idle: 8,
                active: 2,
                waiting: 0,
            });
        });
        (0, globals_1.it)('应该处理连接池错误', async () => {
            const mockPool = adapter.pool;
            mockPool.totalCount = 0;
            mockPool.idleCount = 0;
            mockPool.waitingCount = 0;
            const health = await adapter.getHealth();
            (0, globals_1.expect)(health.healthy).toBe(false);
            (0, globals_1.expect)(health.error).toBeDefined();
        });
    });
    (0, globals_1.describe)('统计信息', () => {
        (0, globals_1.it)('应该返回统计信息', async () => {
            const stats = await adapter.getStats();
            (0, globals_1.expect)(stats.totalQueries).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(stats.successfulQueries).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(stats.failedQueries).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(stats.averageResponseTime).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(stats.maxResponseTime).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(stats.minResponseTime).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(stats.activeConnections).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(stats.idleConnections).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(stats.lastReset).toBeInstanceOf(Date);
        });
        (0, globals_1.it)('应该能够重置统计信息', async () => {
            await adapter.resetStats();
            const stats = await adapter.getStats();
            (0, globals_1.expect)(stats.totalQueries).toBe(0);
            (0, globals_1.expect)(stats.successfulQueries).toBe(0);
            (0, globals_1.expect)(stats.failedQueries).toBe(0);
            (0, globals_1.expect)(stats.averageResponseTime).toBe(0);
            (0, globals_1.expect)(stats.maxResponseTime).toBe(0);
            (0, globals_1.expect)(stats.minResponseTime).toBe(0);
        });
    });
    (0, globals_1.describe)('连接测试', () => {
        (0, globals_1.it)('应该能够ping数据库', async () => {
            const mockPool = adapter.pool;
            mockPool.query.mockResolvedValue({ rows: [{ result: 1 }] });
            const result = await adapter.ping();
            (0, globals_1.expect)(result).toBe(true);
            (0, globals_1.expect)(mockPool.query).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                text: 'SELECT 1',
                values: [],
            }));
        });
        (0, globals_1.it)('应该在ping失败时返回false', async () => {
            const mockPool = adapter.pool;
            mockPool.query.mockRejectedValue(new Error('Ping failed'));
            const result = await adapter.ping();
            (0, globals_1.expect)(result).toBe(false);
        });
    });
    (0, globals_1.describe)('事件通知', () => {
        (0, globals_1.it)('应该在查询执行时发出事件', async () => {
            const mockPool = adapter.pool;
            const mockClient = {
                query: globals_1.jest.fn().mockResolvedValue({
                    rows: [{ result: 1 }],
                }),
                release: globals_1.jest.fn(),
            };
            mockPool.connect.mockResolvedValue(mockClient);
            await adapter.connect();
            const mockResult = { rows: [], rowCount: 0, command: 'SELECT' };
            mockPool.query.mockResolvedValue(mockResult);
            await adapter.query('SELECT 1');
            (0, globals_1.expect)(mockEventEmitter.emit).toHaveBeenCalledWith('database.query_executed', globals_1.expect.objectContaining({
                adapter: 'test-postgresql',
                sql: 'SELECT 1',
                responseTime: globals_1.expect.unknown(Number),
            }));
        });
        (0, globals_1.it)('应该在连接状态变化时发出事件', async () => {
            const mockPool = adapter.pool;
            const mockClient = {
                query: globals_1.jest.fn().mockResolvedValue({
                    rows: [{ result: 1 }],
                }),
                release: globals_1.jest.fn(),
            };
            mockPool.connect.mockResolvedValue(mockClient);
            await adapter.connect();
            (0, globals_1.expect)(mockEventEmitter.emit).toHaveBeenCalledWith('database.connected', globals_1.expect.objectContaining({
                adapter: 'test-postgresql',
                timestamp: globals_1.expect.unknown(Date),
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,