2c6ebd74e68f3cf3797eaa23ccc261e0
"use strict";

/* istanbul ignore next */
function cov_c8dgmnb52() {
  var path = "/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/interceptors/pino-logging.interceptor.ts";
  var hash = "6f38d4dd86e788b93128b84651d1b1090b3124fb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/interceptors/pino-logging.interceptor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 17
        },
        end: {
          line: 7,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 12
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 3,
          column: 34
        },
        end: {
          line: 3,
          column: 125
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "4": {
        start: {
          line: 4,
          column: 79
        },
        end: {
          line: 4,
          column: 131
        }
      },
      "5": {
        start: {
          line: 5,
          column: 9
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "6": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "7": {
        start: {
          line: 5,
          column: 58
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "8": {
        start: {
          line: 5,
          column: 81
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "9": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 6,
          column: 66
        }
      },
      "10": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "11": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 109
        }
      },
      "12": {
        start: {
          line: 9,
          column: 79
        },
        end: {
          line: 9,
          column: 109
        }
      },
      "13": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 62
        }
      },
      "14": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 40
        }
      },
      "15": {
        start: {
          line: 14,
          column: 17
        },
        end: {
          line: 14,
          column: 42
        }
      },
      "16": {
        start: {
          line: 15,
          column: 15
        },
        end: {
          line: 15,
          column: 30
        }
      },
      "17": {
        start: {
          line: 16,
          column: 20
        },
        end: {
          line: 16,
          column: 45
        }
      },
      "18": {
        start: {
          line: 17,
          column: 15
        },
        end: {
          line: 17,
          column: 30
        }
      },
      "19": {
        start: {
          line: 18,
          column: 30
        },
        end: {
          line: 18,
          column: 72
        }
      },
      "20": {
        start: {
          line: 19,
          column: 28
        },
        end: {
          line: 19,
          column: 70
        }
      },
      "21": {
        start: {
          line: 39,
          column: 29
        },
        end: {
          line: 244,
          column: 1
        }
      },
      "22": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 29
        }
      },
      "23": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 49,
          column: 10
        }
      },
      "24": {
        start: {
          line: 59,
          column: 26
        },
        end: {
          line: 59,
          column: 36
        }
      },
      "25": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 60,
          column: 48
        }
      },
      "26": {
        start: {
          line: 61,
          column: 24
        },
        end: {
          line: 61,
          column: 59
        }
      },
      "27": {
        start: {
          line: 63,
          column: 26
        },
        end: {
          line: 63,
          column: 44
        }
      },
      "28": {
        start: {
          line: 64,
          column: 25
        },
        end: {
          line: 64,
          column: 42
        }
      },
      "29": {
        start: {
          line: 65,
          column: 23
        },
        end: {
          line: 65,
          column: 38
        }
      },
      "30": {
        start: {
          line: 67,
          column: 24
        },
        end: {
          line: 67,
          column: 44
        }
      },
      "31": {
        start: {
          line: 68,
          column: 26
        },
        end: {
          line: 68,
          column: 49
        }
      },
      "32": {
        start: {
          line: 69,
          column: 27
        },
        end: {
          line: 69,
          column: 39
        }
      },
      "33": {
        start: {
          line: 71,
          column: 27
        },
        end: {
          line: 71,
          column: 58
        }
      },
      "34": {
        start: {
          line: 73,
          column: 30
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "35": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 43
        }
      },
      "36": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 104,
          column: 12
        }
      },
      "37": {
        start: {
          line: 87,
          column: 29
        },
        end: {
          line: 87,
          column: 51
        }
      },
      "38": {
        start: {
          line: 88,
          column: 37
        },
        end: {
          line: 92,
          column: 13
        }
      },
      "39": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 52
        }
      },
      "40": {
        start: {
          line: 96,
          column: 29
        },
        end: {
          line: 96,
          column: 51
        }
      },
      "41": {
        start: {
          line: 97,
          column: 33
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "42": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 46
        }
      },
      "43": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 55
        }
      },
      "44": {
        start: {
          line: 103,
          column: 48
        },
        end: {
          line: 103,
          column: 53
        }
      },
      "45": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 32
        }
      },
      "46": {
        start: {
          line: 123,
          column: 21
        },
        end: {
          line: 123,
          column: 38
        }
      },
      "47": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 132,
          column: 11
        }
      },
      "48": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 128,
          column: 29
        }
      },
      "49": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 29
        }
      },
      "50": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 130,
          column: 29
        }
      },
      "51": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 29
        }
      },
      "52": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 24
        }
      },
      "53": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 67
        }
      },
      "54": {
        start: {
          line: 142,
          column: 39
        },
        end: {
          line: 142,
          column: 65
        }
      },
      "55": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 43
        }
      },
      "56": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "57": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 23
        }
      },
      "58": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 168,
          column: 9
        }
      },
      "59": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 62
        }
      },
      "60": {
        start: {
          line: 167,
          column: 35
        },
        end: {
          line: 167,
          column: 60
        }
      },
      "61": {
        start: {
          line: 170,
          column: 26
        },
        end: {
          line: 170,
          column: 36
        }
      },
      "62": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "63": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 178,
          column: 13
        }
      },
      "64": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 46
        }
      },
      "65": {
        start: {
          line: 175,
          column: 17
        },
        end: {
          line: 178,
          column: 13
        }
      },
      "66": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 177,
          column: 47
        }
      },
      "67": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 25
        }
      },
      "68": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 197,
          column: 11
        }
      },
      "69": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 215,
          column: 11
        }
      },
      "70": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 224,
          column: 11
        }
      },
      "71": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 242,
          column: 23
        }
      },
      "72": {
        start: {
          line: 245,
          column: 0
        },
        end: {
          line: 245,
          column: 56
        }
      },
      "73": {
        start: {
          line: 246,
          column: 0
        },
        end: {
          line: 249,
          column: 27
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 46
          },
          end: {
            line: 2,
            column: 47
          }
        },
        loc: {
          start: {
            line: 2,
            column: 87
          },
          end: {
            line: 7,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 8,
            column: 46
          },
          end: {
            line: 8,
            column: 47
          }
        },
        loc: {
          start: {
            line: 8,
            column: 62
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 8
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 24
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 40
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 29
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 58
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 85,
            column: 55
          },
          end: {
            line: 85,
            column: 56
          }
        },
        loc: {
          start: {
            line: 85,
            column: 65
          },
          end: {
            line: 94,
            column: 9
          }
        },
        line: 85
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 94,
            column: 40
          },
          end: {
            line: 94,
            column: 41
          }
        },
        loc: {
          start: {
            line: 94,
            column: 49
          },
          end: {
            line: 104,
            column: 9
          }
        },
        line: 94
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 103,
            column: 42
          },
          end: {
            line: 103,
            column: 43
          }
        },
        loc: {
          start: {
            line: 103,
            column: 48
          },
          end: {
            line: 103,
            column: 53
          }
        },
        line: 103
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 23
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 112
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 122,
            column: 5
          }
        },
        loc: {
          start: {
            line: 122,
            column: 31
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 122
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 125,
            column: 27
          },
          end: {
            line: 125,
            column: 28
          }
        },
        loc: {
          start: {
            line: 125,
            column: 43
          },
          end: {
            line: 132,
            column: 9
          }
        },
        line: 125
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 35
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 141
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 142,
            column: 30
          },
          end: {
            line: 142,
            column: 31
          }
        },
        loc: {
          start: {
            line: 142,
            column: 39
          },
          end: {
            line: 142,
            column: 65
          }
        },
        line: 142
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        loc: {
          start: {
            line: 151,
            column: 27
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 151
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        },
        loc: {
          start: {
            line: 161,
            column: 24
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 161
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 167,
            column: 27
          },
          end: {
            line: 167,
            column: 28
          }
        },
        loc: {
          start: {
            line: 167,
            column: 35
          },
          end: {
            line: 167,
            column: 60
          }
        },
        line: 167
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 25
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 188
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 27
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 205
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 25
          },
          end: {
            line: 243,
            column: 5
          }
        },
        line: 232
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 7,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 18
          },
          end: {
            line: 2,
            column: 22
          }
        }, {
          start: {
            line: 2,
            column: 26
          },
          end: {
            line: 2,
            column: 41
          }
        }, {
          start: {
            line: 2,
            column: 46
          },
          end: {
            line: 7,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 34
          },
          end: {
            line: 3,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 42
          },
          end: {
            line: 3,
            column: 48
          }
        }, {
          start: {
            line: 3,
            column: 51
          },
          end: {
            line: 3,
            column: 125
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 51
          },
          end: {
            line: 3,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 67
          },
          end: {
            line: 3,
            column: 118
          }
        }, {
          start: {
            line: 3,
            column: 121
          },
          end: {
            line: 3,
            column: 125
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 5,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 5,
            column: 150
          }
        }, {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 150
          }
        }],
        line: 4
      },
      "4": {
        loc: {
          start: {
            line: 4,
            column: 8
          },
          end: {
            line: 4,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 8
          },
          end: {
            line: 4,
            column: 35
          }
        }, {
          start: {
            line: 4,
            column: 39
          },
          end: {
            line: 4,
            column: 77
          }
        }],
        line: 4
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 58
          },
          end: {
            line: 5,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 58
          },
          end: {
            line: 5,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 85
          },
          end: {
            line: 5,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 86
          },
          end: {
            line: 5,
            column: 143
          }
        }, {
          start: {
            line: 5,
            column: 148
          },
          end: {
            line: 5,
            column: 149
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 5,
            column: 86
          },
          end: {
            line: 5,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 94
          },
          end: {
            line: 5,
            column: 98
          }
        }, {
          start: {
            line: 5,
            column: 101
          },
          end: {
            line: 5,
            column: 143
          }
        }],
        line: 5
      },
      "8": {
        loc: {
          start: {
            line: 5,
            column: 101
          },
          end: {
            line: 5,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 109
          },
          end: {
            line: 5,
            column: 126
          }
        }, {
          start: {
            line: 5,
            column: 129
          },
          end: {
            line: 5,
            column: 143
          }
        }],
        line: 5
      },
      "9": {
        loc: {
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 16
          }
        }, {
          start: {
            line: 6,
            column: 20
          },
          end: {
            line: 6,
            column: 21
          }
        }, {
          start: {
            line: 6,
            column: 25
          },
          end: {
            line: 6,
            column: 62
          }
        }],
        line: 6
      },
      "10": {
        loc: {
          start: {
            line: 8,
            column: 17
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 8,
            column: 22
          }
        }, {
          start: {
            line: 8,
            column: 26
          },
          end: {
            line: 8,
            column: 41
          }
        }, {
          start: {
            line: 8,
            column: 46
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 8
      },
      "11": {
        loc: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "12": {
        loc: {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 9,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 9,
            column: 35
          }
        }, {
          start: {
            line: 9,
            column: 39
          },
          end: {
            line: 9,
            column: 77
          }
        }],
        line: 9
      },
      "13": {
        loc: {
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 128,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 128,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "14": {
        loc: {
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 127,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 127,
            column: 27
          }
        }, {
          start: {
            line: 127,
            column: 31
          },
          end: {
            line: 127,
            column: 42
          }
        }],
        line: 127
      },
      "15": {
        loc: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 130,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 130,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "16": {
        loc: {
          start: {
            line: 129,
            column: 16
          },
          end: {
            line: 129,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 16
          },
          end: {
            line: 129,
            column: 27
          }
        }, {
          start: {
            line: 129,
            column: 31
          },
          end: {
            line: 129,
            column: 60
          }
        }],
        line: 129
      },
      "17": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "18": {
        loc: {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 162,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 162,
            column: 16
          }
        }, {
          start: {
            line: 162,
            column: 20
          },
          end: {
            line: 162,
            column: 43
          }
        }],
        line: 162
      },
      "19": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 168,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "20": {
        loc: {
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 178,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 178,
            column: 13
          }
        }, {
          start: {
            line: 175,
            column: 17
          },
          end: {
            line: 178,
            column: 13
          }
        }],
        line: 172
      },
      "21": {
        loc: {
          start: {
            line: 175,
            column: 17
          },
          end: {
            line: 178,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 17
          },
          end: {
            line: 178,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "22": {
        loc: {
          start: {
            line: 175,
            column: 21
          },
          end: {
            line: 175,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 21
          },
          end: {
            line: 175,
            column: 46
          }
        }, {
          start: {
            line: 175,
            column: 50
          },
          end: {
            line: 175,
            column: 64
          }
        }],
        line: 175
      },
      "23": {
        loc: {
          start: {
            line: 217,
            column: 52
          },
          end: {
            line: 217,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 52
          },
          end: {
            line: 217,
            column: 65
          }
        }, {
          start: {
            line: 217,
            column: 69
          },
          end: {
            line: 217,
            column: 70
          }
        }],
        line: 217
      },
      "24": {
        loc: {
          start: {
            line: 248,
            column: 37
          },
          end: {
            line: 248,
            column: 185
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 248,
            column: 174
          },
          end: {
            line: 248,
            column: 176
          }
        }, {
          start: {
            line: 248,
            column: 179
          },
          end: {
            line: 248,
            column: 185
          }
        }],
        line: 248
      },
      "25": {
        loc: {
          start: {
            line: 248,
            column: 50
          },
          end: {
            line: 248,
            column: 155
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 248,
            column: 50
          },
          end: {
            line: 248,
            column: 112
          }
        }, {
          start: {
            line: 248,
            column: 116
          },
          end: {
            line: 248,
            column: 155
          }
        }],
        line: 248
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0]
    },
    inputSourceMap: {
      file: "/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/interceptors/pino-logging.interceptor.ts",
      mappings: "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",
      names: [],
      sources: ["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/interceptors/pino-logging.interceptor.ts"],
      sourcesContent: ["import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\n\nimport { tap, catchError } from 'rxjs/operators';\nimport { v4 as uuidv4 } from 'uuid';\nimport { PinoLoggerService } from '../services/pino-logger.service';\nimport { LogContext } from '../interfaces/logging.interface';\n\n/**\n * @interface MethodLogData\n * @description \u65B9\u6CD5\u65E5\u5FD7\u6570\u636E\u7ED3\u6784\n */\ninterface MethodLogData {\n  methodId: string;\n  className: string;\n  methodName: string;\n  startTime: number;\n  requestId?: string;\n  tenantId?: string;\n  userId?: string;\n  parameters?: unknown[];\n  result?: unknown;\n  error?: Error;\n  duration?: number;\n}\n\n/**\n * @class PinoLoggingInterceptor\n * @description\n * Pino\u65E5\u5FD7\u62E6\u622A\u5668\uFF0C\u8D1F\u8D23\u8BB0\u5F55\u65B9\u6CD5\u8C03\u7528\u7684\u8BE6\u7EC6\u65E5\u5FD7\u3002\n *\n * \u4E3B\u8981\u529F\u80FD\u5305\u62EC\uFF1A\n * 1. \u4E3A\u6BCF\u4E2A\u65B9\u6CD5\u8C03\u7528\u751F\u6210\u552F\u4E00ID\n * 2. \u8BB0\u5F55\u65B9\u6CD5\u8C03\u7528\u7684\u5F00\u59CB\u548C\u7ED3\u675F\u65F6\u95F4\n * 3. \u8BB0\u5F55\u65B9\u6CD5\u53C2\u6570\u548C\u8FD4\u56DE\u503C\n * 4. \u8BA1\u7B97\u65B9\u6CD5\u6267\u884C\u65F6\u95F4\n * 5. \u8BB0\u5F55\u5F02\u5E38\u4FE1\u606F\n * 6. \u652F\u6301\u8BF7\u6C42\u4E0A\u4E0B\u6587\u8FFD\u8E2A\n *\n * \u8BBE\u8BA1\u539F\u5219\uFF1A\n * - \u9AD8\u6027\u80FD\uFF1A\u6700\u5C0F\u5316\u5BF9\u65B9\u6CD5\u6267\u884C\u7684\u5F71\u54CD\n * - \u7ED3\u6784\u5316\uFF1A\u63D0\u4F9B\u7ED3\u6784\u5316\u7684\u65E5\u5FD7\u6570\u636E\n * - \u53EF\u914D\u7F6E\uFF1A\u652F\u6301\u4E0D\u540C\u7EA7\u522B\u7684\u65E5\u5FD7\u8BB0\u5F55\n * - \u5B89\u5168\u6027\uFF1A\u654F\u611F\u53C2\u6570\u8FC7\u6EE4\n */\n@Injectable()\nexport class PinoLoggingInterceptor implements NestInterceptor {\n  private readonly sensitiveParameters = [\n    'password',\n    'token',\n    'secret',\n    'apikey',\n    'api_key',\n    'api-key',\n  ];\n\n  constructor(private readonly logger: PinoLoggerService) {}\n\n  /**\n   * @method intercept\n   * @description \u62E6\u622A\u5668\u4E3B\u65B9\u6CD5\n   * @param {ExecutionContext} context \u6267\u884C\u4E0A\u4E0B\u6587\n   * @param {CallHandler} next \u4E0B\u4E00\u4E2A\u5904\u7406\u5668\n   * @returns {Observable<unknown>} \u53EF\u89C2\u5BDF\u5BF9\u8C61\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable<unknown> {\n    const startTime = Date.now();\n    const methodId = this.generateMethodId();\n    const request = context.switchToHttp().getRequest();\n\n    // \u63D0\u53D6\u4E0A\u4E0B\u6587\u4FE1\u606F\n    const requestId = request?.requestId;\n    const tenantId = request?.tenantId;\n    const userId = request?.userId;\n\n    // \u83B7\u53D6\u65B9\u6CD5\u4FE1\u606F\n    const handler = context.getHandler();\n    const className = context.getClass().name;\n    const methodName = handler.name;\n\n    // \u83B7\u53D6\u65B9\u6CD5\u53C2\u6570\n    const parameters = this.extractParameters(context);\n\n    // \u521B\u5EFA\u65B9\u6CD5\u65E5\u5FD7\u6570\u636E\n    const methodLogData: MethodLogData = {\n      methodId,\n      className,\n      methodName,\n      startTime,\n      requestId,\n      tenantId,\n      userId,\n      parameters: this.sanitizeParameters(parameters),\n    };\n\n    // \u8BB0\u5F55\u65B9\u6CD5\u5F00\u59CB\u65E5\u5FD7\n    this.logMethodStart(methodLogData);\n\n    return next.handle().pipe(\n      tap(result => {\n        // \u8BB0\u5F55\u65B9\u6CD5\u6210\u529F\u5B8C\u6210\n        const duration = Date.now() - startTime;\n        const completedLogData: MethodLogData = {\n          ...methodLogData,\n          result: this.sanitizeResult(result),\n          duration,\n        };\n        this.logMethodSuccess(completedLogData);\n      }),\n      catchError(error => {\n        // \u8BB0\u5F55\u65B9\u6CD5\u5F02\u5E38\n        const duration = Date.now() - startTime;\n        const errorLogData: MethodLogData = {\n          ...methodLogData,\n          error,\n          duration,\n        };\n        this.logMethodError(errorLogData);\n        return throwError(() => error);\n      }),\n    );\n  }\n\n  /**\n   * @private\n   * @method generateMethodId\n   * @description \u751F\u6210\u65B9\u6CD5\u8C03\u7528ID\n   * @returns {string} \u65B9\u6CD5\u8C03\u7528ID\n   */\n  private generateMethodId(): string {\n    return uuidv4();\n  }\n\n  /**\n   * @private\n   * @method extractParameters\n   * @description \u63D0\u53D6\u65B9\u6CD5\u53C2\u6570\n   * @param {ExecutionContext} context \u6267\u884C\u4E0A\u4E0B\u6587\n   * @returns {unknown[]} \u65B9\u6CD5\u53C2\u6570\n   */\n  private extractParameters(context: ExecutionContext): unknown[] {\n    const args = context.getArgs();\n\n    // \u8FC7\u6EE4\u6389\u8BF7\u6C42\u548C\u54CD\u5E94\u5BF9\u8C61\uFF0C\u53EA\u4FDD\u7559\u4E1A\u52A1\u53C2\u6570\n    return args.filter((arg, index) => {\n      // \u901A\u5E38\u524D\u4E24\u4E2A\u53C2\u6570\u662F request \u548C response\n      if (index === 0 && arg?.method) return false; // HTTP request\n      if (index === 1 && arg?.statusCode !== undefined) return false; // HTTP response\n      return true;\n    });\n  }\n\n  /**\n   * @private\n   * @method sanitizeParameters\n   * @description \u6E05\u7406\u65B9\u6CD5\u53C2\u6570\uFF0C\u79FB\u9664\u654F\u611F\u4FE1\u606F\n   * @param {unknown[]} parameters \u65B9\u6CD5\u53C2\u6570\n   * @returns {unknown[]} \u6E05\u7406\u540E\u7684\u53C2\u6570\n   */\n  private sanitizeParameters(parameters: unknown[]): unknown[] {\n    return parameters.map(param => this.sanitizeObject(param));\n  }\n\n  /**\n   * @private\n   * @method sanitizeResult\n   * @description \u6E05\u7406\u65B9\u6CD5\u8FD4\u56DE\u503C\uFF0C\u79FB\u9664\u654F\u611F\u4FE1\u606F\n   * @param {unknown} result \u65B9\u6CD5\u8FD4\u56DE\u503C\n   * @returns {unknown} \u6E05\u7406\u540E\u7684\u8FD4\u56DE\u503C\n   */\n  private sanitizeResult(result: unknown): unknown {\n    return this.sanitizeObject(result);\n  }\n\n  /**\n   * @private\n   * @method sanitizeObject\n   * @description \u6E05\u7406\u5BF9\u8C61\uFF0C\u79FB\u9664\u654F\u611F\u4FE1\u606F\n   * @param {unknown} obj \u8981\u6E05\u7406\u7684\u5BF9\u8C61\n   * @returns {unknown} \u6E05\u7406\u540E\u7684\u5BF9\u8C61\n   */\n  private sanitizeObject(obj: unknown): unknown {\n    if (!obj || typeof obj !== 'object') {\n      return obj;\n    }\n\n    // \u5982\u679C\u662F\u6570\u7EC4\uFF0C\u9012\u5F52\u5904\u7406\u6BCF\u4E2A\u5143\u7D20\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.sanitizeObject(item));\n    }\n\n    // \u5982\u679C\u662F\u5BF9\u8C61\uFF0C\u9012\u5F52\u5904\u7406\u6BCF\u4E2A\u5C5E\u6027\n    const sanitized = { ...(obj as Record<string, unknown>) };\n\n    for (const [key, value] of Object.entries(sanitized)) {\n      if (this.sensitiveParameters.includes(key.toLowerCase())) {\n        (sanitized as Record<string, unknown>)[key] = '[REDACTED]';\n      } else if (typeof value === 'object' && value !== null) {\n        (sanitized as Record<string, unknown>)[key] =\n          this.sanitizeObject(value);\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * @private\n   * @method logMethodStart\n   * @description \u8BB0\u5F55\u65B9\u6CD5\u5F00\u59CB\u65E5\u5FD7\n   * @param {MethodLogData} data \u65B9\u6CD5\u65E5\u5FD7\u6570\u636E\n   */\n  private logMethodStart(data: MethodLogData): void {\n    this.logger.debug(\n      `Method Start: ${data.className}.${data.methodName}`,\n      LogContext.BUSINESS,\n      {\n        methodId: data.methodId,\n        className: data.className,\n        methodName: data.methodName,\n        requestId: data.requestId,\n        tenantId: data.tenantId,\n        userId: data.userId,\n        parameters: data.parameters,\n      },\n    );\n  }\n\n  /**\n   * @private\n   * @method logMethodSuccess\n   * @description \u8BB0\u5F55\u65B9\u6CD5\u6210\u529F\u5B8C\u6210\u65E5\u5FD7\n   * @param {MethodLogData} data \u65B9\u6CD5\u65E5\u5FD7\u6570\u636E\n   */\n  private logMethodSuccess(data: MethodLogData): void {\n    this.logger.info(\n      `Method Success: ${data.className}.${data.methodName} - ${data.duration}ms`,\n      LogContext.BUSINESS,\n      {\n        methodId: data.methodId,\n        className: data.className,\n        methodName: data.methodName,\n        requestId: data.requestId,\n        tenantId: data.tenantId,\n        userId: data.userId,\n        result: data.result,\n        duration: data.duration,\n      },\n    );\n\n    // \u8BB0\u5F55\u6027\u80FD\u65E5\u5FD7\n    this.logger.performance(\n      'method_execution',\n      data.duration ?? 0,\n      LogContext.PERFORMANCE,\n      {\n        methodId: data.methodId,\n        className: data.className,\n        methodName: data.methodName,\n        requestId: data.requestId,\n        tenantId: data.tenantId,\n        userId: data.userId,\n      },\n    );\n  }\n\n  /**\n   * @private\n   * @method logMethodError\n   * @description \u8BB0\u5F55\u65B9\u6CD5\u5F02\u5E38\u65E5\u5FD7\n   * @param {MethodLogData} data \u65B9\u6CD5\u65E5\u5FD7\u6570\u636E\n   */\n  private logMethodError(data: MethodLogData): void {\n    this.logger.error(\n      `Method Error: ${data.className}.${data.methodName} - ${data.duration}ms`,\n      LogContext.BUSINESS,\n      {\n        methodId: data.methodId,\n        className: data.className,\n        methodName: data.methodName,\n        requestId: data.requestId,\n        tenantId: data.tenantId,\n        userId: data.userId,\n        parameters: data.parameters,\n        duration: data.duration,\n      },\n      data.error,\n    );\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6f38d4dd86e788b93128b84651d1b1090b3124fb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_c8dgmnb52 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_c8dgmnb52();
var __decorate =
/* istanbul ignore next */
(cov_c8dgmnb52().s[0]++,
/* istanbul ignore next */
(cov_c8dgmnb52().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_c8dgmnb52().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_c8dgmnb52().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_c8dgmnb52().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_c8dgmnb52().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_c8dgmnb52().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_c8dgmnb52().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_c8dgmnb52().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_c8dgmnb52().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_c8dgmnb52().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_c8dgmnb52().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_c8dgmnb52().b[3][0]++;
    cov_c8dgmnb52().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_c8dgmnb52().b[3][1]++;
    cov_c8dgmnb52().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_c8dgmnb52().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_c8dgmnb52().b[5][0]++;
        cov_c8dgmnb52().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_c8dgmnb52().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_c8dgmnb52().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_c8dgmnb52().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_c8dgmnb52().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_c8dgmnb52().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_c8dgmnb52().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_c8dgmnb52().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_c8dgmnb52().s[9]++;
  return /* istanbul ignore next */(cov_c8dgmnb52().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_c8dgmnb52().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_c8dgmnb52().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_c8dgmnb52().s[10]++,
/* istanbul ignore next */
(cov_c8dgmnb52().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_c8dgmnb52().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_c8dgmnb52().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_c8dgmnb52().f[1]++;
  cov_c8dgmnb52().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_c8dgmnb52().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_c8dgmnb52().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_c8dgmnb52().b[11][0]++;
    cov_c8dgmnb52().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_c8dgmnb52().b[11][1]++;
  }
}));
var _a;
/* istanbul ignore next */
cov_c8dgmnb52().s[13]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_c8dgmnb52().s[14]++;
exports.PinoLoggingInterceptor = void 0;
const common_1 =
/* istanbul ignore next */
(cov_c8dgmnb52().s[15]++, require("@nestjs/common"));
const rxjs_1 =
/* istanbul ignore next */
(cov_c8dgmnb52().s[16]++, require("rxjs"));
const operators_1 =
/* istanbul ignore next */
(cov_c8dgmnb52().s[17]++, require("rxjs/operators"));
const uuid_1 =
/* istanbul ignore next */
(cov_c8dgmnb52().s[18]++, require("uuid"));
const pino_logger_service_1 =
/* istanbul ignore next */
(cov_c8dgmnb52().s[19]++, require("../services/pino-logger.service"));
const logging_interface_1 =
/* istanbul ignore next */
(cov_c8dgmnb52().s[20]++, require("../interfaces/logging.interface"));
/**
 * @class PinoLoggingInterceptor
 * @description
 * Pino日志拦截器，负责记录方法调用的详细日志。
 *
 * 主要功能包括：
 * 1. 为每个方法调用生成唯一ID
 * 2. 记录方法调用的开始和结束时间
 * 3. 记录方法参数和返回值
 * 4. 计算方法执行时间
 * 5. 记录异常信息
 * 6. 支持请求上下文追踪
 *
 * 设计原则：
 * - 高性能：最小化对方法执行的影响
 * - 结构化：提供结构化的日志数据
 * - 可配置：支持不同级别的日志记录
 * - 安全性：敏感参数过滤
 */
/* istanbul ignore next */
cov_c8dgmnb52().s[21]++;
let PinoLoggingInterceptor = class PinoLoggingInterceptor {
  constructor(logger) {
    /* istanbul ignore next */
    cov_c8dgmnb52().f[2]++;
    cov_c8dgmnb52().s[22]++;
    this.logger = logger;
    /* istanbul ignore next */
    cov_c8dgmnb52().s[23]++;
    this.sensitiveParameters = ['password', 'token', 'secret', 'apikey', 'api_key', 'api-key'];
  }
  /**
   * @method intercept
   * @description 拦截器主方法
   * @param {ExecutionContext} context 执行上下文
   * @param {CallHandler} next 下一个处理器
   * @returns {Observable<unknown>} 可观察对象
   */
  intercept(context, next) {
    /* istanbul ignore next */
    cov_c8dgmnb52().f[3]++;
    const startTime =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[24]++, Date.now());
    const methodId =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[25]++, this.generateMethodId());
    const request =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[26]++, context.switchToHttp().getRequest());
    // 提取上下文信息
    const requestId =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[27]++, request?.requestId);
    const tenantId =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[28]++, request?.tenantId);
    const userId =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[29]++, request?.userId);
    // 获取方法信息
    const handler =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[30]++, context.getHandler());
    const className =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[31]++, context.getClass().name);
    const methodName =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[32]++, handler.name);
    // 获取方法参数
    const parameters =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[33]++, this.extractParameters(context));
    // 创建方法日志数据
    const methodLogData =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[34]++, {
      methodId,
      className,
      methodName,
      startTime,
      requestId,
      tenantId,
      userId,
      parameters: this.sanitizeParameters(parameters)
    });
    // 记录方法开始日志
    /* istanbul ignore next */
    cov_c8dgmnb52().s[35]++;
    this.logMethodStart(methodLogData);
    /* istanbul ignore next */
    cov_c8dgmnb52().s[36]++;
    return next.handle().pipe((0, operators_1.tap)(result => {
      /* istanbul ignore next */
      cov_c8dgmnb52().f[4]++;
      // 记录方法成功完成
      const duration =
      /* istanbul ignore next */
      (cov_c8dgmnb52().s[37]++, Date.now() - startTime);
      const completedLogData =
      /* istanbul ignore next */
      (cov_c8dgmnb52().s[38]++, {
        ...methodLogData,
        result: this.sanitizeResult(result),
        duration
      });
      /* istanbul ignore next */
      cov_c8dgmnb52().s[39]++;
      this.logMethodSuccess(completedLogData);
    }), (0, operators_1.catchError)(error => {
      /* istanbul ignore next */
      cov_c8dgmnb52().f[5]++;
      // 记录方法异常
      const duration =
      /* istanbul ignore next */
      (cov_c8dgmnb52().s[40]++, Date.now() - startTime);
      const errorLogData =
      /* istanbul ignore next */
      (cov_c8dgmnb52().s[41]++, {
        ...methodLogData,
        error,
        duration
      });
      /* istanbul ignore next */
      cov_c8dgmnb52().s[42]++;
      this.logMethodError(errorLogData);
      /* istanbul ignore next */
      cov_c8dgmnb52().s[43]++;
      return (0, rxjs_1.throwError)(() => {
        /* istanbul ignore next */
        cov_c8dgmnb52().f[6]++;
        cov_c8dgmnb52().s[44]++;
        return error;
      });
    }));
  }
  /**
   * @private
   * @method generateMethodId
   * @description 生成方法调用ID
   * @returns {string} 方法调用ID
   */
  generateMethodId() {
    /* istanbul ignore next */
    cov_c8dgmnb52().f[7]++;
    cov_c8dgmnb52().s[45]++;
    return (0, uuid_1.v4)();
  }
  /**
   * @private
   * @method extractParameters
   * @description 提取方法参数
   * @param {ExecutionContext} context 执行上下文
   * @returns {unknown[]} 方法参数
   */
  extractParameters(context) {
    /* istanbul ignore next */
    cov_c8dgmnb52().f[8]++;
    const args =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[46]++, context.getArgs());
    // 过滤掉请求和响应对象，只保留业务参数
    /* istanbul ignore next */
    cov_c8dgmnb52().s[47]++;
    return args.filter((arg, index) => {
      /* istanbul ignore next */
      cov_c8dgmnb52().f[9]++;
      cov_c8dgmnb52().s[48]++;
      // 通常前两个参数是 request 和 response
      if (
      /* istanbul ignore next */
      (cov_c8dgmnb52().b[14][0]++, index === 0) &&
      /* istanbul ignore next */
      (cov_c8dgmnb52().b[14][1]++, arg?.method)) {
        /* istanbul ignore next */
        cov_c8dgmnb52().b[13][0]++;
        cov_c8dgmnb52().s[49]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_c8dgmnb52().b[13][1]++;
      } // HTTP request
      cov_c8dgmnb52().s[50]++;
      if (
      /* istanbul ignore next */
      (cov_c8dgmnb52().b[16][0]++, index === 1) &&
      /* istanbul ignore next */
      (cov_c8dgmnb52().b[16][1]++, arg?.statusCode !== undefined)) {
        /* istanbul ignore next */
        cov_c8dgmnb52().b[15][0]++;
        cov_c8dgmnb52().s[51]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_c8dgmnb52().b[15][1]++;
      } // HTTP response
      cov_c8dgmnb52().s[52]++;
      return true;
    });
  }
  /**
   * @private
   * @method sanitizeParameters
   * @description 清理方法参数，移除敏感信息
   * @param {unknown[]} parameters 方法参数
   * @returns {unknown[]} 清理后的参数
   */
  sanitizeParameters(parameters) {
    /* istanbul ignore next */
    cov_c8dgmnb52().f[10]++;
    cov_c8dgmnb52().s[53]++;
    return parameters.map(param => {
      /* istanbul ignore next */
      cov_c8dgmnb52().f[11]++;
      cov_c8dgmnb52().s[54]++;
      return this.sanitizeObject(param);
    });
  }
  /**
   * @private
   * @method sanitizeResult
   * @description 清理方法返回值，移除敏感信息
   * @param {unknown} result 方法返回值
   * @returns {unknown} 清理后的返回值
   */
  sanitizeResult(result) {
    /* istanbul ignore next */
    cov_c8dgmnb52().f[12]++;
    cov_c8dgmnb52().s[55]++;
    return this.sanitizeObject(result);
  }
  /**
   * @private
   * @method sanitizeObject
   * @description 清理对象，移除敏感信息
   * @param {unknown} obj 要清理的对象
   * @returns {unknown} 清理后的对象
   */
  sanitizeObject(obj) {
    /* istanbul ignore next */
    cov_c8dgmnb52().f[13]++;
    cov_c8dgmnb52().s[56]++;
    if (
    /* istanbul ignore next */
    (cov_c8dgmnb52().b[18][0]++, !obj) ||
    /* istanbul ignore next */
    (cov_c8dgmnb52().b[18][1]++, typeof obj !== 'object')) {
      /* istanbul ignore next */
      cov_c8dgmnb52().b[17][0]++;
      cov_c8dgmnb52().s[57]++;
      return obj;
    } else
    /* istanbul ignore next */
    {
      cov_c8dgmnb52().b[17][1]++;
    }
    // 如果是数组，递归处理每个元素
    cov_c8dgmnb52().s[58]++;
    if (Array.isArray(obj)) {
      /* istanbul ignore next */
      cov_c8dgmnb52().b[19][0]++;
      cov_c8dgmnb52().s[59]++;
      return obj.map(item => {
        /* istanbul ignore next */
        cov_c8dgmnb52().f[14]++;
        cov_c8dgmnb52().s[60]++;
        return this.sanitizeObject(item);
      });
    } else
    /* istanbul ignore next */
    {
      cov_c8dgmnb52().b[19][1]++;
    }
    // 如果是对象，递归处理每个属性
    const sanitized =
    /* istanbul ignore next */
    (cov_c8dgmnb52().s[61]++, {
      ...obj
    });
    /* istanbul ignore next */
    cov_c8dgmnb52().s[62]++;
    for (const [key, value] of Object.entries(sanitized)) {
      /* istanbul ignore next */
      cov_c8dgmnb52().s[63]++;
      if (this.sensitiveParameters.includes(key.toLowerCase())) {
        /* istanbul ignore next */
        cov_c8dgmnb52().b[20][0]++;
        cov_c8dgmnb52().s[64]++;
        sanitized[key] = '[REDACTED]';
      } else {
        /* istanbul ignore next */
        cov_c8dgmnb52().b[20][1]++;
        cov_c8dgmnb52().s[65]++;
        if (
        /* istanbul ignore next */
        (cov_c8dgmnb52().b[22][0]++, typeof value === 'object') &&
        /* istanbul ignore next */
        (cov_c8dgmnb52().b[22][1]++, value !== null)) {
          /* istanbul ignore next */
          cov_c8dgmnb52().b[21][0]++;
          cov_c8dgmnb52().s[66]++;
          sanitized[key] = this.sanitizeObject(value);
        } else
        /* istanbul ignore next */
        {
          cov_c8dgmnb52().b[21][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_c8dgmnb52().s[67]++;
    return sanitized;
  }
  /**
   * @private
   * @method logMethodStart
   * @description 记录方法开始日志
   * @param {MethodLogData} data 方法日志数据
   */
  logMethodStart(data) {
    /* istanbul ignore next */
    cov_c8dgmnb52().f[15]++;
    cov_c8dgmnb52().s[68]++;
    this.logger.debug(`Method Start: ${data.className}.${data.methodName}`, logging_interface_1.LogContext.BUSINESS, {
      methodId: data.methodId,
      className: data.className,
      methodName: data.methodName,
      requestId: data.requestId,
      tenantId: data.tenantId,
      userId: data.userId,
      parameters: data.parameters
    });
  }
  /**
   * @private
   * @method logMethodSuccess
   * @description 记录方法成功完成日志
   * @param {MethodLogData} data 方法日志数据
   */
  logMethodSuccess(data) {
    /* istanbul ignore next */
    cov_c8dgmnb52().f[16]++;
    cov_c8dgmnb52().s[69]++;
    this.logger.info(`Method Success: ${data.className}.${data.methodName} - ${data.duration}ms`, logging_interface_1.LogContext.BUSINESS, {
      methodId: data.methodId,
      className: data.className,
      methodName: data.methodName,
      requestId: data.requestId,
      tenantId: data.tenantId,
      userId: data.userId,
      result: data.result,
      duration: data.duration
    });
    // 记录性能日志
    /* istanbul ignore next */
    cov_c8dgmnb52().s[70]++;
    this.logger.performance('method_execution',
    /* istanbul ignore next */
    (cov_c8dgmnb52().b[23][0]++, data.duration) ??
    /* istanbul ignore next */
    (cov_c8dgmnb52().b[23][1]++, 0), logging_interface_1.LogContext.PERFORMANCE, {
      methodId: data.methodId,
      className: data.className,
      methodName: data.methodName,
      requestId: data.requestId,
      tenantId: data.tenantId,
      userId: data.userId
    });
  }
  /**
   * @private
   * @method logMethodError
   * @description 记录方法异常日志
   * @param {MethodLogData} data 方法日志数据
   */
  logMethodError(data) {
    /* istanbul ignore next */
    cov_c8dgmnb52().f[17]++;
    cov_c8dgmnb52().s[71]++;
    this.logger.error(`Method Error: ${data.className}.${data.methodName} - ${data.duration}ms`, logging_interface_1.LogContext.BUSINESS, {
      methodId: data.methodId,
      className: data.className,
      methodName: data.methodName,
      requestId: data.requestId,
      tenantId: data.tenantId,
      userId: data.userId,
      parameters: data.parameters,
      duration: data.duration
    }, data.error);
  }
};
/* istanbul ignore next */
cov_c8dgmnb52().s[72]++;
exports.PinoLoggingInterceptor = PinoLoggingInterceptor;
/* istanbul ignore next */
cov_c8dgmnb52().s[73]++;
exports.PinoLoggingInterceptor = PinoLoggingInterceptor = __decorate([(0, common_1.Injectable)(), __metadata("design:paramtypes", [typeof (_a =
/* istanbul ignore next */
(cov_c8dgmnb52().b[25][0]++, typeof pino_logger_service_1.PinoLoggerService !== "undefined") &&
/* istanbul ignore next */
(cov_c8dgmnb52().b[25][1]++, pino_logger_service_1.PinoLoggerService)) === "function" ?
/* istanbul ignore next */
(cov_c8dgmnb52().b[24][0]++, _a) :
/* istanbul ignore next */
(cov_c8dgmnb52().b[24][1]++, Object)])], PinoLoggingInterceptor);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,