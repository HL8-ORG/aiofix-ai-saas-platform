{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/config/redis.config.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/config/redis.config.spec.ts"],"sourcesContent":["/**\n * @file redis.config.spec.ts\n * @description Redis配置服务单元测试\n */\n\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { RedisConfigService } from './redis.config';\n\ndescribe('RedisConfigService', () => {\n  let service: RedisConfigService;\n  let configService: ConfigService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [ConfigModule],\n      providers: [RedisConfigService],\n    }).compile();\n\n    service = module.get<RedisConfigService>(RedisConfigService);\n    configService = module.get<ConfigService>(ConfigService);\n  });\n\n  describe('getCacheConfig', () => {\n    it('should return default cache configuration', () => {\n      jest.spyOn(configService, 'get').mockReturnValue(undefined);\n      \n      const config = service.getCacheConfig();\n      \n      expect(config).toEqual({\n        host: 'localhost',\n        port: 6379,\n        password: 'aiofix_password',\n        db: 0,\n        keyPrefix: 'aiofix:cache:',\n        ttl: 3600,\n        maxRetriesPerRequest: 3,\n        retryDelayOnFailover: 100,\n        enableReadyCheck: true,\n        maxRetriesPerRequest: 3,\n        lazyConnect: true,\n        keepAlive: 30000,\n        family: 4,\n        connectTimeout: 10000,\n        commandTimeout: 5000,\n        retryDelayOnFailover: 100,\n        enableOfflineQueue: false,\n      });\n    });\n\n    it('should return configured cache configuration', () => {\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const configs: Record<string, string> = {\n          REDIS_HOST: 'redis-host',\n          REDIS_PORT: '6380',\n          REDIS_PASSWORD: 'redis_password',\n          REDIS_CACHE_DB: '1',\n          REDIS_CACHE_PREFIX: 'custom:cache:',\n          REDIS_CACHE_TTL: '7200',\n          REDIS_MAX_RETRIES: '5',\n          REDIS_RETRY_DELAY: '200',\n          REDIS_CONNECT_TIMEOUT: '15000',\n          REDIS_COMMAND_TIMEOUT: '8000',\n        };\n        return configs[key];\n      });\n      \n      const config = service.getCacheConfig();\n      \n      expect(config).toEqual({\n        host: 'redis-host',\n        port: 6380,\n        password: 'redis_password',\n        db: 1,\n        keyPrefix: 'custom:cache:',\n        ttl: 7200,\n        maxRetriesPerRequest: 5,\n        retryDelayOnFailover: 200,\n        enableReadyCheck: true,\n        lazyConnect: true,\n        keepAlive: 30000,\n        family: 4,\n        connectTimeout: 15000,\n        commandTimeout: 8000,\n        enableOfflineQueue: false,\n      });\n    });\n  });\n\n  describe('getMessageQueueConfig', () => {\n    it('should return default message queue configuration', () => {\n      jest.spyOn(configService, 'get').mockReturnValue(undefined);\n      \n      const config = service.getMessageQueueConfig();\n      \n      expect(config).toEqual({\n        host: 'localhost',\n        port: 6379,\n        password: 'aiofix_password',\n        db: 1,\n        keyPrefix: 'aiofix:queue:',\n        maxRetriesPerRequest: 3,\n        retryDelayOnFailover: 100,\n        enableReadyCheck: true,\n        lazyConnect: true,\n        keepAlive: 30000,\n        family: 4,\n        connectTimeout: 10000,\n        commandTimeout: 5000,\n        enableOfflineQueue: false,\n      });\n    });\n\n    it('should return configured message queue configuration', () => {\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const configs: Record<string, string> = {\n          REDIS_HOST: 'redis-host',\n          REDIS_PORT: '6380',\n          REDIS_PASSWORD: 'redis_password',\n          REDIS_QUEUE_DB: '2',\n          REDIS_QUEUE_PREFIX: 'custom:queue:',\n          REDIS_MAX_RETRIES: '5',\n          REDIS_RETRY_DELAY: '200',\n        };\n        return configs[key];\n      });\n      \n      const config = service.getMessageQueueConfig();\n      \n      expect(config).toEqual({\n        host: 'redis-host',\n        port: 6380,\n        password: 'redis_password',\n        db: 2,\n        keyPrefix: 'custom:queue:',\n        maxRetriesPerRequest: 5,\n        retryDelayOnFailover: 200,\n        enableReadyCheck: true,\n        lazyConnect: true,\n        keepAlive: 30000,\n        family: 4,\n        connectTimeout: 10000,\n        commandTimeout: 5000,\n        enableOfflineQueue: false,\n      });\n    });\n  });\n\n  describe('getSessionConfig', () => {\n    it('should return default session configuration', () => {\n      jest.spyOn(configService, 'get').mockReturnValue(undefined);\n      \n      const config = service.getSessionConfig();\n      \n      expect(config).toEqual({\n        host: 'localhost',\n        port: 6379,\n        password: 'aiofix_password',\n        db: 2,\n        keyPrefix: 'aiofix:session:',\n        ttl: 86400,\n        maxRetriesPerRequest: 3,\n        retryDelayOnFailover: 100,\n        enableReadyCheck: true,\n        lazyConnect: true,\n        keepAlive: 30000,\n        family: 4,\n        connectTimeout: 10000,\n        commandTimeout: 5000,\n        enableOfflineQueue: false,\n      });\n    });\n\n    it('should return configured session configuration', () => {\n      jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        const configs: Record<string, string> = {\n          REDIS_HOST: 'redis-host',\n          REDIS_PORT: '6380',\n          REDIS_PASSWORD: 'redis_password',\n          REDIS_SESSION_DB: '3',\n          REDIS_SESSION_PREFIX: 'custom:session:',\n          REDIS_SESSION_TTL: '172800',\n        };\n        return configs[key];\n      });\n      \n      const config = service.getSessionConfig();\n      \n      expect(config).toEqual({\n        host: 'redis-host',\n        port: 6380,\n        password: 'redis_password',\n        db: 3,\n        keyPrefix: 'custom:session:',\n        ttl: 172800,\n        maxRetriesPerRequest: 3,\n        retryDelayOnFailover: 100,\n        enableReadyCheck: true,\n        lazyConnect: true,\n        keepAlive: 30000,\n        family: 4,\n        connectTimeout: 10000,\n        commandTimeout: 5000,\n        enableOfflineQueue: false,\n      });\n    });\n  });\n\n  describe('validateConfig', () => {\n    it('should validate correct Redis config', () => {\n      const config = {\n        host: 'localhost',\n        port: 6379,\n        password: 'password',\n        db: 0,\n        keyPrefix: 'test:',\n        ttl: 3600,\n        maxRetriesPerRequest: 3,\n        retryDelayOnFailover: 100,\n        enableReadyCheck: true,\n        lazyConnect: true,\n        keepAlive: 30000,\n        family: 4,\n        connectTimeout: 10000,\n        commandTimeout: 5000,\n        enableOfflineQueue: false,\n      };\n      \n      const isValid = service.validateConfig(config);\n      expect(isValid).toBe(true);\n    });\n\n    it('should reject config with missing required fields', () => {\n      const config = {\n        host: 'localhost',\n        // 缺少 port, password, db 等必需字段\n      } as any;\n      \n      const isValid = service.validateConfig(config);\n      expect(isValid).toBe(false);\n    });\n\n    it('should reject config with invalid port', () => {\n      const config = {\n        host: 'localhost',\n        port: 'invalid' as any,\n        password: 'password',\n        db: 0,\n        keyPrefix: 'test:',\n        ttl: 3600,\n        maxRetriesPerRequest: 3,\n        retryDelayOnFailover: 100,\n        enableReadyCheck: true,\n        lazyConnect: true,\n        keepAlive: 30000,\n        family: 4,\n        connectTimeout: 10000,\n        commandTimeout: 5000,\n        enableOfflineQueue: false,\n      };\n      \n      const isValid = service.validateConfig(config);\n      expect(isValid).toBe(false);\n    });\n\n    it('should reject config with invalid db number', () => {\n      const config = {\n        host: 'localhost',\n        port: 6379,\n        password: 'password',\n        db: 'invalid' as any,\n        keyPrefix: 'test:',\n        ttl: 3600,\n        maxRetriesPerRequest: 3,\n        retryDelayOnFailover: 100,\n        enableReadyCheck: true,\n        lazyConnect: true,\n        keepAlive: 30000,\n        family: 4,\n        connectTimeout: 10000,\n        commandTimeout: 5000,\n        enableOfflineQueue: false,\n      };\n      \n      const isValid = service.validateConfig(config);\n      expect(isValid).toBe(false);\n    });\n  });\n});\n"],"version":3}