f7bce79c533ce12fcd0d0e92c8b9fa02
"use strict";
/**
 * @file tenant-aware.repository.spec.ts
 * @description 租户感知仓储单元测试
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const tenant_aware_repository_1 = require("./tenant-aware.repository");
const isolation_config_1 = require("../config/isolation.config");
// Mock database adapter
const mockDatabaseAdapter = {
    name: 'test-adapter',
    type: 'postgresql',
    isConnected: true,
    config: {},
    eventEmitter: {},
    connect: jest.fn(),
    disconnect: jest.fn(),
    query: jest.fn(),
    execute: jest.fn(),
    transaction: jest.fn(),
    getHealth: jest.fn(),
    getStats: jest.fn(),
    resetStats: jest.fn(),
    getConnection: jest.fn(),
    ping: jest.fn(),
    setTenantContext: jest.fn(),
    getTenantContext: jest.fn(),
    setDefaultSchema: jest.fn(),
    getDefaultSchema: jest.fn(),
    enableRowLevelSecurity: jest.fn(),
    disableRowLevelSecurity: jest.fn(),
    isRowLevelSecurityEnabled: jest.fn(),
};
// Mock database adapter factory
const mockAdapterFactory = {
    createAdapter: jest.fn().mockReturnValue(mockDatabaseAdapter),
    createPlatformAdapter: jest.fn().mockReturnValue(mockDatabaseAdapter),
    createEventsAdapter: jest.fn().mockReturnValue(mockDatabaseAdapter),
    createAiVectorsAdapter: jest.fn().mockReturnValue(mockDatabaseAdapter),
};
// Concrete implementation for testing
class TestTenantAwareRepository extends tenant_aware_repository_1.TenantAwareRepository {
    constructor(adapterFactory, isolationConfig) {
        super(adapterFactory, isolationConfig, 'tenant-123');
    }
    getTableName() {
        return 'test_entities';
    }
    mapRowToEntity(row) {
        return {
            id: row.id,
            name: row.name,
            tenant_id: row.tenant_id,
            created_at: new Date(row.created_at),
            updated_at: new Date(row.updated_at),
        };
    }
    mapEntityToRow(entity) {
        return {
            id: entity.id,
            name: entity.name,
            tenant_id: entity.tenant_id,
            created_at: entity.created_at,
            updated_at: entity.updated_at,
        };
    }
}
describe('TenantAwareRepository', () => {
    let repository;
    let isolationConfig;
    let databaseAdapter;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            imports: [config_1.ConfigModule],
            providers: [
                isolation_config_1.IsolationConfigService,
                {
                    provide: 'IDatabaseAdapter',
                    useValue: mockDatabaseAdapter,
                },
            ],
        }).compile();
        isolationConfig = module.get(isolation_config_1.IsolationConfigService);
        databaseAdapter = module.get('IDatabaseAdapter');
        repository = new TestTenantAwareRepository(mockAdapterFactory, isolationConfig);
        // 重置所有 mock
        jest.clearAllMocks();
    });
    describe('findAll', () => {
        it('should find all entities with tenant isolation', async () => {
            const mockRows = [
                {
                    id: '1',
                    name: 'Entity 1',
                    tenant_id: 'tenant-123',
                    created_at: '2024-01-01',
                    updated_at: '2024-01-01',
                },
                {
                    id: '2',
                    name: 'Entity 2',
                    tenant_id: 'tenant-123',
                    created_at: '2024-01-02',
                    updated_at: '2024-01-02',
                },
            ];
            databaseAdapter.query.mockResolvedValue({ rows: mockRows });
            jest
                .spyOn(isolationConfig, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
            jest
                .spyOn(isolationConfig, 'getTenantIdField')
                .mockReturnValue('tenant_id');
            jest
                .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')
                .mockReturnValue(true);
            const result = await repository.findAll();
            expect(databaseAdapter.query).toHaveBeenCalledWith('SELECT * FROM test_entities WHERE tenant_id = $1', ['tenant-123'], undefined);
            expect(result).toHaveLength(2);
            expect(result[0].id).toBe('1');
            expect(result[0].tenant_id).toBe('tenant-123');
        });
        it('should find all entities without tenant isolation for platform level', async () => {
            const mockRows = [
                {
                    id: '1',
                    name: 'Entity 1',
                    tenant_id: 'tenant-123',
                    created_at: '2024-01-01',
                    updated_at: '2024-01-01',
                },
                {
                    id: '2',
                    name: 'Entity 2',
                    tenant_id: 'tenant-456',
                    created_at: '2024-01-02',
                    updated_at: '2024-01-02',
                },
            ];
            databaseAdapter.query.mockResolvedValue({ rows: mockRows });
            jest
                .spyOn(isolationConfig, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.DATABASE_LEVEL);
            const result = await repository.findAll();
            expect(databaseAdapter.query).toHaveBeenCalledWith('SELECT * FROM test_entities', [], undefined);
            expect(result).toHaveLength(2);
        });
    });
    describe('findById', () => {
        it('should find entity by ID with tenant isolation', async () => {
            const mockRow = {
                id: '1',
                name: 'Entity 1',
                tenant_id: 'tenant-123',
                created_at: '2024-01-01',
                updated_at: '2024-01-01',
            };
            databaseAdapter.query.mockResolvedValue({ rows: [mockRow] });
            jest
                .spyOn(isolationConfig, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
            jest
                .spyOn(isolationConfig, 'getTenantIdField')
                .mockReturnValue('tenant_id');
            jest
                .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')
                .mockReturnValue(true);
            const result = await repository.findById('1');
            expect(databaseAdapter.query).toHaveBeenCalledWith('SELECT * FROM test_entities WHERE id = $1 AND tenant_id = $2', ['1', 'tenant-123'], undefined);
            expect(result).toBeDefined();
            expect(result?.id).toBe('1');
        });
        it('should return null when entity not found', async () => {
            databaseAdapter.query.mockResolvedValue({ rows: [] });
            jest
                .spyOn(isolationConfig, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
            jest
                .spyOn(isolationConfig, 'getTenantIdField')
                .mockReturnValue('tenant_id');
            jest
                .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')
                .mockReturnValue(true);
            const result = await repository.findById('1');
            expect(result).toBeNull();
        });
    });
    describe('create', () => {
        it('should create entity with tenant ID', async () => {
            const entity = {
                id: '1',
                name: 'New Entity',
                tenant_id: 'tenant-123',
                created_at: new Date('2024-01-01'),
                updated_at: new Date('2024-01-01'),
            };
            databaseAdapter.execute.mockResolvedValue({ rows: [entity] });
            jest
                .spyOn(isolationConfig, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
            jest
                .spyOn(isolationConfig, 'getTenantIdField')
                .mockReturnValue('tenant_id');
            const result = await repository.create(entity);
            expect(databaseAdapter.execute).toHaveBeenCalledWith('INSERT INTO test_entities (id, name, tenant_id, created_at, updated_at) VALUES ($1, $2, $3, $4, $5) RETURNING *', ['1', 'New Entity', 'tenant-123', entity.created_at, entity.updated_at], undefined);
            expect(result).toBeDefined();
        });
    });
    describe('update', () => {
        it('should update entity with tenant isolation', async () => {
            const entity = {
                id: '1',
                name: 'Updated Entity',
                tenant_id: 'tenant-123',
                created_at: new Date('2024-01-01'),
                updated_at: new Date('2024-01-02'),
            };
            databaseAdapter.execute.mockResolvedValue({ rows: [entity] });
            jest
                .spyOn(isolationConfig, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
            jest
                .spyOn(isolationConfig, 'getTenantIdField')
                .mockReturnValue('tenant_id');
            jest
                .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')
                .mockReturnValue(true);
            const result = await repository.update('1', entity);
            expect(databaseAdapter.execute).toHaveBeenCalledWith('UPDATE test_entities SET name = $1, updated_at = $2 WHERE id = $3 AND tenant_id = $4 RETURNING *', ['Updated Entity', entity.updated_at, '1', 'tenant-123'], undefined);
            expect(result).toBeDefined();
        });
    });
    describe('delete', () => {
        it('should delete entity with tenant isolation', async () => {
            databaseAdapter.execute.mockResolvedValue({ rowCount: 1 });
            jest
                .spyOn(isolationConfig, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
            jest
                .spyOn(isolationConfig, 'getTenantIdField')
                .mockReturnValue('tenant_id');
            jest
                .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')
                .mockReturnValue(true);
            const result = await repository.delete('1');
            expect(databaseAdapter.execute).toHaveBeenCalledWith('DELETE FROM test_entities WHERE id = $1 AND tenant_id = $2', ['1', 'tenant-123'], undefined);
            expect(result).toBe(true);
        });
        it('should return false when no rows affected', async () => {
            databaseAdapter.execute.mockResolvedValue({ rowCount: 0 });
            jest
                .spyOn(isolationConfig, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
            jest
                .spyOn(isolationConfig, 'getTenantIdField')
                .mockReturnValue('tenant_id');
            jest
                .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')
                .mockReturnValue(true);
            const result = await repository.delete('1');
            expect(result).toBe(false);
        });
    });
    describe('count', () => {
        it('should count entities with tenant isolation', async () => {
            databaseAdapter.query.mockResolvedValue({
                rows: [{ count: '5' }],
            });
            jest
                .spyOn(isolationConfig, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
            jest
                .spyOn(isolationConfig, 'getTenantIdField')
                .mockReturnValue('tenant_id');
            jest
                .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')
                .mockReturnValue(true);
            const result = await repository.count();
            expect(databaseAdapter.query).toHaveBeenCalledWith('SELECT COUNT(*) as count FROM test_entities WHERE tenant_id = $1', ['tenant-123'], undefined);
            expect(result).toBe(5);
        });
    });
    describe('exists', () => {
        it('should return true when entity exists', async () => {
            databaseAdapter.query.mockResolvedValue({
                rows: [{ count: '1' }],
            });
            jest
                .spyOn(isolationConfig, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
            jest
                .spyOn(isolationConfig, 'getTenantIdField')
                .mockReturnValue('tenant_id');
            jest
                .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')
                .mockReturnValue(true);
            const result = await repository.exists('1');
            expect(databaseAdapter.query).toHaveBeenCalledWith('SELECT COUNT(*) as count FROM test_entities WHERE id = $1 AND tenant_id = $2', ['1', 'tenant-123'], undefined);
            expect(result).toBe(true);
        });
        it('should return false when entity does not exist', async () => {
            databaseAdapter.query.mockResolvedValue({
                rows: [{ count: '0' }],
            });
            jest
                .spyOn(isolationConfig, 'getStrategy')
                .mockReturnValue(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
            jest
                .spyOn(isolationConfig, 'getTenantIdField')
                .mockReturnValue('tenant_id');
            jest
                .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')
                .mockReturnValue(true);
            const result = await repository.exists('1');
            expect(result).toBe(false);
        });
    });
    describe('createTenantSpecificRepository', () => {
        it('should create tenant-specific repository', () => {
            const tenantRepo = repository.createTenantSpecificRepository('tenant-123');
            expect(tenantRepo).toBeDefined();
            expect(tenantRepo).toBeInstanceOf(TestTenantAwareRepository);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,