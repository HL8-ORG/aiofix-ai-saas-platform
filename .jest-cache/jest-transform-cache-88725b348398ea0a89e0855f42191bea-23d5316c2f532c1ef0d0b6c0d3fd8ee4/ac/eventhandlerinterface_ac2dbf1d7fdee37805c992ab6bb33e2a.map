{"version":3,"names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/core/src/domain/interfaces/event-handler.interface.ts"],"sourcesContent":["import { DomainEvent } from '../domain-event';\n\n/**\n * @interface IEventHandler\n * @description 事件处理器接口，定义异步事件处理的标准方法\n *\n * 事件处理器职责：\n * 1. 接收并处理领域事件\n * 2. 执行事件相关的业务逻辑\n * 3. 处理事件处理的异常和重试\n * 4. 支持事件处理的幂等性\n *\n * 处理特性：\n * 1. 异步处理：支持异步事件处理\n * 2. 重试机制：支持失败重试和指数退避\n * 3. 幂等性：支持重复事件的安全处理\n * 4. 错误处理：提供完整的错误处理和恢复机制\n *\n * @template T 事件类型\n */\nexport interface IEventHandler<T extends DomainEvent = DomainEvent> {\n  /**\n   * @method handle\n   * @description 处理领域事件，执行相关的业务逻辑\n   * @param {T} event 领域事件\n   * @returns {Promise<void>} 处理结果\n   * @throws {EventProcessingError} 当事件处理失败时抛出\n   *\n   * 处理流程：\n   * 1. 验证事件的有效性\n   * 2. 检查事件是否已处理（幂等性）\n   * 3. 执行事件相关的业务逻辑\n   * 4. 记录处理结果\n   * 5. 处理异常和重试\n   */\n  handle(event: T): Promise<void>;\n\n  /**\n   * @method canHandle\n   * @description 检查是否能处理指定类型的事件\n   * @param {string} eventType 事件类型\n   * @returns {boolean} 是否能处理\n   */\n  canHandle(eventType: string): boolean;\n\n  /**\n   * @method getEventType\n   * @description 获取处理器支持的事件类型\n   * @returns {string} 事件类型\n   */\n  getEventType(): string;\n\n  /**\n   * @method getHandlerName\n   * @description 获取处理器名称\n   * @returns {string} 处理器名称\n   */\n  getHandlerName(): string;\n}\n\n/**\n * @interface IEventProcessor\n * @description 事件处理器管理器接口，负责协调多个事件处理器\n *\n * 处理器管理职责：\n * 1. 注册和管理事件处理器\n * 2. 路由事件到相应的处理器\n * 3. 监控事件处理状态\n * 4. 提供事件处理的统计信息\n *\n * 管理特性：\n * 1. 动态注册：支持运行时注册和注销处理器\n * 2. 事件路由：根据事件类型自动路由到相应处理器\n * 3. 并发处理：支持多个事件的并发处理\n * 4. 监控统计：提供处理器的性能统计和监控\n */\nexport interface IEventProcessor {\n  /**\n   * @method registerHandler\n   * @description 注册事件处理器\n   * @param {IEventHandler} handler 事件处理器\n   * @returns {Promise<void>}\n   * @throws {HandlerRegistrationError} 当处理器注册失败时抛出\n   */\n  registerHandler(handler: IEventHandler): Promise<void>;\n\n  /**\n   * @method unregisterHandler\n   * @description 注销事件处理器\n   * @param {string} handlerName 处理器名称\n   * @returns {Promise<void>}\n   * @throws {HandlerNotFoundError} 当处理器不存在时抛出\n   */\n  unregisterHandler(handlerName: string): Promise<void>;\n\n  /**\n   * @method processEvent\n   * @description 处理领域事件\n   * @param {DomainEvent} event 领域事件\n   * @returns {Promise<void>}\n   * @throws {EventProcessingError} 当事件处理失败时抛出\n   */\n  processEvent(event: DomainEvent): Promise<void>;\n\n  /**\n   * @method getHandlers\n   * @description 获取所有注册的处理器\n   * @returns {IEventHandler[]} 处理器列表\n   */\n  getHandlers(): IEventHandler[];\n\n  /**\n   * @method getHandler\n   * @description 获取指定名称的处理器\n   * @param {string} handlerName 处理器名称\n   * @returns {IEventHandler | undefined} 处理器实例\n   */\n  getHandler(handlerName: string): IEventHandler | undefined;\n\n  /**\n   * @method getHandlersForEvent\n   * @description 获取能处理指定事件类型的处理器\n   * @param {string} eventType 事件类型\n   * @returns {IEventHandler[]} 处理器列表\n   */\n  getHandlersForEvent(eventType: string): IEventHandler[];\n}\n\n/**\n * @interface IEventProcessingContext\n * @description 事件处理上下文接口，提供事件处理过程中的上下文信息\n *\n * 上下文信息：\n * 1. 事件处理状态\n * 2. 重试次数和配置\n * 3. 处理开始和结束时间\n * 4. 错误信息和堆栈\n * 5. 处理结果和统计\n */\nexport interface IEventProcessingContext {\n  /**\n   * @property {string} eventId 事件ID\n   */\n  readonly eventId: string;\n\n  /**\n   * @property {string} eventType 事件类型\n   */\n  readonly eventType: string;\n\n  /**\n   * @property {string} handlerName 处理器名称\n   */\n  readonly handlerName: string;\n\n  /**\n   * @property {Date} startTime 处理开始时间\n   */\n  readonly startTime: Date;\n\n  /**\n   * @property {Date} endTime 处理结束时间\n   */\n  endTime?: Date;\n\n  /**\n   * @property {number} retryCount 重试次数\n   */\n  retryCount: number;\n\n  /**\n   * @property {number} maxRetries 最大重试次数\n   */\n  readonly maxRetries: number;\n\n  /**\n   * @property {boolean} isSuccessful 是否处理成功\n   */\n  isSuccessful: boolean;\n\n  /**\n   * @property {Error} error 处理错误\n   */\n  error?: Error;\n\n  /**\n   * @property {Record<string, unknown>} metadata 处理元数据\n   */\n  readonly metadata: Record<string, unknown>;\n}\n\n/**\n * @interface IEventProcessingResult\n * @description 事件处理结果接口，封装事件处理的结果信息\n *\n * 结果信息：\n * 1. 处理状态和结果\n * 2. 处理时间和性能指标\n * 3. 错误信息和重试信息\n * 4. 处理统计和监控数据\n */\nexport interface IEventProcessingResult {\n  /**\n   * @property {boolean} success 是否处理成功\n   */\n  readonly success: boolean;\n\n  /**\n   * @property {string} eventId 事件ID\n   */\n  readonly eventId: string;\n\n  /**\n   * @property {string} eventType 事件类型\n   */\n  readonly eventType: string;\n\n  /**\n   * @property {string} handlerName 处理器名称\n   */\n  readonly handlerName: string;\n\n  /**\n   * @property {number} processingTimeMs 处理时间（毫秒）\n   */\n  readonly processingTimeMs: number;\n\n  /**\n   * @property {number} retryCount 重试次数\n   */\n  readonly retryCount: number;\n\n  /**\n   * @property {Error} error 处理错误\n   */\n  readonly error?: Error;\n\n  /**\n   * @property {Date} processedAt 处理完成时间\n   */\n  readonly processedAt: Date;\n\n  /**\n   * @property {Record<string, unknown>} metadata 处理元数据\n   */\n  readonly metadata: Record<string, unknown>;\n}\n"],"mappings":"","ignoreList":[]}