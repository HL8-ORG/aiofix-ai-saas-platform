16c85d148523a0f56ff7ed2a1d274e9e
"use strict";
/**
 * @file database.module.spec.ts
 * @description 数据库模块单元测试
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the adapters to avoid actual database connections
jest.mock('./adapters/postgresql.adapter');
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const database_module_1 = require("./database.module");
describe('DatabaseModule', () => {
    let module;
    beforeEach(async () => {
        module = await testing_1.Test.createTestingModule({
            imports: [
                config_1.ConfigModule.forRoot({
                    isGlobal: true,
                    envFilePath: '.env.test',
                }),
                database_module_1.DatabaseModule.register({
                    postgresql: false, // 禁用PostgreSQL以避免连接测试
                }),
            ],
        }).compile();
    });
    afterEach(async () => {
        if (module) {
            await module.close();
        }
    });
    describe('Module Registration', () => {
        it('should be defined', () => {
            expect(module).toBeDefined();
        });
        it('should be a valid NestJS module', () => {
            expect(module).toBeDefined();
            expect(module.get).toBeDefined();
        });
    });
    describe('Module Structure', () => {
        it('should have module methods', () => {
            expect(database_module_1.DatabaseModule.register).toBeDefined();
            expect(database_module_1.DatabaseModule.forRoot).toBeDefined();
            expect(database_module_1.DatabaseModule.forFeature).toBeDefined();
        });
        it('should create dynamic module', () => {
            const dynamicModule = database_module_1.DatabaseModule.register({ postgresql: false });
            expect(dynamicModule).toBeDefined();
            expect(dynamicModule.module).toBe(database_module_1.DatabaseModule);
            expect(dynamicModule.providers).toBeDefined();
            expect(dynamicModule.exports).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJsaWdsZS9WMS9BaW9maXgvYWlvZml4LWFpLXNhYXMtcGxhdGZvcm0vcGFja2FnZXMvZGF0YWJhc2Uvc3JjL2RhdGFiYXNlLm1vZHVsZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7O0FBT0gseURBQXlEO0FBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQU4zQyw2Q0FBc0Q7QUFDdEQsMkNBQThDO0FBQzlDLHVEQUFtRDtBQU1uRCxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO0lBQzlCLElBQUksTUFBcUIsQ0FBQztJQUUxQixVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsTUFBTSxHQUFHLE1BQU0sY0FBSSxDQUFDLG1CQUFtQixDQUFDO1lBQ3RDLE9BQU8sRUFBRTtnQkFDUCxxQkFBWSxDQUFDLE9BQU8sQ0FBQztvQkFDbkIsUUFBUSxFQUFFLElBQUk7b0JBQ2QsV0FBVyxFQUFFLFdBQVc7aUJBQ3pCLENBQUM7Z0JBQ0YsZ0NBQWMsQ0FBQyxRQUFRLENBQUM7b0JBQ3RCLFVBQVUsRUFBRSxLQUFLLEVBQUUsc0JBQXNCO2lCQUMxQyxDQUFDO2FBQ0g7U0FDRixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDZixDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQ1gsTUFBTSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdkIsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtRQUNuQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1lBQzNCLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7WUFDekMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7UUFDaEMsRUFBRSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtZQUNwQyxNQUFNLENBQUMsZ0NBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM5QyxNQUFNLENBQUMsZ0NBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM3QyxNQUFNLENBQUMsZ0NBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7WUFDdEMsTUFBTSxhQUFhLEdBQUcsZ0NBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUNyRSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDcEMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0NBQWMsQ0FBQyxDQUFDO1lBQ2xELE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDOUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvYXJsaWdsZS9WMS9BaW9maXgvYWlvZml4LWFpLXNhYXMtcGxhdGZvcm0vcGFja2FnZXMvZGF0YWJhc2Uvc3JjL2RhdGFiYXNlLm1vZHVsZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgZGF0YWJhc2UubW9kdWxlLnNwZWMudHNcbiAqIEBkZXNjcmlwdGlvbiDmlbDmja7lupPmqKHlnZfljZXlhYPmtYvor5VcbiAqL1xuXG5pbXBvcnQgeyBUZXN0LCBUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQG5lc3Rqcy90ZXN0aW5nJztcbmltcG9ydCB7IENvbmZpZ01vZHVsZSB9IGZyb20gJ0BuZXN0anMvY29uZmlnJztcbmltcG9ydCB7IERhdGFiYXNlTW9kdWxlIH0gZnJvbSAnLi9kYXRhYmFzZS5tb2R1bGUnO1xuaW1wb3J0IHsgRGF0YWJhc2VDb25maWcgfSBmcm9tICcuL2NvbmZpZy9kYXRhYmFzZS5jb25maWcnO1xuXG4vLyBNb2NrIHRoZSBhZGFwdGVycyB0byBhdm9pZCBhY3R1YWwgZGF0YWJhc2UgY29ubmVjdGlvbnNcbmplc3QubW9jaygnLi9hZGFwdGVycy9wb3N0Z3Jlc3FsLmFkYXB0ZXInKTtcblxuZGVzY3JpYmUoJ0RhdGFiYXNlTW9kdWxlJywgKCkgPT4ge1xuICBsZXQgbW9kdWxlOiBUZXN0aW5nTW9kdWxlO1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIG1vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XG4gICAgICBpbXBvcnRzOiBbXG4gICAgICAgIENvbmZpZ01vZHVsZS5mb3JSb290KHtcbiAgICAgICAgICBpc0dsb2JhbDogdHJ1ZSxcbiAgICAgICAgICBlbnZGaWxlUGF0aDogJy5lbnYudGVzdCcsXG4gICAgICAgIH0pLFxuICAgICAgICBEYXRhYmFzZU1vZHVsZS5yZWdpc3Rlcih7XG4gICAgICAgICAgcG9zdGdyZXNxbDogZmFsc2UsIC8vIOemgeeUqFBvc3RncmVTUUzku6Xpgb/lhY3ov57mjqXmtYvor5VcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgIH0pLmNvbXBpbGUoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcbiAgICBpZiAobW9kdWxlKSB7XG4gICAgICBhd2FpdCBtb2R1bGUuY2xvc2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdNb2R1bGUgUmVnaXN0cmF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYmUgZGVmaW5lZCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChtb2R1bGUpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGJlIGEgdmFsaWQgTmVzdEpTIG1vZHVsZScsICgpID0+IHtcbiAgICAgIGV4cGVjdChtb2R1bGUpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QobW9kdWxlLmdldCkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ01vZHVsZSBTdHJ1Y3R1cmUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYXZlIG1vZHVsZSBtZXRob2RzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KERhdGFiYXNlTW9kdWxlLnJlZ2lzdGVyKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KERhdGFiYXNlTW9kdWxlLmZvclJvb3QpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoRGF0YWJhc2VNb2R1bGUuZm9yRmVhdHVyZSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIGR5bmFtaWMgbW9kdWxlJywgKCkgPT4ge1xuICAgICAgY29uc3QgZHluYW1pY01vZHVsZSA9IERhdGFiYXNlTW9kdWxlLnJlZ2lzdGVyKHsgcG9zdGdyZXNxbDogZmFsc2UgfSk7XG4gICAgICBleHBlY3QoZHluYW1pY01vZHVsZSkudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChkeW5hbWljTW9kdWxlLm1vZHVsZSkudG9CZShEYXRhYmFzZU1vZHVsZSk7XG4gICAgICBleHBlY3QoZHluYW1pY01vZHVsZS5wcm92aWRlcnMpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoZHluYW1pY01vZHVsZS5leHBvcnRzKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9