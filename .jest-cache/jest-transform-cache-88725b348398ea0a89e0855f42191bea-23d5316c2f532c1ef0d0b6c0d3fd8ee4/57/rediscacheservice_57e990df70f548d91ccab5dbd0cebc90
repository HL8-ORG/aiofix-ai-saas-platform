886e0767453f40f0df88132b70f3e3cd
"use strict";
/**
 * @file redis-cache.service.ts
 * @description Redis缓存服务
 *
 * 该文件实现了基于Redis的缓存服务，包括：
 * - 基础的CRUD操作
 * - 缓存统计和健康检查
 * - 连接管理和错误处理
 * - 序列化和反序列化
 *
 * 遵循DDD和Clean Architecture原则，提供高性能的分布式缓存。
 */
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisCacheService = void 0;
const common_1 = require("@nestjs/common");
const ioredis_1 = __importDefault(require("ioredis"));
const cache_interface_1 = require("../interfaces/cache.interface");
const logging_1 = require("@aiofix/logging");
/**
 * @class RedisCacheService
 * @description Redis缓存服务实现
 *
 * 提供基于Redis的分布式缓存功能，包括：
 * - 基础的CRUD操作
 * - 缓存统计和健康检查
 * - 连接管理和错误处理
 * - 序列化和反序列化
 */
let RedisCacheService = (() => {
    let _classDecorators = [(0, common_1.Injectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    var RedisCacheService = _classThis = class {
        constructor(config, keyFactory, logger) {
            this.config = config;
            this.keyFactory = keyFactory;
            this.logger = logger;
            this.redis = {};
            this.isConnected = false;
            this.stats = {
                totalEntries: 0,
                hits: 0,
                misses: 0,
                hitRate: 0,
                totalSize: 0,
                averageSize: 0,
                expiredEntries: 0,
                evictedEntries: 0,
                lastReset: Date.now(),
            };
        }
        /**
         * @method onModuleInit
         * @description 模块初始化时连接Redis
         */
        async onModuleInit() {
            await this.connect();
        }
        /**
         * @method onModuleDestroy
         * @description 模块销毁时断开Redis连接
         */
        async onModuleDestroy() {
            await this.disconnect();
        }
        /**
         * @method connect
         * @description 连接到Redis
         */
        async connect() {
            try {
                if (this.config.cluster && this.config.nodes) {
                    this.redis = new ioredis_1.default.Cluster(this.config.nodes, {
                        redisOptions: {
                            password: this.config.password,
                            db: this.config.db || 0,
                            connectTimeout: this.config.connectTimeout || 10000,
                            commandTimeout: this.config.commandTimeout || 5000,
                            maxRetriesPerRequest: this.config.retries || 3,
                        },
                    });
                }
                else if (this.config.sentinel && this.config.sentinels) {
                    this.redis = new ioredis_1.default({
                        sentinels: this.config.sentinels,
                        name: this.config.name || 'mymaster',
                        password: this.config.password,
                        db: this.config.db || 0,
                        connectTimeout: this.config.connectTimeout || 10000,
                        commandTimeout: this.config.commandTimeout || 5000,
                        maxRetriesPerRequest: this.config.retries || 3,
                    });
                }
                else {
                    this.redis = new ioredis_1.default({
                        host: this.config.host,
                        port: this.config.port,
                        password: this.config.password,
                        db: this.config.db || 0,
                        connectTimeout: this.config.connectTimeout || 10000,
                        commandTimeout: this.config.commandTimeout || 5000,
                        maxRetriesPerRequest: this.config.retries || 3,
                    });
                }
                // 监听连接事件
                this.redis.on('connect', () => {
                    this.logger.info('Redis connected', logging_1.LogContext.CACHE);
                    this.isConnected = true;
                });
                this.redis.on('ready', () => {
                    this.logger.info('Redis ready', logging_1.LogContext.CACHE);
                    this.isConnected = true;
                });
                this.redis.on('error', error => {
                    this.logger.error('Redis error', logging_1.LogContext.CACHE, undefined, error);
                    this.isConnected = false;
                });
                this.redis.on('close', () => {
                    this.logger.warn('Redis connection closed', logging_1.LogContext.CACHE);
                    this.isConnected = false;
                });
                this.redis.on('reconnecting', () => {
                    this.logger.info('Redis reconnecting...', logging_1.LogContext.CACHE);
                });
                // 等待连接建立
                await this.redis.ping();
                this.logger.info('Redis connection established successfully', logging_1.LogContext.CACHE);
            }
            catch (error) {
                this.logger.error('Failed to connect to Redis', logging_1.LogContext.CACHE, undefined, error);
                throw error;
            }
        }
        /**
         * @method disconnect
         * @description 断开Redis连接
         */
        async disconnect() {
            if (this.redis) {
                await this.redis.quit();
                this.isConnected = false;
                this.logger.info('Redis connection closed', logging_1.LogContext.CACHE);
            }
        }
        /**
         * @method get
         * @description 获取缓存值
         * @param key 缓存键
         * @returns 缓存值或null
         */
        async get(key) {
            try {
                const keyString = this.keyFactory.toString(key);
                const result = await this.redis.get(keyString);
                if (result === null) {
                    this.stats.misses++;
                    this.updateHitRate();
                    return null;
                }
                this.stats.hits++;
                this.updateHitRate();
                const cacheValue = JSON.parse(result);
                // 检查是否过期
                if (cacheValue.expiresAt && Date.now() > cacheValue.expiresAt) {
                    await this.delete(key);
                    this.stats.expiredEntries++;
                    this.stats.misses++;
                    this.updateHitRate();
                    return null;
                }
                // 更新访问统计
                cacheValue.accessCount++;
                cacheValue.lastAccessed = Date.now();
                await this.redis.set(keyString, JSON.stringify(cacheValue));
                return cacheValue.value;
            }
            catch (error) {
                this.logger.error('Error getting cache value', logging_1.LogContext.CACHE, undefined, error);
                this.stats.misses++;
                this.updateHitRate();
                return null;
            }
        }
        /**
         * @method set
         * @description 设置缓存值
         * @param key 缓存键
         * @param value 缓存值
         * @param options 缓存选项
         * @returns 是否成功
         */
        async set(key, value, options) {
            try {
                const keyString = this.keyFactory.toString(key);
                const now = Date.now();
                const cacheValue = {
                    value,
                    createdAt: now,
                    accessCount: 0,
                    lastAccessed: now,
                    version: key.version,
                    tags: key.tags,
                    metadata: {
                        type: cache_interface_1.CacheType.REDIS,
                        strategy: options?.strategy || cache_interface_1.CacheStrategy.TTL,
                    },
                };
                // 设置过期时间
                if (options?.ttl) {
                    cacheValue.expiresAt = now + options.ttl;
                }
                const serializedValue = JSON.stringify(cacheValue);
                const valueSize = Buffer.byteLength(serializedValue, 'utf8');
                // 使用Redis的EXPIRE命令设置过期时间
                if (options?.ttl) {
                    await this.redis.setex(keyString, Math.ceil(options.ttl / 1000), serializedValue);
                }
                else {
                    await this.redis.set(keyString, serializedValue);
                }
                // 更新统计
                this.stats.totalEntries++;
                this.stats.totalSize += valueSize;
                this.stats.averageSize = this.stats.totalSize / this.stats.totalEntries;
                return true;
            }
            catch (error) {
                this.logger.error('Error setting cache value', logging_1.LogContext.CACHE, undefined, error);
                return false;
            }
        }
        /**
         * @method delete
         * @description 删除缓存值
         * @param key 缓存键
         * @returns 是否成功
         */
        async delete(key) {
            try {
                const keyString = this.keyFactory.toString(key);
                const result = await this.redis.del(keyString);
                if (result > 0) {
                    this.stats.totalEntries--;
                    // 注意：这里无法准确更新totalSize，因为我们需要获取被删除项的大小
                    return true;
                }
                return false;
            }
            catch (error) {
                this.logger.error('Error deleting cache value', logging_1.LogContext.CACHE, undefined, error);
                return false;
            }
        }
        /**
         * @method exists
         * @description 检查缓存键是否存在
         * @param key 缓存键
         * @returns 是否存在
         */
        async exists(key) {
            try {
                const keyString = this.keyFactory.toString(key);
                const result = await this.redis.exists(keyString);
                return result === 1;
            }
            catch (error) {
                this.logger.error('Error checking cache key existence', logging_1.LogContext.CACHE, undefined, error);
                return false;
            }
        }
        /**
         * @method clear
         * @description 清空缓存
         * @param namespace 命名空间（可选）
         * @returns 是否成功
         */
        async clear(namespace) {
            try {
                if (namespace) {
                    // 使用模式匹配删除指定命名空间的所有键
                    const pattern = `${namespace}:*`;
                    const keys = await this.redis.keys(pattern);
                    if (keys.length > 0) {
                        await this.redis.del(...keys);
                        this.stats.totalEntries -= keys.length;
                    }
                }
                else {
                    // 清空整个数据库
                    await this.redis.flushdb();
                    this.stats.totalEntries = 0;
                    this.stats.totalSize = 0;
                    this.stats.averageSize = 0;
                }
                return true;
            }
            catch (error) {
                this.logger.error('Error clearing cache', logging_1.LogContext.CACHE, undefined, error);
                return false;
            }
        }
        /**
         * @method getStats
         * @description 获取缓存统计
         * @returns 缓存统计
         */
        async getStats() {
            try {
                // 获取Redis信息
                const info = await this.redis.info();
                const lines = info.split('\r\n');
                // 解析Redis统计信息
                for (const line of lines) {
                    if (line.startsWith('keyspace:')) {
                        const match = line.match(/keys=(\d+)/);
                        if (match) {
                            this.stats.totalEntries = parseInt(match[1], 10);
                            break;
                        }
                    }
                }
                return { ...this.stats };
            }
            catch (error) {
                this.logger.error('Error getting cache stats', logging_1.LogContext.CACHE, undefined, error);
                return { ...this.stats };
            }
        }
        /**
         * @method getHealth
         * @description 获取缓存健康状态
         * @returns 缓存健康状态
         */
        async getHealth() {
            const startTime = Date.now();
            try {
                await this.redis.ping();
                const responseTime = Date.now() - startTime;
                return {
                    healthy: true,
                    connected: this.isConnected,
                    responseTime,
                    lastCheck: Date.now(),
                };
            }
            catch (error) {
                const responseTime = Date.now() - startTime;
                return {
                    healthy: false,
                    connected: false,
                    responseTime,
                    error: error.message,
                    lastCheck: Date.now(),
                };
            }
        }
        /**
         * @method resetStats
         * @description 重置缓存统计
         */
        async resetStats() {
            this.stats = {
                totalEntries: 0,
                hits: 0,
                misses: 0,
                hitRate: 0,
                totalSize: 0,
                averageSize: 0,
                expiredEntries: 0,
                evictedEntries: 0,
                lastReset: Date.now(),
            };
        }
        /**
         * @private updateHitRate
         * @description 更新命中率
         */
        updateHitRate() {
            const total = this.stats.hits + this.stats.misses;
            this.stats.hitRate = total > 0 ? this.stats.hits / total : 0;
        }
    };
    __setFunctionName(_classThis, "RedisCacheService");
    (() => {
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        RedisCacheService = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return RedisCacheService = _classThis;
})();
exports.RedisCacheService = RedisCacheService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,