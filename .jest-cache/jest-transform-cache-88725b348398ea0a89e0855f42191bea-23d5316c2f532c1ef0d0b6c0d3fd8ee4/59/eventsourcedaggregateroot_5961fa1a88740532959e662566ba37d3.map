{"version":3,"names":["EventSourcedAggregateRoot","constructor","cov_1akguy5enw","f","s","domainEvents","addDomainEvent","event","push","getDomainEvents","clearDomainEvents","markEventsAsCommitted","exports"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/core/src/domain/base/event-sourced-aggregate-root.ts"],"sourcesContent":["import { DomainEvent } from '../domain-event';\n\n/**\n * @class EventSourcedAggregateRoot\n * @description\n * 事件溯源聚合根基类，负责管理聚合根的事件收集、存储和重放功能。\n *\n * 事件溯源职责：\n * 1. 收集聚合根产生的领域事件\n * 2. 管理未提交事件的生命周期\n * 3. 支持事件的重放和状态重建\n * 4. 提供事件提交和清理机制\n *\n * 事件管理机制：\n * 1. 事件收集：通过addDomainEvent方法收集业务事件\n * 2. 事件存储：维护未提交事件的内部列表\n * 3. 事件提交：通过markEventsAsCommitted标记事件已提交\n * 4. 事件清理：通过clearDomainEvents清理已处理事件\n *\n * 设计原则：\n * 1. 所有事件溯源聚合根都应该继承此类\n * 2. 提供统一的事件管理接口和行为\n * 3. 支持事件驱动架构的完整实现\n * 4. 确保事件的一致性和完整性\n * 5. 为事件存储和重放提供基础支持\n *\n * @property {DomainEvent[]} domainEvents 未提交的领域事件列表\n *\n * @example\n * ```typescript\n * export class UserAggregate extends EventSourcedAggregateRoot {\n *   constructor(private userId: string) {\n *     super();\n *   }\n *\n *   createUser(email: string, tenantId: string): void {\n *     // 业务逻辑\n *     this.addDomainEvent(new UserCreatedEvent(this.userId, email, tenantId));\n *   }\n *\n *   // 获取未提交事件\n *   getUncommittedEvents(): DomainEvent[] {\n *     return this.getDomainEvents();\n *   }\n * }\n * ```\n * @since 1.0.0\n */\nexport abstract class EventSourcedAggregateRoot {\n  /**\n   * 未提交的领域事件列表\n   * 用于收集聚合根在业务操作中产生的所有事件\n   */\n  private domainEvents: DomainEvent[] = [];\n\n  /**\n   * @method addDomainEvent\n   * @description\n   * 添加领域事件到未提交事件列表。此方法用于在业务操作中收集产生的领域事件。\n   *\n   * 功能与职责：\n   * 1. 将新产生的领域事件添加到内部事件列表\n   * 2. 确保事件在事务提交前被正确收集\n   * 3. 支持多个事件在同一个业务操作中产生\n   * 4. 为事件存储和发布提供数据源\n   *\n   * 使用场景：\n   * 1. 聚合根执行业务方法时产生事件\n   * 2. 状态变更需要通知其他聚合根\n   * 3. 需要记录业务操作的审计日志\n   * 4. 触发后续的业务流程\n   *\n   * @param {DomainEvent} event 要添加的领域事件\n   * @returns {void}\n   * @throws {Error} 当事件为null或undefined时抛出错误\n   * @protected\n   *\n   * @example\n   * ```typescript\n   * // 在业务方法中添加事件\n   * createUser(email: string, tenantId: string): void {\n   *   // 执行业务逻辑\n   *   const user = new User(email, tenantId);\n   *\n   *   // 添加领域事件\n   *   this.addDomainEvent(new UserCreatedEvent(user.id, email, tenantId));\n   * }\n   * ```\n   */\n  protected addDomainEvent(event: DomainEvent): void {\n    this.domainEvents.push(event);\n  }\n\n  /**\n   * @method getDomainEvents\n   * @description\n   * 获取聚合根的所有未提交领域事件。此方法用于在事务提交前获取所有待处理的事件。\n   *\n   * 功能与职责：\n   * 1. 返回聚合根当前收集的所有未提交事件\n   * 2. 为事件存储和发布提供事件列表\n   * 3. 支持事件驱动架构的事件处理流程\n   * 4. 确保事件在事务边界内被正确处理\n   *\n   * 使用场景：\n   * 1. 事务提交前获取所有待处理事件\n   * 2. 事件存储服务保存事件到数据库\n   * 3. 事件总线发布事件到消息队列\n   * 4. 事件处理器处理业务逻辑\n   *\n   * @returns {DomainEvent[]} 未提交的领域事件列表，返回副本以避免外部修改\n   *\n   * @example\n   * ```typescript\n   * // 在事务提交前获取事件\n   * const events = aggregate.getDomainEvents();\n   *\n   * // 保存到事件存储\n   * await eventStore.saveEvents(aggregateId, events, expectedVersion);\n   *\n   * // 发布到事件总线\n   * await eventBus.publishAll(events);\n   *\n   * // 标记事件已提交\n   * aggregate.markEventsAsCommitted();\n   * ```\n   */\n  public getDomainEvents(): DomainEvent[] {\n    return [...this.domainEvents]; // 返回副本以避免外部修改\n  }\n\n  /**\n   * @method clearDomainEvents\n   * @description\n   * 清除聚合根的所有未提交领域事件。此方法用于在事件处理完成后清理内部事件列表。\n   *\n   * 功能与职责：\n   * 1. 清空聚合根内部的未提交事件列表\n   * 2. 释放事件对象占用的内存空间\n   * 3. 为下一次业务操作准备干净的状态\n   * 4. 防止事件重复处理\n   *\n   * 使用场景：\n   * 1. 事件成功保存到事件存储后\n   * 2. 事件成功发布到消息队列后\n   * 3. 事务提交成功后\n   * 4. 聚合根状态重置时\n   *\n   * 注意事项：\n   * 1. 只有在确认事件已正确处理后才能调用此方法\n   * 2. 调用后无法恢复已清除的事件\n   * 3. 建议在事务提交成功后调用\n   *\n   * @returns {void}\n   *\n   * @example\n   * ```typescript\n   * // 在事件处理完成后清除事件\n   * try {\n   *   const events = aggregate.getDomainEvents();\n   *   await eventStore.saveEvents(aggregateId, events, expectedVersion);\n   *   await eventBus.publishAll(events);\n   *\n   *   // 事件处理成功，清除事件列表\n   *   aggregate.clearDomainEvents();\n   * } catch (error) {\n   *   // 事件处理失败，保留事件列表以便重试\n   *   throw error;\n   * }\n   * ```\n   */\n  public clearDomainEvents(): void {\n    this.domainEvents = [];\n  }\n\n  /**\n   * @method markEventsAsCommitted\n   * @description\n   * 标记所有未提交事件为已提交状态。此方法用于在事件成功处理后更新聚合根的状态。\n   *\n   * 功能与职责：\n   * 1. 标记聚合根的所有事件为已提交状态\n   * 2. 清除内部未提交事件列表\n   * 3. 更新聚合根的内部状态\n   * 4. 为下一次业务操作准备干净的状态\n   *\n   * 使用场景：\n   * 1. 事件成功保存到事件存储后\n   * 2. 事件成功发布到消息队列后\n   * 3. 事务成功提交后\n   * 4. 聚合根状态同步完成后\n   *\n   * 与clearDomainEvents的区别：\n   * 1. markEventsAsCommitted语义更明确，表示事件已成功处理\n   * 2. clearDomainEvents只是清除事件，不表示处理状态\n   * 3. 建议在事件处理成功后使用markEventsAsCommitted\n   *\n   * @returns {void}\n   *\n   * @example\n   * ```typescript\n   * // 在事件处理成功后标记为已提交\n   * try {\n   *   const events = aggregate.getDomainEvents();\n   *   await eventStore.saveEvents(aggregateId, events, expectedVersion);\n   *   await eventBus.publishAll(events);\n   *\n   *   // 标记事件已提交\n   *   aggregate.markEventsAsCommitted();\n   * } catch (error) {\n   *   // 事件处理失败，不标记为已提交\n   *   throw error;\n   * }\n   * ```\n   */\n  public markEventsAsCommitted(): void {\n    this.clearDomainEvents();\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,MAAsBA,yBAAyB;EAA/CC,YAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACE;;;;IAIQ,KAAAC,YAAY,GAAkB,EAAE;EAqK1C;EAnKE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkCUC,cAAcA,CAACC,KAAkB;IAAA;IAAAL,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACzC,IAAI,CAACC,YAAY,CAACG,IAAI,CAACD,KAAK,CAAC;EAC/B;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkCOE,eAAeA,CAAA;IAAA;IAAAP,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACpB,OAAO,CAAC,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC;EACjC;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwCOK,iBAAiBA,CAAA;IAAA;IAAAR,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACtB,IAAI,CAACC,YAAY,GAAG,EAAE;EACxB;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwCOM,qBAAqBA,CAAA;IAAA;IAAAT,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC1B,IAAI,CAACM,iBAAiB,EAAE;EAC1B;;AACD;AAAAR,cAAA,GAAAE,CAAA;AA1KDQ,OAAA,CAAAZ,yBAAA,GAAAA,yBAAA","ignoreList":[]}