{"version":3,"names":["cov_zdiklbkat","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","uuid_1","require","UserTestFactory","create","overrides","now","Date","id","v4","email","password","phone","avatar","status","createdAt","updatedAt","createMany","count","Array","from","length","_","index","createActive","createInactive","createLocked","exports","TenantTestFactory","settings","theme","language","timezone","quota","users","storage","apiCalls","createEnterprise","createPersonal","OrganizationTestFactory","description","tenantId","DepartmentTestFactory","organizationId","RoleTestFactory","permissions","level","createPlatformAdmin","createTenantAdmin","TestFactories","User","Tenant","Organization","Department","Role","TestDataCleaner","cleanup","data","forEach","item","Object","keys","key","reset","jest","clearAllMocks","restoreAllMocks"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/common/src/test-factories/index.ts"],"sourcesContent":["/**\n * 测试数据工厂\n *\n * 提供统一的测试数据创建方法，确保测试数据的一致性和可维护性。\n * 使用工厂模式创建测试对象，支持自定义覆盖和批量创建。\n *\n * @fileoverview 测试数据工厂\n * @author AI开发团队\n * @since 1.0.0\n */\n\nimport { v4 as uuidv4 } from 'uuid';\n\n// Jest类型声明\ndeclare const jest:\n  | {\n      clearAllMocks: () => void;\n      restoreAllMocks: () => void;\n    }\n  | undefined;\n\n/**\n * 用户测试数据接口\n */\nexport interface UserTestData {\n  id?: string;\n  email: string;\n  password: string;\n  name: string;\n  phone?: string;\n  avatar?: string;\n  status?: 'active' | 'inactive' | 'locked';\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n/**\n * 租户测试数据接口\n */\nexport interface TenantTestData {\n  id?: string;\n  name: string;\n  type: 'enterprise' | 'community' | 'team' | 'personal';\n  status: 'active' | 'inactive' | 'suspended';\n  settings?: Record<string, any>;\n  quota?: {\n    users: number;\n    storage: number;\n    apiCalls: number;\n  };\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n/**\n * 组织测试数据接口\n */\nexport interface OrganizationTestData {\n  id?: string;\n  name: string;\n  type:\n    | 'committee'\n    | 'project_team'\n    | 'quality_control'\n    | 'performance_management'\n    | 'other';\n  description?: string;\n  tenantId: string;\n  status: 'active' | 'inactive';\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n/**\n * 部门测试数据接口\n */\nexport interface DepartmentTestData {\n  id?: string;\n  name: string;\n  description?: string;\n  organizationId: string;\n  parentId?: string;\n  status: 'active' | 'inactive';\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n/**\n * 角色测试数据接口\n */\nexport interface RoleTestData {\n  id?: string;\n  name: string;\n  description?: string;\n  permissions: string[];\n  level: 'platform' | 'tenant' | 'organization' | 'department' | 'user';\n  status: 'active' | 'inactive';\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n/**\n * 用户测试数据工厂\n */\nexport class UserTestFactory {\n  /**\n   * 创建单个用户测试数据\n   *\n   * @param {Partial<UserTestData>} overrides - 覆盖默认值的属性\n   * @returns {UserTestData} 用户测试数据\n   */\n  static create(overrides: Partial<UserTestData> = {}): UserTestData {\n    const now = new Date();\n    return {\n      id: uuidv4(),\n      email: 'test@example.com',\n      password: 'Password123!',\n      name: 'Test User',\n      phone: '+1234567890',\n      avatar: 'https://example.com/avatar.jpg',\n      status: 'active',\n      createdAt: now,\n      updatedAt: now,\n      ...overrides,\n    };\n  }\n\n  /**\n   * 创建多个用户测试数据\n   *\n   * @param {number} count - 创建数量\n   * @param {Partial<UserTestData>} overrides - 覆盖默认值的属性\n   * @returns {UserTestData[]} 用户测试数据数组\n   */\n  static createMany(\n    count: number,\n    overrides: Partial<UserTestData> = {},\n  ): UserTestData[] {\n    return Array.from({ length: count }, (_, index) =>\n      this.create({\n        email: `test${index}@example.com`,\n        name: `Test User ${index}`,\n        ...overrides,\n      }),\n    );\n  }\n\n  /**\n   * 创建活跃用户\n   *\n   * @param {Partial<UserTestData>} overrides - 覆盖默认值的属性\n   * @returns {UserTestData} 活跃用户测试数据\n   */\n  static createActive(overrides: Partial<UserTestData> = {}): UserTestData {\n    return this.create({\n      status: 'active',\n      ...overrides,\n    });\n  }\n\n  /**\n   * 创建非活跃用户\n   *\n   * @param {Partial<UserTestData>} overrides - 覆盖默认值的属性\n   * @returns {UserTestData} 非活跃用户测试数据\n   */\n  static createInactive(overrides: Partial<UserTestData> = {}): UserTestData {\n    return this.create({\n      status: 'inactive',\n      ...overrides,\n    });\n  }\n\n  /**\n   * 创建锁定用户\n   *\n   * @param {Partial<UserTestData>} overrides - 覆盖默认值的属性\n   * @returns {UserTestData} 锁定用户测试数据\n   */\n  static createLocked(overrides: Partial<UserTestData> = {}): UserTestData {\n    return this.create({\n      status: 'locked',\n      ...overrides,\n    });\n  }\n}\n\n/**\n * 租户测试数据工厂\n */\nexport class TenantTestFactory {\n  /**\n   * 创建单个租户测试数据\n   *\n   * @param {Partial<TenantTestData>} overrides - 覆盖默认值的属性\n   * @returns {TenantTestData} 租户测试数据\n   */\n  static create(overrides: Partial<TenantTestData> = {}): TenantTestData {\n    const now = new Date();\n    return {\n      id: uuidv4(),\n      name: 'Test Tenant',\n      type: 'enterprise',\n      status: 'active',\n      settings: {\n        theme: 'light',\n        language: 'zh-CN',\n        timezone: 'Asia/Shanghai',\n      },\n      quota: {\n        users: 100,\n        storage: 1024 * 1024 * 1024, // 1GB\n        apiCalls: 10000,\n      },\n      createdAt: now,\n      updatedAt: now,\n      ...overrides,\n    };\n  }\n\n  /**\n   * 创建多个租户测试数据\n   *\n   * @param {number} count - 创建数量\n   * @param {Partial<TenantTestData>} overrides - 覆盖默认值的属性\n   * @returns {TenantTestData[]} 租户测试数据数组\n   */\n  static createMany(\n    count: number,\n    overrides: Partial<TenantTestData> = {},\n  ): TenantTestData[] {\n    return Array.from({ length: count }, (_, index) =>\n      this.create({\n        name: `Test Tenant ${index}`,\n        ...overrides,\n      }),\n    );\n  }\n\n  /**\n   * 创建企业租户\n   *\n   * @param {Partial<TenantTestData>} overrides - 覆盖默认值的属性\n   * @returns {TenantTestData} 企业租户测试数据\n   */\n  static createEnterprise(\n    overrides: Partial<TenantTestData> = {},\n  ): TenantTestData {\n    return this.create({\n      type: 'enterprise',\n      quota: {\n        users: 1000,\n        storage: 10 * 1024 * 1024 * 1024, // 10GB\n        apiCalls: 100000,\n      },\n      ...overrides,\n    });\n  }\n\n  /**\n   * 创建个人租户\n   *\n   * @param {Partial<TenantTestData>} overrides - 覆盖默认值的属性\n   * @returns {TenantTestData} 个人租户测试数据\n   */\n  static createPersonal(\n    overrides: Partial<TenantTestData> = {},\n  ): TenantTestData {\n    return this.create({\n      type: 'personal',\n      quota: {\n        users: 1,\n        storage: 1024 * 1024 * 100, // 100MB\n        apiCalls: 1000,\n      },\n      ...overrides,\n    });\n  }\n}\n\n/**\n * 组织测试数据工厂\n */\nexport class OrganizationTestFactory {\n  /**\n   * 创建单个组织测试数据\n   *\n   * @param {Partial<OrganizationTestData>} overrides - 覆盖默认值的属性\n   * @returns {OrganizationTestData} 组织测试数据\n   */\n  static create(\n    overrides: Partial<OrganizationTestData> = {},\n  ): OrganizationTestData {\n    const now = new Date();\n    return {\n      id: uuidv4(),\n      name: 'Test Organization',\n      type: 'project_team',\n      description: 'Test organization description',\n      tenantId: uuidv4(),\n      status: 'active',\n      createdAt: now,\n      updatedAt: now,\n      ...overrides,\n    };\n  }\n\n  /**\n   * 创建多个组织测试数据\n   *\n   * @param {number} count - 创建数量\n   * @param {Partial<OrganizationTestData>} overrides - 覆盖默认值的属性\n   * @returns {OrganizationTestData[]} 组织测试数据数组\n   */\n  static createMany(\n    count: number,\n    overrides: Partial<OrganizationTestData> = {},\n  ): OrganizationTestData[] {\n    return Array.from({ length: count }, (_, index) =>\n      this.create({\n        name: `Test Organization ${index}`,\n        ...overrides,\n      }),\n    );\n  }\n}\n\n/**\n * 部门测试数据工厂\n */\nexport class DepartmentTestFactory {\n  /**\n   * 创建单个部门测试数据\n   *\n   * @param {Partial<DepartmentTestData>} overrides - 覆盖默认值的属性\n   * @returns {DepartmentTestData} 部门测试数据\n   */\n  static create(\n    overrides: Partial<DepartmentTestData> = {},\n  ): DepartmentTestData {\n    const now = new Date();\n    return {\n      id: uuidv4(),\n      name: 'Test Department',\n      description: 'Test department description',\n      organizationId: uuidv4(),\n      status: 'active',\n      createdAt: now,\n      updatedAt: now,\n      ...overrides,\n    };\n  }\n\n  /**\n   * 创建多个部门测试数据\n   *\n   * @param {number} count - 创建数量\n   * @param {Partial<DepartmentTestData>} overrides - 覆盖默认值的属性\n   * @returns {DepartmentTestData[]} 部门测试数据数组\n   */\n  static createMany(\n    count: number,\n    overrides: Partial<DepartmentTestData> = {},\n  ): DepartmentTestData[] {\n    return Array.from({ length: count }, (_, index) =>\n      this.create({\n        name: `Test Department ${index}`,\n        ...overrides,\n      }),\n    );\n  }\n}\n\n/**\n * 角色测试数据工厂\n */\nexport class RoleTestFactory {\n  /**\n   * 创建单个角色测试数据\n   *\n   * @param {Partial<RoleTestData>} overrides - 覆盖默认值的属性\n   * @returns {RoleTestData} 角色测试数据\n   */\n  static create(overrides: Partial<RoleTestData> = {}): RoleTestData {\n    const now = new Date();\n    return {\n      id: uuidv4(),\n      name: 'Test Role',\n      description: 'Test role description',\n      permissions: ['read', 'write'],\n      level: 'user',\n      status: 'active',\n      createdAt: now,\n      updatedAt: now,\n      ...overrides,\n    };\n  }\n\n  /**\n   * 创建多个角色测试数据\n   *\n   * @param {number} count - 创建数量\n   * @param {Partial<RoleTestData>} overrides - 覆盖默认值的属性\n   * @returns {RoleTestData[]} 角色测试数据数组\n   */\n  static createMany(\n    count: number,\n    overrides: Partial<RoleTestData> = {},\n  ): RoleTestData[] {\n    return Array.from({ length: count }, (_, index) =>\n      this.create({\n        name: `Test Role ${index}`,\n        ...overrides,\n      }),\n    );\n  }\n\n  /**\n   * 创建平台管理员角色\n   *\n   * @param {Partial<RoleTestData>} overrides - 覆盖默认值的属性\n   * @returns {RoleTestData} 平台管理员角色测试数据\n   */\n  static createPlatformAdmin(\n    overrides: Partial<RoleTestData> = {},\n  ): RoleTestData {\n    return this.create({\n      name: 'Platform Admin',\n      permissions: ['*'], // 所有权限\n      level: 'platform',\n      ...overrides,\n    });\n  }\n\n  /**\n   * 创建租户管理员角色\n   *\n   * @param {Partial<RoleTestData>} overrides - 覆盖默认值的属性\n   * @returns {RoleTestData} 租户管理员角色测试数据\n   */\n  static createTenantAdmin(\n    overrides: Partial<RoleTestData> = {},\n  ): RoleTestData {\n    return this.create({\n      name: 'Tenant Admin',\n      permissions: ['tenant:read', 'tenant:write', 'user:read', 'user:write'],\n      level: 'tenant',\n      ...overrides,\n    });\n  }\n}\n\n/**\n * 测试数据工厂集合\n */\nexport const TestFactories = {\n  User: UserTestFactory,\n  Tenant: TenantTestFactory,\n  Organization: OrganizationTestFactory,\n  Department: DepartmentTestFactory,\n  Role: RoleTestFactory,\n};\n\n/**\n * 测试数据清理工具\n */\nexport class TestDataCleaner {\n  /**\n   * 清理测试数据\n   *\n   * @param {any[]} data - 要清理的测试数据数组\n   */\n  static cleanup(data: any[]): void {\n    // 清理测试数据，避免内存泄漏\n    data.forEach(item => {\n      if (item && typeof item === 'object') {\n        Object.keys(item).forEach(key => {\n          delete item[key];\n        });\n      }\n    });\n  }\n\n  /**\n   * 重置测试环境\n   */\n  static reset(): void {\n    // 重置全局测试状态\n    if (typeof jest !== 'undefined') {\n      jest.clearAllMocks();\n      jest.restoreAllMocks();\n    }\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;;AAAA;AAAA,SAAAA,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF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","ignoreList":[]}