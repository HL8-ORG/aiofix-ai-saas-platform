8cac8492cfafa578f904f59d295bc2b7
"use strict";
/**
 * @file database.module.spec.ts
 * @description 数据库模块单元测试
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the adapters to avoid actual database connections
jest.mock('./adapters/postgresql.adapter');
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const database_module_1 = require("./database.module");
describe('DatabaseModule', () => {
    let module;
    beforeEach(async () => {
        module = await testing_1.Test.createTestingModule({
            imports: [
                config_1.ConfigModule.forRoot({
                    isGlobal: true,
                    envFilePath: '.env.test',
                }),
                database_module_1.DatabaseModule.register({
                    postgresql: false, // 禁用PostgreSQL以避免连接测试
                }),
            ],
        }).compile();
    });
    afterEach(async () => {
        if (module) {
            await module.close();
        }
    });
    describe('Module Registration', () => {
        it('should be defined', () => {
            expect(module).toBeDefined();
        });
        it('should have database name provider', () => {
            const name = module.get('DATABASE_NAME');
            expect(name).toBeDefined();
            expect(name).toBe('postgresql');
        });
    });
    describe('Module Structure', () => {
        it('should be a valid NestJS module', () => {
            expect(module).toBeDefined();
            expect(module.get).toBeDefined();
        });
        it('should have DATABASE_NAME provider', () => {
            const name = module.get('DATABASE_NAME');
            expect(name).toBe('postgresql');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJsaWdsZS9WMS9BaW9maXgvYWlvZml4LWFpLXNhYXMtcGxhdGZvcm0vcGFja2FnZXMvZGF0YWJhc2Uvc3JjL2RhdGFiYXNlLm1vZHVsZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7O0FBT0gseURBQXlEO0FBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQU4zQyw2Q0FBc0Q7QUFDdEQsMkNBQThDO0FBQzlDLHVEQUFtRDtBQU1uRCxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO0lBQzlCLElBQUksTUFBcUIsQ0FBQztJQUUxQixVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsTUFBTSxHQUFHLE1BQU0sY0FBSSxDQUFDLG1CQUFtQixDQUFDO1lBQ3RDLE9BQU8sRUFBRTtnQkFDUCxxQkFBWSxDQUFDLE9BQU8sQ0FBQztvQkFDbkIsUUFBUSxFQUFFLElBQUk7b0JBQ2QsV0FBVyxFQUFFLFdBQVc7aUJBQ3pCLENBQUM7Z0JBQ0YsZ0NBQWMsQ0FBQyxRQUFRLENBQUM7b0JBQ3RCLFVBQVUsRUFBRSxLQUFLLEVBQUUsc0JBQXNCO2lCQUMxQyxDQUFDO2FBQ0g7U0FDRixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDZixDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQ1gsTUFBTSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdkIsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtRQUNuQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1lBQzNCLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLEVBQUU7WUFDNUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtRQUNoQyxFQUFFLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO1lBQ3pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM3QixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtZQUM1QyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2FybGlnbGUvVjEvQWlvZml4L2Fpb2ZpeC1haS1zYWFzLXBsYXRmb3JtL3BhY2thZ2VzL2RhdGFiYXNlL3NyYy9kYXRhYmFzZS5tb2R1bGUuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIGRhdGFiYXNlLm1vZHVsZS5zcGVjLnRzXG4gKiBAZGVzY3JpcHRpb24g5pWw5o2u5bqT5qih5Z2X5Y2V5YWD5rWL6K+VXG4gKi9cblxuaW1wb3J0IHsgVGVzdCwgVGVzdGluZ01vZHVsZSB9IGZyb20gJ0BuZXN0anMvdGVzdGluZyc7XG5pbXBvcnQgeyBDb25maWdNb2R1bGUgfSBmcm9tICdAbmVzdGpzL2NvbmZpZyc7XG5pbXBvcnQgeyBEYXRhYmFzZU1vZHVsZSB9IGZyb20gJy4vZGF0YWJhc2UubW9kdWxlJztcbmltcG9ydCB7IERhdGFiYXNlQ29uZmlnIH0gZnJvbSAnLi9jb25maWcvZGF0YWJhc2UuY29uZmlnJztcblxuLy8gTW9jayB0aGUgYWRhcHRlcnMgdG8gYXZvaWQgYWN0dWFsIGRhdGFiYXNlIGNvbm5lY3Rpb25zXG5qZXN0Lm1vY2soJy4vYWRhcHRlcnMvcG9zdGdyZXNxbC5hZGFwdGVyJyk7XG5cbmRlc2NyaWJlKCdEYXRhYmFzZU1vZHVsZScsICgpID0+IHtcbiAgbGV0IG1vZHVsZTogVGVzdGluZ01vZHVsZTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBtb2R1bGUgPSBhd2FpdCBUZXN0LmNyZWF0ZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgaW1wb3J0czogW1xuICAgICAgICBDb25maWdNb2R1bGUuZm9yUm9vdCh7XG4gICAgICAgICAgaXNHbG9iYWw6IHRydWUsXG4gICAgICAgICAgZW52RmlsZVBhdGg6ICcuZW52LnRlc3QnLFxuICAgICAgICB9KSxcbiAgICAgICAgRGF0YWJhc2VNb2R1bGUucmVnaXN0ZXIoe1xuICAgICAgICAgIHBvc3RncmVzcWw6IGZhbHNlLCAvLyDnpoHnlKhQb3N0Z3JlU1FM5Lul6YG/5YWN6L+e5o6l5rWL6K+VXG4gICAgICAgIH0pLFxuICAgICAgXSxcbiAgICB9KS5jb21waWxlKCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaChhc3luYyAoKSA9PiB7XG4gICAgaWYgKG1vZHVsZSkge1xuICAgICAgYXdhaXQgbW9kdWxlLmNsb3NlKCk7XG4gICAgfVxuICB9KTtcblxuICBkZXNjcmliZSgnTW9kdWxlIFJlZ2lzdHJhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGJlIGRlZmluZWQnLCAoKSA9PiB7XG4gICAgICBleHBlY3QobW9kdWxlKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYXZlIGRhdGFiYXNlIG5hbWUgcHJvdmlkZXInLCAoKSA9PiB7XG4gICAgICBjb25zdCBuYW1lID0gbW9kdWxlLmdldCgnREFUQUJBU0VfTkFNRScpO1xuICAgICAgZXhwZWN0KG5hbWUpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QobmFtZSkudG9CZSgncG9zdGdyZXNxbCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnTW9kdWxlIFN0cnVjdHVyZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGJlIGEgdmFsaWQgTmVzdEpTIG1vZHVsZScsICgpID0+IHtcbiAgICAgIGV4cGVjdChtb2R1bGUpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QobW9kdWxlLmdldCkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGF2ZSBEQVRBQkFTRV9OQU1FIHByb3ZpZGVyJywgKCkgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IG1vZHVsZS5nZXQoJ0RBVEFCQVNFX05BTUUnKTtcbiAgICAgIGV4cGVjdChuYW1lKS50b0JlKCdwb3N0Z3Jlc3FsJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=