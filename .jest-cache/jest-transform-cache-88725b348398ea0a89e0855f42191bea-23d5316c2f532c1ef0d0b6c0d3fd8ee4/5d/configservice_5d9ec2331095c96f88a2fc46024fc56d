fd2087f6b9fd2baaeff68ed93f54fd0f
"use strict";
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigService = void 0;
const common_1 = require("@nestjs/common");
const config_loader_1 = require("./config-loader");
const logging_1 = require("@aiofix/logging");
/**
 * @class ConfigService
 * @description
 * IAM系统配置服务，负责管理和提供系统中所有配置信息。
 * 该服务是配置管理的核心组件，提供了配置的加载、获取、验证等功能。
 *
 * 主要原理与机制如下：
 * 1. 使用NestJS的依赖注入机制，作为全局服务提供配置访问
 * 2. 在构造函数中异步初始化配置，确保配置在服务启动时加载完成
 * 3. 使用只读配置对象，防止运行时配置被意外修改
 * 4. 提供类型安全的配置访问方法，支持泛型约束
 * 5. 集成环境变量管理，支持动态配置更新
 * 6. 使用自定义的PinoLoggerService进行日志记录，提供高性能的结构化日志
 *
 * 功能与业务规则：
 * 1. 配置加载和初始化
 * 2. 配置获取和验证
 * 3. 环境变量管理
 * 4. 配置模块化访问
 * 5. 类型安全的配置操作
 * 6. 结构化日志记录
 */
let ConfigService = (() => {
    let _classDecorators = [(0, common_1.Injectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    var ConfigService = _classThis = class {
        /**
         * @constructor
         * @description
         * 配置服务构造函数，在服务实例化时自动初始化配置。
         * 由于构造函数不能是异步的，所以使用void调用异步初始化方法。
         *
         * @param logger 自定义的Pino日志服务实例
         */
        constructor(logger) {
            /** 环境配置对象 */
            this.environment = {
                production: process.env.NODE_ENV === 'production',
                env: {},
            };
            /** 系统配置对象 */
            this.config = {};
            this.logger = logger;
            void this.initConfig();
        }
        /**
         * @function initConfig
         * @description
         * 初始化配置和环境变量。该方法在服务启动时被调用，负责加载所有配置信息
         * 并设置环境变量。由于构造函数不能是异步的，所以使用独立的异步方法。
         *
         * 主要原理与机制如下：
         * 1. 调用getConfig()方法获取完整的配置对象
         * 2. 遍历环境配置，动态设置process.env环境变量
         * 3. 记录生产环境状态到日志中
         * 4. 确保配置在服务启动前完成加载
         * 5. 使用自定义的PinoLoggerService记录结构化日志
         *
         * 功能与业务规则：
         * 1. 配置加载和初始化
         * 2. 环境变量设置
         * 3. 启动状态日志记录
         * 4. 配置验证和错误处理
         * 5. 结构化日志记录
         *
         * @returns {Promise<void>} 返回一个Promise，表示配置初始化过程
         */
        async initConfig() {
            this.config = (0, config_loader_1.getConfig)();
            // 动态设置环境变量
            if (this.environment.env) {
                Object.entries(this.environment.env).forEach(([key, value]) => {
                    process.env[key] = value;
                });
            }
            if (this.logger) {
                this.logger.info(`配置服务初始化完成，生产环境状态: ${this.environment.production}`, logging_1.LogContext.CONFIG, {
                    isProduction: this.environment.production,
                    nodeEnv: process.env.NODE_ENV,
                    configKeys: Object.keys(this.config),
                });
            }
        }
        /**
         * @function getConfig
         * @description
         * 获取完整的配置对象，返回一个只读的配置副本。该方法提供了对系统所有配置的访问，
         * 同时确保返回的配置对象不会被意外修改。
         *
         * 主要原理与机制如下：
         * 1. 使用Object.freeze()创建不可变的配置对象
         * 2. 使用展开运算符创建配置对象的深拷贝
         * 3. 返回只读类型，防止运行时修改
         * 4. 提供类型安全的配置访问
         * 5. 记录配置访问日志，便于审计和调试
         *
         * 功能与业务规则：
         * 1. 完整配置获取
         * 2. 配置对象保护
         * 3. 类型安全访问
         * 4. 配置完整性保证
         * 5. 配置访问审计
         *
         * @returns {Readonly<Partial<IamConfig>>} 返回只读的完整配置对象
         */
        getConfig() {
            this.logger.debug('获取完整配置对象', logging_1.LogContext.CONFIG, {
                configKeys: Object.keys(this.config),
                timestamp: new Date().toISOString(),
            });
            return Object.freeze({ ...this.config });
        }
        /**
         * @function getConfigValue
         * @description
         * 获取指定的配置值，支持泛型类型安全。该方法提供了对特定配置模块的访问，
         * 如果配置键不存在会抛出错误。
         *
         * 主要原理与机制如下：
         * 1. 使用泛型K约束配置键的类型
         * 2. 检查配置键是否存在，不存在则抛出错误
         * 3. 返回只读的配置值，确保类型安全
         * 4. 支持TypeScript的类型推断
         * 5. 记录配置访问日志，便于审计和调试
         *
         * 功能与业务规则：
         * 1. 特定配置获取
         * 2. 配置键验证
         * 3. 类型安全访问
         * 4. 错误处理和提示
         * 5. 配置访问审计
         *
         * @template K - 配置键的类型
         * @param {K} key - 要获取的配置键
         * @returns {Readonly<IamConfig[K]>} 返回只读的配置值
         * @throws {Error} 当配置键不存在时抛出错误
         */
        getConfigValue(key) {
            if (!(key in this.config)) {
                this.logger.error(`配置键不存在: ${String(key)}`, logging_1.LogContext.CONFIG, {
                    requestedKey: String(key),
                    availableKeys: Object.keys(this.config),
                    timestamp: new Date().toISOString(),
                });
                throw new Error(`Configuration key "${String(key)}" not found.`);
            }
            this.logger.debug(`获取配置值: ${String(key)}`, logging_1.LogContext.CONFIG, {
                configKey: String(key),
                timestamp: new Date().toISOString(),
            });
            return this.config[key];
        }
        /**
         * @getter appConfig
         * @description
         * 获取应用基础配置，包含应用名称、版本、环境等基础信息。
         *
         * @returns {Readonly<Record<string, unknown>>} 返回只读的应用配置对象
         */
        get appConfig() {
            return this.config.app ?? {};
        }
        /**
         * @getter databaseConfig
         * @description
         * 获取数据库配置，包含数据库连接、ORM配置、连接池等设置。
         *
         * @returns {Readonly<Record<string, unknown>>} 返回只读的数据库配置对象
         */
        get databaseConfig() {
            return this.config.database ?? {};
        }
        /**
         * @getter redisConfig
         * @description
         * 获取Redis缓存配置，包含连接信息、缓存策略、分布式锁等设置。
         *
         * @returns {Readonly<Record<string, unknown>>} 返回只读的Redis配置对象
         */
        get redisConfig() {
            return this.config.redis ?? {};
        }
        /**
         * @getter jwtConfig
         * @description
         * 获取JWT认证配置，包含密钥、令牌过期时间、多租户支持等设置。
         *
         * @returns {Readonly<Record<string, unknown>>} 返回只读的JWT配置对象
         */
        get jwtConfig() {
            return this.config.jwt ?? {};
        }
        /**
         * @getter emailConfig
         * @description
         * 获取邮件服务配置，包含SMTP设置、邮件模板、发送策略等配置。
         *
         * @returns {Readonly<Record<string, unknown>>} 返回只读的邮件配置对象
         */
        get emailConfig() {
            return this.config.email ?? {};
        }
        /**
         * @getter loggingConfig
         * @description
         * 获取日志系统配置，包含日志级别、输出格式、聚合设置等配置。
         *
         * @returns {Readonly<Record<string, unknown>>} 返回只读的日志配置对象
         */
        get loggingConfig() {
            return this.config.logging ?? {};
        }
        /**
         * @getter settingConfig
         * @description
         * 获取系统设置配置，包含系统级配置项和全局设置。
         *
         * @returns {Readonly<Record<string, unknown>>} 返回只读的系统设置配置对象
         */
        get settingConfig() {
            return this.config.setting ?? {};
        }
        /**
         * @getter keycloakConfig
         * @description
         * 获取Keycloak集成配置，包含第三方认证服务的连接和设置。
         *
         * @returns {Readonly<Record<string, unknown>>} 返回只读的Keycloak配置对象
         */
        get keycloakConfig() {
            return this.config.keycloak ?? {};
        }
        /**
         * @getter dbMikroOrmConnectionOptions
         * @description
         * 获取MikroORM连接配置选项，用于数据库连接和ORM操作。
         *
         * @returns {Readonly<MikroOrmModuleOptions>} 返回只读的MikroORM配置对象
         */
        get dbMikroOrmConnectionOptions() {
            return this.config.database?.dbMikroOrmConnectionOptions ?? {};
        }
        /**
         * @getter dbKnexConnectionOptions
         * @description
         * 获取Knex连接配置选项，用于复杂查询和数据库迁移。
         *
         * @returns {Readonly<KnexModuleOptions>} 返回只读的Knex配置对象
         */
        get dbKnexConnectionOptions() {
            return (this.config.database?.dbKnexConnectionOptions ?? {
                config: {},
            });
        }
        /**
         * @function get
         * @description
         * 获取环境变量值，支持类型推断。该方法提供了对环境变量的类型安全访问，
         * 如果环境变量不存在会抛出错误。
         *
         * 主要原理与机制如下：
         * 1. 使用泛型K约束环境变量键的类型
         * 2. 检查环境变量是否存在，不存在则抛出错误
         * 3. 返回类型安全的环境变量值
         * 4. 支持TypeScript的类型推断和自动补全
         * 5. 记录环境变量访问日志，便于审计和调试
         *
         * 功能与业务规则：
         * 1. 环境变量获取
         * 2. 类型安全访问
         * 3. 错误处理和提示
         * 4. 环境变量验证
         * 5. 环境变量访问审计
         *
         * @template K - 环境变量键的类型
         * @param {K} key - 要获取的环境变量键
         * @returns {string} 返回对应的环境变量值
         * @throws {Error} 当环境变量不存在时抛出错误
         */
        get(key) {
            const value = process.env[key];
            if (!value) {
                this.logger.error(`环境变量未定义: ${key}`, logging_1.LogContext.CONFIG, {
                    requestedKey: key,
                    availableEnvVars: Object.keys(process.env).filter(k => k.startsWith('DB_') || k.startsWith('LOG_') || k.startsWith('JWT_')),
                    timestamp: new Date().toISOString(),
                });
                throw new Error(`Environment variable "${key}" is not defined.`);
            }
            this.logger.debug(`获取环境变量: ${key}`, logging_1.LogContext.CONFIG, {
                envKey: key,
                hasValue: !!value,
                timestamp: new Date().toISOString(),
            });
            return value;
        }
        /**
         * @function isProd
         * @description
         * 检查应用是否运行在生产环境模式。该方法用于判断当前运行环境，
         * 帮助应用根据环境调整行为。
         *
         * 主要原理与机制如下：
         * 1. 从环境配置中获取production标志
         * 2. 返回布尔值表示是否为生产环境
         * 3. 用于条件逻辑和环境相关配置
         *
         * 功能与业务规则：
         * 1. 环境判断
         * 2. 条件逻辑支持
         * 3. 环境相关配置
         * 4. 调试和部署支持
         *
         * @returns {boolean} 返回true表示生产环境，false表示非生产环境
         */
        isProd() {
            return this.environment.production;
        }
    };
    __setFunctionName(_classThis, "ConfigService");
    (() => {
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        ConfigService = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return ConfigService = _classThis;
})();
exports.ConfigService = ConfigService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,