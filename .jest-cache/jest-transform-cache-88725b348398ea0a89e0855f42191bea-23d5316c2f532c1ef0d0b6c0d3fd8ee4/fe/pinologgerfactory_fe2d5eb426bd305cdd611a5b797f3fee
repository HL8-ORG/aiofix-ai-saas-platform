d796bbf541a70e7d9d939a1cd9a289da
"use strict";
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinoLoggerFactory = void 0;
const common_1 = require("@nestjs/common");
const pino_1 = __importDefault(require("pino"));
/**
 * @class PinoLoggerFactory
 * @description
 * Pino日志器工厂类，负责创建和配置Pino日志实例。
 *
 * 主要功能包括：
 * 1. 根据配置创建Pino实例
 * 2. 配置传输器和格式化器
 * 3. 处理不同环境的配置差异
 * 4. 提供日志器创建的统一接口
 *
 * 设计原则：
 * - 工厂模式：统一创建Pino实例
 * - 配置驱动：根据配置动态调整
 * - 环境适配：自动适配不同环境
 */
let PinoLoggerFactory = (() => {
    let _classDecorators = [(0, common_1.Injectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    var PinoLoggerFactory = _classThis = class {
        constructor(configService) {
            this.configService = configService;
        }
        /**
         * @method createLogger
         * @description 创建Pino日志器实例
         * @returns {pino.Logger} Pino日志器实例
         */
        createLogger() {
            const config = this.configService.getConfig();
            const pinoOptions = this.buildPinoOptions(config);
            return (0, pino_1.default)(pinoOptions);
        }
        /**
         * @method createChildLogger
         * @description 创建子日志器
         * @param {pino.Logger} parentLogger 父日志器
         * @param {Record<string, any>} childOptions 子日志器选项
         * @returns {pino.Logger} 子日志器实例
         */
        createChildLogger(parentLogger, childOptions) {
            return parentLogger.child(childOptions);
        }
        /**
         * @method rebuildLogger
         * @description 重新构建日志器（用于配置更新后）
         * @param {pino.Logger} existingLogger 现有日志器
         * @returns {pino.Logger} 新的日志器实例
         */
        rebuildLogger(existingLogger) {
            // 如果存在现有日志器，先关闭它
            if (existingLogger && existingLogger.flush) {
                existingLogger.flush();
            }
            return this.createLogger();
        }
        /**
         * @private
         * @method buildPinoOptions
         * @description 构建Pino配置选项
         * @param {LogConfig} config 日志配置
         * @returns {pino.LoggerOptions} Pino配置选项
         */
        buildPinoOptions(config) {
            const pinoOptions = {
                level: config.level,
                timestamp: config.timestamp ? pino_1.default.stdTimeFunctions.isoTime : false,
            };
            // 配置传输器
            this.configureTransport(pinoOptions, config);
            return pinoOptions;
        }
        /**
         * @private
         * @method configureTransport
         * @description 配置传输器
         * @param {pino.LoggerOptions} pinoOptions Pino配置选项
         * @param {LogConfig} config 日志配置
         */
        configureTransport(pinoOptions, config) {
            // 在开发环境中使用pino-pretty进行格式化
            if (this.configService.shouldUsePrettyFormat()) {
                pinoOptions.transport = {
                    target: 'pino-pretty',
                    options: {
                        colorize: config.colorize,
                        translateTime: 'SYS:standard',
                        ignore: 'pid,hostname',
                    },
                };
            }
            // 配置文件传输（如果指定了文件路径）
            if (config.filePath) {
                this.configureFileTransport(pinoOptions, config);
            }
            // 配置远程传输（如果启用了远程日志）
            if (config.remote) {
                this.configureRemoteTransport(pinoOptions, config);
            }
        }
        /**
         * @private
         * @method configureFileTransport
         * @description 配置文件传输
         * @param {pino.LoggerOptions} pinoOptions Pino配置选项
         * @param {LogConfig} config 日志配置
         */
        configureFileTransport(pinoOptions, config) {
            if (!config.filePath)
                return;
            const fileTransport = {
                target: 'pino/file',
                level: config.level,
                options: {
                    destination: config.filePath,
                },
            };
            // 如果已经有transport配置，使用targets数组
            if (pinoOptions.transport) {
                if (Array.isArray(pinoOptions.transport.targets)) {
                    pinoOptions.transport.targets.push(fileTransport);
                }
                else {
                    pinoOptions.transport = {
                        targets: [pinoOptions.transport, fileTransport],
                    };
                }
            }
            else {
                pinoOptions.transport = fileTransport;
            }
        }
        /**
         * @private
         * @method configureRemoteTransport
         * @description 配置远程传输
         * @param {pino.LoggerOptions} pinoOptions Pino配置选项
         * @param {LogConfig} config 日志配置
         */
        configureRemoteTransport(pinoOptions, config) {
            if (!config.remote)
                return;
            const remoteTransport = {
                target: 'pino-http-send',
                level: config.level,
                options: {
                    destination: config.remote.url,
                    headers: {
                        Authorization: config.remote.token
                            ? `Bearer ${config.remote.token}`
                            : undefined,
                        'Content-Type': 'application/json',
                    },
                    timeout: config.remote.timeout,
                    retries: config.remote.retries,
                },
            };
            // 如果已经有transport配置，使用targets数组
            if (pinoOptions.transport) {
                if (Array.isArray(pinoOptions.transport.targets)) {
                    pinoOptions.transport.targets.push(remoteTransport);
                }
                else {
                    pinoOptions.transport = {
                        targets: [pinoOptions.transport, remoteTransport],
                    };
                }
            }
            else {
                pinoOptions.transport = remoteTransport;
            }
        }
    };
    __setFunctionName(_classThis, "PinoLoggerFactory");
    (() => {
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        PinoLoggerFactory = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return PinoLoggerFactory = _classThis;
})();
exports.PinoLoggerFactory = PinoLoggerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,