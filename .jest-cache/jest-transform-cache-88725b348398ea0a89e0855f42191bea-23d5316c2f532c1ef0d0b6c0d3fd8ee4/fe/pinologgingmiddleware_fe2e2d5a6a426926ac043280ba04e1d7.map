{"version":3,"names":["cov_11bqy023sr","actualCoverage","common_1","s","require","uuid_1","pino_logger_service_1","logging_interface_1","PinoLoggingMiddleware","constructor","logger","f","use","req","res","next","startTime","Date","now","requestId","generateRequestId","tenantId","extractTenantId","userId","extractUserId","requestLogData","method","url","headers","query","body","ip","getClientIp","userAgent","b","timestamp","logRequest","responseBody","responseSize","originalSend","send","payload","length","JSON","stringify","duration","responseLogData","statusCode","setImmediate","logResponse","call","v4","headerTenantId","String","queryTenantId","tenant_id","bodyTenantId","undefined","headerUserId","queryUserId","user_id","bodyUserId","socket","remoteAddress","data","info","LogContext","HTTP_REQUEST","sanitizeBody","sanitizeHeaders","logLevel","logMethod","sensitiveFields","sanitized","forEach","field","sensitiveHeaders","header","exports","__decorate","Injectable","PinoLoggerService","_a","Object"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/middleware/pino-logging.middleware.ts"],"sourcesContent":["import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { FastifyRequest, FastifyReply } from 'fastify';\nimport { v4 as uuidv4 } from 'uuid';\nimport { PinoLoggerService } from '../services/pino-logger.service';\nimport { LogContext } from '../interfaces/logging.interface';\n\n/**\n * @interface RequestLogData\n * @description 请求日志数据接口\n */\ninterface RequestLogData {\n  requestId: string;\n  method: string;\n  url: string;\n  headers: Record<string, string>;\n  query: Record<string, unknown>;\n  body: unknown;\n  ip: string;\n  userAgent: string;\n  tenantId?: string;\n  userId?: string;\n  timestamp: Date;\n}\n\n/**\n * @interface ResponseLogData\n * @description 响应日志数据接口\n */\ninterface ResponseLogData extends RequestLogData {\n  statusCode: number;\n  duration: number;\n  responseSize?: number;\n  error?: Error;\n}\n\n/**\n * @class PinoLoggingMiddleware\n * @description Pino日志中间件，用于记录HTTP请求和响应日志\n *\n * 主要功能：\n * 1. 自动生成请求ID\n * 2. 记录请求详情（方法、URL、头部、查询参数、请求体）\n * 3. 记录响应详情（状态码、响应时间、响应大小）\n * 4. 支持多租户和用户上下文\n * 5. 错误日志记录\n * 6. 性能监控\n */\n@Injectable()\nexport class PinoLoggingMiddleware implements NestMiddleware {\n  constructor(private readonly logger: PinoLoggerService) {}\n\n  /**\n   * @method use\n   * @description 中间件主方法，处理HTTP请求和响应日志\n   * @param {FastifyRequest} req Fastify请求对象\n   * @param {FastifyReply} res Fastify响应对象\n   * @param {() => void} next 下一个中间件函数\n   */\n  use(req: FastifyRequest, res: FastifyReply, next: () => void): void {\n    const startTime = Date.now();\n    const requestId = this.generateRequestId();\n    const tenantId = this.extractTenantId(req);\n    const userId = this.extractUserId(req);\n\n    // 构建请求日志数据\n    const requestLogData: RequestLogData = {\n      requestId,\n      method: req.method,\n      url: req.url,\n      headers: req.headers as Record<string, string>,\n      query: req.query as Record<string, unknown>,\n      body: req.body,\n      ip: this.getClientIp(req),\n      userAgent: req.headers['user-agent'] || '',\n      tenantId,\n      userId,\n      timestamp: new Date(),\n    };\n\n    // 记录请求日志\n    this.logRequest(requestLogData);\n\n    // 设置响应变量\n    let responseBody: unknown;\n    let responseSize = 0;\n\n    // Fastify的响应处理\n    const originalSend = res.send;\n    res.send = (payload?: unknown): FastifyReply => {\n      if (payload && !responseBody) {\n        responseBody = payload;\n        responseSize =\n          typeof payload === 'string'\n            ? payload.length\n            : JSON.stringify(payload).length;\n      }\n\n      // 记录响应日志\n      const duration = Date.now() - startTime;\n      const responseLogData: ResponseLogData = {\n        ...requestLogData,\n        statusCode: res.statusCode,\n        duration,\n        responseSize,\n      };\n\n      // 异步记录日志，不阻塞响应\n      setImmediate(() => {\n        this.logResponse(responseLogData);\n      });\n\n      return originalSend.call(res, payload);\n    };\n\n    next();\n  }\n\n  /**\n   * @private\n   * @method generateRequestId\n   * @description 生成请求ID\n   * @returns {string} 请求ID\n   */\n  private generateRequestId(): string {\n    return uuidv4();\n  }\n\n  /**\n   * @private\n   * @method extractTenantId\n   * @description 从请求中提取租户ID\n   * @param {FastifyRequest} req Fastify请求对象\n   * @returns {string | undefined} 租户ID\n   */\n  private extractTenantId(req: FastifyRequest): string | undefined {\n    // 从请求头中提取\n    const headerTenantId =\n      req.headers['x-tenant-id'] || req.headers['X-Tenant-ID'];\n    if (headerTenantId) return String(headerTenantId);\n\n    // 从查询参数中提取\n    const queryTenantId =\n      (req.query as Record<string, unknown>)?.tenantId ||\n      (req.query as Record<string, unknown>)?.tenant_id;\n    if (queryTenantId) return String(queryTenantId);\n\n    // 从请求体中提取\n    const bodyTenantId =\n      (req.body as Record<string, unknown>)?.tenantId ||\n      (req.body as Record<string, unknown>)?.tenant_id;\n    if (bodyTenantId) return String(bodyTenantId);\n\n    return undefined;\n  }\n\n  /**\n   * @private\n   * @method extractUserId\n   * @description 从请求中提取用户ID\n   * @param {FastifyRequest} req Fastify请求对象\n   * @returns {string | undefined} 用户ID\n   */\n  private extractUserId(req: FastifyRequest): string | undefined {\n    // 从请求头中提取\n    const headerUserId = req.headers['x-user-id'] || req.headers['X-User-ID'];\n    if (headerUserId) return String(headerUserId);\n\n    // 从查询参数中提取\n    const queryUserId =\n      (req.query as Record<string, unknown>)?.userId ||\n      (req.query as Record<string, unknown>)?.user_id;\n    if (queryUserId) return String(queryUserId);\n\n    // 从请求体中提取\n    const bodyUserId =\n      (req.body as Record<string, unknown>)?.userId ||\n      (req.body as Record<string, unknown>)?.user_id;\n    if (bodyUserId) return String(bodyUserId);\n\n    return undefined;\n  }\n\n  /**\n   * @private\n   * @method getClientIp\n   * @description 获取客户端IP地址\n   * @param {FastifyRequest} req Fastify请求对象\n   * @returns {string} 客户端IP地址\n   */\n  private getClientIp(req: FastifyRequest): string {\n    return (\n      (req.headers['x-forwarded-for'] as string) ||\n      (req.headers['x-real-ip'] as string) ||\n      req.ip ||\n      req.socket.remoteAddress ||\n      'unknown'\n    );\n  }\n\n  /**\n   * @private\n   * @method logRequest\n   * @description 记录请求日志\n   * @param {RequestLogData} data 请求日志数据\n   */\n  private logRequest(data: RequestLogData): void {\n    this.logger.info('HTTP Request', LogContext.HTTP_REQUEST, {\n      requestId: data.requestId,\n      method: data.method,\n      url: data.url,\n      ip: data.ip,\n      userAgent: data.userAgent,\n      tenantId: data.tenantId,\n      userId: data.userId,\n      query: data.query,\n      body: this.sanitizeBody(data.body),\n      headers: this.sanitizeHeaders(data.headers),\n    });\n  }\n\n  /**\n   * @private\n   * @method logResponse\n   * @description 记录响应日志\n   * @param {ResponseLogData} data 响应日志数据\n   */\n  private logResponse(data: ResponseLogData): void {\n    const logLevel = data.statusCode >= 400 ? 'warn' : 'info';\n    const logMethod = this.logger[logLevel as keyof PinoLoggerService] as (\n      message: string,\n      context: LogContext,\n      metadata?: Record<string, unknown>,\n    ) => void;\n\n    logMethod.call(this.logger, 'HTTP Response', LogContext.HTTP_REQUEST, {\n      requestId: data.requestId,\n      method: data.method,\n      url: data.url,\n      statusCode: data.statusCode,\n      duration: data.duration,\n      responseSize: data.responseSize,\n      tenantId: data.tenantId,\n      userId: data.userId,\n    });\n  }\n\n  /**\n   * @private\n   * @method logError\n   * @description 记录错误日志\n   * @param {ResponseLogData} data 错误日志数据\n   */\n  // private logError(data: ResponseLogData): void {\n  //   this.logger.error('HTTP Error', LogContext.HTTP_REQUEST, {\n  //     requestId: data.requestId,\n  //     method: data.method,\n  //     url: data.url,\n  //     statusCode: data.statusCode,\n  //     duration: data.duration,\n  //     error: data.error?.message,\n  //     stack: data.error?.stack,\n  //     tenantId: data.tenantId,\n  //     userId: data.userId,\n  //   });\n  // }\n\n  /**\n   * @private\n   * @method sanitizeBody\n   * @description 清理请求体中的敏感信息\n   * @param {unknown} body 请求体\n   * @returns {unknown} 清理后的请求体\n   */\n  private sanitizeBody(body: unknown): unknown {\n    if (!body || typeof body !== 'object') return body;\n\n    const sensitiveFields = ['password', 'token', 'secret', 'key'];\n    const sanitized = { ...(body as Record<string, unknown>) };\n\n    sensitiveFields.forEach(field => {\n      if (sanitized[field]) {\n        sanitized[field] = '***REDACTED***';\n      }\n    });\n\n    return sanitized;\n  }\n\n  /**\n   * @private\n   * @method sanitizeHeaders\n   * @description 清理请求头中的敏感信息\n   * @param {Record<string, string>} headers 请求头\n   * @returns {Record<string, string>} 清理后的请求头\n   */\n  private sanitizeHeaders(\n    headers: Record<string, string>,\n  ): Record<string, string> {\n    const sensitiveHeaders = ['authorization', 'cookie', 'x-api-key'];\n    const sanitized = { ...headers };\n\n    sensitiveHeaders.forEach(header => {\n      if (sanitized[header]) {\n        sanitized[header] = '***REDACTED***';\n      }\n    });\n\n    return sanitized;\n  }\n}\n"],"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","ignoreList":[]}