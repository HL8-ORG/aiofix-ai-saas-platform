{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/factories/pino-logger.factory.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/factories/pino-logger.factory.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport pino from 'pino';\nimport { LogConfig } from '../interfaces/logging.interface';\nimport { PinoLoggerConfigService } from '../services/pino-logger-config.service';\n\n/**\n * @class PinoLoggerFactory\n * @description\n * Pino日志器工厂类，负责创建和配置Pino日志实例。\n *\n * 主要功能包括：\n * 1. 根据配置创建Pino实例\n * 2. 配置传输器和格式化器\n * 3. 处理不同环境的配置差异\n * 4. 提供日志器创建的统一接口\n *\n * 设计原则：\n * - 工厂模式：统一创建Pino实例\n * - 配置驱动：根据配置动态调整\n * - 环境适配：自动适配不同环境\n */\n@Injectable()\nexport class PinoLoggerFactory {\n  constructor(private readonly configService: PinoLoggerConfigService) {}\n\n  /**\n   * @method createLogger\n   * @description 创建Pino日志器实例\n   * @returns {pino.Logger} Pino日志器实例\n   */\n  createLogger(): pino.Logger {\n    const config = this.configService.getConfig();\n    const pinoOptions = this.buildPinoOptions(config);\n    return pino(pinoOptions);\n  }\n\n  /**\n   * @method createChildLogger\n   * @description 创建子日志器\n   * @param {pino.Logger} parentLogger 父日志器\n   * @param {Record<string, any>} childOptions 子日志器选项\n   * @returns {pino.Logger} 子日志器实例\n   */\n  createChildLogger(\n    parentLogger: pino.Logger,\n    childOptions: Record<string, any>,\n  ): pino.Logger {\n    return parentLogger.child(childOptions);\n  }\n\n  /**\n   * @method rebuildLogger\n   * @description 重新构建日志器（用于配置更新后）\n   * @param {pino.Logger} existingLogger 现有日志器\n   * @returns {pino.Logger} 新的日志器实例\n   */\n  rebuildLogger(existingLogger?: pino.Logger): pino.Logger {\n    // 如果存在现有日志器，先关闭它\n    if (existingLogger && existingLogger.flush) {\n      existingLogger.flush();\n    }\n\n    return this.createLogger();\n  }\n\n  /**\n   * @private\n   * @method buildPinoOptions\n   * @description 构建Pino配置选项\n   * @param {LogConfig} config 日志配置\n   * @returns {pino.LoggerOptions} Pino配置选项\n   */\n  private buildPinoOptions(config: LogConfig): pino.LoggerOptions {\n    const pinoOptions: pino.LoggerOptions = {\n      level: config.level,\n      timestamp: config.timestamp ? pino.stdTimeFunctions.isoTime : false,\n    };\n\n    // 配置传输器\n    this.configureTransport(pinoOptions, config);\n\n    return pinoOptions;\n  }\n\n  /**\n   * @private\n   * @method configureTransport\n   * @description 配置传输器\n   * @param {pino.LoggerOptions} pinoOptions Pino配置选项\n   * @param {LogConfig} config 日志配置\n   */\n  private configureTransport(\n    pinoOptions: pino.LoggerOptions,\n    config: LogConfig,\n  ): void {\n    // 在开发环境中使用pino-pretty进行格式化\n    if (this.configService.shouldUsePrettyFormat()) {\n      pinoOptions.transport = {\n        target: 'pino-pretty',\n        options: {\n          colorize: config.colorize,\n          translateTime: 'SYS:standard',\n          ignore: 'pid,hostname',\n        },\n      };\n    }\n\n    // 配置文件传输（如果指定了文件路径）\n    if (config.filePath) {\n      this.configureFileTransport(pinoOptions, config);\n    }\n\n    // 配置远程传输（如果启用了远程日志）\n    if (config.remote) {\n      this.configureRemoteTransport(pinoOptions, config);\n    }\n  }\n\n  /**\n   * @private\n   * @method configureFileTransport\n   * @description 配置文件传输\n   * @param {pino.LoggerOptions} pinoOptions Pino配置选项\n   * @param {LogConfig} config 日志配置\n   */\n  private configureFileTransport(\n    pinoOptions: pino.LoggerOptions,\n    config: LogConfig,\n  ): void {\n    if (!config.filePath) return;\n\n    const fileTransport = {\n      target: 'pino/file',\n      level: config.level,\n      options: {\n        destination: config.filePath,\n      },\n    };\n\n    // 如果已经有transport配置，使用targets数组\n    if (pinoOptions.transport) {\n      if (Array.isArray((pinoOptions.transport as any).targets)) {\n        (pinoOptions.transport as any).targets.push(fileTransport);\n      } else {\n        pinoOptions.transport = {\n          targets: [pinoOptions.transport, fileTransport],\n        } as any;\n      }\n    } else {\n      pinoOptions.transport = fileTransport;\n    }\n  }\n\n  /**\n   * @private\n   * @method configureRemoteTransport\n   * @description 配置远程传输\n   * @param {pino.LoggerOptions} pinoOptions Pino配置选项\n   * @param {LogConfig} config 日志配置\n   */\n  private configureRemoteTransport(\n    pinoOptions: pino.LoggerOptions,\n    config: LogConfig,\n  ): void {\n    if (!config.remote) return;\n\n    const remoteTransport = {\n      target: 'pino-http-send',\n      level: config.level,\n      options: {\n        destination: config.remote.url,\n        headers: {\n          Authorization: config.remote.token\n            ? `Bearer ${config.remote.token}`\n            : undefined,\n          'Content-Type': 'application/json',\n        },\n        timeout: config.remote.timeout,\n        retries: config.remote.retries,\n      },\n    };\n\n    // 如果已经有transport配置，使用targets数组\n    if (pinoOptions.transport) {\n      if (Array.isArray((pinoOptions.transport as any).targets)) {\n        (pinoOptions.transport as any).targets.push(remoteTransport);\n      } else {\n        pinoOptions.transport = {\n          targets: [pinoOptions.transport, remoteTransport],\n        } as any;\n      }\n    } else {\n      pinoOptions.transport = remoteTransport;\n    }\n  }\n}\n"],"version":3}