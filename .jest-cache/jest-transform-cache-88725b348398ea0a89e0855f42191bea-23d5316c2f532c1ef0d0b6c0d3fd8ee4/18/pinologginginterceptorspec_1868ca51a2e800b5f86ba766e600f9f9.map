{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/interceptors/pino-logging.interceptor.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/interceptors/pino-logging.interceptor.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ExecutionContext, CallHandler } from '@nestjs/common';\nimport { of, throwError } from 'rxjs';\nimport { PinoLoggingInterceptor } from './pino-logging.interceptor';\nimport { PinoLoggerService } from '../services/pino-logger.service';\nimport { LogContext } from '../interfaces/logging.interface';\n\ndescribe('PinoLoggingInterceptor', () => {\n  let interceptor: PinoLoggingInterceptor;\n  let logger: PinoLoggerService;\n  let mockExecutionContext: ExecutionContext;\n  let mockCallHandler: CallHandler;\n\n  beforeEach(async () => {\n    const mockLogger = {\n      debug: jest.fn(),\n      info: jest.fn(),\n      error: jest.fn(),\n      performance: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        {\n          provide: PinoLoggingInterceptor,\n          useFactory: (logger: PinoLoggerService) => {\n            return new PinoLoggingInterceptor(logger);\n          },\n          inject: [PinoLoggerService],\n        },\n        {\n          provide: PinoLoggerService,\n          useValue: mockLogger,\n        },\n      ],\n    }).compile();\n\n    interceptor = module.get<PinoLoggingInterceptor>(PinoLoggingInterceptor);\n    logger = module.get<PinoLoggerService>(PinoLoggerService);\n\n    // 重置模拟\n    jest.clearAllMocks();\n  });\n\n  beforeEach(() => {\n    // 设置模拟执行上下文\n    mockExecutionContext = {\n      getHandler: jest.fn().mockReturnValue({ name: 'testMethod' }),\n      getClass: jest.fn().mockReturnValue({ name: 'TestController' }),\n      getArgs: jest.fn().mockReturnValue([\n        {\n          method: 'GET',\n          requestId: 'req-123',\n          tenantId: 'tenant-123',\n          userId: 'user-456',\n        },\n        { statusCode: 200 },\n        { id: 1, name: 'test' },\n      ]),\n      switchToHttp: jest.fn().mockReturnValue({\n        getRequest: jest.fn().mockReturnValue({\n          requestId: 'req-123',\n          tenantId: 'tenant-123',\n          userId: 'user-456',\n        }),\n      }),\n    } as unknown;\n\n    // 设置模拟调用处理器\n    mockCallHandler = {\n      handle: jest.fn().mockReturnValue(of({ success: true, data: 'test' })),\n    };\n  });\n\n  it('should be defined', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  describe('successful method execution', () => {\n    it('should log method start and success', done => {\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: result => {\n          expect(logger.debug).toHaveBeenCalledWith(\n            'Method Start: TestController.testMethod',\n            LogContext.BUSINESS,\n            expect.objectContaining({\n              methodId: expect.any(String),\n              className: 'TestController',\n              methodName: 'testMethod',\n              requestId: 'req-123',\n              tenantId: 'tenant-123',\n              userId: 'user-456',\n              parameters: [{ id: 1, name: 'test' }],\n            }),\n          );\n\n          expect(logger.info).toHaveBeenCalledWith(\n            expect.stringMatching(\n              /Method Success: TestController\\.testMethod - \\d+ms/,\n            ),\n            LogContext.BUSINESS,\n            expect.objectContaining({\n              methodId: expect.any(String),\n              className: 'TestController',\n              methodName: 'testMethod',\n              requestId: 'req-123',\n              tenantId: 'tenant-123',\n              userId: 'user-456',\n              result: { success: true, data: 'test' },\n              duration: expect.any(Number),\n            }),\n          );\n\n          expect(logger.performance).toHaveBeenCalledWith(\n            'method_execution',\n            expect.any(Number),\n            LogContext.PERFORMANCE,\n            expect.objectContaining({\n              methodId: expect.any(String),\n              className: 'TestController',\n              methodName: 'testMethod',\n            }),\n          );\n\n          expect(result).toEqual({ success: true, data: 'test' });\n          done();\n        },\n        error: done,\n      });\n    });\n\n    it('should generate unique method ID for each call', done => {\n      const methodIds: string[] = [];\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: () => {\n          const debugCall = (logger.debug as jest.Mock).mock.calls[0];\n          const methodId = debugCall[2].methodId;\n          methodIds.push(methodId);\n\n          interceptor\n            .intercept(mockExecutionContext, mockCallHandler)\n            .subscribe({\n              next: () => {\n                const secondDebugCall = (logger.debug as jest.Mock).mock\n                  .calls[1];\n                const secondMethodId = secondDebugCall[2].methodId;\n                methodIds.push(secondMethodId);\n\n                expect(methodIds[0]).not.toBe(methodIds[1]);\n                expect(methodIds[0]).toMatch(\n                  /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/,\n                );\n                expect(methodIds[1]).toMatch(\n                  /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/,\n                );\n                done();\n              },\n              error: done,\n            });\n        },\n        error: done,\n      });\n    });\n  });\n\n  describe('method execution with error', () => {\n    it('should log method start and error', done => {\n      const testError = new Error('Test error');\n      mockCallHandler.handle = jest\n        .fn()\n        .mockReturnValue(throwError(() => testError));\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: () => {\n          done(new Error('Should not reach here'));\n        },\n        error: error => {\n          expect(logger.debug).toHaveBeenCalledWith(\n            'Method Start: TestController.testMethod',\n            LogContext.BUSINESS,\n            expect.objectContaining({\n              methodId: expect.any(String),\n              className: 'TestController',\n              methodName: 'testMethod',\n            }),\n          );\n\n          expect(logger.error).toHaveBeenCalledWith(\n            expect.stringMatching(\n              /Method Error: TestController\\.testMethod - \\d+ms/,\n            ),\n            LogContext.BUSINESS,\n            expect.objectContaining({\n              methodId: expect.any(String),\n              className: 'TestController',\n              methodName: 'testMethod',\n              parameters: [{ id: 1, name: 'test' }],\n              duration: expect.any(Number),\n            }),\n            testError,\n          );\n\n          expect(error).toBe(testError);\n          done();\n        },\n      });\n    });\n  });\n\n  describe('parameter extraction', () => {\n    it('should filter out HTTP request and response objects', done => {\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: () => {\n          expect(logger.debug).toHaveBeenCalledWith(\n            expect.any(String),\n            LogContext.BUSINESS,\n            expect.objectContaining({\n              parameters: [{ id: 1, name: 'test' }],\n            }),\n          );\n          done();\n        },\n        error: done,\n      });\n    });\n\n    it('should handle empty parameters', done => {\n      mockExecutionContext.getArgs = jest\n        .fn()\n        .mockReturnValue([{ method: 'GET' }, { statusCode: 200 }]);\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: () => {\n          expect(logger.debug).toHaveBeenCalledWith(\n            expect.any(String),\n            LogContext.BUSINESS,\n            expect.objectContaining({\n              parameters: [],\n            }),\n          );\n          done();\n        },\n        error: done,\n      });\n    });\n  });\n\n  describe('parameter sanitization', () => {\n    it('should sanitize sensitive parameters', done => {\n      mockExecutionContext.getArgs = jest.fn().mockReturnValue([\n        { method: 'GET' },\n        { statusCode: 200 },\n        {\n          username: 'testuser',\n          password: 'secret123',\n          token: 'jwt-token',\n          email: 'test@example.com',\n        },\n      ]);\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: () => {\n          expect(logger.debug).toHaveBeenCalledWith(\n            expect.any(String),\n            LogContext.BUSINESS,\n            expect.objectContaining({\n              parameters: [\n                {\n                  username: 'testuser',\n                  password: '[REDACTED]',\n                  token: '[REDACTED]',\n                  email: 'test@example.com',\n                },\n              ],\n            }),\n          );\n          done();\n        },\n        error: done,\n      });\n    });\n\n    it('should sanitize nested sensitive parameters', done => {\n      mockExecutionContext.getArgs = jest.fn().mockReturnValue([\n        { method: 'GET' },\n        { statusCode: 200 },\n        {\n          user: {\n            name: 'testuser',\n            credentials: {\n              password: 'secret123',\n              apiKey: 'key123',\n            },\n          },\n        },\n      ]);\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: () => {\n          expect(logger.debug).toHaveBeenCalledWith(\n            expect.any(String),\n            LogContext.BUSINESS,\n            expect.objectContaining({\n              parameters: [\n                {\n                  user: {\n                    name: 'testuser',\n                    credentials: {\n                      password: '[REDACTED]',\n                      apiKey: '[REDACTED]',\n                    },\n                  },\n                },\n              ],\n            }),\n          );\n          done();\n        },\n        error: done,\n      });\n    });\n\n    it('should sanitize array parameters', done => {\n      mockExecutionContext.getArgs = jest.fn().mockReturnValue([\n        { method: 'GET' },\n        { statusCode: 200 },\n        [\n          { id: 1, password: 'secret1' },\n          { id: 2, password: 'secret2' },\n        ],\n      ]);\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: () => {\n          expect(logger.debug).toHaveBeenCalledWith(\n            expect.any(String),\n            LogContext.BUSINESS,\n            expect.objectContaining({\n              parameters: [\n                [\n                  { id: 1, password: '[REDACTED]' },\n                  { id: 2, password: '[REDACTED]' },\n                ],\n              ],\n            }),\n          );\n          done();\n        },\n        error: done,\n      });\n    });\n  });\n\n  describe('result sanitization', () => {\n    it('should sanitize sensitive result fields', done => {\n      mockCallHandler.handle = jest.fn().mockReturnValue(\n        of({\n          success: true,\n          user: {\n            id: 1,\n            name: 'testuser',\n            password: 'secret123',\n            token: 'jwt-token',\n          },\n        }),\n      );\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: () => {\n          expect(logger.info).toHaveBeenCalledWith(\n            expect.any(String),\n            LogContext.BUSINESS,\n            expect.objectContaining({\n              result: {\n                success: true,\n                user: {\n                  id: 1,\n                  name: 'testuser',\n                  password: '[REDACTED]',\n                  token: '[REDACTED]',\n                },\n              },\n            }),\n          );\n          done();\n        },\n        error: done,\n      });\n    });\n  });\n\n  describe('context extraction', () => {\n    it('should extract context from request', done => {\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: () => {\n          expect(logger.debug).toHaveBeenCalledWith(\n            expect.any(String),\n            LogContext.BUSINESS,\n            expect.objectContaining({\n              requestId: 'req-123',\n              tenantId: 'tenant-123',\n              userId: 'user-456',\n            }),\n          );\n          done();\n        },\n        error: done,\n      });\n    });\n\n    it('should handle missing context', done => {\n      mockExecutionContext.switchToHttp = jest.fn().mockReturnValue({\n        getRequest: jest.fn().mockReturnValue({}),\n      });\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: () => {\n          expect(logger.debug).toHaveBeenCalledWith(\n            expect.any(String),\n            LogContext.BUSINESS,\n            expect.objectContaining({\n              requestId: undefined,\n              tenantId: undefined,\n              userId: undefined,\n            }),\n          );\n          done();\n        },\n        error: done,\n      });\n    });\n  });\n});\n"],"version":3}