d5f7dabb062c8ac9505db2c6907f8de9
"use strict";

/* istanbul ignore next */
function cov_14ou5qt163() {
  var path = "/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-invalidation.service.ts";
  var hash = "473dd60daf040efeb16b36c33747cbda7ab06ac7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-invalidation.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 17
        },
        end: {
          line: 7,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 12
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 3,
          column: 34
        },
        end: {
          line: 3,
          column: 125
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "4": {
        start: {
          line: 4,
          column: 79
        },
        end: {
          line: 4,
          column: 131
        }
      },
      "5": {
        start: {
          line: 5,
          column: 9
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "6": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "7": {
        start: {
          line: 5,
          column: 58
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "8": {
        start: {
          line: 5,
          column: 81
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "9": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 6,
          column: 66
        }
      },
      "10": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "11": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 109
        }
      },
      "12": {
        start: {
          line: 9,
          column: 79
        },
        end: {
          line: 9,
          column: 109
        }
      },
      "13": {
        start: {
          line: 11,
          column: 14
        },
        end: {
          line: 13,
          column: 1
        }
      },
      "14": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 73
        }
      },
      "15": {
        start: {
          line: 12,
          column: 36
        },
        end: {
          line: 12,
          column: 71
        }
      },
      "16": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 62
        }
      },
      "17": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 103
        }
      },
      "18": {
        start: {
          line: 17,
          column: 17
        },
        end: {
          line: 17,
          column: 42
        }
      },
      "19": {
        start: {
          line: 18,
          column: 24
        },
        end: {
          line: 18,
          column: 56
        }
      },
      "20": {
        start: {
          line: 19,
          column: 15
        },
        end: {
          line: 19,
          column: 30
        }
      },
      "21": {
        start: {
          line: 20,
          column: 18
        },
        end: {
          line: 20,
          column: 44
        }
      },
      "22": {
        start: {
          line: 27,
          column: 0
        },
        end: {
          line: 44,
          column: 87
        }
      },
      "23": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 44
        }
      },
      "24": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 46
        }
      },
      "25": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 46
        }
      },
      "26": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 50
        }
      },
      "27": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 44
        }
      },
      "28": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 40
        }
      },
      "29": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 52
        }
      },
      "30": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 44
        }
      },
      "31": {
        start: {
          line: 51,
          column: 0
        },
        end: {
          line: 62,
          column: 84
        }
      },
      "32": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 45
        }
      },
      "33": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 51
        }
      },
      "34": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 43
        }
      },
      "35": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 55
        }
      },
      "36": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 61,
          column: 53
        }
      },
      "37": {
        start: {
          line: 78,
          column: 31
        },
        end: {
          line: 705,
          column: 1
        }
      },
      "38": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 37
        }
      },
      "39": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 41
        }
      },
      "40": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 29
        }
      },
      "41": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 31
        }
      },
      "42": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 33
        }
      },
      "43": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 103,
          column: 10
        }
      },
      "44": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 44
        }
      },
      "45": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 31
        }
      },
      "46": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 93
        }
      },
      "47": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 41
        }
      },
      "48": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 99
        }
      },
      "49": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "50": {
        start: {
          line: 125,
          column: 27
        },
        end: {
          line: 125,
          column: 54
        }
      },
      "51": {
        start: {
          line: 126,
          column: 24
        },
        end: {
          line: 126,
          column: 34
        }
      },
      "52": {
        start: {
          line: 127,
          column: 29
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "53": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 45
        }
      },
      "54": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 98
        }
      },
      "55": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 61
        }
      },
      "56": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 24
        }
      },
      "57": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 125
        }
      },
      "58": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 25
        }
      },
      "59": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "60": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "61": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 103
        }
      },
      "62": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 29
        }
      },
      "63": {
        start: {
          line: 155,
          column: 25
        },
        end: {
          line: 155,
          column: 47
        }
      },
      "64": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "65": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 74
        }
      },
      "66": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 38
        }
      },
      "67": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 100
        }
      },
      "68": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 53
        }
      },
      "69": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 24
        }
      },
      "70": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 125
        }
      },
      "71": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 25
        }
      },
      "72": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "73": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 181,
          column: 13
        }
      },
      "74": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 179,
          column: 103
        }
      },
      "75": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 180,
          column: 29
        }
      },
      "76": {
        start: {
          line: 182,
          column: 33
        },
        end: {
          line: 182,
          column: 55
        }
      },
      "77": {
        start: {
          line: 183,
          column: 32
        },
        end: {
          line: 187,
          column: 13
        }
      },
      "78": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 48
        }
      },
      "79": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 107
        }
      },
      "80": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 66
        }
      },
      "81": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 24
        }
      },
      "82": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 125
        }
      },
      "83": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 25
        }
      },
      "84": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 46
        }
      },
      "85": {
        start: {
          line: 214,
          column: 22
        },
        end: {
          line: 214,
          column: 53
        }
      },
      "86": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "87": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 54
        }
      },
      "88": {
        start: {
          line: 216,
          column: 40
        },
        end: {
          line: 216,
          column: 52
        }
      },
      "89": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 21
        }
      },
      "90": {
        start: {
          line: 229,
          column: 26
        },
        end: {
          line: 229,
          column: 36
        }
      },
      "91": {
        start: {
          line: 230,
          column: 24
        },
        end: {
          line: 230,
          column: 65
        }
      },
      "92": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "93": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "94": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 57
        }
      },
      "95": {
        start: {
          line: 235,
          column: 27
        },
        end: {
          line: 246,
          column: 13
        }
      },
      "96": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 275,
          column: 13
        }
      },
      "97": {
        start: {
          line: 250,
          column: 20
        },
        end: {
          line: 250,
          column: 70
        }
      },
      "98": {
        start: {
          line: 251,
          column: 20
        },
        end: {
          line: 251,
          column: 26
        }
      },
      "99": {
        start: {
          line: 253,
          column: 20
        },
        end: {
          line: 253,
          column: 77
        }
      },
      "100": {
        start: {
          line: 254,
          column: 20
        },
        end: {
          line: 254,
          column: 26
        }
      },
      "101": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 256,
          column: 71
        }
      },
      "102": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 257,
          column: 26
        }
      },
      "103": {
        start: {
          line: 259,
          column: 20
        },
        end: {
          line: 259,
          column: 73
        }
      },
      "104": {
        start: {
          line: 260,
          column: 20
        },
        end: {
          line: 260,
          column: 26
        }
      },
      "105": {
        start: {
          line: 262,
          column: 20
        },
        end: {
          line: 262,
          column: 70
        }
      },
      "106": {
        start: {
          line: 263,
          column: 20
        },
        end: {
          line: 263,
          column: 26
        }
      },
      "107": {
        start: {
          line: 265,
          column: 20
        },
        end: {
          line: 265,
          column: 69
        }
      },
      "108": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 266,
          column: 26
        }
      },
      "109": {
        start: {
          line: 268,
          column: 20
        },
        end: {
          line: 268,
          column: 81
        }
      },
      "110": {
        start: {
          line: 269,
          column: 20
        },
        end: {
          line: 269,
          column: 26
        }
      },
      "111": {
        start: {
          line: 271,
          column: 20
        },
        end: {
          line: 271,
          column: 70
        }
      },
      "112": {
        start: {
          line: 272,
          column: 20
        },
        end: {
          line: 272,
          column: 26
        }
      },
      "113": {
        start: {
          line: 274,
          column: 20
        },
        end: {
          line: 274,
          column: 86
        }
      },
      "114": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 56
        }
      },
      "115": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 68
        }
      },
      "116": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 56
        }
      },
      "117": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 58
        }
      },
      "118": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 34
        }
      },
      "119": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 85
        }
      },
      "120": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 148
        }
      },
      "121": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 75
        }
      },
      "122": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 26
        }
      },
      "123": {
        start: {
          line: 288,
          column: 34
        },
        end: {
          line: 288,
          column: 56
        }
      },
      "124": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 63
        }
      },
      "125": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 123
        }
      },
      "126": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 80
        }
      },
      "127": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 304,
          column: 14
        }
      },
      "128": {
        start: {
          line: 315,
          column: 21
        },
        end: {
          line: 315,
          column: 41
        }
      },
      "129": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 318,
          column: 9
        }
      },
      "130": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 70
        }
      },
      "131": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "132": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 104
        }
      },
      "133": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 332,
          column: 14
        }
      },
      "134": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 349,
          column: 9
        }
      },
      "135": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 111
        }
      },
      "136": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 348,
          column: 14
        }
      },
      "137": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 370,
          column: 9
        }
      },
      "138": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 369,
          column: 13
        }
      },
      "139": {
        start: {
          line: 353,
          column: 32
        },
        end: {
          line: 353,
          column: 51
        }
      },
      "140": {
        start: {
          line: 354,
          column: 16
        },
        end: {
          line: 368,
          column: 17
        }
      },
      "141": {
        start: {
          line: 355,
          column: 20
        },
        end: {
          line: 355,
          column: 116
        }
      },
      "142": {
        start: {
          line: 356,
          column: 20
        },
        end: {
          line: 367,
          column: 22
        }
      },
      "143": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 373,
          column: 11
        }
      },
      "144": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 381,
          column: 33
        }
      },
      "145": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 388,
          column: 44
        }
      },
      "146": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 389,
          column: 81
        }
      },
      "147": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 396,
          column: 30
        }
      },
      "148": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 397,
          column: 91
        }
      },
      "149": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 423,
          column: 10
        }
      },
      "150": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 416,
          column: 34
        }
      },
      "151": {
        start: {
          line: 417,
          column: 16
        },
        end: {
          line: 417,
          column: 27
        }
      },
      "152": {
        start: {
          line: 420,
          column: 16
        },
        end: {
          line: 420,
          column: 33
        }
      },
      "153": {
        start: {
          line: 421,
          column: 16
        },
        end: {
          line: 421,
          column: 27
        }
      },
      "154": {
        start: {
          line: 433,
          column: 32
        },
        end: {
          line: 433,
          column: 34
        }
      },
      "155": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 446,
          column: 9
        }
      },
      "156": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 445,
          column: 13
        }
      },
      "157": {
        start: {
          line: 437,
          column: 33
        },
        end: {
          line: 437,
          column: 59
        }
      },
      "158": {
        start: {
          line: 438,
          column: 32
        },
        end: {
          line: 438,
          column: 72
        }
      },
      "159": {
        start: {
          line: 439,
          column: 16
        },
        end: {
          line: 441,
          column: 17
        }
      },
      "160": {
        start: {
          line: 440,
          column: 20
        },
        end: {
          line: 440,
          column: 46
        }
      },
      "161": {
        start: {
          line: 444,
          column: 16
        },
        end: {
          line: 444,
          column: 121
        }
      },
      "162": {
        start: {
          line: 447,
          column: 8
        },
        end: {
          line: 447,
          column: 31
        }
      },
      "163": {
        start: {
          line: 458,
          column: 32
        },
        end: {
          line: 458,
          column: 34
        }
      },
      "164": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 470,
          column: 9
        }
      },
      "165": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 469,
          column: 13
        }
      },
      "166": {
        start: {
          line: 462,
          column: 32
        },
        end: {
          line: 462,
          column: 69
        }
      },
      "167": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 465,
          column: 17
        }
      },
      "168": {
        start: {
          line: 464,
          column: 20
        },
        end: {
          line: 464,
          column: 49
        }
      },
      "169": {
        start: {
          line: 468,
          column: 16
        },
        end: {
          line: 468,
          column: 121
        }
      },
      "170": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 471,
          column: 31
        }
      },
      "171": {
        start: {
          line: 482,
          column: 32
        },
        end: {
          line: 482,
          column: 34
        }
      },
      "172": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 485,
          column: 31
        }
      },
      "173": {
        start: {
          line: 495,
          column: 32
        },
        end: {
          line: 495,
          column: 34
        }
      },
      "174": {
        start: {
          line: 496,
          column: 8
        },
        end: {
          line: 504,
          column: 9
        }
      },
      "175": {
        start: {
          line: 497,
          column: 12
        },
        end: {
          line: 503,
          column: 13
        }
      },
      "176": {
        start: {
          line: 499,
          column: 16
        },
        end: {
          line: 499,
          column: 107
        }
      },
      "177": {
        start: {
          line: 502,
          column: 16
        },
        end: {
          line: 502,
          column: 132
        }
      },
      "178": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 505,
          column: 31
        }
      },
      "179": {
        start: {
          line: 515,
          column: 32
        },
        end: {
          line: 515,
          column: 34
        }
      },
      "180": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 524,
          column: 9
        }
      },
      "181": {
        start: {
          line: 517,
          column: 12
        },
        end: {
          line: 523,
          column: 13
        }
      },
      "182": {
        start: {
          line: 519,
          column: 16
        },
        end: {
          line: 519,
          column: 104
        }
      },
      "183": {
        start: {
          line: 522,
          column: 16
        },
        end: {
          line: 522,
          column: 129
        }
      },
      "184": {
        start: {
          line: 525,
          column: 8
        },
        end: {
          line: 525,
          column: 31
        }
      },
      "185": {
        start: {
          line: 536,
          column: 32
        },
        end: {
          line: 536,
          column: 34
        }
      },
      "186": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 546,
          column: 9
        }
      },
      "187": {
        start: {
          line: 538,
          column: 12
        },
        end: {
          line: 545,
          column: 13
        }
      },
      "188": {
        start: {
          line: 540,
          column: 16
        },
        end: {
          line: 540,
          column: 90
        }
      },
      "189": {
        start: {
          line: 541,
          column: 16
        },
        end: {
          line: 541,
          column: 42
        }
      },
      "190": {
        start: {
          line: 544,
          column: 16
        },
        end: {
          line: 544,
          column: 115
        }
      },
      "191": {
        start: {
          line: 547,
          column: 8
        },
        end: {
          line: 547,
          column: 31
        }
      },
      "192": {
        start: {
          line: 557,
          column: 38
        },
        end: {
          line: 557,
          column: 40
        }
      },
      "193": {
        start: {
          line: 558,
          column: 8
        },
        end: {
          line: 568,
          column: 9
        }
      },
      "194": {
        start: {
          line: 559,
          column: 12
        },
        end: {
          line: 567,
          column: 13
        }
      },
      "195": {
        start: {
          line: 560,
          column: 32
        },
        end: {
          line: 560,
          column: 72
        }
      },
      "196": {
        start: {
          line: 561,
          column: 16
        },
        end: {
          line: 563,
          column: 17
        }
      },
      "197": {
        start: {
          line: 562,
          column: 20
        },
        end: {
          line: 562,
          column: 58
        }
      },
      "198": {
        start: {
          line: 566,
          column: 16
        },
        end: {
          line: 566,
          column: 127
        }
      },
      "199": {
        start: {
          line: 569,
          column: 8
        },
        end: {
          line: 569,
          column: 37
        }
      },
      "200": {
        start: {
          line: 579,
          column: 32
        },
        end: {
          line: 579,
          column: 34
        }
      },
      "201": {
        start: {
          line: 580,
          column: 26
        },
        end: {
          line: 580,
          column: 54
        }
      },
      "202": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 591,
          column: 9
        }
      },
      "203": {
        start: {
          line: 582,
          column: 21
        },
        end: {
          line: 582,
          column: 22
        }
      },
      "204": {
        start: {
          line: 583,
          column: 26
        },
        end: {
          line: 583,
          column: 57
        }
      },
      "205": {
        start: {
          line: 584,
          column: 12
        },
        end: {
          line: 590,
          column: 13
        }
      },
      "206": {
        start: {
          line: 585,
          column: 34
        },
        end: {
          line: 585,
          column: 67
        }
      },
      "207": {
        start: {
          line: 586,
          column: 16
        },
        end: {
          line: 586,
          column: 51
        }
      },
      "208": {
        start: {
          line: 589,
          column: 16
        },
        end: {
          line: 589,
          column: 130
        }
      },
      "209": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 592,
          column: 31
        }
      },
      "210": {
        start: {
          line: 603,
          column: 8
        },
        end: {
          line: 611,
          column: 9
        }
      },
      "211": {
        start: {
          line: 606,
          column: 12
        },
        end: {
          line: 606,
          column: 24
        }
      },
      "212": {
        start: {
          line: 609,
          column: 12
        },
        end: {
          line: 609,
          column: 121
        }
      },
      "213": {
        start: {
          line: 610,
          column: 12
        },
        end: {
          line: 610,
          column: 25
        }
      },
      "214": {
        start: {
          line: 623,
          column: 8
        },
        end: {
          line: 623,
          column: 40
        }
      },
      "215": {
        start: {
          line: 624,
          column: 8
        },
        end: {
          line: 630,
          column: 9
        }
      },
      "216": {
        start: {
          line: 625,
          column: 12
        },
        end: {
          line: 625,
          column: 45
        }
      },
      "217": {
        start: {
          line: 628,
          column: 12
        },
        end: {
          line: 628,
          column: 49
        }
      },
      "218": {
        start: {
          line: 629,
          column: 12
        },
        end: {
          line: 629,
          column: 63
        }
      },
      "219": {
        start: {
          line: 631,
          column: 8
        },
        end: {
          line: 634,
          column: 46
        }
      },
      "220": {
        start: {
          line: 635,
          column: 8
        },
        end: {
          line: 635,
          column: 49
        }
      },
      "221": {
        start: {
          line: 636,
          column: 8
        },
        end: {
          line: 636,
          column: 101
        }
      },
      "222": {
        start: {
          line: 636,
          column: 80
        },
        end: {
          line: 636,
          column: 92
        }
      },
      "223": {
        start: {
          line: 637,
          column: 8
        },
        end: {
          line: 637,
          column: 45
        }
      },
      "224": {
        start: {
          line: 647,
          column: 8
        },
        end: {
          line: 659,
          column: 9
        }
      },
      "225": {
        start: {
          line: 648,
          column: 12
        },
        end: {
          line: 658,
          column: 13
        }
      },
      "226": {
        start: {
          line: 649,
          column: 16
        },
        end: {
          line: 654,
          column: 19
        }
      },
      "227": {
        start: {
          line: 657,
          column: 16
        },
        end: {
          line: 657,
          column: 125
        }
      },
      "228": {
        start: {
          line: 667,
          column: 8
        },
        end: {
          line: 674,
          column: 9
        }
      },
      "229": {
        start: {
          line: 668,
          column: 12
        },
        end: {
          line: 672,
          column: 47
        }
      },
      "230": {
        start: {
          line: 669,
          column: 16
        },
        end: {
          line: 671,
          column: 19
        }
      },
      "231": {
        start: {
          line: 670,
          column: 20
        },
        end: {
          line: 670,
          column: 118
        }
      },
      "232": {
        start: {
          line: 673,
          column: 12
        },
        end: {
          line: 673,
          column: 139
        }
      },
      "233": {
        start: {
          line: 682,
          column: 8
        },
        end: {
          line: 686,
          column: 9
        }
      },
      "234": {
        start: {
          line: 683,
          column: 12
        },
        end: {
          line: 683,
          column: 48
        }
      },
      "235": {
        start: {
          line: 684,
          column: 12
        },
        end: {
          line: 684,
          column: 45
        }
      },
      "236": {
        start: {
          line: 685,
          column: 12
        },
        end: {
          line: 685,
          column: 92
        }
      },
      "237": {
        start: {
          line: 694,
          column: 8
        },
        end: {
          line: 703,
          column: 9
        }
      },
      "238": {
        start: {
          line: 695,
          column: 26
        },
        end: {
          line: 695,
          column: 41
        }
      },
      "239": {
        start: {
          line: 696,
          column: 12
        },
        end: {
          line: 696,
          column: 52
        }
      },
      "240": {
        start: {
          line: 698,
          column: 32
        },
        end: {
          line: 698,
          column: 92
        }
      },
      "241": {
        start: {
          line: 698,
          column: 79
        },
        end: {
          line: 698,
          column: 91
        }
      },
      "242": {
        start: {
          line: 699,
          column: 12
        },
        end: {
          line: 699,
          column: 110
        }
      },
      "243": {
        start: {
          line: 702,
          column: 12
        },
        end: {
          line: 702,
          column: 120
        }
      },
      "244": {
        start: {
          line: 706,
          column: 0
        },
        end: {
          line: 706,
          column: 60
        }
      },
      "245": {
        start: {
          line: 707,
          column: 0
        },
        end: {
          line: 713,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 46
          },
          end: {
            line: 2,
            column: 47
          }
        },
        loc: {
          start: {
            line: 2,
            column: 87
          },
          end: {
            line: 7,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 8,
            column: 46
          },
          end: {
            line: 8,
            column: 47
          }
        },
        loc: {
          start: {
            line: 8,
            column: 62
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 8
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 11,
            column: 40
          },
          end: {
            line: 11,
            column: 41
          }
        },
        loc: {
          start: {
            line: 11,
            column: 73
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 11
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 12,
            column: 11
          },
          end: {
            line: 12,
            column: 12
          }
        },
        loc: {
          start: {
            line: 12,
            column: 34
          },
          end: {
            line: 12,
            column: 73
          }
        },
        line: 12
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 27,
            column: 1
          },
          end: {
            line: 27,
            column: 2
          }
        },
        loc: {
          start: {
            line: 27,
            column: 33
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 27
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 51,
            column: 1
          },
          end: {
            line: 51,
            column: 2
          }
        },
        loc: {
          start: {
            line: 51,
            column: 32
          },
          end: {
            line: 62,
            column: 1
          }
        },
        line: 51
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 58
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 79
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 34
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 113
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 18
          },
          end: {
            line: 142,
            column: 5
          }
        },
        line: 123
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 149,
            column: 23
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 149
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 32
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 176
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 20
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 204
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 29
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 213
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 216,
            column: 32
          },
          end: {
            line: 216,
            column: 33
          }
        },
        loc: {
          start: {
            line: 216,
            column: 40
          },
          end: {
            line: 216,
            column: 52
          }
        },
        line: 216
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 228,
            column: 5
          }
        },
        loc: {
          start: {
            line: 228,
            column: 78
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 228
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 314,
            column: 4
          },
          end: {
            line: 314,
            column: 5
          }
        },
        loc: {
          start: {
            line: 314,
            column: 45
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 314
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 380,
            column: 4
          },
          end: {
            line: 380,
            column: 5
          }
        },
        loc: {
          start: {
            line: 380,
            column: 15
          },
          end: {
            line: 382,
            column: 5
          }
        },
        line: 380
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 387,
            column: 4
          },
          end: {
            line: 387,
            column: 5
          }
        },
        loc: {
          start: {
            line: 387,
            column: 17
          },
          end: {
            line: 390,
            column: 5
          }
        },
        line: 387
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        loc: {
          start: {
            line: 395,
            column: 16
          },
          end: {
            line: 398,
            column: 5
          }
        },
        line: 395
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 22
          },
          end: {
            line: 424,
            column: 5
          }
        },
        line: 406
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 415,
            column: 70
          },
          end: {
            line: 415,
            column: 71
          }
        },
        loc: {
          start: {
            line: 415,
            column: 89
          },
          end: {
            line: 418,
            column: 13
          }
        },
        line: 415
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 419,
            column: 68
          },
          end: {
            line: 419,
            column: 69
          }
        },
        loc: {
          start: {
            line: 419,
            column: 86
          },
          end: {
            line: 422,
            column: 13
          }
        },
        line: 419
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 432,
            column: 4
          },
          end: {
            line: 432,
            column: 5
          }
        },
        loc: {
          start: {
            line: 432,
            column: 32
          },
          end: {
            line: 448,
            column: 5
          }
        },
        line: 432
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        },
        loc: {
          start: {
            line: 456,
            column: 37
          },
          end: {
            line: 472,
            column: 5
          }
        },
        line: 456
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 480,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        },
        loc: {
          start: {
            line: 480,
            column: 38
          },
          end: {
            line: 486,
            column: 5
          }
        },
        line: 480
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 494,
            column: 4
          },
          end: {
            line: 494,
            column: 5
          }
        },
        loc: {
          start: {
            line: 494,
            column: 39
          },
          end: {
            line: 506,
            column: 5
          }
        },
        line: 494
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 514,
            column: 4
          },
          end: {
            line: 514,
            column: 5
          }
        },
        loc: {
          start: {
            line: 514,
            column: 36
          },
          end: {
            line: 526,
            column: 5
          }
        },
        line: 514
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 534,
            column: 4
          },
          end: {
            line: 534,
            column: 5
          }
        },
        loc: {
          start: {
            line: 534,
            column: 31
          },
          end: {
            line: 548,
            column: 5
          }
        },
        line: 534
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 556,
            column: 4
          },
          end: {
            line: 556,
            column: 5
          }
        },
        loc: {
          start: {
            line: 556,
            column: 43
          },
          end: {
            line: 570,
            column: 5
          }
        },
        line: 556
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 578,
            column: 4
          },
          end: {
            line: 578,
            column: 5
          }
        },
        loc: {
          start: {
            line: 578,
            column: 35
          },
          end: {
            line: 593,
            column: 5
          }
        },
        line: 578
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 602,
            column: 4
          },
          end: {
            line: 602,
            column: 5
          }
        },
        loc: {
          start: {
            line: 602,
            column: 43
          },
          end: {
            line: 612,
            column: 5
          }
        },
        line: 602
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 622,
            column: 4
          },
          end: {
            line: 622,
            column: 5
          }
        },
        loc: {
          start: {
            line: 622,
            column: 74
          },
          end: {
            line: 638,
            column: 5
          }
        },
        line: 622
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 636,
            column: 72
          },
          end: {
            line: 636,
            column: 73
          }
        },
        loc: {
          start: {
            line: 636,
            column: 80
          },
          end: {
            line: 636,
            column: 92
          }
        },
        line: 636
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 646,
            column: 4
          },
          end: {
            line: 646,
            column: 5
          }
        },
        loc: {
          start: {
            line: 646,
            column: 27
          },
          end: {
            line: 660,
            column: 5
          }
        },
        line: 646
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 666,
            column: 4
          },
          end: {
            line: 666,
            column: 5
          }
        },
        loc: {
          start: {
            line: 666,
            column: 22
          },
          end: {
            line: 675,
            column: 5
          }
        },
        line: 666
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 668,
            column: 47
          },
          end: {
            line: 668,
            column: 48
          }
        },
        loc: {
          start: {
            line: 668,
            column: 53
          },
          end: {
            line: 672,
            column: 13
          }
        },
        line: 668
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 669,
            column: 47
          },
          end: {
            line: 669,
            column: 48
          }
        },
        loc: {
          start: {
            line: 669,
            column: 56
          },
          end: {
            line: 671,
            column: 17
          }
        },
        line: 669
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 681,
            column: 4
          },
          end: {
            line: 681,
            column: 5
          }
        },
        loc: {
          start: {
            line: 681,
            column: 21
          },
          end: {
            line: 687,
            column: 5
          }
        },
        line: 681
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 693,
            column: 4
          },
          end: {
            line: 693,
            column: 5
          }
        },
        loc: {
          start: {
            line: 693,
            column: 30
          },
          end: {
            line: 704,
            column: 5
          }
        },
        line: 693
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 698,
            column: 71
          },
          end: {
            line: 698,
            column: 72
          }
        },
        loc: {
          start: {
            line: 698,
            column: 79
          },
          end: {
            line: 698,
            column: 91
          }
        },
        line: 698
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 7,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 18
          },
          end: {
            line: 2,
            column: 22
          }
        }, {
          start: {
            line: 2,
            column: 26
          },
          end: {
            line: 2,
            column: 41
          }
        }, {
          start: {
            line: 2,
            column: 46
          },
          end: {
            line: 7,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 34
          },
          end: {
            line: 3,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 42
          },
          end: {
            line: 3,
            column: 48
          }
        }, {
          start: {
            line: 3,
            column: 51
          },
          end: {
            line: 3,
            column: 125
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 51
          },
          end: {
            line: 3,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 67
          },
          end: {
            line: 3,
            column: 118
          }
        }, {
          start: {
            line: 3,
            column: 121
          },
          end: {
            line: 3,
            column: 125
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 5,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 5,
            column: 150
          }
        }, {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 150
          }
        }],
        line: 4
      },
      "4": {
        loc: {
          start: {
            line: 4,
            column: 8
          },
          end: {
            line: 4,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 8
          },
          end: {
            line: 4,
            column: 35
          }
        }, {
          start: {
            line: 4,
            column: 39
          },
          end: {
            line: 4,
            column: 77
          }
        }],
        line: 4
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 58
          },
          end: {
            line: 5,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 58
          },
          end: {
            line: 5,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 85
          },
          end: {
            line: 5,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 86
          },
          end: {
            line: 5,
            column: 143
          }
        }, {
          start: {
            line: 5,
            column: 148
          },
          end: {
            line: 5,
            column: 149
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 5,
            column: 86
          },
          end: {
            line: 5,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 94
          },
          end: {
            line: 5,
            column: 98
          }
        }, {
          start: {
            line: 5,
            column: 101
          },
          end: {
            line: 5,
            column: 143
          }
        }],
        line: 5
      },
      "8": {
        loc: {
          start: {
            line: 5,
            column: 101
          },
          end: {
            line: 5,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 109
          },
          end: {
            line: 5,
            column: 126
          }
        }, {
          start: {
            line: 5,
            column: 129
          },
          end: {
            line: 5,
            column: 143
          }
        }],
        line: 5
      },
      "9": {
        loc: {
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 16
          }
        }, {
          start: {
            line: 6,
            column: 20
          },
          end: {
            line: 6,
            column: 21
          }
        }, {
          start: {
            line: 6,
            column: 25
          },
          end: {
            line: 6,
            column: 62
          }
        }],
        line: 6
      },
      "10": {
        loc: {
          start: {
            line: 8,
            column: 17
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 8,
            column: 22
          }
        }, {
          start: {
            line: 8,
            column: 26
          },
          end: {
            line: 8,
            column: 41
          }
        }, {
          start: {
            line: 8,
            column: 46
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 8
      },
      "11": {
        loc: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "12": {
        loc: {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 9,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 9,
            column: 35
          }
        }, {
          start: {
            line: 9,
            column: 39
          },
          end: {
            line: 9,
            column: 77
          }
        }],
        line: 9
      },
      "13": {
        loc: {
          start: {
            line: 11,
            column: 14
          },
          end: {
            line: 13,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 15
          },
          end: {
            line: 11,
            column: 19
          }
        }, {
          start: {
            line: 11,
            column: 23
          },
          end: {
            line: 11,
            column: 35
          }
        }, {
          start: {
            line: 11,
            column: 40
          },
          end: {
            line: 13,
            column: 1
          }
        }],
        line: 11
      },
      "14": {
        loc: {
          start: {
            line: 44,
            column: 3
          },
          end: {
            line: 44,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 3
          },
          end: {
            line: 44,
            column: 23
          }
        }, {
          start: {
            line: 44,
            column: 28
          },
          end: {
            line: 44,
            column: 84
          }
        }],
        line: 44
      },
      "15": {
        loc: {
          start: {
            line: 62,
            column: 3
          },
          end: {
            line: 62,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 3
          },
          end: {
            line: 62,
            column: 22
          }
        }, {
          start: {
            line: 62,
            column: 27
          },
          end: {
            line: 62,
            column: 81
          }
        }],
        line: 62
      },
      "16": {
        loc: {
          start: {
            line: 125,
            column: 27
          },
          end: {
            line: 125,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 125,
            column: 27
          },
          end: {
            line: 125,
            column: 34
          }
        }, {
          start: {
            line: 125,
            column: 38
          },
          end: {
            line: 125,
            column: 54
          }
        }],
        line: 125
      },
      "17": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "18": {
        loc: {
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "19": {
        loc: {
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 181,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 181,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "20": {
        loc: {
          start: {
            line: 205,
            column: 15
          },
          end: {
            line: 205,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 15
          },
          end: {
            line: 205,
            column: 37
          }
        }, {
          start: {
            line: 205,
            column: 41
          },
          end: {
            line: 205,
            column: 45
          }
        }],
        line: 205
      },
      "21": {
        loc: {
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "22": {
        loc: {
          start: {
            line: 228,
            column: 29
          },
          end: {
            line: 228,
            column: 67
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 228,
            column: 40
          },
          end: {
            line: 228,
            column: 67
          }
        }],
        line: 228
      },
      "23": {
        loc: {
          start: {
            line: 230,
            column: 24
          },
          end: {
            line: 230,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 230,
            column: 48
          },
          end: {
            line: 230,
            column: 54
          }
        }, {
          start: {
            line: 230,
            column: 57
          },
          end: {
            line: 230,
            column: 65
          }
        }],
        line: 230
      },
      "24": {
        loc: {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "25": {
        loc: {
          start: {
            line: 245,
            column: 26
          },
          end: {
            line: 245,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 26
          },
          end: {
            line: 245,
            column: 43
          }
        }, {
          start: {
            line: 245,
            column: 47
          },
          end: {
            line: 245,
            column: 49
          }
        }],
        line: 245
      },
      "26": {
        loc: {
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 275,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 251,
            column: 26
          }
        }, {
          start: {
            line: 252,
            column: 16
          },
          end: {
            line: 254,
            column: 26
          }
        }, {
          start: {
            line: 255,
            column: 16
          },
          end: {
            line: 257,
            column: 26
          }
        }, {
          start: {
            line: 258,
            column: 16
          },
          end: {
            line: 260,
            column: 26
          }
        }, {
          start: {
            line: 261,
            column: 16
          },
          end: {
            line: 263,
            column: 26
          }
        }, {
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 266,
            column: 26
          }
        }, {
          start: {
            line: 267,
            column: 16
          },
          end: {
            line: 269,
            column: 26
          }
        }, {
          start: {
            line: 270,
            column: 16
          },
          end: {
            line: 272,
            column: 26
          }
        }, {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 274,
            column: 86
          }
        }],
        line: 248
      },
      "27": {
        loc: {
          start: {
            line: 303,
            column: 26
          },
          end: {
            line: 303,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 26
          },
          end: {
            line: 303,
            column: 43
          }
        }, {
          start: {
            line: 303,
            column: 47
          },
          end: {
            line: 303,
            column: 49
          }
        }],
        line: 303
      },
      "28": {
        loc: {
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 318,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 318,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "29": {
        loc: {
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 333,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 333,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "30": {
        loc: {
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 335
      },
      "31": {
        loc: {
          start: {
            line: 335,
            column: 12
          },
          end: {
            line: 335,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 335,
            column: 12
          },
          end: {
            line: 335,
            column: 26
          }
        }, {
          start: {
            line: 335,
            column: 30
          },
          end: {
            line: 335,
            column: 79
          }
        }],
        line: 335
      },
      "32": {
        loc: {
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 370,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 370,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "33": {
        loc: {
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 351,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 351,
            column: 29
          }
        }, {
          start: {
            line: 351,
            column: 33
          },
          end: {
            line: 351,
            column: 61
          }
        }],
        line: 351
      },
      "34": {
        loc: {
          start: {
            line: 354,
            column: 16
          },
          end: {
            line: 368,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 16
          },
          end: {
            line: 368,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 354
      },
      "35": {
        loc: {
          start: {
            line: 439,
            column: 16
          },
          end: {
            line: 441,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 439,
            column: 16
          },
          end: {
            line: 441,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 439
      },
      "36": {
        loc: {
          start: {
            line: 463,
            column: 16
          },
          end: {
            line: 465,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 463,
            column: 16
          },
          end: {
            line: 465,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 463
      },
      "37": {
        loc: {
          start: {
            line: 561,
            column: 16
          },
          end: {
            line: 563,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 561,
            column: 16
          },
          end: {
            line: 563,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 561
      },
      "38": {
        loc: {
          start: {
            line: 580,
            column: 26
          },
          end: {
            line: 580,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 580,
            column: 26
          },
          end: {
            line: 580,
            column: 47
          }
        }, {
          start: {
            line: 580,
            column: 51
          },
          end: {
            line: 580,
            column: 54
          }
        }],
        line: 580
      },
      "39": {
        loc: {
          start: {
            line: 622,
            column: 58
          },
          end: {
            line: 622,
            column: 72
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 622,
            column: 67
          },
          end: {
            line: 622,
            column: 72
          }
        }],
        line: 622
      },
      "40": {
        loc: {
          start: {
            line: 624,
            column: 8
          },
          end: {
            line: 630,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 624,
            column: 8
          },
          end: {
            line: 630,
            column: 9
          }
        }, {
          start: {
            line: 627,
            column: 13
          },
          end: {
            line: 630,
            column: 9
          }
        }],
        line: 624
      },
      "41": {
        loc: {
          start: {
            line: 647,
            column: 8
          },
          end: {
            line: 659,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 647,
            column: 8
          },
          end: {
            line: 659,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 647
      },
      "42": {
        loc: {
          start: {
            line: 667,
            column: 8
          },
          end: {
            line: 674,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 667,
            column: 8
          },
          end: {
            line: 674,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 667
      },
      "43": {
        loc: {
          start: {
            line: 667,
            column: 12
          },
          end: {
            line: 667,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 667,
            column: 12
          },
          end: {
            line: 667,
            column: 42
          }
        }, {
          start: {
            line: 667,
            column: 46
          },
          end: {
            line: 667,
            column: 80
          }
        }],
        line: 667
      },
      "44": {
        loc: {
          start: {
            line: 682,
            column: 8
          },
          end: {
            line: 686,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 682,
            column: 8
          },
          end: {
            line: 686,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 682
      },
      "45": {
        loc: {
          start: {
            line: 712,
            column: 53
          },
          end: {
            line: 712,
            column: 181
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 712,
            column: 170
          },
          end: {
            line: 712,
            column: 172
          }
        }, {
          start: {
            line: 712,
            column: 175
          },
          end: {
            line: 712,
            column: 181
          }
        }],
        line: 712
      },
      "46": {
        loc: {
          start: {
            line: 712,
            column: 66
          },
          end: {
            line: 712,
            column: 151
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 712,
            column: 66
          },
          end: {
            line: 712,
            column: 118
          }
        }, {
          start: {
            line: 712,
            column: 122
          },
          end: {
            line: 712,
            column: 151
          }
        }],
        line: 712
      },
      "47": {
        loc: {
          start: {
            line: 712,
            column: 183
          },
          end: {
            line: 712,
            column: 307
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 712,
            column: 296
          },
          end: {
            line: 712,
            column: 298
          }
        }, {
          start: {
            line: 712,
            column: 301
          },
          end: {
            line: 712,
            column: 307
          }
        }],
        line: 712
      },
      "48": {
        loc: {
          start: {
            line: 712,
            column: 196
          },
          end: {
            line: 712,
            column: 277
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 712,
            column: 196
          },
          end: {
            line: 712,
            column: 246
          }
        }, {
          start: {
            line: 712,
            column: 250
          },
          end: {
            line: 712,
            column: 277
          }
        }],
        line: 712
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0, 0, 0, 0, 0, 0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0]
    },
    inputSourceMap: {
      file: "/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-invalidation.service.ts",
      mappings: "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",
      names: [],
      sources: ["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-invalidation.service.ts"],
      sourcesContent: ["import { Injectable, Inject } from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport type { ICacheService } from '../interfaces/cache.interface';\nimport type { ICacheKeyFactory } from '../interfaces/cache.interface';\nimport type { InvalidationResult } from '../interfaces/cache.interface';\nimport { PinoLoggerService, LogContext } from '@aiofix/logging';\n\n/**\n * @enum InvalidationStrategy\n * @description\n * \u7F13\u5B58\u5931\u6548\u7B56\u7565\u679A\u4E3E\uFF0C\u5B9A\u4E49\u4E0D\u540C\u7684\u5931\u6548\u7B56\u7565\u3002\n */\nexport enum InvalidationStrategy {\n  /** \u7CBE\u786E\u5339\u914D */\n  EXACT = 'exact',\n  /** \u524D\u7F00\u5339\u914D */\n  PREFIX = 'prefix',\n  /** \u540E\u7F00\u5339\u914D */\n  SUFFIX = 'suffix',\n  /** \u901A\u914D\u7B26\u5339\u914D */\n  WILDCARD = 'wildcard',\n  /** \u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D */\n  REGEX = 'regex',\n  /** \u6807\u7B7E\u5339\u914D */\n  TAG = 'tag',\n  /** \u547D\u540D\u7A7A\u95F4\u5339\u914D */\n  NAMESPACE = 'namespace',\n  /** \u6279\u91CF\u5931\u6548 */\n  BATCH = 'batch',\n}\n\n/**\n * @enum InvalidationTrigger\n * @description\n * \u7F13\u5B58\u5931\u6548\u89E6\u53D1\u5668\u679A\u4E3E\uFF0C\u5B9A\u4E49\u5931\u6548\u7684\u89E6\u53D1\u65B9\u5F0F\u3002\n */\nexport enum InvalidationTrigger {\n  /** \u624B\u52A8\u89E6\u53D1 */\n  MANUAL = 'manual',\n  /** \u5B9A\u65F6\u89E6\u53D1 */\n  SCHEDULED = 'scheduled',\n  /** \u4E8B\u4EF6\u89E6\u53D1 */\n  EVENT = 'event',\n  /** \u6761\u4EF6\u89E6\u53D1 */\n  CONDITIONAL = 'conditional',\n  /** \u4F9D\u8D56\u89E6\u53D1 */\n  DEPENDENCY = 'dependency',\n}\n\n/**\n * @interface InvalidationRule\n * @description\n * \u7F13\u5B58\u5931\u6548\u89C4\u5219\u63A5\u53E3\uFF0C\u5B9A\u4E49\u5931\u6548\u89C4\u5219\u7684\u4FE1\u606F\u3002\n */\nexport interface InvalidationRule {\n  /** \u89C4\u5219ID */\n  readonly id: string;\n  /** \u89C4\u5219\u540D\u79F0 */\n  readonly name: string;\n  /** \u89C4\u5219\u63CF\u8FF0 */\n  readonly description?: string;\n  /** \u5931\u6548\u7B56\u7565 */\n  readonly strategy: InvalidationStrategy;\n  /** \u5339\u914D\u6A21\u5F0F */\n  readonly pattern: string;\n  /** \u89E6\u53D1\u5668 */\n  readonly trigger: InvalidationTrigger;\n  /** \u662F\u5426\u542F\u7528 */\n  readonly enabled: boolean;\n  /** \u4F18\u5148\u7EA7 */\n  readonly priority: number;\n  /** \u6761\u4EF6\u8868\u8FBE\u5F0F */\n  readonly condition?: string;\n  /** \u4F9D\u8D56\u89C4\u5219 */\n  readonly dependencies?: string[];\n  /** \u5B9A\u65F6\u8868\u8FBE\u5F0F */\n  readonly schedule?: string;\n  /** \u4E8B\u4EF6\u7C7B\u578B */\n  readonly eventType?: string;\n  /** \u6807\u7B7E */\n  readonly tags?: string[];\n  /** \u5143\u6570\u636E */\n  readonly metadata?: Record<string, unknown>;\n  /** \u521B\u5EFA\u65F6\u95F4 */\n  readonly createdAt: Date;\n  /** \u66F4\u65B0\u65F6\u95F4 */\n  readonly updatedAt: Date;\n}\n\n/**\n * @interface InvalidationStats\n * @description\n * \u7F13\u5B58\u5931\u6548\u7EDF\u8BA1\u4FE1\u606F\u63A5\u53E3\u3002\n */\nexport interface InvalidationStats {\n  /** \u603B\u5931\u6548\u6B21\u6570 */\n  totalInvalidations: number;\n  /** \u6210\u529F\u5931\u6548\u6B21\u6570 */\n  successfulInvalidations: number;\n  /** \u5931\u8D25\u5931\u6548\u6B21\u6570 */\n  failedInvalidations: number;\n  /** \u5E73\u5747\u6267\u884C\u65F6\u95F4 */\n  averageExecutionTime: number;\n  /** \u603B\u5931\u6548\u952E\u6570 */\n  totalInvalidatedKeys: number;\n  /** \u6D3B\u8DC3\u89C4\u5219\u6570 */\n  activeRules: number;\n  /** \u6700\u540E\u5931\u6548\u65F6\u95F4 */\n  lastInvalidation: Date;\n  /** \u5404\u7B56\u7565\u4F7F\u7528\u7EDF\u8BA1 */\n  strategyUsage: Record<InvalidationStrategy, number>;\n  /** \u5404\u89E6\u53D1\u5668\u4F7F\u7528\u7EDF\u8BA1 */\n  triggerUsage: Record<InvalidationTrigger, number>;\n}\n\n/**\n * @interface CacheInvalidationConfig\n * @description\n * \u7F13\u5B58\u5931\u6548\u670D\u52A1\u914D\u7F6E\u63A5\u53E3\u3002\n */\nexport interface CacheInvalidationConfig {\n  /** \u662F\u5426\u542F\u7528\u81EA\u52A8\u5931\u6548 */\n  enabled?: boolean;\n  /** \u9ED8\u8BA4\u5931\u6548\u7B56\u7565 */\n  defaultStrategy?: InvalidationStrategy;\n  /** \u6279\u91CF\u5931\u6548\u5927\u5C0F */\n  batchSize?: number;\n  /** \u5E76\u53D1\u5931\u6548\u6570 */\n  concurrency?: number;\n  /** \u8D85\u65F6\u65F6\u95F4\uFF08\u6BEB\u79D2\uFF09 */\n  timeout?: number;\n  /** \u91CD\u8BD5\u6B21\u6570 */\n  retries?: number;\n  /** \u91CD\u8BD5\u5EF6\u8FDF\uFF08\u6BEB\u79D2\uFF09 */\n  retryDelay?: number;\n  /** \u662F\u5426\u542F\u7528\u7EDF\u8BA1 */\n  enableStats?: boolean;\n  /** \u662F\u5426\u542F\u7528\u4E8B\u4EF6 */\n  enableEvents?: boolean;\n  /** \u76D1\u63A7\u95F4\u9694\uFF08\u6BEB\u79D2\uFF09 */\n  monitoringInterval?: number;\n}\n\n/**\n * @class CacheInvalidationService\n * @description\n * \u7F13\u5B58\u5931\u6548\u670D\u52A1\uFF0C\u63D0\u4F9B\u7075\u6D3B\u7684\u7F13\u5B58\u5931\u6548\u7BA1\u7406\u529F\u80FD\u3002\n *\n * \u4E3B\u8981\u529F\u80FD\u5305\u62EC\uFF1A\n * 1. \u652F\u6301\u591A\u79CD\u5931\u6548\u7B56\u7565\uFF08\u7CBE\u786E\u5339\u914D\u3001\u901A\u914D\u7B26\u3001\u6B63\u5219\u8868\u8FBE\u5F0F\u7B49\uFF09\n * 2. \u652F\u6301\u591A\u79CD\u89E6\u53D1\u65B9\u5F0F\uFF08\u624B\u52A8\u3001\u5B9A\u65F6\u3001\u4E8B\u4EF6\u3001\u6761\u4EF6\u7B49\uFF09\n * 3. \u63D0\u4F9B\u89C4\u5219\u7BA1\u7406\u548C\u4F18\u5148\u7EA7\u63A7\u5236\n * 4. \u652F\u6301\u6279\u91CF\u5931\u6548\u548C\u5E76\u53D1\u5904\u7406\n * 5. \u63D0\u4F9B\u8BE6\u7EC6\u7684\u7EDF\u8BA1\u548C\u76D1\u63A7\n * 6. \u652F\u6301\u4F9D\u8D56\u5173\u7CFB\u548C\u6761\u4EF6\u8868\u8FBE\u5F0F\n *\n * @implements {ICacheService}\n */\n@Injectable()\nexport class CacheInvalidationService {\n  /**\n   * \u5931\u6548\u89C4\u5219\u6620\u5C04\n   */\n  private readonly rules = new Map<string, InvalidationRule>();\n\n  /**\n   * \u7F13\u5B58\u670D\u52A1\u5B9E\u4F8B\n   */\n  private cacheService: ICacheService | null = null;\n\n  /**\n   * \u670D\u52A1\u914D\u7F6E\n   */\n  private config: CacheInvalidationConfig;\n\n  /**\n   * \u7EDF\u8BA1\u4FE1\u606F\n   */\n  private stats: InvalidationStats;\n\n  /**\n   * \u76D1\u63A7\u5B9A\u65F6\u5668\n   */\n  private monitoringTimer?: NodeJS.Timeout;\n\n  constructor(\n    @Inject('CACHE_INVALIDATION_CONFIG') config: CacheInvalidationConfig,\n    @Inject('ICacheKeyFactory') private readonly keyFactory: ICacheKeyFactory,\n    private readonly eventEmitter: EventEmitter2,\n    @Inject(PinoLoggerService) private readonly logger: PinoLoggerService,\n  ) {\n    this.config = {\n      enabled: true,\n      defaultStrategy: InvalidationStrategy.EXACT,\n      batchSize: 100,\n      concurrency: 5,\n      timeout: 30000,\n      retries: 3,\n      retryDelay: 1000,\n      enableStats: true,\n      enableEvents: true,\n      monitoringInterval: 60000,\n      ...config,\n    };\n\n    this.stats = this.initializeStats();\n    this.startMonitoring();\n\n    this.logger.info('CacheInvalidationService initialized', LogContext.CACHE);\n  }\n\n  /**\n   * @method setCacheService\n   * @description \u8BBE\u7F6E\u7F13\u5B58\u670D\u52A1\u5B9E\u4F8B\n   * @param cacheService \u7F13\u5B58\u670D\u52A1\u5B9E\u4F8B\n   */\n  setCacheService(cacheService: ICacheService): void {\n    this.cacheService = cacheService;\n    this.logger.info(\n      'Cache service set for invalidation service',\n      LogContext.CACHE,\n    );\n  }\n\n  /**\n   * @method addRule\n   * @description \u6DFB\u52A0\u5931\u6548\u89C4\u5219\n   * @param rule \u5931\u6548\u89C4\u5219\n   * @returns {boolean} \u662F\u5426\u6210\u529F\n   */\n  addRule(\n    rule: Omit<InvalidationRule, 'id' | 'createdAt' | 'updatedAt'> & {\n      id?: string;\n    },\n  ): boolean {\n    try {\n      const ruleId = rule.id ?? uuidv4();\n      const now = new Date();\n\n      const fullRule: InvalidationRule = {\n        ...rule,\n        id: ruleId,\n        createdAt: now,\n        updatedAt: now,\n      };\n\n      this.rules.set(ruleId, fullRule);\n\n      this.logger.info(\n        `Added invalidation rule: ${rule.name}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('rule_added', { rule: fullRule });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to add invalidation rule: ${rule.name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method removeRule\n   * @description \u79FB\u9664\u5931\u6548\u89C4\u5219\n   * @param ruleId \u89C4\u5219ID\n   * @returns {boolean} \u662F\u5426\u6210\u529F\n   */\n  removeRule(ruleId: string): boolean {\n    try {\n      if (!this.rules.has(ruleId)) {\n        this.logger.warn(\n          `Invalidation rule not found: ${ruleId}`,\n          LogContext.CACHE,\n        );\n        return false;\n      }\n\n      const rule = this.rules.get(ruleId);\n      if (!rule) {\n        throw new Error(`Invalidation rule not found: ${ruleId}`);\n      }\n      this.rules.delete(ruleId);\n\n      this.logger.info(\n        `Removed invalidation rule: ${rule.name}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('rule_removed', { rule });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to remove invalidation rule: ${ruleId}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method updateRule\n   * @description \u66F4\u65B0\u5931\u6548\u89C4\u5219\n   * @param ruleId \u89C4\u5219ID\n   * @param updates \u66F4\u65B0\u5185\u5BB9\n   * @returns {boolean} \u662F\u5426\u6210\u529F\n   */\n  updateRule(\n    ruleId: string,\n    updates: Partial<Omit<InvalidationRule, 'id' | 'createdAt'>>,\n  ): boolean {\n    try {\n      if (!this.rules.has(ruleId)) {\n        this.logger.warn(\n          `Invalidation rule not found: ${ruleId}`,\n          LogContext.CACHE,\n        );\n        return false;\n      }\n\n      const existingRule = this.rules.get(ruleId)!;\n      const updatedRule: InvalidationRule = {\n        ...existingRule,\n        ...updates,\n        updatedAt: new Date(),\n      };\n\n      this.rules.set(ruleId, updatedRule);\n\n      this.logger.info(\n        `Updated invalidation rule: ${updatedRule.name}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('rule_updated', { rule: updatedRule });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to update invalidation rule: ${ruleId}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method getRule\n   * @description \u83B7\u53D6\u5931\u6548\u89C4\u5219\n   * @param ruleId \u89C4\u5219ID\n   * @returns {InvalidationRule | null} \u5931\u6548\u89C4\u5219\n   */\n  getRule(ruleId: string): InvalidationRule | null {\n    return this.rules.get(ruleId) ?? null;\n  }\n\n  /**\n   * @method getAllRules\n   * @description \u83B7\u53D6\u6240\u6709\u5931\u6548\u89C4\u5219\n   * @param enabledOnly \u662F\u5426\u53EA\u8FD4\u56DE\u542F\u7528\u7684\u89C4\u5219\n   * @returns {InvalidationRule[]} \u5931\u6548\u89C4\u5219\u5217\u8868\n   */\n  getAllRules(enabledOnly?: boolean): InvalidationRule[] {\n    const rules = Array.from(this.rules.values());\n\n    if (enabledOnly) {\n      return rules.filter(rule => rule.enabled);\n    }\n\n    return rules;\n  }\n\n  /**\n   * @method invalidate\n   * @description \u6267\u884C\u7F13\u5B58\u5931\u6548\n   * @param target \u5931\u6548\u76EE\u6807\uFF08\u952E\u3001\u6A21\u5F0F\u3001\u6807\u7B7E\u7B49\uFF09\n   * @param strategy \u5931\u6548\u7B56\u7565\n   * @param options \u5931\u6548\u9009\u9879\n   * @returns {Promise<InvalidationResult>} \u5931\u6548\u7ED3\u679C\n   */\n  async invalidate(\n    target: string | string[],\n    strategy: InvalidationStrategy = this.config.defaultStrategy!,\n    options?: {\n      namespace?: string;\n      tags?: string[];\n      timeout?: number;\n      retries?: number;\n      metadata?: Record<string, unknown>;\n    },\n  ): Promise<InvalidationResult> {\n    const startTime = Date.now();\n    const targets = Array.isArray(target) ? target : [target];\n\n    try {\n      if (!this.cacheService) {\n        throw new Error('Cache service not set');\n      }\n\n      const result: InvalidationResult = {\n        invalidatedKeys: 0,\n        invalidatedNamespaces: 0,\n        invalidatedTags: 0,\n        keys: [],\n        namespaces: [],\n        tags: [],\n        invalidatedAt: new Date(),\n        executionTime: 0,\n        success: false,\n        metadata: options?.metadata ?? {},\n      };\n\n      // \u6839\u636E\u7B56\u7565\u6267\u884C\u5931\u6548\n      switch (strategy) {\n        case InvalidationStrategy.EXACT:\n          result.keys = await this.invalidateExact(targets);\n          break;\n        case InvalidationStrategy.PREFIX:\n          result.namespaces = await this.invalidatePrefix(targets);\n          break;\n        case InvalidationStrategy.SUFFIX:\n          result.keys = await this.invalidateSuffix(targets);\n          break;\n        case InvalidationStrategy.WILDCARD:\n          result.keys = await this.invalidateWildcard(targets);\n          break;\n        case InvalidationStrategy.REGEX:\n          result.keys = await this.invalidateRegex(targets);\n          break;\n        case InvalidationStrategy.TAG:\n          result.tags = await this.invalidateTags(targets);\n          break;\n        case InvalidationStrategy.NAMESPACE:\n          result.namespaces = await this.invalidateNamespaces(targets);\n          break;\n        case InvalidationStrategy.BATCH:\n          result.keys = await this.invalidateBatch(targets);\n          break;\n        default:\n          throw new Error(\n            `Unsupported invalidation strategy: ${strategy as string}`,\n          );\n      }\n\n      result.invalidatedKeys = result.keys.length;\n      result.invalidatedNamespaces = result.namespaces.length;\n      result.invalidatedTags = result.tags.length;\n      result.executionTime = Date.now() - startTime;\n      result.success = true;\n\n      // \u66F4\u65B0\u7EDF\u8BA1\n      this.updateStats(strategy, result.executionTime, result.invalidatedKeys);\n\n      this.logger.info(\n        `Cache invalidation completed: ${result.invalidatedKeys} keys, ${result.executionTime}ms`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('invalidation_completed', { result, strategy });\n\n      return result;\n    } catch (error) {\n      const executionTime = Date.now() - startTime;\n      this.updateStats(strategy, executionTime, 0, true);\n\n      this.logger.error(\n        `Cache invalidation failed: ${(error as Error).message}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('invalidation_failed', { error, strategy, targets });\n\n      return {\n        invalidatedKeys: 0,\n        invalidatedNamespaces: 0,\n        invalidatedTags: 0,\n        keys: [],\n        namespaces: [],\n        tags: [],\n        invalidatedAt: new Date(),\n        executionTime,\n        success: false,\n        error: (error as Error).message,\n        metadata: options?.metadata ?? {},\n      };\n    }\n  }\n\n  /**\n   * @method invalidateByRule\n   * @description \u6839\u636E\u89C4\u5219\u6267\u884C\u7F13\u5B58\u5931\u6548\n   * @param ruleId \u89C4\u5219ID\n   * @param _context \u6267\u884C\u4E0A\u4E0B\u6587\n   * @returns {Promise<InvalidationResult>} \u5931\u6548\u7ED3\u679C\n   */\n  async invalidateByRule(\n    ruleId: string,\n    _context?: Record<string, unknown>,\n  ): Promise<InvalidationResult> {\n    const rule = this.getRule(ruleId);\n    if (!rule) {\n      throw new Error(`Invalidation rule not found: ${ruleId}`);\n    }\n\n    if (!rule.enabled) {\n      this.logger.warn(\n        `Invalidation rule is disabled: ${rule.name}`,\n        LogContext.CACHE,\n      );\n      return {\n        invalidatedKeys: 0,\n        invalidatedNamespaces: 0,\n        invalidatedTags: 0,\n        keys: [],\n        namespaces: [],\n        tags: [],\n        invalidatedAt: new Date(),\n        executionTime: 0,\n        success: false,\n        error: 'Rule is disabled',\n      };\n    }\n\n    // \u68C0\u67E5\u6761\u4EF6\n    if (rule.condition && !this.evaluateCondition(rule.condition, _context)) {\n      this.logger.debug(\n        `Invalidation rule condition not met: ${rule.name}`,\n        LogContext.CACHE,\n      );\n      return {\n        invalidatedKeys: 0,\n        invalidatedNamespaces: 0,\n        invalidatedTags: 0,\n        keys: [],\n        namespaces: [],\n        tags: [],\n        invalidatedAt: new Date(),\n        executionTime: 0,\n        success: false,\n        error: 'Condition not met',\n      };\n    }\n\n    // \u68C0\u67E5\u4F9D\u8D56\n    if (rule.dependencies && rule.dependencies.length > 0) {\n      for (const depId of rule.dependencies) {\n        const depRule = this.getRule(depId);\n        if (!depRule?.enabled) {\n          this.logger.warn(\n            `Dependency rule not found or disabled: ${depId}`,\n            LogContext.CACHE,\n          );\n          return {\n            invalidatedKeys: 0,\n            invalidatedNamespaces: 0,\n            invalidatedTags: 0,\n            keys: [],\n            namespaces: [],\n            tags: [],\n            invalidatedAt: new Date(),\n            executionTime: 0,\n            success: false,\n            error: 'Dependency not satisfied',\n          };\n        }\n      }\n    }\n\n    return this.invalidate(rule.pattern, rule.strategy, {\n      metadata: { ruleId, ruleName: rule.name, _context },\n    });\n  }\n\n  /**\n   * @method getStats\n   * @description \u83B7\u53D6\u5931\u6548\u7EDF\u8BA1\u4FE1\u606F\n   * @returns {InvalidationStats} \u7EDF\u8BA1\u4FE1\u606F\n   */\n  getStats(): InvalidationStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * @method resetStats\n   * @description \u91CD\u7F6E\u5931\u6548\u7EDF\u8BA1\u4FE1\u606F\n   */\n  resetStats(): void {\n    this.stats = this.initializeStats();\n    this.logger.info('Invalidation stats reset', LogContext.CACHE);\n  }\n\n  /**\n   * @method onDestroy\n   * @description \u9500\u6BC1\u65F6\u6E05\u7406\u8D44\u6E90\n   */\n  onDestroy(): void {\n    this.stopMonitoring();\n    this.logger.info('CacheInvalidationService destroyed', LogContext.CACHE);\n  }\n\n  // \u79C1\u6709\u65B9\u6CD5\n\n  /**\n   * @private\n   * @method initializeStats\n   * @description \u521D\u59CB\u5316\u7EDF\u8BA1\u4FE1\u606F\n   * @returns {InvalidationStats} \u521D\u59CB\u7EDF\u8BA1\u4FE1\u606F\n   */\n  private initializeStats(): InvalidationStats {\n    return {\n      totalInvalidations: 0,\n      successfulInvalidations: 0,\n      failedInvalidations: 0,\n      averageExecutionTime: 0,\n      totalInvalidatedKeys: 0,\n      activeRules: 0,\n      lastInvalidation: new Date(),\n      strategyUsage: Object.values(InvalidationStrategy).reduce(\n        (acc, strategy) => {\n          acc[strategy] = 0;\n          return acc;\n        },\n        {} as Record<InvalidationStrategy, number>,\n      ),\n      triggerUsage: Object.values(InvalidationTrigger).reduce(\n        (acc, trigger) => {\n          acc[trigger] = 0;\n          return acc;\n        },\n        {} as Record<InvalidationTrigger, number>,\n      ),\n    };\n  }\n\n  /**\n   * @private\n   * @method invalidateExact\n   * @description \u7CBE\u786E\u5339\u914D\u5931\u6548\n   * @param keys \u7F13\u5B58\u952E\u5217\u8868\n   * @returns {Promise<string[]>} \u5931\u6548\u7684\u952E\u5217\u8868\n   */\n  private async invalidateExact(keys: string[]): Promise<string[]> {\n    const invalidatedKeys: string[] = [];\n\n    for (const key of keys) {\n      try {\n        // \u89E3\u6790\u5B8C\u6574\u7684\u952E\u5B57\u7B26\u4E32\n        const cacheKey = this.keyFactory.parse(key);\n        const deleted = await this.cacheService!.delete(cacheKey);\n        if (deleted) {\n          invalidatedKeys.push(key);\n        }\n      } catch (error) {\n        this.logger.warn(\n          `Failed to invalidate exact key: ${key}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n\n    return invalidatedKeys;\n  }\n\n  /**\n   * @private\n   * @method invalidatePrefix\n   * @description \u524D\u7F00\u5339\u914D\u5931\u6548\n   * @param prefixes \u524D\u7F00\u5217\u8868\n   * @returns {Promise<string[]>} \u5931\u6548\u7684\u952E\u5217\u8868\n   */\n  private async invalidatePrefix(prefixes: string[]): Promise<string[]> {\n    // \u8FD9\u91CC\u9700\u8981\u7F13\u5B58\u670D\u52A1\u652F\u6301\u524D\u7F00\u67E5\u8BE2\uFF0C\u7B80\u5316\u5B9E\u73B0\n    const invalidatedKeys: string[] = [];\n\n    for (const prefix of prefixes) {\n      try {\n        // \u5047\u8BBE\u7F13\u5B58\u670D\u52A1\u652F\u6301\u6309\u547D\u540D\u7A7A\u95F4\u6E05\u9664\n        const cleared = await this.cacheService!.clear(prefix);\n        if (cleared) {\n          invalidatedKeys.push(prefix);\n        }\n      } catch (error) {\n        this.logger.warn(\n          `Failed to invalidate prefix: ${prefix}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n\n    return invalidatedKeys;\n  }\n\n  /**\n   * @private\n   * @method invalidateSuffix\n   * @description \u540E\u7F00\u5339\u914D\u5931\u6548\n   * @param _suffixes \u540E\u7F00\u5217\u8868\n   * @returns {Promise<string[]>} \u5931\u6548\u7684\u952E\u5217\u8868\n   */\n  private async invalidateSuffix(_suffixes: string[]): Promise<string[]> {\n    // \u7B80\u5316\u5B9E\u73B0\uFF0C\u5B9E\u9645\u9700\u8981\u7F13\u5B58\u670D\u52A1\u652F\u6301\u540E\u7F00\u67E5\u8BE2\n    const invalidatedKeys: string[] = [];\n\n    // \u8FD9\u91CC\u9700\u8981\u904D\u5386\u6240\u6709\u7F13\u5B58\u952E\u6765\u5339\u914D\u540E\u7F00\n    // \u5B9E\u9645\u5B9E\u73B0\u4E2D\u53EF\u80FD\u9700\u8981\u7F13\u5B58\u670D\u52A1\u63D0\u4F9B\u952E\u5217\u8868\u67E5\u8BE2\u529F\u80FD\n\n    return invalidatedKeys;\n  }\n\n  /**\n   * @private\n   * @method invalidateWildcard\n   * @description \u901A\u914D\u7B26\u5339\u914D\u5931\u6548\n   * @param patterns \u901A\u914D\u7B26\u6A21\u5F0F\u5217\u8868\n   * @returns {Promise<string[]>} \u5931\u6548\u7684\u952E\u5217\u8868\n   */\n  private async invalidateWildcard(patterns: string[]): Promise<string[]> {\n    const invalidatedKeys: string[] = [];\n\n    for (const pattern of patterns) {\n      try {\n        // \u4EC5\u8BB0\u5F55\u6A21\u5F0F\uFF0C\u5B9E\u9645\u5339\u914D\u4F9D\u8D56\u5177\u4F53\u7F13\u5B58\u5B9E\u73B0\n        this.logger.debug(\n          `Wildcard invalidation pattern: ${pattern}`,\n          LogContext.CACHE,\n        );\n      } catch (error) {\n        this.logger.warn(\n          `Failed to invalidate wildcard pattern: ${pattern}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n\n    return invalidatedKeys;\n  }\n\n  /**\n   * @private\n   * @method invalidateRegex\n   * @description \u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D\u5931\u6548\n   * @param patterns \u6B63\u5219\u8868\u8FBE\u5F0F\u6A21\u5F0F\u5217\u8868\n   * @returns {Promise<string[]>} \u5931\u6548\u7684\u952E\u5217\u8868\n   */\n  private async invalidateRegex(patterns: string[]): Promise<string[]> {\n    const invalidatedKeys: string[] = [];\n\n    for (const pattern of patterns) {\n      try {\n        // \u4EC5\u8BB0\u5F55\u6A21\u5F0F\uFF0C\u5B9E\u9645\u5339\u914D\u4F9D\u8D56\u5177\u4F53\u7F13\u5B58\u5B9E\u73B0\n        this.logger.debug(\n          `Regex invalidation pattern: ${pattern}`,\n          LogContext.CACHE,\n        );\n      } catch (error) {\n        this.logger.warn(\n          `Failed to invalidate regex pattern: ${pattern}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n\n    return invalidatedKeys;\n  }\n\n  /**\n   * @private\n   * @method invalidateTags\n   * @description \u6807\u7B7E\u5339\u914D\u5931\u6548\n   * @param tags \u6807\u7B7E\u5217\u8868\n   * @returns {Promise<string[]>} \u5931\u6548\u7684\u6807\u7B7E\u5217\u8868\n   */\n  private async invalidateTags(tags: string[]): Promise<string[]> {\n    // \u7B80\u5316\u5B9E\u73B0\uFF0C\u5B9E\u9645\u9700\u8981\u7F13\u5B58\u670D\u52A1\u652F\u6301\u6807\u7B7E\u67E5\u8BE2\n    const invalidatedTags: string[] = [];\n\n    for (const tag of tags) {\n      try {\n        // \u8FD9\u91CC\u9700\u8981\u7F13\u5B58\u670D\u52A1\u652F\u6301\u6807\u7B7E\u5931\u6548\n        this.logger.debug(`Tag invalidation: ${tag}`, LogContext.CACHE);\n        invalidatedTags.push(tag);\n      } catch (error) {\n        this.logger.warn(\n          `Failed to invalidate tag: ${tag}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n\n    return invalidatedTags;\n  }\n\n  /**\n   * @private\n   * @method invalidateNamespaces\n   * @description \u547D\u540D\u7A7A\u95F4\u5339\u914D\u5931\u6548\n   * @param namespaces \u547D\u540D\u7A7A\u95F4\u5217\u8868\n   * @returns {Promise<string[]>} \u5931\u6548\u7684\u547D\u540D\u7A7A\u95F4\u5217\u8868\n   */\n  private async invalidateNamespaces(namespaces: string[]): Promise<string[]> {\n    const invalidatedNamespaces: string[] = [];\n\n    for (const namespace of namespaces) {\n      try {\n        const cleared = await this.cacheService!.clear(namespace);\n        if (cleared) {\n          invalidatedNamespaces.push(namespace);\n        }\n      } catch (error) {\n        this.logger.warn(\n          `Failed to invalidate namespace: ${namespace}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n\n    return invalidatedNamespaces;\n  }\n\n  /**\n   * @private\n   * @method invalidateBatch\n   * @description \u6279\u91CF\u5931\u6548\n   * @param targets \u76EE\u6807\u5217\u8868\n   * @returns {Promise<string[]>} \u5931\u6548\u7684\u952E\u5217\u8868\n   */\n  private async invalidateBatch(targets: string[]): Promise<string[]> {\n    const invalidatedKeys: string[] = [];\n    const batchSize = this.config.batchSize ?? 100;\n\n    // \u5206\u6279\u5904\u7406\n    for (let i = 0; i < targets.length; i += batchSize) {\n      const batch = targets.slice(i, i + batchSize);\n\n      try {\n        const batchKeys = await this.invalidateExact(batch);\n        invalidatedKeys.push(...batchKeys);\n      } catch (error) {\n        this.logger.warn(\n          `Failed to invalidate batch ${i / batchSize + 1}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n\n    return invalidatedKeys;\n  }\n\n  /**\n   * @private\n   * @method evaluateCondition\n   * @description \u8BC4\u4F30\u6761\u4EF6\u8868\u8FBE\u5F0F\n   * @param condition \u6761\u4EF6\u8868\u8FBE\u5F0F\n   * @param _context \u6267\u884C\u4E0A\u4E0B\u6587\n   * @returns {boolean} \u6761\u4EF6\u662F\u5426\u6EE1\u8DB3\n   */\n  private evaluateCondition(\n    condition: string,\n    _context?: Record<string, unknown>,\n  ): boolean {\n    try {\n      // \u7B80\u5316\u5B9E\u73B0\uFF0C\u5B9E\u9645\u53EF\u4EE5\u4F7F\u7528\u8868\u8FBE\u5F0F\u5F15\u64CE\n      // \u8FD9\u91CC\u53EA\u662F\u793A\u4F8B\uFF0C\u5B9E\u9645\u5B9E\u73B0\u9700\u8981\u66F4\u590D\u6742\u7684\u8868\u8FBE\u5F0F\u89E3\u6790\n      return true;\n    } catch (error) {\n      this.logger.warn(\n        `Failed to evaluate condition: ${condition}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @private\n   * @method updateStats\n   * @description \u66F4\u65B0\u7EDF\u8BA1\u4FE1\u606F\n   * @param strategy \u5931\u6548\u7B56\u7565\n   * @param executionTime \u6267\u884C\u65F6\u95F4\n   * @param invalidatedKeys \u5931\u6548\u952E\u6570\n   * @param failed \u662F\u5426\u5931\u8D25\n   */\n  private updateStats(\n    strategy: InvalidationStrategy,\n    executionTime: number,\n    invalidatedKeys: number,\n    failed = false,\n  ): void {\n    this.stats.totalInvalidations++;\n\n    if (failed) {\n      this.stats.failedInvalidations++;\n    } else {\n      this.stats.successfulInvalidations++;\n      this.stats.totalInvalidatedKeys += invalidatedKeys;\n    }\n\n    this.stats.averageExecutionTime =\n      (this.stats.averageExecutionTime * (this.stats.totalInvalidations - 1) +\n        executionTime) /\n      this.stats.totalInvalidations;\n\n    this.stats.lastInvalidation = new Date();\n    this.stats.activeRules = Array.from(this.rules.values()).filter(\n      rule => rule.enabled,\n    ).length;\n\n    this.stats.strategyUsage[strategy]++;\n  }\n\n  /**\n   * @private\n   * @method emitEvent\n   * @description \u53D1\u9001\u5931\u6548\u4E8B\u4EF6\n   * @param type \u4E8B\u4EF6\u7C7B\u578B\n   * @param _data \u4E8B\u4EF6\u6570\u636E\n   */\n  private emitEvent(type: string, _data: Record<string, unknown>): void {\n    if (this.config.enableEvents) {\n      try {\n        this.eventEmitter.emit(`cache.invalidation.${type}`, {\n          type,\n          data: _data,\n          timestamp: new Date(),\n          serviceId: 'cache-invalidation',\n        });\n      } catch (error) {\n        this.logger.warn(\n          `Failed to emit invalidation event: ${type}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @method startMonitoring\n   * @description \u5F00\u59CB\u76D1\u63A7\n   */\n  private startMonitoring(): void {\n    if (this.config.monitoringInterval && this.config.monitoringInterval > 0) {\n      this.monitoringTimer = setInterval(() => {\n        this.performMonitoring().catch(error => {\n          this.logger.error(\n            'Invalidation monitoring failed',\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        });\n      }, this.config.monitoringInterval);\n\n      this.logger.info(\n        `Started invalidation monitoring, interval: ${this.config.monitoringInterval}ms`,\n        LogContext.CACHE,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method stopMonitoring\n   * @description \u505C\u6B62\u76D1\u63A7\n   */\n  private stopMonitoring(): void {\n    if (this.monitoringTimer) {\n      clearInterval(this.monitoringTimer);\n      this.monitoringTimer = undefined;\n      this.logger.info('Stopped invalidation monitoring', LogContext.CACHE);\n    }\n  }\n\n  /**\n   * @private\n   * @method performMonitoring\n   * @description \u6267\u884C\u76D1\u63A7\n   */\n  private async performMonitoring(): Promise<void> {\n    try {\n      const stats = this.getStats();\n      this.emitEvent('monitoring', { stats });\n\n      // \u68C0\u67E5\u6D3B\u8DC3\u89C4\u5219\n      const activeRules = Array.from(this.rules.values()).filter(\n        rule => rule.enabled,\n      );\n      this.logger.debug(\n        `Active invalidation rules: ${activeRules.length}`,\n        LogContext.CACHE,\n      );\n    } catch (error) {\n      this.logger.error(\n        'Invalidation monitoring execution failed',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "473dd60daf040efeb16b36c33747cbda7ab06ac7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_14ou5qt163 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_14ou5qt163();
var __decorate =
/* istanbul ignore next */
(cov_14ou5qt163().s[0]++,
/* istanbul ignore next */
(cov_14ou5qt163().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_14ou5qt163().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_14ou5qt163().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_14ou5qt163().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_14ou5qt163().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_14ou5qt163().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_14ou5qt163().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_14ou5qt163().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_14ou5qt163().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_14ou5qt163().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_14ou5qt163().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_14ou5qt163().b[3][0]++;
    cov_14ou5qt163().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_14ou5qt163().b[3][1]++;
    cov_14ou5qt163().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_14ou5qt163().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_14ou5qt163().b[5][0]++;
        cov_14ou5qt163().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_14ou5qt163().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_14ou5qt163().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_14ou5qt163().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_14ou5qt163().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_14ou5qt163().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_14ou5qt163().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_14ou5qt163().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_14ou5qt163().s[9]++;
  return /* istanbul ignore next */(cov_14ou5qt163().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_14ou5qt163().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_14ou5qt163().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_14ou5qt163().s[10]++,
/* istanbul ignore next */
(cov_14ou5qt163().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_14ou5qt163().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_14ou5qt163().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_14ou5qt163().f[1]++;
  cov_14ou5qt163().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_14ou5qt163().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_14ou5qt163().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_14ou5qt163().b[11][0]++;
    cov_14ou5qt163().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_14ou5qt163().b[11][1]++;
  }
}));
var __param =
/* istanbul ignore next */
(cov_14ou5qt163().s[13]++,
/* istanbul ignore next */
(cov_14ou5qt163().b[13][0]++, this) &&
/* istanbul ignore next */
(cov_14ou5qt163().b[13][1]++, this.__param) ||
/* istanbul ignore next */
(cov_14ou5qt163().b[13][2]++, function (paramIndex, decorator) {
  /* istanbul ignore next */
  cov_14ou5qt163().f[2]++;
  cov_14ou5qt163().s[14]++;
  return function (target, key) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[3]++;
    cov_14ou5qt163().s[15]++;
    decorator(target, key, paramIndex);
  };
}));
var _a, _b;
/* istanbul ignore next */
cov_14ou5qt163().s[16]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_14ou5qt163().s[17]++;
exports.CacheInvalidationService = exports.InvalidationTrigger = exports.InvalidationStrategy = void 0;
const common_1 =
/* istanbul ignore next */
(cov_14ou5qt163().s[18]++, require("@nestjs/common"));
const event_emitter_1 =
/* istanbul ignore next */
(cov_14ou5qt163().s[19]++, require("@nestjs/event-emitter"));
const uuid_1 =
/* istanbul ignore next */
(cov_14ou5qt163().s[20]++, require("uuid"));
const logging_1 =
/* istanbul ignore next */
(cov_14ou5qt163().s[21]++, require("@aiofix/logging"));
/**
 * @enum InvalidationStrategy
 * @description
 * 缓存失效策略枚举，定义不同的失效策略。
 */
var InvalidationStrategy;
/* istanbul ignore next */
cov_14ou5qt163().s[22]++;
(function (InvalidationStrategy) {
  /* istanbul ignore next */
  cov_14ou5qt163().f[4]++;
  cov_14ou5qt163().s[23]++;
  /** 精确匹配 */
  InvalidationStrategy["EXACT"] = "exact";
  /** 前缀匹配 */
  /* istanbul ignore next */
  cov_14ou5qt163().s[24]++;
  InvalidationStrategy["PREFIX"] = "prefix";
  /** 后缀匹配 */
  /* istanbul ignore next */
  cov_14ou5qt163().s[25]++;
  InvalidationStrategy["SUFFIX"] = "suffix";
  /** 通配符匹配 */
  /* istanbul ignore next */
  cov_14ou5qt163().s[26]++;
  InvalidationStrategy["WILDCARD"] = "wildcard";
  /** 正则表达式匹配 */
  /* istanbul ignore next */
  cov_14ou5qt163().s[27]++;
  InvalidationStrategy["REGEX"] = "regex";
  /** 标签匹配 */
  /* istanbul ignore next */
  cov_14ou5qt163().s[28]++;
  InvalidationStrategy["TAG"] = "tag";
  /** 命名空间匹配 */
  /* istanbul ignore next */
  cov_14ou5qt163().s[29]++;
  InvalidationStrategy["NAMESPACE"] = "namespace";
  /** 批量失效 */
  /* istanbul ignore next */
  cov_14ou5qt163().s[30]++;
  InvalidationStrategy["BATCH"] = "batch";
})(
/* istanbul ignore next */
(cov_14ou5qt163().b[14][0]++, InvalidationStrategy) ||
/* istanbul ignore next */
(cov_14ou5qt163().b[14][1]++, exports.InvalidationStrategy = InvalidationStrategy = {}));
/**
 * @enum InvalidationTrigger
 * @description
 * 缓存失效触发器枚举，定义失效的触发方式。
 */
var InvalidationTrigger;
/* istanbul ignore next */
cov_14ou5qt163().s[31]++;
(function (InvalidationTrigger) {
  /* istanbul ignore next */
  cov_14ou5qt163().f[5]++;
  cov_14ou5qt163().s[32]++;
  /** 手动触发 */
  InvalidationTrigger["MANUAL"] = "manual";
  /** 定时触发 */
  /* istanbul ignore next */
  cov_14ou5qt163().s[33]++;
  InvalidationTrigger["SCHEDULED"] = "scheduled";
  /** 事件触发 */
  /* istanbul ignore next */
  cov_14ou5qt163().s[34]++;
  InvalidationTrigger["EVENT"] = "event";
  /** 条件触发 */
  /* istanbul ignore next */
  cov_14ou5qt163().s[35]++;
  InvalidationTrigger["CONDITIONAL"] = "conditional";
  /** 依赖触发 */
  /* istanbul ignore next */
  cov_14ou5qt163().s[36]++;
  InvalidationTrigger["DEPENDENCY"] = "dependency";
})(
/* istanbul ignore next */
(cov_14ou5qt163().b[15][0]++, InvalidationTrigger) ||
/* istanbul ignore next */
(cov_14ou5qt163().b[15][1]++, exports.InvalidationTrigger = InvalidationTrigger = {}));
/**
 * @class CacheInvalidationService
 * @description
 * 缓存失效服务，提供灵活的缓存失效管理功能。
 *
 * 主要功能包括：
 * 1. 支持多种失效策略（精确匹配、通配符、正则表达式等）
 * 2. 支持多种触发方式（手动、定时、事件、条件等）
 * 3. 提供规则管理和优先级控制
 * 4. 支持批量失效和并发处理
 * 5. 提供详细的统计和监控
 * 6. 支持依赖关系和条件表达式
 *
 * @implements {ICacheService}
 */
/* istanbul ignore next */
cov_14ou5qt163().s[37]++;
let CacheInvalidationService = class CacheInvalidationService {
  constructor(config, keyFactory, eventEmitter, logger) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[6]++;
    cov_14ou5qt163().s[38]++;
    this.keyFactory = keyFactory;
    /* istanbul ignore next */
    cov_14ou5qt163().s[39]++;
    this.eventEmitter = eventEmitter;
    /* istanbul ignore next */
    cov_14ou5qt163().s[40]++;
    this.logger = logger;
    /**
     * 失效规则映射
     */
    /* istanbul ignore next */
    cov_14ou5qt163().s[41]++;
    this.rules = new Map();
    /**
     * 缓存服务实例
     */
    /* istanbul ignore next */
    cov_14ou5qt163().s[42]++;
    this.cacheService = null;
    /* istanbul ignore next */
    cov_14ou5qt163().s[43]++;
    this.config = {
      enabled: true,
      defaultStrategy: InvalidationStrategy.EXACT,
      batchSize: 100,
      concurrency: 5,
      timeout: 30000,
      retries: 3,
      retryDelay: 1000,
      enableStats: true,
      enableEvents: true,
      monitoringInterval: 60000,
      ...config
    };
    /* istanbul ignore next */
    cov_14ou5qt163().s[44]++;
    this.stats = this.initializeStats();
    /* istanbul ignore next */
    cov_14ou5qt163().s[45]++;
    this.startMonitoring();
    /* istanbul ignore next */
    cov_14ou5qt163().s[46]++;
    this.logger.info('CacheInvalidationService initialized', logging_1.LogContext.CACHE);
  }
  /**
   * @method setCacheService
   * @description 设置缓存服务实例
   * @param cacheService 缓存服务实例
   */
  setCacheService(cacheService) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[7]++;
    cov_14ou5qt163().s[47]++;
    this.cacheService = cacheService;
    /* istanbul ignore next */
    cov_14ou5qt163().s[48]++;
    this.logger.info('Cache service set for invalidation service', logging_1.LogContext.CACHE);
  }
  /**
   * @method addRule
   * @description 添加失效规则
   * @param rule 失效规则
   * @returns {boolean} 是否成功
   */
  addRule(rule) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[8]++;
    cov_14ou5qt163().s[49]++;
    try {
      const ruleId =
      /* istanbul ignore next */
      (cov_14ou5qt163().s[50]++,
      /* istanbul ignore next */
      (cov_14ou5qt163().b[16][0]++, rule.id) ??
      /* istanbul ignore next */
      (cov_14ou5qt163().b[16][1]++, (0, uuid_1.v4)()));
      const now =
      /* istanbul ignore next */
      (cov_14ou5qt163().s[51]++, new Date());
      const fullRule =
      /* istanbul ignore next */
      (cov_14ou5qt163().s[52]++, {
        ...rule,
        id: ruleId,
        createdAt: now,
        updatedAt: now
      });
      /* istanbul ignore next */
      cov_14ou5qt163().s[53]++;
      this.rules.set(ruleId, fullRule);
      /* istanbul ignore next */
      cov_14ou5qt163().s[54]++;
      this.logger.info(`Added invalidation rule: ${rule.name}`, logging_1.LogContext.CACHE);
      /* istanbul ignore next */
      cov_14ou5qt163().s[55]++;
      this.emitEvent('rule_added', {
        rule: fullRule
      });
      /* istanbul ignore next */
      cov_14ou5qt163().s[56]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_14ou5qt163().s[57]++;
      this.logger.error(`Failed to add invalidation rule: ${rule.name}`, logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_14ou5qt163().s[58]++;
      return false;
    }
  }
  /**
   * @method removeRule
   * @description 移除失效规则
   * @param ruleId 规则ID
   * @returns {boolean} 是否成功
   */
  removeRule(ruleId) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[9]++;
    cov_14ou5qt163().s[59]++;
    try {
      /* istanbul ignore next */
      cov_14ou5qt163().s[60]++;
      if (!this.rules.has(ruleId)) {
        /* istanbul ignore next */
        cov_14ou5qt163().b[17][0]++;
        cov_14ou5qt163().s[61]++;
        this.logger.warn(`Invalidation rule not found: ${ruleId}`, logging_1.LogContext.CACHE);
        /* istanbul ignore next */
        cov_14ou5qt163().s[62]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_14ou5qt163().b[17][1]++;
      }
      const rule =
      /* istanbul ignore next */
      (cov_14ou5qt163().s[63]++, this.rules.get(ruleId));
      /* istanbul ignore next */
      cov_14ou5qt163().s[64]++;
      if (!rule) {
        /* istanbul ignore next */
        cov_14ou5qt163().b[18][0]++;
        cov_14ou5qt163().s[65]++;
        throw new Error(`Invalidation rule not found: ${ruleId}`);
      } else
      /* istanbul ignore next */
      {
        cov_14ou5qt163().b[18][1]++;
      }
      cov_14ou5qt163().s[66]++;
      this.rules.delete(ruleId);
      /* istanbul ignore next */
      cov_14ou5qt163().s[67]++;
      this.logger.info(`Removed invalidation rule: ${rule.name}`, logging_1.LogContext.CACHE);
      /* istanbul ignore next */
      cov_14ou5qt163().s[68]++;
      this.emitEvent('rule_removed', {
        rule
      });
      /* istanbul ignore next */
      cov_14ou5qt163().s[69]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_14ou5qt163().s[70]++;
      this.logger.error(`Failed to remove invalidation rule: ${ruleId}`, logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_14ou5qt163().s[71]++;
      return false;
    }
  }
  /**
   * @method updateRule
   * @description 更新失效规则
   * @param ruleId 规则ID
   * @param updates 更新内容
   * @returns {boolean} 是否成功
   */
  updateRule(ruleId, updates) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[10]++;
    cov_14ou5qt163().s[72]++;
    try {
      /* istanbul ignore next */
      cov_14ou5qt163().s[73]++;
      if (!this.rules.has(ruleId)) {
        /* istanbul ignore next */
        cov_14ou5qt163().b[19][0]++;
        cov_14ou5qt163().s[74]++;
        this.logger.warn(`Invalidation rule not found: ${ruleId}`, logging_1.LogContext.CACHE);
        /* istanbul ignore next */
        cov_14ou5qt163().s[75]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_14ou5qt163().b[19][1]++;
      }
      const existingRule =
      /* istanbul ignore next */
      (cov_14ou5qt163().s[76]++, this.rules.get(ruleId));
      const updatedRule =
      /* istanbul ignore next */
      (cov_14ou5qt163().s[77]++, {
        ...existingRule,
        ...updates,
        updatedAt: new Date()
      });
      /* istanbul ignore next */
      cov_14ou5qt163().s[78]++;
      this.rules.set(ruleId, updatedRule);
      /* istanbul ignore next */
      cov_14ou5qt163().s[79]++;
      this.logger.info(`Updated invalidation rule: ${updatedRule.name}`, logging_1.LogContext.CACHE);
      /* istanbul ignore next */
      cov_14ou5qt163().s[80]++;
      this.emitEvent('rule_updated', {
        rule: updatedRule
      });
      /* istanbul ignore next */
      cov_14ou5qt163().s[81]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_14ou5qt163().s[82]++;
      this.logger.error(`Failed to update invalidation rule: ${ruleId}`, logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_14ou5qt163().s[83]++;
      return false;
    }
  }
  /**
   * @method getRule
   * @description 获取失效规则
   * @param ruleId 规则ID
   * @returns {InvalidationRule | null} 失效规则
   */
  getRule(ruleId) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[11]++;
    cov_14ou5qt163().s[84]++;
    return /* istanbul ignore next */(cov_14ou5qt163().b[20][0]++, this.rules.get(ruleId)) ??
    /* istanbul ignore next */
    (cov_14ou5qt163().b[20][1]++, null);
  }
  /**
   * @method getAllRules
   * @description 获取所有失效规则
   * @param enabledOnly 是否只返回启用的规则
   * @returns {InvalidationRule[]} 失效规则列表
   */
  getAllRules(enabledOnly) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[12]++;
    const rules =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[85]++, Array.from(this.rules.values()));
    /* istanbul ignore next */
    cov_14ou5qt163().s[86]++;
    if (enabledOnly) {
      /* istanbul ignore next */
      cov_14ou5qt163().b[21][0]++;
      cov_14ou5qt163().s[87]++;
      return rules.filter(rule => {
        /* istanbul ignore next */
        cov_14ou5qt163().f[13]++;
        cov_14ou5qt163().s[88]++;
        return rule.enabled;
      });
    } else
    /* istanbul ignore next */
    {
      cov_14ou5qt163().b[21][1]++;
    }
    cov_14ou5qt163().s[89]++;
    return rules;
  }
  /**
   * @method invalidate
   * @description 执行缓存失效
   * @param target 失效目标（键、模式、标签等）
   * @param strategy 失效策略
   * @param options 失效选项
   * @returns {Promise<InvalidationResult>} 失效结果
   */
  async invalidate(target, strategy =
  /* istanbul ignore next */
  (cov_14ou5qt163().b[22][0]++, this.config.defaultStrategy), options) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[14]++;
    const startTime =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[90]++, Date.now());
    const targets =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[91]++, Array.isArray(target) ?
    /* istanbul ignore next */
    (cov_14ou5qt163().b[23][0]++, target) :
    /* istanbul ignore next */
    (cov_14ou5qt163().b[23][1]++, [target]));
    /* istanbul ignore next */
    cov_14ou5qt163().s[92]++;
    try {
      /* istanbul ignore next */
      cov_14ou5qt163().s[93]++;
      if (!this.cacheService) {
        /* istanbul ignore next */
        cov_14ou5qt163().b[24][0]++;
        cov_14ou5qt163().s[94]++;
        throw new Error('Cache service not set');
      } else
      /* istanbul ignore next */
      {
        cov_14ou5qt163().b[24][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_14ou5qt163().s[95]++, {
        invalidatedKeys: 0,
        invalidatedNamespaces: 0,
        invalidatedTags: 0,
        keys: [],
        namespaces: [],
        tags: [],
        invalidatedAt: new Date(),
        executionTime: 0,
        success: false,
        metadata:
        /* istanbul ignore next */
        (cov_14ou5qt163().b[25][0]++, options?.metadata) ??
        /* istanbul ignore next */
        (cov_14ou5qt163().b[25][1]++, {})
      });
      // 根据策略执行失效
      /* istanbul ignore next */
      cov_14ou5qt163().s[96]++;
      switch (strategy) {
        case InvalidationStrategy.EXACT:
          /* istanbul ignore next */
          cov_14ou5qt163().b[26][0]++;
          cov_14ou5qt163().s[97]++;
          result.keys = await this.invalidateExact(targets);
          /* istanbul ignore next */
          cov_14ou5qt163().s[98]++;
          break;
        case InvalidationStrategy.PREFIX:
          /* istanbul ignore next */
          cov_14ou5qt163().b[26][1]++;
          cov_14ou5qt163().s[99]++;
          result.namespaces = await this.invalidatePrefix(targets);
          /* istanbul ignore next */
          cov_14ou5qt163().s[100]++;
          break;
        case InvalidationStrategy.SUFFIX:
          /* istanbul ignore next */
          cov_14ou5qt163().b[26][2]++;
          cov_14ou5qt163().s[101]++;
          result.keys = await this.invalidateSuffix(targets);
          /* istanbul ignore next */
          cov_14ou5qt163().s[102]++;
          break;
        case InvalidationStrategy.WILDCARD:
          /* istanbul ignore next */
          cov_14ou5qt163().b[26][3]++;
          cov_14ou5qt163().s[103]++;
          result.keys = await this.invalidateWildcard(targets);
          /* istanbul ignore next */
          cov_14ou5qt163().s[104]++;
          break;
        case InvalidationStrategy.REGEX:
          /* istanbul ignore next */
          cov_14ou5qt163().b[26][4]++;
          cov_14ou5qt163().s[105]++;
          result.keys = await this.invalidateRegex(targets);
          /* istanbul ignore next */
          cov_14ou5qt163().s[106]++;
          break;
        case InvalidationStrategy.TAG:
          /* istanbul ignore next */
          cov_14ou5qt163().b[26][5]++;
          cov_14ou5qt163().s[107]++;
          result.tags = await this.invalidateTags(targets);
          /* istanbul ignore next */
          cov_14ou5qt163().s[108]++;
          break;
        case InvalidationStrategy.NAMESPACE:
          /* istanbul ignore next */
          cov_14ou5qt163().b[26][6]++;
          cov_14ou5qt163().s[109]++;
          result.namespaces = await this.invalidateNamespaces(targets);
          /* istanbul ignore next */
          cov_14ou5qt163().s[110]++;
          break;
        case InvalidationStrategy.BATCH:
          /* istanbul ignore next */
          cov_14ou5qt163().b[26][7]++;
          cov_14ou5qt163().s[111]++;
          result.keys = await this.invalidateBatch(targets);
          /* istanbul ignore next */
          cov_14ou5qt163().s[112]++;
          break;
        default:
          /* istanbul ignore next */
          cov_14ou5qt163().b[26][8]++;
          cov_14ou5qt163().s[113]++;
          throw new Error(`Unsupported invalidation strategy: ${strategy}`);
      }
      /* istanbul ignore next */
      cov_14ou5qt163().s[114]++;
      result.invalidatedKeys = result.keys.length;
      /* istanbul ignore next */
      cov_14ou5qt163().s[115]++;
      result.invalidatedNamespaces = result.namespaces.length;
      /* istanbul ignore next */
      cov_14ou5qt163().s[116]++;
      result.invalidatedTags = result.tags.length;
      /* istanbul ignore next */
      cov_14ou5qt163().s[117]++;
      result.executionTime = Date.now() - startTime;
      /* istanbul ignore next */
      cov_14ou5qt163().s[118]++;
      result.success = true;
      // 更新统计
      /* istanbul ignore next */
      cov_14ou5qt163().s[119]++;
      this.updateStats(strategy, result.executionTime, result.invalidatedKeys);
      /* istanbul ignore next */
      cov_14ou5qt163().s[120]++;
      this.logger.info(`Cache invalidation completed: ${result.invalidatedKeys} keys, ${result.executionTime}ms`, logging_1.LogContext.CACHE);
      /* istanbul ignore next */
      cov_14ou5qt163().s[121]++;
      this.emitEvent('invalidation_completed', {
        result,
        strategy
      });
      /* istanbul ignore next */
      cov_14ou5qt163().s[122]++;
      return result;
    } catch (error) {
      const executionTime =
      /* istanbul ignore next */
      (cov_14ou5qt163().s[123]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_14ou5qt163().s[124]++;
      this.updateStats(strategy, executionTime, 0, true);
      /* istanbul ignore next */
      cov_14ou5qt163().s[125]++;
      this.logger.error(`Cache invalidation failed: ${error.message}`, logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_14ou5qt163().s[126]++;
      this.emitEvent('invalidation_failed', {
        error,
        strategy,
        targets
      });
      /* istanbul ignore next */
      cov_14ou5qt163().s[127]++;
      return {
        invalidatedKeys: 0,
        invalidatedNamespaces: 0,
        invalidatedTags: 0,
        keys: [],
        namespaces: [],
        tags: [],
        invalidatedAt: new Date(),
        executionTime,
        success: false,
        error: error.message,
        metadata:
        /* istanbul ignore next */
        (cov_14ou5qt163().b[27][0]++, options?.metadata) ??
        /* istanbul ignore next */
        (cov_14ou5qt163().b[27][1]++, {})
      };
    }
  }
  /**
   * @method invalidateByRule
   * @description 根据规则执行缓存失效
   * @param ruleId 规则ID
   * @param _context 执行上下文
   * @returns {Promise<InvalidationResult>} 失效结果
   */
  async invalidateByRule(ruleId, _context) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[15]++;
    const rule =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[128]++, this.getRule(ruleId));
    /* istanbul ignore next */
    cov_14ou5qt163().s[129]++;
    if (!rule) {
      /* istanbul ignore next */
      cov_14ou5qt163().b[28][0]++;
      cov_14ou5qt163().s[130]++;
      throw new Error(`Invalidation rule not found: ${ruleId}`);
    } else
    /* istanbul ignore next */
    {
      cov_14ou5qt163().b[28][1]++;
    }
    cov_14ou5qt163().s[131]++;
    if (!rule.enabled) {
      /* istanbul ignore next */
      cov_14ou5qt163().b[29][0]++;
      cov_14ou5qt163().s[132]++;
      this.logger.warn(`Invalidation rule is disabled: ${rule.name}`, logging_1.LogContext.CACHE);
      /* istanbul ignore next */
      cov_14ou5qt163().s[133]++;
      return {
        invalidatedKeys: 0,
        invalidatedNamespaces: 0,
        invalidatedTags: 0,
        keys: [],
        namespaces: [],
        tags: [],
        invalidatedAt: new Date(),
        executionTime: 0,
        success: false,
        error: 'Rule is disabled'
      };
    } else
    /* istanbul ignore next */
    {
      cov_14ou5qt163().b[29][1]++;
    }
    // 检查条件
    cov_14ou5qt163().s[134]++;
    if (
    /* istanbul ignore next */
    (cov_14ou5qt163().b[31][0]++, rule.condition) &&
    /* istanbul ignore next */
    (cov_14ou5qt163().b[31][1]++, !this.evaluateCondition(rule.condition, _context))) {
      /* istanbul ignore next */
      cov_14ou5qt163().b[30][0]++;
      cov_14ou5qt163().s[135]++;
      this.logger.debug(`Invalidation rule condition not met: ${rule.name}`, logging_1.LogContext.CACHE);
      /* istanbul ignore next */
      cov_14ou5qt163().s[136]++;
      return {
        invalidatedKeys: 0,
        invalidatedNamespaces: 0,
        invalidatedTags: 0,
        keys: [],
        namespaces: [],
        tags: [],
        invalidatedAt: new Date(),
        executionTime: 0,
        success: false,
        error: 'Condition not met'
      };
    } else
    /* istanbul ignore next */
    {
      cov_14ou5qt163().b[30][1]++;
    }
    // 检查依赖
    cov_14ou5qt163().s[137]++;
    if (
    /* istanbul ignore next */
    (cov_14ou5qt163().b[33][0]++, rule.dependencies) &&
    /* istanbul ignore next */
    (cov_14ou5qt163().b[33][1]++, rule.dependencies.length > 0)) {
      /* istanbul ignore next */
      cov_14ou5qt163().b[32][0]++;
      cov_14ou5qt163().s[138]++;
      for (const depId of rule.dependencies) {
        const depRule =
        /* istanbul ignore next */
        (cov_14ou5qt163().s[139]++, this.getRule(depId));
        /* istanbul ignore next */
        cov_14ou5qt163().s[140]++;
        if (!depRule?.enabled) {
          /* istanbul ignore next */
          cov_14ou5qt163().b[34][0]++;
          cov_14ou5qt163().s[141]++;
          this.logger.warn(`Dependency rule not found or disabled: ${depId}`, logging_1.LogContext.CACHE);
          /* istanbul ignore next */
          cov_14ou5qt163().s[142]++;
          return {
            invalidatedKeys: 0,
            invalidatedNamespaces: 0,
            invalidatedTags: 0,
            keys: [],
            namespaces: [],
            tags: [],
            invalidatedAt: new Date(),
            executionTime: 0,
            success: false,
            error: 'Dependency not satisfied'
          };
        } else
        /* istanbul ignore next */
        {
          cov_14ou5qt163().b[34][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_14ou5qt163().b[32][1]++;
    }
    cov_14ou5qt163().s[143]++;
    return this.invalidate(rule.pattern, rule.strategy, {
      metadata: {
        ruleId,
        ruleName: rule.name,
        _context
      }
    });
  }
  /**
   * @method getStats
   * @description 获取失效统计信息
   * @returns {InvalidationStats} 统计信息
   */
  getStats() {
    /* istanbul ignore next */
    cov_14ou5qt163().f[16]++;
    cov_14ou5qt163().s[144]++;
    return {
      ...this.stats
    };
  }
  /**
   * @method resetStats
   * @description 重置失效统计信息
   */
  resetStats() {
    /* istanbul ignore next */
    cov_14ou5qt163().f[17]++;
    cov_14ou5qt163().s[145]++;
    this.stats = this.initializeStats();
    /* istanbul ignore next */
    cov_14ou5qt163().s[146]++;
    this.logger.info('Invalidation stats reset', logging_1.LogContext.CACHE);
  }
  /**
   * @method onDestroy
   * @description 销毁时清理资源
   */
  onDestroy() {
    /* istanbul ignore next */
    cov_14ou5qt163().f[18]++;
    cov_14ou5qt163().s[147]++;
    this.stopMonitoring();
    /* istanbul ignore next */
    cov_14ou5qt163().s[148]++;
    this.logger.info('CacheInvalidationService destroyed', logging_1.LogContext.CACHE);
  }
  // 私有方法
  /**
   * @private
   * @method initializeStats
   * @description 初始化统计信息
   * @returns {InvalidationStats} 初始统计信息
   */
  initializeStats() {
    /* istanbul ignore next */
    cov_14ou5qt163().f[19]++;
    cov_14ou5qt163().s[149]++;
    return {
      totalInvalidations: 0,
      successfulInvalidations: 0,
      failedInvalidations: 0,
      averageExecutionTime: 0,
      totalInvalidatedKeys: 0,
      activeRules: 0,
      lastInvalidation: new Date(),
      strategyUsage: Object.values(InvalidationStrategy).reduce((acc, strategy) => {
        /* istanbul ignore next */
        cov_14ou5qt163().f[20]++;
        cov_14ou5qt163().s[150]++;
        acc[strategy] = 0;
        /* istanbul ignore next */
        cov_14ou5qt163().s[151]++;
        return acc;
      }, {}),
      triggerUsage: Object.values(InvalidationTrigger).reduce((acc, trigger) => {
        /* istanbul ignore next */
        cov_14ou5qt163().f[21]++;
        cov_14ou5qt163().s[152]++;
        acc[trigger] = 0;
        /* istanbul ignore next */
        cov_14ou5qt163().s[153]++;
        return acc;
      }, {})
    };
  }
  /**
   * @private
   * @method invalidateExact
   * @description 精确匹配失效
   * @param keys 缓存键列表
   * @returns {Promise<string[]>} 失效的键列表
   */
  async invalidateExact(keys) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[22]++;
    const invalidatedKeys =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[154]++, []);
    /* istanbul ignore next */
    cov_14ou5qt163().s[155]++;
    for (const key of keys) {
      /* istanbul ignore next */
      cov_14ou5qt163().s[156]++;
      try {
        // 解析完整的键字符串
        const cacheKey =
        /* istanbul ignore next */
        (cov_14ou5qt163().s[157]++, this.keyFactory.parse(key));
        const deleted =
        /* istanbul ignore next */
        (cov_14ou5qt163().s[158]++, await this.cacheService.delete(cacheKey));
        /* istanbul ignore next */
        cov_14ou5qt163().s[159]++;
        if (deleted) {
          /* istanbul ignore next */
          cov_14ou5qt163().b[35][0]++;
          cov_14ou5qt163().s[160]++;
          invalidatedKeys.push(key);
        } else
        /* istanbul ignore next */
        {
          cov_14ou5qt163().b[35][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_14ou5qt163().s[161]++;
        this.logger.warn(`Failed to invalidate exact key: ${key}`, logging_1.LogContext.CACHE, undefined, error);
      }
    }
    /* istanbul ignore next */
    cov_14ou5qt163().s[162]++;
    return invalidatedKeys;
  }
  /**
   * @private
   * @method invalidatePrefix
   * @description 前缀匹配失效
   * @param prefixes 前缀列表
   * @returns {Promise<string[]>} 失效的键列表
   */
  async invalidatePrefix(prefixes) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[23]++;
    // 这里需要缓存服务支持前缀查询，简化实现
    const invalidatedKeys =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[163]++, []);
    /* istanbul ignore next */
    cov_14ou5qt163().s[164]++;
    for (const prefix of prefixes) {
      /* istanbul ignore next */
      cov_14ou5qt163().s[165]++;
      try {
        // 假设缓存服务支持按命名空间清除
        const cleared =
        /* istanbul ignore next */
        (cov_14ou5qt163().s[166]++, await this.cacheService.clear(prefix));
        /* istanbul ignore next */
        cov_14ou5qt163().s[167]++;
        if (cleared) {
          /* istanbul ignore next */
          cov_14ou5qt163().b[36][0]++;
          cov_14ou5qt163().s[168]++;
          invalidatedKeys.push(prefix);
        } else
        /* istanbul ignore next */
        {
          cov_14ou5qt163().b[36][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_14ou5qt163().s[169]++;
        this.logger.warn(`Failed to invalidate prefix: ${prefix}`, logging_1.LogContext.CACHE, undefined, error);
      }
    }
    /* istanbul ignore next */
    cov_14ou5qt163().s[170]++;
    return invalidatedKeys;
  }
  /**
   * @private
   * @method invalidateSuffix
   * @description 后缀匹配失效
   * @param _suffixes 后缀列表
   * @returns {Promise<string[]>} 失效的键列表
   */
  async invalidateSuffix(_suffixes) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[24]++;
    // 简化实现，实际需要缓存服务支持后缀查询
    const invalidatedKeys =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[171]++, []);
    // 这里需要遍历所有缓存键来匹配后缀
    // 实际实现中可能需要缓存服务提供键列表查询功能
    /* istanbul ignore next */
    cov_14ou5qt163().s[172]++;
    return invalidatedKeys;
  }
  /**
   * @private
   * @method invalidateWildcard
   * @description 通配符匹配失效
   * @param patterns 通配符模式列表
   * @returns {Promise<string[]>} 失效的键列表
   */
  async invalidateWildcard(patterns) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[25]++;
    const invalidatedKeys =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[173]++, []);
    /* istanbul ignore next */
    cov_14ou5qt163().s[174]++;
    for (const pattern of patterns) {
      /* istanbul ignore next */
      cov_14ou5qt163().s[175]++;
      try {
        /* istanbul ignore next */
        cov_14ou5qt163().s[176]++;
        // 仅记录模式，实际匹配依赖具体缓存实现
        this.logger.debug(`Wildcard invalidation pattern: ${pattern}`, logging_1.LogContext.CACHE);
      } catch (error) {
        /* istanbul ignore next */
        cov_14ou5qt163().s[177]++;
        this.logger.warn(`Failed to invalidate wildcard pattern: ${pattern}`, logging_1.LogContext.CACHE, undefined, error);
      }
    }
    /* istanbul ignore next */
    cov_14ou5qt163().s[178]++;
    return invalidatedKeys;
  }
  /**
   * @private
   * @method invalidateRegex
   * @description 正则表达式匹配失效
   * @param patterns 正则表达式模式列表
   * @returns {Promise<string[]>} 失效的键列表
   */
  async invalidateRegex(patterns) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[26]++;
    const invalidatedKeys =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[179]++, []);
    /* istanbul ignore next */
    cov_14ou5qt163().s[180]++;
    for (const pattern of patterns) {
      /* istanbul ignore next */
      cov_14ou5qt163().s[181]++;
      try {
        /* istanbul ignore next */
        cov_14ou5qt163().s[182]++;
        // 仅记录模式，实际匹配依赖具体缓存实现
        this.logger.debug(`Regex invalidation pattern: ${pattern}`, logging_1.LogContext.CACHE);
      } catch (error) {
        /* istanbul ignore next */
        cov_14ou5qt163().s[183]++;
        this.logger.warn(`Failed to invalidate regex pattern: ${pattern}`, logging_1.LogContext.CACHE, undefined, error);
      }
    }
    /* istanbul ignore next */
    cov_14ou5qt163().s[184]++;
    return invalidatedKeys;
  }
  /**
   * @private
   * @method invalidateTags
   * @description 标签匹配失效
   * @param tags 标签列表
   * @returns {Promise<string[]>} 失效的标签列表
   */
  async invalidateTags(tags) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[27]++;
    // 简化实现，实际需要缓存服务支持标签查询
    const invalidatedTags =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[185]++, []);
    /* istanbul ignore next */
    cov_14ou5qt163().s[186]++;
    for (const tag of tags) {
      /* istanbul ignore next */
      cov_14ou5qt163().s[187]++;
      try {
        /* istanbul ignore next */
        cov_14ou5qt163().s[188]++;
        // 这里需要缓存服务支持标签失效
        this.logger.debug(`Tag invalidation: ${tag}`, logging_1.LogContext.CACHE);
        /* istanbul ignore next */
        cov_14ou5qt163().s[189]++;
        invalidatedTags.push(tag);
      } catch (error) {
        /* istanbul ignore next */
        cov_14ou5qt163().s[190]++;
        this.logger.warn(`Failed to invalidate tag: ${tag}`, logging_1.LogContext.CACHE, undefined, error);
      }
    }
    /* istanbul ignore next */
    cov_14ou5qt163().s[191]++;
    return invalidatedTags;
  }
  /**
   * @private
   * @method invalidateNamespaces
   * @description 命名空间匹配失效
   * @param namespaces 命名空间列表
   * @returns {Promise<string[]>} 失效的命名空间列表
   */
  async invalidateNamespaces(namespaces) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[28]++;
    const invalidatedNamespaces =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[192]++, []);
    /* istanbul ignore next */
    cov_14ou5qt163().s[193]++;
    for (const namespace of namespaces) {
      /* istanbul ignore next */
      cov_14ou5qt163().s[194]++;
      try {
        const cleared =
        /* istanbul ignore next */
        (cov_14ou5qt163().s[195]++, await this.cacheService.clear(namespace));
        /* istanbul ignore next */
        cov_14ou5qt163().s[196]++;
        if (cleared) {
          /* istanbul ignore next */
          cov_14ou5qt163().b[37][0]++;
          cov_14ou5qt163().s[197]++;
          invalidatedNamespaces.push(namespace);
        } else
        /* istanbul ignore next */
        {
          cov_14ou5qt163().b[37][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_14ou5qt163().s[198]++;
        this.logger.warn(`Failed to invalidate namespace: ${namespace}`, logging_1.LogContext.CACHE, undefined, error);
      }
    }
    /* istanbul ignore next */
    cov_14ou5qt163().s[199]++;
    return invalidatedNamespaces;
  }
  /**
   * @private
   * @method invalidateBatch
   * @description 批量失效
   * @param targets 目标列表
   * @returns {Promise<string[]>} 失效的键列表
   */
  async invalidateBatch(targets) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[29]++;
    const invalidatedKeys =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[200]++, []);
    const batchSize =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[201]++,
    /* istanbul ignore next */
    (cov_14ou5qt163().b[38][0]++, this.config.batchSize) ??
    /* istanbul ignore next */
    (cov_14ou5qt163().b[38][1]++, 100));
    // 分批处理
    /* istanbul ignore next */
    cov_14ou5qt163().s[202]++;
    for (let i =
    /* istanbul ignore next */
    (cov_14ou5qt163().s[203]++, 0); i < targets.length; i += batchSize) {
      const batch =
      /* istanbul ignore next */
      (cov_14ou5qt163().s[204]++, targets.slice(i, i + batchSize));
      /* istanbul ignore next */
      cov_14ou5qt163().s[205]++;
      try {
        const batchKeys =
        /* istanbul ignore next */
        (cov_14ou5qt163().s[206]++, await this.invalidateExact(batch));
        /* istanbul ignore next */
        cov_14ou5qt163().s[207]++;
        invalidatedKeys.push(...batchKeys);
      } catch (error) {
        /* istanbul ignore next */
        cov_14ou5qt163().s[208]++;
        this.logger.warn(`Failed to invalidate batch ${i / batchSize + 1}`, logging_1.LogContext.CACHE, undefined, error);
      }
    }
    /* istanbul ignore next */
    cov_14ou5qt163().s[209]++;
    return invalidatedKeys;
  }
  /**
   * @private
   * @method evaluateCondition
   * @description 评估条件表达式
   * @param condition 条件表达式
   * @param _context 执行上下文
   * @returns {boolean} 条件是否满足
   */
  evaluateCondition(condition, _context) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[30]++;
    cov_14ou5qt163().s[210]++;
    try {
      /* istanbul ignore next */
      cov_14ou5qt163().s[211]++;
      // 简化实现，实际可以使用表达式引擎
      // 这里只是示例，实际实现需要更复杂的表达式解析
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_14ou5qt163().s[212]++;
      this.logger.warn(`Failed to evaluate condition: ${condition}`, logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_14ou5qt163().s[213]++;
      return false;
    }
  }
  /**
   * @private
   * @method updateStats
   * @description 更新统计信息
   * @param strategy 失效策略
   * @param executionTime 执行时间
   * @param invalidatedKeys 失效键数
   * @param failed 是否失败
   */
  updateStats(strategy, executionTime, invalidatedKeys, failed =
  /* istanbul ignore next */
  (cov_14ou5qt163().b[39][0]++, false)) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[31]++;
    cov_14ou5qt163().s[214]++;
    this.stats.totalInvalidations++;
    /* istanbul ignore next */
    cov_14ou5qt163().s[215]++;
    if (failed) {
      /* istanbul ignore next */
      cov_14ou5qt163().b[40][0]++;
      cov_14ou5qt163().s[216]++;
      this.stats.failedInvalidations++;
    } else {
      /* istanbul ignore next */
      cov_14ou5qt163().b[40][1]++;
      cov_14ou5qt163().s[217]++;
      this.stats.successfulInvalidations++;
      /* istanbul ignore next */
      cov_14ou5qt163().s[218]++;
      this.stats.totalInvalidatedKeys += invalidatedKeys;
    }
    /* istanbul ignore next */
    cov_14ou5qt163().s[219]++;
    this.stats.averageExecutionTime = (this.stats.averageExecutionTime * (this.stats.totalInvalidations - 1) + executionTime) / this.stats.totalInvalidations;
    /* istanbul ignore next */
    cov_14ou5qt163().s[220]++;
    this.stats.lastInvalidation = new Date();
    /* istanbul ignore next */
    cov_14ou5qt163().s[221]++;
    this.stats.activeRules = Array.from(this.rules.values()).filter(rule => {
      /* istanbul ignore next */
      cov_14ou5qt163().f[32]++;
      cov_14ou5qt163().s[222]++;
      return rule.enabled;
    }).length;
    /* istanbul ignore next */
    cov_14ou5qt163().s[223]++;
    this.stats.strategyUsage[strategy]++;
  }
  /**
   * @private
   * @method emitEvent
   * @description 发送失效事件
   * @param type 事件类型
   * @param _data 事件数据
   */
  emitEvent(type, _data) {
    /* istanbul ignore next */
    cov_14ou5qt163().f[33]++;
    cov_14ou5qt163().s[224]++;
    if (this.config.enableEvents) {
      /* istanbul ignore next */
      cov_14ou5qt163().b[41][0]++;
      cov_14ou5qt163().s[225]++;
      try {
        /* istanbul ignore next */
        cov_14ou5qt163().s[226]++;
        this.eventEmitter.emit(`cache.invalidation.${type}`, {
          type,
          data: _data,
          timestamp: new Date(),
          serviceId: 'cache-invalidation'
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_14ou5qt163().s[227]++;
        this.logger.warn(`Failed to emit invalidation event: ${type}`, logging_1.LogContext.CACHE, undefined, error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_14ou5qt163().b[41][1]++;
    }
  }
  /**
   * @private
   * @method startMonitoring
   * @description 开始监控
   */
  startMonitoring() {
    /* istanbul ignore next */
    cov_14ou5qt163().f[34]++;
    cov_14ou5qt163().s[228]++;
    if (
    /* istanbul ignore next */
    (cov_14ou5qt163().b[43][0]++, this.config.monitoringInterval) &&
    /* istanbul ignore next */
    (cov_14ou5qt163().b[43][1]++, this.config.monitoringInterval > 0)) {
      /* istanbul ignore next */
      cov_14ou5qt163().b[42][0]++;
      cov_14ou5qt163().s[229]++;
      this.monitoringTimer = setInterval(() => {
        /* istanbul ignore next */
        cov_14ou5qt163().f[35]++;
        cov_14ou5qt163().s[230]++;
        this.performMonitoring().catch(error => {
          /* istanbul ignore next */
          cov_14ou5qt163().f[36]++;
          cov_14ou5qt163().s[231]++;
          this.logger.error('Invalidation monitoring failed', logging_1.LogContext.CACHE, undefined, error);
        });
      }, this.config.monitoringInterval);
      /* istanbul ignore next */
      cov_14ou5qt163().s[232]++;
      this.logger.info(`Started invalidation monitoring, interval: ${this.config.monitoringInterval}ms`, logging_1.LogContext.CACHE);
    } else
    /* istanbul ignore next */
    {
      cov_14ou5qt163().b[42][1]++;
    }
  }
  /**
   * @private
   * @method stopMonitoring
   * @description 停止监控
   */
  stopMonitoring() {
    /* istanbul ignore next */
    cov_14ou5qt163().f[37]++;
    cov_14ou5qt163().s[233]++;
    if (this.monitoringTimer) {
      /* istanbul ignore next */
      cov_14ou5qt163().b[44][0]++;
      cov_14ou5qt163().s[234]++;
      clearInterval(this.monitoringTimer);
      /* istanbul ignore next */
      cov_14ou5qt163().s[235]++;
      this.monitoringTimer = undefined;
      /* istanbul ignore next */
      cov_14ou5qt163().s[236]++;
      this.logger.info('Stopped invalidation monitoring', logging_1.LogContext.CACHE);
    } else
    /* istanbul ignore next */
    {
      cov_14ou5qt163().b[44][1]++;
    }
  }
  /**
   * @private
   * @method performMonitoring
   * @description 执行监控
   */
  async performMonitoring() {
    /* istanbul ignore next */
    cov_14ou5qt163().f[38]++;
    cov_14ou5qt163().s[237]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_14ou5qt163().s[238]++, this.getStats());
      /* istanbul ignore next */
      cov_14ou5qt163().s[239]++;
      this.emitEvent('monitoring', {
        stats
      });
      // 检查活跃规则
      const activeRules =
      /* istanbul ignore next */
      (cov_14ou5qt163().s[240]++, Array.from(this.rules.values()).filter(rule => {
        /* istanbul ignore next */
        cov_14ou5qt163().f[39]++;
        cov_14ou5qt163().s[241]++;
        return rule.enabled;
      }));
      /* istanbul ignore next */
      cov_14ou5qt163().s[242]++;
      this.logger.debug(`Active invalidation rules: ${activeRules.length}`, logging_1.LogContext.CACHE);
    } catch (error) {
      /* istanbul ignore next */
      cov_14ou5qt163().s[243]++;
      this.logger.error('Invalidation monitoring execution failed', logging_1.LogContext.CACHE, undefined, error);
    }
  }
};
/* istanbul ignore next */
cov_14ou5qt163().s[244]++;
exports.CacheInvalidationService = CacheInvalidationService;
/* istanbul ignore next */
cov_14ou5qt163().s[245]++;
exports.CacheInvalidationService = CacheInvalidationService = __decorate([(0, common_1.Injectable)(), __param(0, (0, common_1.Inject)('CACHE_INVALIDATION_CONFIG')), __param(1, (0, common_1.Inject)('ICacheKeyFactory')), __param(3, (0, common_1.Inject)(logging_1.PinoLoggerService)), __metadata("design:paramtypes", [Object, Object, typeof (_a =
/* istanbul ignore next */
(cov_14ou5qt163().b[46][0]++, typeof event_emitter_1.EventEmitter2 !== "undefined") &&
/* istanbul ignore next */
(cov_14ou5qt163().b[46][1]++, event_emitter_1.EventEmitter2)) === "function" ?
/* istanbul ignore next */
(cov_14ou5qt163().b[45][0]++, _a) :
/* istanbul ignore next */
(cov_14ou5qt163().b[45][1]++, Object), typeof (_b =
/* istanbul ignore next */
(cov_14ou5qt163().b[48][0]++, typeof logging_1.PinoLoggerService !== "undefined") &&
/* istanbul ignore next */
(cov_14ou5qt163().b[48][1]++, logging_1.PinoLoggerService)) === "function" ?
/* istanbul ignore next */
(cov_14ou5qt163().b[47][0]++, _b) :
/* istanbul ignore next */
(cov_14ou5qt163().b[47][1]++, Object)])], CacheInvalidationService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,