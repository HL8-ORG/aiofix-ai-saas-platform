{"version":3,"names":["common_1","cov_2bz8r2wnn5","s","require","DataIsolationService","constructor","f","classificationCache","Map","policyCache","getDataIsolationContext","userId","b","trim","length","Error","user","getUserInfo","isolationLevel","determineIsolationLevel","permissions","getUserPermissions","roles","getUserRoles","platformId","tenantId","organizationId","departmentId","id","createdAt","Date","expiresAt","now","checkDataAccess","dataId","context","permission","classification","getDataClassification","checkDefaultAccess","checkClassificationAccess","error","console","applyDataIsolation","query","ISOLATION_LEVELS","PLATFORM","TENANT","applyTenantFilter","ORGANIZATION","applyOrganizationFilter","DEPARTMENT","applyDepartmentFilter","USER","applyUserFilter","has","get","fetchDataClassification","set","setDataClassification","saveDataClassification","existing","updated","updatedAt","getIsolationPolicy","level","policy","fetchIsolationPolicy","validateDataIsolationCompliance","validateDefaultCompliance","validateClassificationCompliance","isPlatformAdmin","isTenantAdmin","isOrganizationAdmin","isDepartmentAdmin","includes","isInShareableScope","shareableScopes","requiredPermissions","accessPermissions","some","perm","where","isInProtectedScope","protectedScopes","read","write","exports"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/core/src/domain/services/data-isolation.service.ts"],"sourcesContent":["import {\n  IDataIsolationService,\n  DataIsolationContext,\n  DataClassification,\n  DataIsolationPolicy,\n  IsolationLevel,\n} from '../interfaces/data-isolation.interface';\nimport { ISOLATION_LEVELS } from '@aiofix/common';\n\n/**\n * 数据隔离服务\n *\n * 实现多租户数据隔离的核心逻辑，提供数据访问控制、\n * 权限验证、隔离策略管理等功能。\n *\n * 数据隔离的核心原则：\n * 1. 平台级数据：只有平台管理员可以访问\n * 2. 租户级数据：只有租户内用户可以访问\n * 3. 组织级数据：只有组织内用户可以访问\n * 4. 部门级数据：只有部门内用户可以访问\n * 5. 用户级数据：只有用户本人可以访问\n *\n * @class DataIsolationService\n * @implements {IDataIsolationService}\n * @author AI开发团队\n * @since 1.0.0\n */\nexport class DataIsolationService implements IDataIsolationService {\n  /**\n   * 数据分类缓存\n   * 缓存数据分类信息，提高查询性能\n   */\n  private readonly classificationCache = new Map<string, DataClassification>();\n\n  /**\n   * 隔离策略缓存\n   * 缓存隔离策略信息，提高查询性能\n   */\n  private readonly policyCache = new Map<IsolationLevel, DataIsolationPolicy>();\n\n  /**\n   * 获取用户的数据隔离上下文\n   *\n   * @param {string} userId - 用户ID\n   * @returns {Promise<DataIsolationContext>} 数据隔离上下文\n   *\n   * @throws {Error} 当用户不存在或上下文获取失败时抛出错误\n   */\n  async getDataIsolationContext(userId: string): Promise<DataIsolationContext> {\n    if (!userId || userId.trim().length === 0) {\n      throw new Error('用户ID不能为空');\n    }\n\n    // TODO: 从用户服务获取用户信息\n    // 这里需要根据实际的用户服务实现来获取用户信息\n    const user = await this.getUserInfo(userId);\n\n    if (!user) {\n      throw new Error(`用户 ${userId} 不存在`);\n    }\n\n    // 确定用户的隔离级别\n    const isolationLevel = this.determineIsolationLevel(user);\n\n    // 获取用户权限\n    const permissions = await this.getUserPermissions(userId);\n\n    // 获取用户角色\n    const roles = await this.getUserRoles(userId);\n\n    return {\n      platformId: user.platformId,\n      tenantId: user.tenantId,\n      organizationId: user.organizationId,\n      departmentId: user.departmentId,\n      userId: user.id,\n      isolationLevel,\n      permissions,\n      roles,\n      createdAt: new Date(),\n      expiresAt: new Date(Date.now() + 30 * 60 * 1000), // 30分钟过期\n    };\n  }\n\n  /**\n   * 检查数据访问权限\n   *\n   * @param {string} dataId - 数据ID\n   * @param {DataIsolationContext} context - 用户上下文\n   * @param {string} permission - 权限类型\n   * @returns {Promise<boolean>} 是否有权限\n   */\n  async checkDataAccess(\n    dataId: string,\n    context: DataIsolationContext,\n    permission: string,\n  ): Promise<boolean> {\n    try {\n      // 获取数据分类信息\n      const classification = await this.getDataClassification(dataId);\n\n      if (!classification) {\n        // 如果没有分类信息，使用默认策略\n        return this.checkDefaultAccess(context, permission);\n      }\n\n      // 检查数据分类访问权限\n      return this.checkClassificationAccess(\n        classification,\n        context,\n        permission,\n      );\n    } catch (error) {\n      console.error('数据访问权限检查失败:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 应用数据隔离过滤器\n   *\n   * @param {any} query - 查询对象\n   * @param {DataIsolationContext} context - 用户上下文\n   * @returns {any} 过滤后的查询对象\n   */\n  applyDataIsolation(query: any, context: DataIsolationContext): any {\n    if (!query || !context) {\n      return query;\n    }\n\n    // 根据用户的隔离级别应用相应的过滤器\n    switch (context.isolationLevel) {\n      case ISOLATION_LEVELS.PLATFORM:\n        // 平台级用户可以访问所有数据\n        return query;\n\n      case ISOLATION_LEVELS.TENANT:\n        // 租户级用户只能访问本租户数据\n        return this.applyTenantFilter(query, context.tenantId);\n\n      case ISOLATION_LEVELS.ORGANIZATION:\n        // 组织级用户只能访问本组织数据\n        return this.applyOrganizationFilter(query, context.organizationId);\n\n      case ISOLATION_LEVELS.DEPARTMENT:\n        // 部门级用户只能访问本部门数据\n        return this.applyDepartmentFilter(query, context.departmentId);\n\n      case ISOLATION_LEVELS.USER:\n        // 用户级只能访问自己的数据\n        return this.applyUserFilter(query, context.userId);\n\n      default:\n        throw new Error(`不支持的隔离级别: ${context.isolationLevel}`);\n    }\n  }\n\n  /**\n   * 获取数据分类信息\n   *\n   * @param {string} dataId - 数据ID\n   * @returns {Promise<DataClassification | null>} 数据分类信息\n   */\n  async getDataClassification(\n    dataId: string,\n  ): Promise<DataClassification | null> {\n    if (!dataId || dataId.trim().length === 0) {\n      return null;\n    }\n\n    // 先从缓存中查找\n    if (this.classificationCache.has(dataId)) {\n      return this.classificationCache.get(dataId)!;\n    }\n\n    // TODO: 从数据库或配置中获取数据分类信息\n    // 这里需要根据实际的数据存储实现来获取分类信息\n    const classification = await this.fetchDataClassification(dataId);\n\n    if (classification) {\n      // 缓存分类信息\n      this.classificationCache.set(dataId, classification);\n    }\n\n    return classification;\n  }\n\n  /**\n   * 设置数据分类\n   *\n   * @param {string} dataId - 数据ID\n   * @param {Partial<DataClassification>} classification - 分类信息\n   * @returns {Promise<void>}\n   */\n  async setDataClassification(\n    dataId: string,\n    classification: Partial<DataClassification>,\n  ): Promise<void> {\n    if (!dataId || dataId.trim().length === 0) {\n      throw new Error('数据ID不能为空');\n    }\n\n    // TODO: 保存数据分类信息到数据库或配置\n    // 这里需要根据实际的数据存储实现来保存分类信息\n    await this.saveDataClassification(dataId, classification);\n\n    // 更新缓存\n    const existing = this.classificationCache.get(dataId);\n    if (existing) {\n      const updated = { ...existing, ...classification, updatedAt: new Date() };\n      this.classificationCache.set(dataId, updated);\n    }\n  }\n\n  /**\n   * 获取数据隔离策略\n   *\n   * @param {IsolationLevel} level - 隔离级别\n   * @returns {Promise<DataIsolationPolicy | null>} 隔离策略\n   */\n  async getIsolationPolicy(\n    level: IsolationLevel,\n  ): Promise<DataIsolationPolicy | null> {\n    // 先从缓存中查找\n    if (this.policyCache.has(level)) {\n      return this.policyCache.get(level)!;\n    }\n\n    // TODO: 从数据库或配置中获取隔离策略\n    // 这里需要根据实际的配置存储实现来获取策略信息\n    const policy = await this.fetchIsolationPolicy(level);\n\n    if (policy) {\n      // 缓存策略信息\n      this.policyCache.set(level, policy);\n    }\n\n    return policy;\n  }\n\n  /**\n   * 验证数据隔离合规性\n   *\n   * @param {string} dataId - 数据ID\n   * @param {DataIsolationContext} context - 用户上下文\n   * @returns {Promise<boolean>} 是否合规\n   */\n  async validateDataIsolationCompliance(\n    dataId: string,\n    context: DataIsolationContext,\n  ): Promise<boolean> {\n    try {\n      // 获取数据分类信息\n      const classification = await this.getDataClassification(dataId);\n\n      if (!classification) {\n        // 如果没有分类信息，使用默认合规检查\n        return this.validateDefaultCompliance(context);\n      }\n\n      // 检查数据分类合规性\n      return this.validateClassificationCompliance(classification, context);\n    } catch (error) {\n      console.error('数据隔离合规性验证失败:', error);\n      return false;\n    }\n  }\n\n  // 私有方法\n\n  /**\n   * 确定用户的隔离级别\n   *\n   * @param {any} user - 用户信息\n   * @returns {IsolationLevel} 隔离级别\n   * @private\n   */\n  private determineIsolationLevel(user: any): IsolationLevel {\n    if (user.isPlatformAdmin) {\n      return ISOLATION_LEVELS.PLATFORM;\n    }\n\n    if (user.tenantId && user.isTenantAdmin) {\n      return ISOLATION_LEVELS.TENANT;\n    }\n\n    if (user.organizationId && user.isOrganizationAdmin) {\n      return ISOLATION_LEVELS.ORGANIZATION;\n    }\n\n    if (user.departmentId && user.isDepartmentAdmin) {\n      return ISOLATION_LEVELS.DEPARTMENT;\n    }\n\n    return ISOLATION_LEVELS.USER;\n  }\n\n  /**\n   * 检查默认访问权限\n   *\n   * @param {DataIsolationContext} context - 用户上下文\n   * @param {string} permission - 权限类型\n   * @returns {boolean} 是否有权限\n   * @private\n   */\n  private checkDefaultAccess(\n    context: DataIsolationContext,\n    permission: string,\n  ): boolean {\n    // 平台管理员拥有所有权限\n    if (context.isolationLevel === ISOLATION_LEVELS.PLATFORM) {\n      return true;\n    }\n\n    // 检查用户是否具有相应权限\n    return context.permissions.includes(permission);\n  }\n\n  /**\n   * 检查数据分类访问权限\n   *\n   * @param {DataClassification} classification - 数据分类\n   * @param {DataIsolationContext} context - 用户上下文\n   * @param {string} permission - 权限类型\n   * @returns {boolean} 是否有权限\n   * @private\n   */\n  private checkClassificationAccess(\n    classification: DataClassification,\n    context: DataIsolationContext,\n    permission: string,\n  ): boolean {\n    // 检查用户是否在可共享范围内\n    const isInShareableScope = classification.shareableScopes.includes(\n      context.isolationLevel,\n    );\n\n    if (!isInShareableScope) {\n      return false;\n    }\n\n    // 检查用户是否具有相应的访问权限\n    const requiredPermissions =\n      classification.accessPermissions[\n        permission as keyof typeof classification.accessPermissions\n      ];\n    if (!requiredPermissions || requiredPermissions.length === 0) {\n      return true; // 如果没有特定权限要求，则允许访问\n    }\n\n    // 检查用户是否具有所需权限\n    return requiredPermissions.some(perm => context.permissions.includes(perm));\n  }\n\n  /**\n   * 应用租户过滤器\n   *\n   * @param {any} query - 查询对象\n   * @param {string} tenantId - 租户ID\n   * @returns {any} 过滤后的查询对象\n   * @private\n   */\n  private applyTenantFilter(query: any, tenantId?: string): any {\n    if (!tenantId) {\n      throw new Error('租户ID不能为空');\n    }\n\n    // TODO: 根据实际的查询构建器实现来应用过滤器\n    // 这里需要根据使用的ORM或查询构建器来调整\n    if (query.where) {\n      query.where.tenantId = tenantId;\n    } else {\n      query.where = { tenantId };\n    }\n\n    return query;\n  }\n\n  /**\n   * 应用组织过滤器\n   *\n   * @param {any} query - 查询对象\n   * @param {string} organizationId - 组织ID\n   * @returns {any} 过滤后的查询对象\n   * @private\n   */\n  private applyOrganizationFilter(query: any, organizationId?: string): any {\n    if (!organizationId) {\n      throw new Error('组织ID不能为空');\n    }\n\n    // TODO: 根据实际的查询构建器实现来应用过滤器\n    if (query.where) {\n      query.where.organizationId = organizationId;\n    } else {\n      query.where = { organizationId };\n    }\n\n    return query;\n  }\n\n  /**\n   * 应用部门过滤器\n   *\n   * @param {any} query - 查询对象\n   * @param {string} departmentId - 部门ID\n   * @returns {any} 过滤后的查询对象\n   * @private\n   */\n  private applyDepartmentFilter(query: any, departmentId?: string): any {\n    if (!departmentId) {\n      throw new Error('部门ID不能为空');\n    }\n\n    // TODO: 根据实际的查询构建器实现来应用过滤器\n    if (query.where) {\n      query.where.departmentId = departmentId;\n    } else {\n      query.where = { departmentId };\n    }\n\n    return query;\n  }\n\n  /**\n   * 应用用户过滤器\n   *\n   * @param {any} query - 查询对象\n   * @param {string} userId - 用户ID\n   * @returns {any} 过滤后的查询对象\n   * @private\n   */\n  private applyUserFilter(query: any, userId: string): any {\n    if (!userId) {\n      throw new Error('用户ID不能为空');\n    }\n\n    // TODO: 根据实际的查询构建器实现来应用过滤器\n    if (query.where) {\n      query.where.userId = userId;\n    } else {\n      query.where = { userId };\n    }\n\n    return query;\n  }\n\n  /**\n   * 验证默认合规性\n   *\n   * @param {DataIsolationContext} context - 用户上下文\n   * @returns {boolean} 是否合规\n   * @private\n   */\n  private validateDefaultCompliance(context: DataIsolationContext): boolean {\n    // 平台管理员总是合规的\n    if (context.isolationLevel === ISOLATION_LEVELS.PLATFORM) {\n      return true;\n    }\n\n    // 其他用户需要检查基本合规性\n    return context.userId && context.isolationLevel;\n  }\n\n  /**\n   * 验证数据分类合规性\n   *\n   * @param {DataClassification} classification - 数据分类\n   * @param {DataIsolationContext} context - 用户上下文\n   * @returns {boolean} 是否合规\n   * @private\n   */\n  private validateClassificationCompliance(\n    classification: DataClassification,\n    context: DataIsolationContext,\n  ): boolean {\n    // 检查用户是否在可共享范围内\n    const isInShareableScope = classification.shareableScopes.includes(\n      context.isolationLevel,\n    );\n\n    if (!isInShareableScope) {\n      return false;\n    }\n\n    // 检查用户是否在受保护范围内\n    const isInProtectedScope = classification.protectedScopes.includes(\n      context.isolationLevel,\n    );\n\n    if (isInProtectedScope) {\n      // 受保护范围内的用户需要特殊权限\n      return context.permissions.some(\n        perm =>\n          classification.accessPermissions.read.includes(perm) ||\n          classification.accessPermissions.write.includes(perm),\n      );\n    }\n\n    return true;\n  }\n\n  // 以下方法需要根据实际的数据存储实现来完善\n\n  /**\n   * 获取用户信息\n   *\n   * @param {string} userId - 用户ID\n   * @returns {Promise<any>} 用户信息\n   * @private\n   */\n  private async getUserInfo(userId: string): Promise<any> {\n    // TODO: 实现用户信息获取逻辑\n    throw new Error('getUserInfo 方法需要实现');\n  }\n\n  /**\n   * 获取用户权限\n   *\n   * @param {string} userId - 用户ID\n   * @returns {Promise<string[]>} 权限列表\n   * @private\n   */\n  private async getUserPermissions(userId: string): Promise<string[]> {\n    // TODO: 实现用户权限获取逻辑\n    throw new Error('getUserPermissions 方法需要实现');\n  }\n\n  /**\n   * 获取用户角色\n   *\n   * @param {string} userId - 用户ID\n   * @returns {Promise<string[]>} 角色列表\n   * @private\n   */\n  private async getUserRoles(userId: string): Promise<string[]> {\n    // TODO: 实现用户角色获取逻辑\n    throw new Error('getUserRoles 方法需要实现');\n  }\n\n  /**\n   * 获取数据分类信息\n   *\n   * @param {string} dataId - 数据ID\n   * @returns {Promise<DataClassification | null>} 数据分类信息\n   * @private\n   */\n  private async fetchDataClassification(\n    dataId: string,\n  ): Promise<DataClassification | null> {\n    // TODO: 实现数据分类信息获取逻辑\n    throw new Error('fetchDataClassification 方法需要实现');\n  }\n\n  /**\n   * 保存数据分类信息\n   *\n   * @param {string} dataId - 数据ID\n   * @param {Partial<DataClassification>} classification - 分类信息\n   * @returns {Promise<void>}\n   * @private\n   */\n  private async saveDataClassification(\n    dataId: string,\n    classification: Partial<DataClassification>,\n  ): Promise<void> {\n    // TODO: 实现数据分类信息保存逻辑\n    throw new Error('saveDataClassification 方法需要实现');\n  }\n\n  /**\n   * 获取隔离策略\n   *\n   * @param {IsolationLevel} level - 隔离级别\n   * @returns {Promise<DataIsolationPolicy | null>} 隔离策略\n   * @private\n   */\n  private async fetchIsolationPolicy(\n    level: IsolationLevel,\n  ): Promise<DataIsolationPolicy | null> {\n    // TODO: 实现隔离策略获取逻辑\n    throw new Error('fetchIsolationPolicy 方法需要实现');\n  }\n}\n"],"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","ignoreList":[]}