{"version":3,"names":["ConcurrencyError","Error","constructor","aggregateId","expectedVersion","actualVersion","cov_5fbdvedjn","f","s","name","exports","EventStoreError","message","code","b","cause"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/core/src/domain/interfaces/event-store.interface.ts"],"sourcesContent":["import { IDomainEvent, IAggregateSnapshot } from './domain-event.interface';\n\n/**\n * 事件存储接口\n *\n * 事件存储是事件溯源架构的核心组件，负责事件的持久化和检索。\n * 所有事件存储实现都必须实现此接口，确保事件存储的一致性和可靠性。\n *\n * 事件存储的核心职责：\n * 1. 保存聚合根的事件到持久化存储\n * 2. 根据聚合根ID检索事件历史\n * 3. 管理聚合根的快照\n * 4. 提供事件查询和过滤功能\n * 5. 确保事件的原子性和一致性\n *\n * @interface IEventStore\n * @author AI开发团队\n * @since 1.0.0\n */\nexport interface IEventStore {\n  /**\n   * 保存聚合根的事件\n   *\n   * 将聚合根的未提交事件保存到事件存储中。\n   * 使用乐观锁机制确保并发安全。\n   *\n   * @param {string} aggregateId - 聚合根的唯一标识符\n   * @param {IDomainEvent[]} events - 要保存的事件列表\n   * @param {number} expectedVersion - 期望的版本号（乐观锁）\n   *\n   * @returns {Promise<void>} 保存操作的Promise\n   *\n   * @throws {ConcurrencyError} 当版本号不匹配时抛出并发错误\n   * @throws {EventStoreError} 当保存失败时抛出事件存储错误\n   */\n  saveEvents(\n    aggregateId: string,\n    events: IDomainEvent[],\n    expectedVersion: number,\n  ): Promise<void>;\n\n  /**\n   * 获取聚合根的事件历史\n   *\n   * 根据聚合根ID获取其完整的事件历史。\n   * 事件按版本号升序排列。\n   *\n   * @param {string} aggregateId - 聚合根的唯一标识符\n   * @param {number} [fromVersion] - 起始版本号（可选）\n   *\n   * @returns {Promise<IDomainEvent[]>} 事件历史列表\n   *\n   * @throws {EventStoreError} 当检索失败时抛出事件存储错误\n   */\n  getEvents(aggregateId: string, fromVersion?: number): Promise<IDomainEvent[]>;\n\n  /**\n   * 根据事件类型获取事件\n   *\n   * 根据事件类型和可选的时间范围获取事件列表。\n   * 用于事件处理和投影更新。\n   *\n   * @param {string} eventType - 事件类型名称\n   * @param {Date} [fromDate] - 起始时间（可选）\n   *\n   * @returns {Promise<IDomainEvent[]>} 匹配的事件列表\n   *\n   * @throws {EventStoreError} 当检索失败时抛出事件存储错误\n   */\n  getEventsByType(eventType: string, fromDate?: Date): Promise<IDomainEvent[]>;\n\n  /**\n   * 获取聚合根的最新快照\n   *\n   * 获取指定聚合根的最新快照，用于优化聚合重建性能。\n   *\n   * @param {string} aggregateId - 聚合根的唯一标识符\n   *\n   * @returns {Promise<IAggregateSnapshot | null>} 快照对象或null\n   *\n   * @throws {EventStoreError} 当检索失败时抛出事件存储错误\n   */\n  getSnapshot(aggregateId: string): Promise<IAggregateSnapshot | null>;\n\n  /**\n   * 保存聚合根的快照\n   *\n   * 将聚合根的快照保存到事件存储中，用于性能优化。\n   *\n   * @param {IAggregateSnapshot} snapshot - 要保存的快照\n   *\n   * @returns {Promise<void>} 保存操作的Promise\n   *\n   * @throws {EventStoreError} 当保存失败时抛出事件存储错误\n   */\n  saveSnapshot(snapshot: IAggregateSnapshot): Promise<void>;\n\n  /**\n   * 检查聚合根是否存在\n   *\n   * 检查指定ID的聚合根是否在事件存储中存在。\n   *\n   * @param {string} aggregateId - 聚合根的唯一标识符\n   *\n   * @returns {Promise<boolean>} 聚合根是否存在\n   *\n   * @throws {EventStoreError} 当检查失败时抛出事件存储错误\n   */\n  exists(aggregateId: string): Promise<boolean>;\n\n  /**\n   * 获取聚合根的当前版本号\n   *\n   * 获取指定聚合根的当前版本号，用于乐观锁控制。\n   *\n   * @param {string} aggregateId - 聚合根的唯一标识符\n   *\n   * @returns {Promise<number>} 当前版本号\n   *\n   * @throws {EventStoreError} 当检索失败时抛出事件存储错误\n   */\n  getVersion(aggregateId: string): Promise<number>;\n\n  /**\n   * 删除聚合根的所有事件\n   *\n   * 删除指定聚合根的所有事件和快照。\n   * 注意：此操作不可逆，请谨慎使用。\n   *\n   * @param {string} aggregateId - 聚合根的唯一标识符\n   *\n   * @returns {Promise<void>} 删除操作的Promise\n   *\n   * @throws {EventStoreError} 当删除失败时抛出事件存储错误\n   */\n  deleteAggregate(aggregateId: string): Promise<void>;\n}\n\n/**\n * 并发错误\n *\n * 当乐观锁检查失败时抛出此错误，表示聚合根已被其他操作修改。\n *\n * @class ConcurrencyError\n * @extends {Error}\n * @author AI开发团队\n * @since 1.0.0\n */\nexport class ConcurrencyError extends Error {\n  /**\n   * 聚合根的唯一标识符\n   */\n  public readonly aggregateId: string;\n\n  /**\n   * 期望的版本号\n   */\n  public readonly expectedVersion: number;\n\n  /**\n   * 实际的版本号\n   */\n  public readonly actualVersion: number;\n\n  /**\n   * 构造函数\n   *\n   * @param {string} aggregateId - 聚合根的唯一标识符\n   * @param {number} expectedVersion - 期望的版本号\n   * @param {number} actualVersion - 实际的版本号\n   */\n  constructor(\n    aggregateId: string,\n    expectedVersion: number,\n    actualVersion: number,\n  ) {\n    super(\n      `聚合根 ${aggregateId} 的版本号不匹配。期望版本: ${expectedVersion}, 实际版本: ${actualVersion}`,\n    );\n    this.name = 'ConcurrencyError';\n    this.aggregateId = aggregateId;\n    this.expectedVersion = expectedVersion;\n    this.actualVersion = actualVersion;\n  }\n}\n\n/**\n * 事件存储错误\n *\n * 当事件存储操作失败时抛出此错误。\n *\n * @class EventStoreError\n * @extends {Error}\n * @author AI开发团队\n * @since 1.0.0\n */\nexport class EventStoreError extends Error {\n  /**\n   * 错误代码\n   */\n  public readonly code: string;\n\n  /**\n   * 构造函数\n   *\n   * @param {string} message - 错误消息\n   * @param {string} [code='EVENT_STORE_ERROR'] - 错误代码\n   * @param {Error} [cause] - 原始错误（可选）\n   */\n  constructor(\n    message: string,\n    code: string = 'EVENT_STORE_ERROR',\n    cause?: Error,\n  ) {\n    super(message);\n    this.name = 'EventStoreError';\n    this.code = code;\n\n    if (cause) {\n      (this as any).cause = cause;\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0IA;;;;;;;;;;AAUA,MAAaA,gBAAiB,SAAQC,KAAK;EAgBzC;;;;;;;EAOAC,YACEC,WAAmB,EACnBC,eAAuB,EACvBC,aAAqB;IAAA;IAAAC,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAErB,KAAK,CACH,OAAOL,WAAW,kBAAkBC,eAAe,WAAWC,aAAa,EAAE,CAC9E;IAAC;IAAAC,aAAA,GAAAE,CAAA;IACF,IAAI,CAACC,IAAI,GAAG,kBAAkB;IAAC;IAAAH,aAAA,GAAAE,CAAA;IAC/B,IAAI,CAACL,WAAW,GAAGA,WAAW;IAAC;IAAAG,aAAA,GAAAE,CAAA;IAC/B,IAAI,CAACJ,eAAe,GAAGA,eAAe;IAAC;IAAAE,aAAA,GAAAE,CAAA;IACvC,IAAI,CAACH,aAAa,GAAGA,aAAa;EACpC;;AACD;AAAAC,aAAA,GAAAE,CAAA;AApCDE,OAAA,CAAAV,gBAAA,GAAAA,gBAAA;AAsCA;;;;;;;;;;AAUA,MAAaW,eAAgB,SAAQV,KAAK;EAMxC;;;;;;;EAOAC,YACEU,OAAe,EACfC,IAAA;EAAA;EAAA,CAAAP,aAAA,GAAAQ,CAAA,UAAe,mBAAmB,GAClCC,KAAa;IAAA;IAAAT,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;IAEb,KAAK,CAACI,OAAO,CAAC;IAAC;IAAAN,aAAA,GAAAE,CAAA;IACf,IAAI,CAACC,IAAI,GAAG,iBAAiB;IAAC;IAAAH,aAAA,GAAAE,CAAA;IAC9B,IAAI,CAACK,IAAI,GAAGA,IAAI;IAAC;IAAAP,aAAA,GAAAE,CAAA;IAEjB,IAAIO,KAAK,EAAE;MAAA;MAAAT,aAAA,GAAAQ,CAAA;MAAAR,aAAA,GAAAE,CAAA;MACR,IAAY,CAACO,KAAK,GAAGA,KAAK;IAC7B,CAAC;IAAA;IAAA;MAAAT,aAAA,GAAAQ,CAAA;IAAA;EACH;;AACD;AAAAR,aAAA,GAAAE,CAAA;AA1BDE,OAAA,CAAAC,eAAA,GAAAA,eAAA","ignoreList":[]}