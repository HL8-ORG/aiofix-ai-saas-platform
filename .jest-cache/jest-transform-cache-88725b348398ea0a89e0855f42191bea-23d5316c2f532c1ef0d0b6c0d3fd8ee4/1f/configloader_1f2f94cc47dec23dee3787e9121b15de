8994df6618b86494f35c935f7c4a49f5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineConfig = defineConfig;
exports.getConfig = getConfig;
exports.resetConfig = resetConfig;
const default_config_1 = require("./default-config");
/**
 * @function deepMerge
 * @description
 * 深度合并工具函数，用于合并两个对象的属性，支持嵌套对象的递归合并。
 * 该函数是配置系统的核心工具，用于合并默认配置和用户自定义配置。
 *
 * 主要原理与机制如下：
 * 1. 使用展开运算符创建目标对象的浅拷贝
 * 2. 遍历源对象的所有属性
 * 3. 对于嵌套对象进行递归合并
 * 4. 对于基本类型直接覆盖
 * 5. 保持数组类型不变
 *
 * 功能与业务规则：
 * 1. 对象深度合并
 * 2. 配置覆盖机制
 * 3. 类型安全保证
 * 4. 递归处理支持
 *
 * @param {Record<string, unknown>} target - 目标对象，将被合并的对象
 * @param {Record<string, unknown>} source - 源对象，提供要合并的属性
 * @returns {Record<string, unknown>} 返回合并后的新对象
 */
function deepMerge(target, source) {
    const result = { ...target };
    for (const key in source) {
        if (source[key] &&
            typeof source[key] === 'object' &&
            !Array.isArray(source[key])) {
            result[key] = deepMerge(result[key] || {}, source[key]);
        }
        else {
            result[key] = source[key];
        }
    }
    return result;
}
let currentAppConfig = { ...default_config_1.defaultConfiguration };
/**
 * @function defineConfig
 * @description
 * 定义配置，将提供的配置与现有的默认配置进行合并。
 * 该函数是配置系统的核心API，用于动态更新系统配置。
 *
 * 主要原理与机制如下：
 * 1. 验证提供的配置对象是否有效
 * 2. 使用deepMerge函数合并配置
 * 3. 更新全局配置对象
 * 4. 支持异步配置更新
 *
 * 功能与业务规则：
 * 1. 配置验证和合并
 * 2. 动态配置更新
 * 3. 错误处理和验证
 * 4. 配置完整性保证
 *
 * @param {Partial<IamConfig>} providedConfig - 要合并的配置对象
 * @returns {Promise<void>} 返回一个Promise，表示配置更新过程
 * @throws {Error} 当提供的配置无效时抛出错误
 */
async function defineConfig(providedConfig) {
    if (!providedConfig || typeof providedConfig !== 'object') {
        throw new Error('Invalid configuration provided. Expected a non-empty object.');
    }
    currentAppConfig = await deepMerge(currentAppConfig, providedConfig);
}
/**
 * @function getConfig
 * @description
 * 获取当前应用配置，返回一个只读的配置副本。
 * 该函数提供了对系统当前配置的安全访问。
 *
 * 主要原理与机制如下：
 * 1. 使用Object.freeze()创建不可变配置对象
 * 2. 使用展开运算符创建配置对象的深拷贝
 * 3. 返回只读类型，防止运行时修改
 * 4. 提供类型安全的配置访问
 *
 * 功能与业务规则：
 * 1. 配置获取和访问
 * 2. 配置对象保护
 * 3. 类型安全保证
 * 4. 配置完整性保证
 *
 * @returns {Readonly<Partial<IamConfig>>} 返回只读的当前配置对象
 */
function getConfig() {
    return Object.freeze(deepMerge({}, currentAppConfig));
}
/**
 * @function resetConfig
 * @description
 * 重置配置到默认值，将当前配置恢复为系统默认配置。
 * 该函数用于配置恢复和调试目的。
 *
 * 主要原理与机制如下：
 * 1. 使用展开运算符复制默认配置
 * 2. 更新全局配置对象
 * 3. 记录重置操作到控制台
 * 4. 提供配置恢复机制
 *
 * 功能与业务规则：
 * 1. 配置重置和恢复
 * 2. 调试支持
 * 3. 配置回滚
 * 4. 系统状态恢复
 */
function resetConfig() {
    currentAppConfig = { ...default_config_1.defaultConfiguration };
    console.log('Aiofix IAM Config Reset to Defaults');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYXJsaWdsZS9WMS9BaW9maXgvYWlvZml4LWFpLXNhYXMtcGxhdGZvcm0vcGFja2FnZXMvY29uZmlnL3NyYy9jb25maWctbG9hZGVyLnRzIiwibWFwcGluZ3MiOiI7O0FBMEVBLG9DQVVDO0FBc0JELDhCQUVDO0FBb0JELGtDQUdDO0FBbklELHFEQUF3RDtBQUd4RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNCRztBQUNILFNBQVMsU0FBUyxDQUNoQixNQUErQixFQUMvQixNQUErQjtJQUUvQixNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUM7SUFFN0IsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUN6QixJQUNFLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDWCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRO1lBQy9CLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFDM0IsQ0FBQztZQUNELE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQ3BCLE1BQU0sQ0FBQyxHQUFHLENBQTZCLElBQUksRUFBRSxFQUM5QyxNQUFNLENBQUMsR0FBRyxDQUE0QixDQUN2QyxDQUFDO1FBQ0osQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELElBQUksZ0JBQWdCLEdBQXVCLEVBQUUsR0FBRyxxQ0FBb0IsRUFBRSxDQUFDO0FBRXZFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FxQkc7QUFDSSxLQUFLLFVBQVUsWUFBWSxDQUNoQyxjQUFrQztJQUVsQyxJQUFJLENBQUMsY0FBYyxJQUFJLE9BQU8sY0FBYyxLQUFLLFFBQVEsRUFBRSxDQUFDO1FBQzFELE1BQU0sSUFBSSxLQUFLLENBQ2IsOERBQThELENBQy9ELENBQUM7SUFDSixDQUFDO0lBRUQsZ0JBQWdCLEdBQUcsTUFBTSxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDdkUsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBQ0gsU0FBZ0IsU0FBUztJQUN2QixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUNILFNBQWdCLFdBQVc7SUFDekIsZ0JBQWdCLEdBQUcsRUFBRSxHQUFHLHFDQUFvQixFQUFFLENBQUM7SUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0FBQ3JELENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvYXJsaWdsZS9WMS9BaW9maXgvYWlvZml4LWFpLXNhYXMtcGxhdGZvcm0vcGFja2FnZXMvY29uZmlnL3NyYy9jb25maWctbG9hZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmF1bHRDb25maWd1cmF0aW9uIH0gZnJvbSAnLi9kZWZhdWx0LWNvbmZpZyc7XG5pbXBvcnQgeyBJYW1Db25maWcgfSBmcm9tICcuL2NvbmZpZy5zZXJ2aWNlJztcblxuLyoqXG4gKiBAZnVuY3Rpb24gZGVlcE1lcmdlXG4gKiBAZGVzY3JpcHRpb25cbiAqIOa3seW6puWQiOW5tuW3peWFt+WHveaVsO+8jOeUqOS6juWQiOW5tuS4pOS4quWvueixoeeahOWxnuaAp++8jOaUr+aMgeW1jOWll+WvueixoeeahOmAkuW9kuWQiOW5tuOAglxuICog6K+l5Ye95pWw5piv6YWN572u57O757uf55qE5qC45b+D5bel5YW377yM55So5LqO5ZCI5bm26buY6K6k6YWN572u5ZKM55So5oi36Ieq5a6a5LmJ6YWN572u44CCXG4gKlxuICog5Li76KaB5Y6f55CG5LiO5py65Yi25aaC5LiL77yaXG4gKiAxLiDkvb/nlKjlsZXlvIDov5DnrpfnrKbliJvlu7rnm67moIflr7nosaHnmoTmtYXmi7fotJ1cbiAqIDIuIOmBjeWOhua6kOWvueixoeeahOaJgOacieWxnuaAp1xuICogMy4g5a+55LqO5bWM5aWX5a+56LGh6L+b6KGM6YCS5b2S5ZCI5bm2XG4gKiA0LiDlr7nkuo7ln7rmnKznsbvlnovnm7TmjqXopobnm5ZcbiAqIDUuIOS/neaMgeaVsOe7hOexu+Wei+S4jeWPmFxuICpcbiAqIOWKn+iDveS4juS4muWKoeinhOWIme+8mlxuICogMS4g5a+56LGh5rex5bqm5ZCI5bm2XG4gKiAyLiDphY3nva7opobnm5bmnLrliLZcbiAqIDMuIOexu+Wei+WuieWFqOS/neivgVxuICogNC4g6YCS5b2S5aSE55CG5pSv5oyBXG4gKlxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0gdGFyZ2V0IC0g55uu5qCH5a+56LGh77yM5bCG6KKr5ZCI5bm255qE5a+56LGhXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSBzb3VyY2UgLSDmupDlr7nosaHvvIzmj5DkvpvopoHlkIjlubbnmoTlsZ7mgKdcbiAqIEByZXR1cm5zIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0g6L+U5Zue5ZCI5bm25ZCO55qE5paw5a+56LGhXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZShcbiAgdGFyZ2V0OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgc291cmNlOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbik6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHtcbiAgY29uc3QgcmVzdWx0ID0geyAuLi50YXJnZXQgfTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoXG4gICAgICBzb3VyY2Vba2V5XSAmJlxuICAgICAgdHlwZW9mIHNvdXJjZVtrZXldID09PSAnb2JqZWN0JyAmJlxuICAgICAgIUFycmF5LmlzQXJyYXkoc291cmNlW2tleV0pXG4gICAgKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZShcbiAgICAgICAgKHJlc3VsdFtrZXldIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KSB8fCB7fSxcbiAgICAgICAgc291cmNlW2tleV0gYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmxldCBjdXJyZW50QXBwQ29uZmlnOiBQYXJ0aWFsPElhbUNvbmZpZz4gPSB7IC4uLmRlZmF1bHRDb25maWd1cmF0aW9uIH07XG5cbi8qKlxuICogQGZ1bmN0aW9uIGRlZmluZUNvbmZpZ1xuICogQGRlc2NyaXB0aW9uXG4gKiDlrprkuYnphY3nva7vvIzlsIbmj5DkvpvnmoTphY3nva7kuI7njrDmnInnmoTpu5jorqTphY3nva7ov5vooYzlkIjlubbjgIJcbiAqIOivpeWHveaVsOaYr+mFjee9ruezu+e7n+eahOaguOW/g0FQSe+8jOeUqOS6juWKqOaAgeabtOaWsOezu+e7n+mFjee9ruOAglxuICpcbiAqIOS4u+imgeWOn+eQhuS4juacuuWItuWmguS4i++8mlxuICogMS4g6aqM6K+B5o+Q5L6b55qE6YWN572u5a+56LGh5piv5ZCm5pyJ5pWIXG4gKiAyLiDkvb/nlKhkZWVwTWVyZ2Xlh73mlbDlkIjlubbphY3nva5cbiAqIDMuIOabtOaWsOWFqOWxgOmFjee9ruWvueixoVxuICogNC4g5pSv5oyB5byC5q2l6YWN572u5pu05pawXG4gKlxuICog5Yqf6IO95LiO5Lia5Yqh6KeE5YiZ77yaXG4gKiAxLiDphY3nva7pqozor4HlkozlkIjlubZcbiAqIDIuIOWKqOaAgemFjee9ruabtOaWsFxuICogMy4g6ZSZ6K+v5aSE55CG5ZKM6aqM6K+BXG4gKiA0LiDphY3nva7lrozmlbTmgKfkv53or4FcbiAqXG4gKiBAcGFyYW0ge1BhcnRpYWw8SWFtQ29uZmlnPn0gcHJvdmlkZWRDb25maWcgLSDopoHlkIjlubbnmoTphY3nva7lr7nosaFcbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSDov5Tlm57kuIDkuKpQcm9taXNl77yM6KGo56S66YWN572u5pu05paw6L+H56iLXG4gKiBAdGhyb3dzIHtFcnJvcn0g5b2T5o+Q5L6b55qE6YWN572u5peg5pWI5pe25oqb5Ye66ZSZ6K+vXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWZpbmVDb25maWcoXG4gIHByb3ZpZGVkQ29uZmlnOiBQYXJ0aWFsPElhbUNvbmZpZz4sXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgaWYgKCFwcm92aWRlZENvbmZpZyB8fCB0eXBlb2YgcHJvdmlkZWRDb25maWcgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0ludmFsaWQgY29uZmlndXJhdGlvbiBwcm92aWRlZC4gRXhwZWN0ZWQgYSBub24tZW1wdHkgb2JqZWN0LicsXG4gICAgKTtcbiAgfVxuXG4gIGN1cnJlbnRBcHBDb25maWcgPSBhd2FpdCBkZWVwTWVyZ2UoY3VycmVudEFwcENvbmZpZywgcHJvdmlkZWRDb25maWcpO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvbiBnZXRDb25maWdcbiAqIEBkZXNjcmlwdGlvblxuICog6I635Y+W5b2T5YmN5bqU55So6YWN572u77yM6L+U5Zue5LiA5Liq5Y+q6K+755qE6YWN572u5Ymv5pys44CCXG4gKiDor6Xlh73mlbDmj5Dkvpvkuoblr7nns7vnu5/lvZPliY3phY3nva7nmoTlronlhajorr/pl67jgIJcbiAqXG4gKiDkuLvopoHljp/nkIbkuI7mnLrliLblpoLkuIvvvJpcbiAqIDEuIOS9v+eUqE9iamVjdC5mcmVlemUoKeWIm+W7uuS4jeWPr+WPmOmFjee9ruWvueixoVxuICogMi4g5L2/55So5bGV5byA6L+Q566X56ym5Yib5bu66YWN572u5a+56LGh55qE5rex5ou36LSdXG4gKiAzLiDov5Tlm57lj6ror7vnsbvlnovvvIzpmLLmraLov5DooYzml7bkv67mlLlcbiAqIDQuIOaPkOS+m+exu+Wei+WuieWFqOeahOmFjee9ruiuv+mXrlxuICpcbiAqIOWKn+iDveS4juS4muWKoeinhOWIme+8mlxuICogMS4g6YWN572u6I635Y+W5ZKM6K6/6ZeuXG4gKiAyLiDphY3nva7lr7nosaHkv53miqRcbiAqIDMuIOexu+Wei+WuieWFqOS/neivgVxuICogNC4g6YWN572u5a6M5pW05oCn5L+d6K+BXG4gKlxuICogQHJldHVybnMge1JlYWRvbmx5PFBhcnRpYWw8SWFtQ29uZmlnPj59IOi/lOWbnuWPquivu+eahOW9k+WJjemFjee9ruWvueixoVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29uZmlnKCk6IFJlYWRvbmx5PFBhcnRpYWw8SWFtQ29uZmlnPj4ge1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShkZWVwTWVyZ2Uoe30sIGN1cnJlbnRBcHBDb25maWcpKTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb24gcmVzZXRDb25maWdcbiAqIEBkZXNjcmlwdGlvblxuICog6YeN572u6YWN572u5Yiw6buY6K6k5YC877yM5bCG5b2T5YmN6YWN572u5oGi5aSN5Li657O757uf6buY6K6k6YWN572u44CCXG4gKiDor6Xlh73mlbDnlKjkuo7phY3nva7mgaLlpI3lkozosIPor5Xnm67nmoTjgIJcbiAqXG4gKiDkuLvopoHljp/nkIbkuI7mnLrliLblpoLkuIvvvJpcbiAqIDEuIOS9v+eUqOWxleW8gOi/kOeul+espuWkjeWItum7mOiupOmFjee9rlxuICogMi4g5pu05paw5YWo5bGA6YWN572u5a+56LGhXG4gKiAzLiDorrDlvZXph43nva7mk43kvZzliLDmjqfliLblj7BcbiAqIDQuIOaPkOS+m+mFjee9ruaBouWkjeacuuWItlxuICpcbiAqIOWKn+iDveS4juS4muWKoeinhOWIme+8mlxuICogMS4g6YWN572u6YeN572u5ZKM5oGi5aSNXG4gKiAyLiDosIPor5XmlK/mjIFcbiAqIDMuIOmFjee9ruWbnua7mlxuICogNC4g57O757uf54q25oCB5oGi5aSNXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldENvbmZpZygpOiB2b2lkIHtcbiAgY3VycmVudEFwcENvbmZpZyA9IHsgLi4uZGVmYXVsdENvbmZpZ3VyYXRpb24gfTtcbiAgY29uc29sZS5sb2coJ0Fpb2ZpeCBJQU0gQ29uZmlnIFJlc2V0IHRvIERlZmF1bHRzJyk7XG59XG4iXSwidmVyc2lvbiI6M30=