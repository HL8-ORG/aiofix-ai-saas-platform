{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/middleware/pino-logging.middleware.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/middleware/pino-logging.middleware.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { FastifyRequest, FastifyReply } from 'fastify';\nimport { PinoLoggingMiddleware } from './pino-logging.middleware';\nimport { PinoLoggerService } from '../services/pino-logger.service';\nimport { LogContext } from '../interfaces/logging.interface';\n\ndescribe('PinoLoggingMiddleware', () => {\n  let middleware: PinoLoggingMiddleware;\n  let logger: PinoLoggerService;\n  let mockRequest: Partial<FastifyRequest>;\n  let mockResponse: Partial<FastifyReply>;\n  let nextFunction: jest.Mock;\n\n  beforeEach(async () => {\n    const mockLogger = {\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n      performance: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        {\n          provide: PinoLoggingMiddleware,\n          useFactory: (logger: PinoLoggerService) => {\n            return new PinoLoggingMiddleware(logger);\n          },\n          inject: [PinoLoggerService],\n        },\n        {\n          provide: PinoLoggerService,\n          useValue: mockLogger,\n        },\n      ],\n    }).compile();\n\n    middleware = module.get<PinoLoggingMiddleware>(PinoLoggingMiddleware);\n    logger = module.get<PinoLoggerService>(PinoLoggerService);\n\n    // 重置模拟\n    jest.clearAllMocks();\n  });\n\n  beforeEach(() => {\n    // 设置模拟请求\n    mockRequest = {\n      method: 'GET',\n      url: '/api/users',\n      headers: {\n        'user-agent': 'Mozilla/5.0',\n        'x-tenant-id': 'tenant-123',\n        'x-user-id': 'user-456',\n        authorization: 'Bearer token123',\n      },\n      query: { page: '1', limit: '10' },\n      body: { name: 'test' },\n      ip: '192.168.1.1',\n      socket: { remoteAddress: '192.168.1.1' } as unknown,\n    } as Partial<FastifyRequest>;\n\n    // 设置模拟响应\n    mockResponse = {\n      statusCode: 200,\n      send: jest.fn().mockReturnThis(),\n    } as Partial<FastifyReply>;\n\n    nextFunction = jest.fn();\n  });\n\n  it('should be defined', () => {\n    expect(middleware).toBeDefined();\n  });\n\n  describe('request logging', () => {\n    it('should log request information', () => {\n      middleware.use(\n        mockRequest as FastifyRequest,\n        mockResponse as FastifyReply,\n        nextFunction,\n      );\n\n      expect(logger.info).toHaveBeenCalledWith(\n        'HTTP Request',\n        LogContext.HTTP_REQUEST,\n        expect.objectContaining({\n          method: 'GET',\n          url: '/api/users',\n          userAgent: 'Mozilla/5.0',\n          tenantId: 'tenant-123',\n          userId: 'user-456',\n          ip: '192.168.1.1',\n          requestId: expect.any(String),\n          headers: expect.objectContaining({\n            authorization: '***REDACTED***',\n            'user-agent': 'Mozilla/5.0',\n          }),\n          query: { page: '1', limit: '10' },\n          body: { name: 'test' },\n        }),\n      );\n\n      expect(nextFunction).toHaveBeenCalled();\n    });\n\n    it('should generate unique request ID', () => {\n      middleware.use(\n        mockRequest as FastifyRequest,\n        mockResponse as FastifyReply,\n        nextFunction,\n      );\n\n      expect(logger.info).toHaveBeenCalledWith(\n        expect.any(String),\n        LogContext.HTTP_REQUEST,\n        expect.objectContaining({\n          requestId: expect.any(String),\n        }),\n      );\n    });\n\n    it('should extract tenant ID from different sources', () => {\n      // 测试从查询参数提取\n      mockRequest.query = { tenantId: 'query-tenant' };\n      mockRequest.headers = { 'user-agent': 'Mozilla/5.0' };\n\n      middleware.use(\n        mockRequest as FastifyRequest,\n        mockResponse as FastifyReply,\n        nextFunction,\n      );\n\n      expect(logger.info).toHaveBeenCalledWith(\n        expect.any(String),\n        LogContext.HTTP_REQUEST,\n        expect.objectContaining({\n          tenantId: 'query-tenant',\n        }),\n      );\n    });\n\n    it('should extract user ID from different sources', () => {\n      // 测试从请求体提取\n      mockRequest.body = { userId: 'body-user' };\n      mockRequest.headers = { 'user-agent': 'Mozilla/5.0' };\n\n      middleware.use(\n        mockRequest as FastifyRequest,\n        mockResponse as FastifyReply,\n        nextFunction,\n      );\n\n      expect(logger.info).toHaveBeenCalledWith(\n        expect.any(String),\n        LogContext.HTTP_REQUEST,\n        expect.objectContaining({\n          userId: 'body-user',\n        }),\n      );\n    });\n  });\n\n  describe('response logging', () => {\n    it('should log successful response', done => {\n      middleware.use(\n        mockRequest as FastifyRequest,\n        mockResponse as FastifyReply,\n        nextFunction,\n      );\n\n      // 模拟响应发送 - 直接调用重写后的send方法\n      mockResponse.send?.('response data');\n\n      // 等待异步日志记录\n      setTimeout(() => {\n        expect(logger.info).toHaveBeenCalledWith(\n          'HTTP Response',\n          LogContext.HTTP_REQUEST,\n          expect.objectContaining({\n            duration: expect.any(Number),\n            statusCode: 200,\n          }),\n        );\n        done();\n      }, 50);\n    });\n\n    it('should log error response as warning', done => {\n      mockResponse.statusCode = 404;\n\n      middleware.use(\n        mockRequest as FastifyRequest,\n        mockResponse as FastifyReply,\n        nextFunction,\n      );\n\n      // 模拟响应发送\n      mockResponse.send?.('error response');\n\n      // 等待异步日志记录\n      setTimeout(() => {\n        expect(logger.warn).toHaveBeenCalledWith(\n          'HTTP Response',\n          LogContext.HTTP_REQUEST,\n          expect.objectContaining({\n            statusCode: 404,\n          }),\n        );\n        done();\n      }, 50);\n    });\n\n    it('should capture response size', done => {\n      middleware.use(\n        mockRequest as FastifyRequest,\n        mockResponse as FastifyReply,\n        nextFunction,\n      );\n\n      // 模拟响应发送\n      mockResponse.send?.('response data');\n\n      // 等待异步日志记录\n      setTimeout(() => {\n        expect(logger.info).toHaveBeenCalledWith(\n          expect.any(String),\n          LogContext.HTTP_REQUEST,\n          expect.objectContaining({\n            duration: expect.any(Number),\n          }),\n        );\n        done();\n      }, 50);\n    });\n  });\n\n  describe('security features', () => {\n    it('should sanitize sensitive headers', () => {\n      middleware.use(\n        mockRequest as FastifyRequest,\n        mockResponse as FastifyReply,\n        nextFunction,\n      );\n\n      expect(logger.info).toHaveBeenCalledWith(\n        expect.any(String),\n        LogContext.HTTP_REQUEST,\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            authorization: '***REDACTED***',\n            'user-agent': 'Mozilla/5.0',\n          }),\n        }),\n      );\n    });\n\n    it('should sanitize sensitive body fields', () => {\n      mockRequest.body = {\n        username: 'testuser',\n        password: 'secret123',\n        token: 'jwt-token',\n        email: 'test@example.com',\n      };\n\n      middleware.use(\n        mockRequest as FastifyRequest,\n        mockResponse as FastifyReply,\n        nextFunction,\n      );\n\n      expect(logger.info).toHaveBeenCalledWith(\n        expect.any(String),\n        LogContext.HTTP_REQUEST,\n        expect.objectContaining({\n          body: expect.objectContaining({\n            username: 'testuser',\n            password: '***REDACTED***',\n            token: '***REDACTED***',\n            email: 'test@example.com',\n          }),\n        }),\n      );\n    });\n  });\n\n  describe('client IP detection', () => {\n    it('should detect IP from X-Forwarded-For header', () => {\n      mockRequest = {\n        ...mockRequest,\n        headers: {\n          'x-forwarded-for': '192.168.1.100',\n          'user-agent': 'Mozilla/5.0',\n        },\n        ip: undefined,\n      } as Partial<FastifyRequest>;\n\n      middleware.use(\n        mockRequest as FastifyRequest,\n        mockResponse as FastifyReply,\n        nextFunction,\n      );\n\n      expect(logger.info).toHaveBeenCalledWith(\n        expect.any(String),\n        LogContext.HTTP_REQUEST,\n        expect.objectContaining({\n          ip: '192.168.1.100',\n          tenantId: undefined,\n          userId: undefined,\n        }),\n      );\n    });\n\n    it('should fallback to connection remote address', () => {\n      mockRequest = {\n        ...mockRequest,\n        headers: { 'user-agent': 'Mozilla/5.0' },\n        ip: undefined,\n        socket: { remoteAddress: '192.168.1.200' } as unknown,\n      } as Partial<FastifyRequest>;\n\n      middleware.use(\n        mockRequest as FastifyRequest,\n        mockResponse as FastifyReply,\n        nextFunction,\n      );\n\n      expect(logger.info).toHaveBeenCalledWith(\n        expect.any(String),\n        LogContext.HTTP_REQUEST,\n        expect.objectContaining({\n          ip: '192.168.1.200',\n        }),\n      );\n    });\n  });\n});\n"],"version":3}