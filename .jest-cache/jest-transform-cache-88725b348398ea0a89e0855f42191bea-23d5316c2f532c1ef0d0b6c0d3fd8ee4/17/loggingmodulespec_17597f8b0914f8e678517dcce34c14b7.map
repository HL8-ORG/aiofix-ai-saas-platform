{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/logging.module.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/logging.module.spec.ts"],"sourcesContent":["/**\n * @file logging.module.spec.ts\n * @description 日志模块单元测试\n *\n * 测试Pino日志服务的核心功能，包括：\n * - 日志级别控制\n * - 结构化日志输出\n * - 上下文管理\n * - 性能监控\n * - 错误处理\n */\n\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { ClsModule } from 'nestjs-cls';\nimport { PinoLoggerService } from './services/pino-logger.service';\nimport { PinoLoggerConfigService } from './services/pino-logger-config.service';\nimport { PinoLoggerFactory } from './factories/pino-logger.factory';\nimport { PinoLoggingMiddleware } from './middleware/pino-logging.middleware';\nimport { PinoLoggingInterceptor } from './interceptors/pino-logging.interceptor';\nimport { LogContext, LogLevel } from './interfaces/logging.interface';\n\ndescribe('LoggingModule', () => {\n  let module: TestingModule;\n  let loggerService: PinoLoggerService;\n  let configService: PinoLoggerConfigService;\n  let loggerFactory: PinoLoggerFactory;\n\n  beforeAll(async () => {\n    module = await Test.createTestingModule({\n      imports: [\n        EventEmitterModule.forRoot(),\n        ClsModule.forRoot({\n          global: true,\n          middleware: {\n            mount: true,\n            setup: (cls, _req) => {\n              cls.set('requestId', 'test-request-id');\n              cls.set('tenantId', 'test-tenant-id');\n              cls.set('userId', 'test-user-id');\n            },\n          },\n        }),\n      ],\n      providers: [\n        {\n          provide: PinoLoggerConfigService,\n          useFactory: () => {\n            return new PinoLoggerConfigService();\n          },\n        },\n        {\n          provide: PinoLoggerFactory,\n          useFactory: (configService: PinoLoggerConfigService) => {\n            return new PinoLoggerFactory(configService);\n          },\n          inject: [PinoLoggerConfigService],\n        },\n        {\n          provide: PinoLoggerService,\n          useFactory: (\n            eventEmitter: any,\n            configService: PinoLoggerConfigService,\n            loggerFactory: PinoLoggerFactory,\n            cls: any,\n          ) => {\n            return new PinoLoggerService(eventEmitter, configService, loggerFactory, cls);\n          },\n          inject: ['EventEmitter2', PinoLoggerConfigService, PinoLoggerFactory, 'ClsService'],\n        },\n        {\n          provide: PinoLoggingMiddleware,\n          useFactory: (logger: PinoLoggerService) => {\n            return new PinoLoggingMiddleware(logger);\n          },\n          inject: [PinoLoggerService],\n        },\n        {\n          provide: PinoLoggingInterceptor,\n          useFactory: (logger: PinoLoggerService) => {\n            return new PinoLoggingInterceptor(logger);\n          },\n          inject: [PinoLoggerService],\n        },\n      ],\n    }).compile();\n\n    loggerService = module.get<PinoLoggerService>(PinoLoggerService);\n    configService = module.get<PinoLoggerConfigService>(\n      PinoLoggerConfigService,\n    );\n    loggerFactory = module.get<PinoLoggerFactory>(PinoLoggerFactory);\n  });\n\n  afterAll(async () => {\n    if (module) {\n      await module.close();\n    }\n  });\n\n  describe('Module Initialization', () => {\n    it('should be defined', () => {\n      expect(module).toBeDefined();\n    });\n\n    it('should have PinoLoggerService', () => {\n      expect(loggerService).toBeDefined();\n    });\n\n    it('should have PinoLoggerConfigService', () => {\n      expect(configService).toBeDefined();\n    });\n\n    it('should have PinoLoggerFactory', () => {\n      expect(loggerFactory).toBeDefined();\n    });\n  });\n\n  describe('PinoLoggerService', () => {\n    it('should log different levels', () => {\n      const spy = jest\n        .spyOn(loggerService as any, 'log')\n        .mockImplementation(() => undefined);\n\n      loggerService.debug('Debug message', LogContext.SYSTEM);\n      loggerService.info('Info message', LogContext.BUSINESS);\n      loggerService.warn('Warning message', LogContext.AUTH);\n      loggerService.error('Error message', LogContext.SYSTEM);\n\n      expect(spy).toHaveBeenCalledTimes(4);\n      expect(spy).toHaveBeenCalledWith(\n        'debug',\n        'Debug message',\n        LogContext.SYSTEM,\n        undefined,\n        undefined,\n      );\n      expect(spy).toHaveBeenCalledWith(\n        'info',\n        'Info message',\n        LogContext.BUSINESS,\n        undefined,\n        undefined,\n      );\n      expect(spy).toHaveBeenCalledWith(\n        'warn',\n        'Warning message',\n        LogContext.AUTH,\n        undefined,\n        undefined,\n      );\n      expect(spy).toHaveBeenCalledWith(\n        'error',\n        'Error message',\n        LogContext.SYSTEM,\n        undefined,\n        undefined,\n      );\n\n      spy.mockRestore();\n    });\n\n    it('should log with metadata', () => {\n      const spy = jest\n        .spyOn(loggerService as any, 'log')\n        .mockImplementation(() => undefined);\n      const metadata = {\n        requestId: 'test-request-id',\n        tenantId: 'test-tenant-id',\n        userId: 'test-user-id',\n        operation: 'test-operation',\n      };\n\n      loggerService.info('Test message', LogContext.BUSINESS, metadata);\n\n      expect(spy).toHaveBeenCalledWith(\n        'info',\n        'Test message',\n        LogContext.BUSINESS,\n        metadata,\n        undefined,\n      );\n\n      spy.mockRestore();\n    });\n\n    it('should log errors with stack trace', () => {\n      const spy = jest\n        .spyOn(loggerService as any, 'log')\n        .mockImplementation(() => undefined);\n      const error = new Error('Test error');\n\n      loggerService.error(\n        'Error occurred',\n        LogContext.SYSTEM,\n        undefined,\n        error,\n      );\n\n      expect(spy).toHaveBeenCalledWith(\n        'error',\n        'Error occurred',\n        LogContext.SYSTEM,\n        undefined,\n        error,\n      );\n\n      spy.mockRestore();\n    });\n\n    it('should log performance metrics', () => {\n      const spy = jest\n        .spyOn(loggerService as any, 'log')\n        .mockImplementation(() => undefined);\n\n      loggerService.performance('test-operation', 150, LogContext.PERFORMANCE);\n\n      expect(spy).toHaveBeenCalledWith(\n        'info',\n        'Performance: test-operation took 150ms',\n        LogContext.PERFORMANCE,\n        {\n          operation: 'test-operation',\n          duration: 150,\n          type: 'performance',\n        },\n      );\n\n      spy.mockRestore();\n    });\n\n    it('should create child logger', () => {\n      const childLogger = loggerService.child(LogContext.BUSINESS, {\n        tenantId: 'child-tenant',\n      });\n      expect(childLogger).toBeDefined();\n      expect(childLogger).toHaveProperty('info');\n      expect(childLogger).toHaveProperty('error');\n      expect(childLogger).toHaveProperty('warn');\n    });\n\n    it('should get and set log level', () => {\n      const originalLevel = loggerService.getLevel();\n\n      loggerService.setLevel('debug');\n      expect(loggerService.getLevel()).toBe('debug');\n\n      loggerService.setLevel(originalLevel);\n      expect(loggerService.getLevel()).toBe(originalLevel);\n    });\n\n    it('should get stats', () => {\n      const stats = loggerService.getStats();\n      expect(stats).toHaveProperty('totalLogs');\n      expect(stats).toHaveProperty('logsByLevel');\n      expect(stats).toHaveProperty('logsByContext');\n      expect(stats).toHaveProperty('averageLogSize');\n    });\n  });\n\n  describe('PinoLoggerConfigService', () => {\n    it('should get default config', () => {\n      const config = configService.getConfig();\n      expect(config).toBeDefined();\n      expect(config).toHaveProperty('level');\n      expect(config).toHaveProperty('format');\n      expect(config).toHaveProperty('timestamp');\n    });\n\n    it('should update config', () => {\n      const originalConfig = configService.getConfig();\n      const newConfig = { level: 'debug' as LogLevel };\n\n      configService.updateConfig(newConfig);\n      expect(configService.getLevel()).toBe('debug');\n\n      // 恢复原始配置\n      configService.updateConfig(originalConfig);\n    });\n\n    it('should detect environment', () => {\n      const isDev = configService.isDevelopment();\n      const isProd = configService.isProduction();\n\n      expect(typeof isDev).toBe('boolean');\n      expect(typeof isProd).toBe('boolean');\n    });\n  });\n\n  describe('PinoLoggerFactory', () => {\n    it('should create logger', () => {\n      const logger = loggerFactory.createLogger();\n      expect(logger).toBeDefined();\n      expect(logger).toHaveProperty('info');\n      expect(logger).toHaveProperty('error');\n      expect(logger).toHaveProperty('warn');\n    });\n\n    it('should create child logger', () => {\n      const parentLogger = loggerFactory.createLogger();\n      const childLogger = loggerFactory.createChildLogger(parentLogger, {\n        context: 'test',\n      });\n\n      expect(childLogger).toBeDefined();\n      expect(childLogger).toHaveProperty('info');\n      expect(childLogger).toHaveProperty('error');\n    });\n  });\n\n  describe('Logging Middleware and Interceptor', () => {\n    it('should have middleware defined', () => {\n      const middleware = module.get<PinoLoggingMiddleware>(\n        PinoLoggingMiddleware,\n      );\n      expect(middleware).toBeDefined();\n      expect(middleware).toHaveProperty('use');\n    });\n\n    it('should have interceptor defined', () => {\n      const interceptor = module.get<PinoLoggingInterceptor>(\n        PinoLoggingInterceptor,\n      );\n      expect(interceptor).toBeDefined();\n      expect(interceptor).toHaveProperty('intercept');\n    });\n  });\n});\n"],"version":3}