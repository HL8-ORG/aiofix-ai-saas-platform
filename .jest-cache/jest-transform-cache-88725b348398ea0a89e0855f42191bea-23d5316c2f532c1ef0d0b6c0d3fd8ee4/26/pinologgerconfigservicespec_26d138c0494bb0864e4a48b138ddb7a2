b2ed04ae313383468029148d2b2f5c37
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const pino_logger_config_service_1 = require("./pino-logger-config.service");
const logging_interface_1 = require("../interfaces/logging.interface");
describe('PinoLoggerConfigService', () => {
    let service;
    let originalEnv;
    beforeEach(async () => {
        // 保存原始环境变量
        originalEnv = { ...process.env };
        // 清理可能影响测试的环境变量
        delete process.env.LOG_LEVEL;
        delete process.env.LOG_FORMAT;
        delete process.env.LOG_FILE_PATH;
        delete process.env.LOG_REMOTE_URL;
        delete process.env.LOG_REMOTE_TOKEN;
        delete process.env.NODE_ENV;
        const module = await testing_1.Test.createTestingModule({
            providers: [pino_logger_config_service_1.PinoLoggerConfigService],
        }).compile();
        service = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
    });
    afterEach(() => {
        // 恢复原始环境变量
        process.env = originalEnv;
    });
    describe('初始化', () => {
        it('应该使用默认配置初始化', () => {
            const config = service.getConfig();
            expect(config.level).toBe('info');
            expect(config.format).toBe(logging_interface_1.LogFormat.JSON);
            expect(config.colorize).toBe(false);
            expect(config.timestamp).toBe(true);
            expect(config.requestId).toBe(true);
            expect(config.tenantId).toBe(true);
            expect(config.userId).toBe(true);
            expect(config.performance).toBe(true);
            expect(config.stackTrace).toBe(true);
        });
        it('应该使用自定义配置初始化', async () => {
            const customConfig = {
                level: 'debug',
                format: logging_interface_1.LogFormat.TEXT,
                colorize: true,
            };
            const module = await testing_1.Test.createTestingModule({
                providers: [
                    {
                        provide: pino_logger_config_service_1.PinoLoggerConfigService,
                        useFactory: () => new pino_logger_config_service_1.PinoLoggerConfigService(customConfig),
                    },
                ],
            }).compile();
            const customService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
            const config = customService.getConfig();
            expect(config.level).toBe('debug');
            expect(config.format).toBe(logging_interface_1.LogFormat.TEXT);
            expect(config.colorize).toBe(true);
        });
        it('应该从环境变量读取配置', async () => {
            process.env.LOG_LEVEL = 'warn';
            process.env.LOG_FORMAT = 'text';
            process.env.NODE_ENV = 'development';
            const module = await testing_1.Test.createTestingModule({
                providers: [pino_logger_config_service_1.PinoLoggerConfigService],
            }).compile();
            const envService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
            const config = envService.getConfig();
            expect(config.level).toBe('warn');
            expect(config.format).toBe('text');
            expect(config.colorize).toBe(true); // development环境应该启用colorize
        });
    });
    describe('配置管理', () => {
        it('应该获取当前配置', () => {
            const config = service.getConfig();
            expect(config).toBeDefined();
            expect(typeof config).toBe('object');
            expect(config.level).toBeDefined();
            expect(config.format).toBeDefined();
        });
        it('应该更新配置', () => {
            const newConfig = {
                level: 'debug',
                format: logging_interface_1.LogFormat.TEXT,
                colorize: true,
            };
            service.updateConfig(newConfig);
            const config = service.getConfig();
            expect(config.level).toBe('debug');
            expect(config.format).toBe(logging_interface_1.LogFormat.TEXT);
            expect(config.colorize).toBe(true);
        });
        it('应该部分更新配置', () => {
            const originalConfig = service.getConfig();
            service.updateConfig({ level: 'error' });
            const config = service.getConfig();
            expect(config.level).toBe('error');
            expect(config.format).toBe(originalConfig.format);
            expect(config.colorize).toBe(originalConfig.colorize);
        });
        it('应该重置为默认配置', () => {
            // 先修改配置
            service.updateConfig({ level: 'debug', colorize: true });
            // 重置为默认配置
            service.resetToDefaults();
            const config = service.getConfig();
            expect(config.level).toBe('info');
            expect(config.colorize).toBe(false);
        });
    });
    describe('日志级别管理', () => {
        it('应该获取当前日志级别', () => {
            const level = service.getLevel();
            expect(level).toBe('info');
        });
        it('应该设置日志级别', () => {
            service.setLevel('debug');
            expect(service.getLevel()).toBe('debug');
        });
        it('应该支持所有有效的日志级别', () => {
            const validLevels = [
                'fatal',
                'error',
                'warn',
                'info',
                'debug',
                'trace',
            ];
            validLevels.forEach(level => {
                service.setLevel(level);
                expect(service.getLevel()).toBe(level);
            });
        });
    });
    describe('日志格式管理', () => {
        it('应该获取当前日志格式', () => {
            const format = service.getFormat();
            expect(format).toBe(logging_interface_1.LogFormat.JSON);
        });
        it('应该设置日志格式', () => {
            service.setFormat(logging_interface_1.LogFormat.TEXT);
            expect(service.getFormat()).toBe(logging_interface_1.LogFormat.TEXT);
        });
        it('应该支持所有有效的日志格式', () => {
            const validFormats = [logging_interface_1.LogFormat.JSON, logging_interface_1.LogFormat.TEXT];
            validFormats.forEach(format => {
                service.setFormat(format);
                expect(service.getFormat()).toBe(format);
            });
        });
    });
    describe('环境检测', () => {
        it('应该正确检测生产环境', async () => {
            process.env.NODE_ENV = 'production';
            const module = await testing_1.Test.createTestingModule({
                providers: [pino_logger_config_service_1.PinoLoggerConfigService],
            }).compile();
            const prodService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
            expect(prodService.isProduction()).toBe(true);
            expect(prodService.isDevelopment()).toBe(false);
        });
        it('应该正确检测开发环境', async () => {
            process.env.NODE_ENV = 'development';
            const module = await testing_1.Test.createTestingModule({
                providers: [pino_logger_config_service_1.PinoLoggerConfigService],
            }).compile();
            const devService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
            expect(devService.isProduction()).toBe(false);
            expect(devService.isDevelopment()).toBe(true);
        });
        it('应该正确检测测试环境', async () => {
            process.env.NODE_ENV = 'test';
            const module = await testing_1.Test.createTestingModule({
                providers: [pino_logger_config_service_1.PinoLoggerConfigService],
            }).compile();
            const testService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
            expect(testService.isProduction()).toBe(false);
            expect(testService.isDevelopment()).toBe(true);
        });
    });
    describe('美化格式判断', () => {
        it('开发环境应该使用美化格式', async () => {
            process.env.NODE_ENV = 'development';
            const module = await testing_1.Test.createTestingModule({
                providers: [pino_logger_config_service_1.PinoLoggerConfigService],
            }).compile();
            const devService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
            devService.setFormat(logging_interface_1.LogFormat.TEXT);
            expect(devService.shouldUsePrettyFormat()).toBe(true);
        });
        it('生产环境不应该使用美化格式', async () => {
            process.env.NODE_ENV = 'production';
            const module = await testing_1.Test.createTestingModule({
                providers: [pino_logger_config_service_1.PinoLoggerConfigService],
            }).compile();
            const prodService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
            prodService.setFormat(logging_interface_1.LogFormat.TEXT);
            expect(prodService.shouldUsePrettyFormat()).toBe(false);
        });
        it('JSON格式不应该使用美化格式', async () => {
            process.env.NODE_ENV = 'development';
            const module = await testing_1.Test.createTestingModule({
                providers: [pino_logger_config_service_1.PinoLoggerConfigService],
            }).compile();
            const devService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
            devService.setFormat(logging_interface_1.LogFormat.JSON);
            expect(devService.shouldUsePrettyFormat()).toBe(false);
        });
    });
    describe('配置验证', () => {
        it('应该验证有效的日志级别', () => {
            const validLevels = [
                'fatal',
                'error',
                'warn',
                'info',
                'debug',
                'trace',
            ];
            validLevels.forEach(level => {
                expect(() => {
                    service.updateConfig({ level });
                }).not.toThrow();
            });
        });
        it('应该验证有效的日志格式', () => {
            const validFormats = [logging_interface_1.LogFormat.JSON, logging_interface_1.LogFormat.TEXT];
            validFormats.forEach(format => {
                expect(() => {
                    service.updateConfig({ format });
                }).not.toThrow();
            });
        });
        it('应该验证文件轮转配置', () => {
            const validRotationConfig = {
                rotation: {
                    maxSize: '10m',
                    maxFiles: 5,
                    interval: '1d',
                },
            };
            expect(() => {
                service.updateConfig(validRotationConfig);
            }).not.toThrow();
        });
        it('应该验证远程日志配置', () => {
            const validRemoteConfig = {
                remote: {
                    url: 'https://logs.example.com',
                    token: 'secret-token',
                    timeout: 5000,
                    retries: 3,
                },
            };
            expect(() => {
                service.updateConfig(validRemoteConfig);
            }).not.toThrow();
        });
    });
    describe('配置验证错误', () => {
        it('应该拒绝无效的日志级别', () => {
            expect(() => {
                service.updateConfig({ level: 'invalid' });
            }).toThrow('Invalid log level');
        });
        it('应该拒绝无效的日志格式', () => {
            expect(() => {
                service.updateConfig({ format: 'invalid' });
            }).toThrow('Invalid log format');
        });
        it('应该拒绝无效的文件大小格式', () => {
            expect(() => {
                service.updateConfig({
                    rotation: {
                        maxSize: 'invalid-size',
                        maxFiles: 5,
                        interval: '1d',
                    },
                });
            }).toThrow('Invalid maxSize format');
        });
        it('应该拒绝缺少URL的远程日志配置', () => {
            expect(() => {
                service.updateConfig({
                    remote: {
                        url: '',
                        token: 'secret-token',
                        timeout: 5000,
                        retries: 3,
                    },
                });
            }).toThrow('Remote logging URL is required');
        });
        it('应该拒绝负数的超时时间', () => {
            expect(() => {
                service.updateConfig({
                    remote: {
                        url: 'https://logs.example.com',
                        token: 'secret-token',
                        timeout: -1,
                        retries: 3,
                    },
                });
            }).toThrow('Remote logging timeout must be positive');
        });
        it('应该拒绝负数的重试次数', () => {
            expect(() => {
                service.updateConfig({
                    remote: {
                        url: 'https://logs.example.com',
                        token: 'secret-token',
                        timeout: 5000,
                        retries: -1,
                    },
                });
            }).toThrow('Remote logging retries must be non-negative');
        });
    });
    describe('环境变量配置', () => {
        it('应该从环境变量读取日志级别', async () => {
            process.env.LOG_LEVEL = 'error';
            const module = await testing_1.Test.createTestingModule({
                providers: [pino_logger_config_service_1.PinoLoggerConfigService],
            }).compile();
            const envService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
            expect(envService.getLevel()).toBe('error');
        });
        it('应该从环境变量读取日志格式', async () => {
            process.env.LOG_FORMAT = 'text';
            const module = await testing_1.Test.createTestingModule({
                providers: [pino_logger_config_service_1.PinoLoggerConfigService],
            }).compile();
            const envService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
            expect(envService.getFormat()).toBe('text');
        });
        it('应该从环境变量读取日志文件路径', async () => {
            process.env.LOG_FILE_PATH = '/var/log/app.log';
            const module = await testing_1.Test.createTestingModule({
                providers: [pino_logger_config_service_1.PinoLoggerConfigService],
            }).compile();
            const envService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
            const config = envService.getConfig();
            expect(config.filePath).toBe('/var/log/app.log');
        });
        it('应该从环境变量读取远程日志配置', async () => {
            process.env.LOG_REMOTE_URL = 'https://logs.example.com';
            process.env.LOG_REMOTE_TOKEN = 'secret-token';
            const module = await testing_1.Test.createTestingModule({
                providers: [pino_logger_config_service_1.PinoLoggerConfigService],
            }).compile();
            const envService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
            const config = envService.getConfig();
            expect(config.remote).toBeDefined();
            expect(config.remote?.url).toBe('https://logs.example.com');
            expect(config.remote?.token).toBe('secret-token');
            expect(config.remote?.timeout).toBe(5000);
            expect(config.remote?.retries).toBe(3);
        });
    });
    describe('配置合并', () => {
        it('应该正确合并默认配置和自定义配置', async () => {
            const customConfig = {
                level: 'debug',
                colorize: true,
                timestamp: false,
            };
            const module = await testing_1.Test.createTestingModule({
                providers: [
                    {
                        provide: pino_logger_config_service_1.PinoLoggerConfigService,
                        useFactory: () => new pino_logger_config_service_1.PinoLoggerConfigService(customConfig),
                    },
                ],
            }).compile();
            const customService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
            const config = customService.getConfig();
            // 自定义配置应该覆盖默认配置
            expect(config.level).toBe('debug');
            expect(config.colorize).toBe(true);
            expect(config.timestamp).toBe(false);
            // 未指定的配置应该保持默认值
            expect(config.requestId).toBe(true);
            expect(config.tenantId).toBe(true);
            expect(config.userId).toBe(true);
        });
        it('应该正确处理环境变量和自定义配置的优先级', async () => {
            process.env.LOG_LEVEL = 'warn';
            process.env.LOG_FORMAT = 'text';
            const customConfig = {
                level: 'debug',
                colorize: true,
            };
            const module = await testing_1.Test.createTestingModule({
                providers: [
                    {
                        provide: pino_logger_config_service_1.PinoLoggerConfigService,
                        useFactory: () => new pino_logger_config_service_1.PinoLoggerConfigService(customConfig),
                    },
                ],
            }).compile();
            const customService = module.get(pino_logger_config_service_1.PinoLoggerConfigService);
            const config = customService.getConfig();
            // 环境变量应该覆盖默认配置，但自定义配置应该覆盖环境变量
            expect(config.level).toBe('debug'); // 自定义配置优先级最高
            expect(config.format).toBe('text'); // 环境变量
            expect(config.colorize).toBe(true); // 自定义配置
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,