{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/services/pino-logger-config.service.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/services/pino-logger-config.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport {\n  PinoLoggerConfigService,\n  LogLevel,\n} from './pino-logger-config.service';\nimport { LogConfig, LogFormat } from '../interfaces/logging.interface';\n\ndescribe('PinoLoggerConfigService', () => {\n  let service: PinoLoggerConfigService;\n  let originalEnv: NodeJS.ProcessEnv;\n\n  beforeEach(async () => {\n    // 保存原始环境变量\n    originalEnv = { ...process.env };\n\n    // 清理可能影响测试的环境变量\n    delete process.env.LOG_LEVEL;\n    delete process.env.LOG_FORMAT;\n    delete process.env.LOG_FILE_PATH;\n    delete process.env.LOG_REMOTE_URL;\n    delete process.env.LOG_REMOTE_TOKEN;\n    delete process.env.NODE_ENV;\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [PinoLoggerConfigService],\n    }).compile();\n\n    service = module.get<PinoLoggerConfigService>(PinoLoggerConfigService);\n  });\n\n  afterEach(() => {\n    // 恢复原始环境变量\n    process.env = originalEnv;\n  });\n\n  describe('初始化', () => {\n    it('应该使用默认配置初始化', () => {\n      const config = service.getConfig();\n\n      expect(config.level).toBe('info');\n      expect(config.format).toBe(LogFormat.JSON);\n      expect(config.colorize).toBe(false);\n      expect(config.timestamp).toBe(true);\n      expect(config.requestId).toBe(true);\n      expect(config.tenantId).toBe(true);\n      expect(config.userId).toBe(true);\n      expect(config.performance).toBe(true);\n      expect(config.stackTrace).toBe(true);\n    });\n\n    it('应该使用自定义配置初始化', async () => {\n      const customConfig: Partial<LogConfig> = {\n        level: 'debug',\n        format: LogFormat.TEXT,\n        colorize: true,\n      };\n\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [\n          {\n            provide: PinoLoggerConfigService,\n            useFactory: () => new PinoLoggerConfigService(customConfig),\n          },\n        ],\n      }).compile();\n\n      const customService = module.get<PinoLoggerConfigService>(\n        PinoLoggerConfigService,\n      );\n      const config = customService.getConfig();\n\n      expect(config.level).toBe('debug');\n      expect(config.format).toBe(LogFormat.TEXT);\n      expect(config.colorize).toBe(true);\n    });\n\n    it('应该从环境变量读取配置', async () => {\n      process.env.LOG_LEVEL = 'warn';\n      process.env.LOG_FORMAT = 'text';\n      process.env.NODE_ENV = 'development';\n\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [PinoLoggerConfigService],\n      }).compile();\n\n      const envService = module.get<PinoLoggerConfigService>(\n        PinoLoggerConfigService,\n      );\n      const config = envService.getConfig();\n\n      expect(config.level).toBe('warn');\n      expect(config.format).toBe('text');\n      expect(config.colorize).toBe(true); // development环境应该启用colorize\n    });\n  });\n\n  describe('配置管理', () => {\n    it('应该获取当前配置', () => {\n      const config = service.getConfig();\n\n      expect(config).toBeDefined();\n      expect(typeof config).toBe('object');\n      expect(config.level).toBeDefined();\n      expect(config.format).toBeDefined();\n    });\n\n    it('应该更新配置', () => {\n      const newConfig: Partial<LogConfig> = {\n        level: 'debug',\n        format: LogFormat.TEXT,\n        colorize: true,\n      };\n\n      service.updateConfig(newConfig);\n      const config = service.getConfig();\n\n      expect(config.level).toBe('debug');\n      expect(config.format).toBe(LogFormat.TEXT);\n      expect(config.colorize).toBe(true);\n    });\n\n    it('应该部分更新配置', () => {\n      const originalConfig = service.getConfig();\n\n      service.updateConfig({ level: 'error' });\n      const config = service.getConfig();\n\n      expect(config.level).toBe('error');\n      expect(config.format).toBe(originalConfig.format);\n      expect(config.colorize).toBe(originalConfig.colorize);\n    });\n\n    it('应该重置为默认配置', () => {\n      // 先修改配置\n      service.updateConfig({ level: 'debug', colorize: true });\n\n      // 重置为默认配置\n      service.resetToDefaults();\n      const config = service.getConfig();\n\n      expect(config.level).toBe('info');\n      expect(config.colorize).toBe(false);\n    });\n  });\n\n  describe('日志级别管理', () => {\n    it('应该获取当前日志级别', () => {\n      const level = service.getLevel();\n      expect(level).toBe('info');\n    });\n\n    it('应该设置日志级别', () => {\n      service.setLevel('debug');\n      expect(service.getLevel()).toBe('debug');\n    });\n\n    it('应该支持所有有效的日志级别', () => {\n      const validLevels: LogLevel[] = [\n        'fatal',\n        'error',\n        'warn',\n        'info',\n        'debug',\n        'trace',\n      ];\n\n      validLevels.forEach(level => {\n        service.setLevel(level);\n        expect(service.getLevel()).toBe(level);\n      });\n    });\n  });\n\n  describe('日志格式管理', () => {\n    it('应该获取当前日志格式', () => {\n      const format = service.getFormat();\n      expect(format).toBe(LogFormat.JSON);\n    });\n\n    it('应该设置日志格式', () => {\n      service.setFormat(LogFormat.TEXT);\n      expect(service.getFormat()).toBe(LogFormat.TEXT);\n    });\n\n    it('应该支持所有有效的日志格式', () => {\n      const validFormats: LogFormat[] = [LogFormat.JSON, LogFormat.TEXT];\n\n      validFormats.forEach(format => {\n        service.setFormat(format);\n        expect(service.getFormat()).toBe(format);\n      });\n    });\n  });\n\n  describe('环境检测', () => {\n    it('应该正确检测生产环境', async () => {\n      process.env.NODE_ENV = 'production';\n\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [PinoLoggerConfigService],\n      }).compile();\n\n      const prodService = module.get<PinoLoggerConfigService>(\n        PinoLoggerConfigService,\n      );\n\n      expect(prodService.isProduction()).toBe(true);\n      expect(prodService.isDevelopment()).toBe(false);\n    });\n\n    it('应该正确检测开发环境', async () => {\n      process.env.NODE_ENV = 'development';\n\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [PinoLoggerConfigService],\n      }).compile();\n\n      const devService = module.get<PinoLoggerConfigService>(\n        PinoLoggerConfigService,\n      );\n\n      expect(devService.isProduction()).toBe(false);\n      expect(devService.isDevelopment()).toBe(true);\n    });\n\n    it('应该正确检测测试环境', async () => {\n      process.env.NODE_ENV = 'test';\n\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [PinoLoggerConfigService],\n      }).compile();\n\n      const testService = module.get<PinoLoggerConfigService>(\n        PinoLoggerConfigService,\n      );\n\n      expect(testService.isProduction()).toBe(false);\n      expect(testService.isDevelopment()).toBe(true);\n    });\n  });\n\n  describe('美化格式判断', () => {\n    it('开发环境应该使用美化格式', async () => {\n      process.env.NODE_ENV = 'development';\n\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [PinoLoggerConfigService],\n      }).compile();\n\n      const devService = module.get<PinoLoggerConfigService>(\n        PinoLoggerConfigService,\n      );\n      devService.setFormat(LogFormat.TEXT);\n\n      expect(devService.shouldUsePrettyFormat()).toBe(true);\n    });\n\n    it('生产环境不应该使用美化格式', async () => {\n      process.env.NODE_ENV = 'production';\n\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [PinoLoggerConfigService],\n      }).compile();\n\n      const prodService = module.get<PinoLoggerConfigService>(\n        PinoLoggerConfigService,\n      );\n      prodService.setFormat(LogFormat.TEXT);\n\n      expect(prodService.shouldUsePrettyFormat()).toBe(false);\n    });\n\n    it('JSON格式不应该使用美化格式', async () => {\n      process.env.NODE_ENV = 'development';\n\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [PinoLoggerConfigService],\n      }).compile();\n\n      const devService = module.get<PinoLoggerConfigService>(\n        PinoLoggerConfigService,\n      );\n      devService.setFormat(LogFormat.JSON);\n\n      expect(devService.shouldUsePrettyFormat()).toBe(false);\n    });\n  });\n\n  describe('配置验证', () => {\n    it('应该验证有效的日志级别', () => {\n      const validLevels: LogLevel[] = [\n        'fatal',\n        'error',\n        'warn',\n        'info',\n        'debug',\n        'trace',\n      ];\n\n      validLevels.forEach(level => {\n        expect(() => {\n          service.updateConfig({ level });\n        }).not.toThrow();\n      });\n    });\n\n    it('应该验证有效的日志格式', () => {\n      const validFormats: LogFormat[] = [LogFormat.JSON, LogFormat.TEXT];\n\n      validFormats.forEach(format => {\n        expect(() => {\n          service.updateConfig({ format });\n        }).not.toThrow();\n      });\n    });\n\n    it('应该验证文件轮转配置', () => {\n      const validRotationConfig = {\n        rotation: {\n          maxSize: '10m',\n          maxFiles: 5,\n          interval: '1d',\n        },\n      };\n\n      expect(() => {\n        service.updateConfig(validRotationConfig);\n      }).not.toThrow();\n    });\n\n    it('应该验证远程日志配置', () => {\n      const validRemoteConfig = {\n        remote: {\n          url: 'https://logs.example.com',\n          token: 'secret-token',\n          timeout: 5000,\n          retries: 3,\n        },\n      };\n\n      expect(() => {\n        service.updateConfig(validRemoteConfig);\n      }).not.toThrow();\n    });\n  });\n\n  describe('配置验证错误', () => {\n    it('应该拒绝无效的日志级别', () => {\n      expect(() => {\n        service.updateConfig({ level: 'invalid' as LogLevel });\n      }).toThrow('Invalid log level');\n    });\n\n    it('应该拒绝无效的日志格式', () => {\n      expect(() => {\n        service.updateConfig({ format: 'invalid' as LogFormat });\n      }).toThrow('Invalid log format');\n    });\n\n    it('应该拒绝无效的文件大小格式', () => {\n      expect(() => {\n        service.updateConfig({\n          rotation: {\n            maxSize: 'invalid-size',\n            maxFiles: 5,\n            interval: '1d',\n          },\n        });\n      }).toThrow('Invalid maxSize format');\n    });\n\n    it('应该拒绝缺少URL的远程日志配置', () => {\n      expect(() => {\n        service.updateConfig({\n          remote: {\n            url: '',\n            token: 'secret-token',\n            timeout: 5000,\n            retries: 3,\n          },\n        });\n      }).toThrow('Remote logging URL is required');\n    });\n\n    it('应该拒绝负数的超时时间', () => {\n      expect(() => {\n        service.updateConfig({\n          remote: {\n            url: 'https://logs.example.com',\n            token: 'secret-token',\n            timeout: -1,\n            retries: 3,\n          },\n        });\n      }).toThrow('Remote logging timeout must be positive');\n    });\n\n    it('应该拒绝负数的重试次数', () => {\n      expect(() => {\n        service.updateConfig({\n          remote: {\n            url: 'https://logs.example.com',\n            token: 'secret-token',\n            timeout: 5000,\n            retries: -1,\n          },\n        });\n      }).toThrow('Remote logging retries must be non-negative');\n    });\n  });\n\n  describe('环境变量配置', () => {\n    it('应该从环境变量读取日志级别', async () => {\n      process.env.LOG_LEVEL = 'error';\n\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [PinoLoggerConfigService],\n      }).compile();\n\n      const envService = module.get<PinoLoggerConfigService>(\n        PinoLoggerConfigService,\n      );\n\n      expect(envService.getLevel()).toBe('error');\n    });\n\n    it('应该从环境变量读取日志格式', async () => {\n      process.env.LOG_FORMAT = 'text';\n\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [PinoLoggerConfigService],\n      }).compile();\n\n      const envService = module.get<PinoLoggerConfigService>(\n        PinoLoggerConfigService,\n      );\n\n      expect(envService.getFormat()).toBe('text');\n    });\n\n    it('应该从环境变量读取日志文件路径', async () => {\n      process.env.LOG_FILE_PATH = '/var/log/app.log';\n\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [PinoLoggerConfigService],\n      }).compile();\n\n      const envService = module.get<PinoLoggerConfigService>(\n        PinoLoggerConfigService,\n      );\n      const config = envService.getConfig();\n\n      expect(config.filePath).toBe('/var/log/app.log');\n    });\n\n    it('应该从环境变量读取远程日志配置', async () => {\n      process.env.LOG_REMOTE_URL = 'https://logs.example.com';\n      process.env.LOG_REMOTE_TOKEN = 'secret-token';\n\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [PinoLoggerConfigService],\n      }).compile();\n\n      const envService = module.get<PinoLoggerConfigService>(\n        PinoLoggerConfigService,\n      );\n      const config = envService.getConfig();\n\n      expect(config.remote).toBeDefined();\n      expect(config.remote?.url).toBe('https://logs.example.com');\n      expect(config.remote?.token).toBe('secret-token');\n      expect(config.remote?.timeout).toBe(5000);\n      expect(config.remote?.retries).toBe(3);\n    });\n  });\n\n  describe('配置合并', () => {\n    it('应该正确合并默认配置和自定义配置', async () => {\n      const customConfig: Partial<LogConfig> = {\n        level: 'debug',\n        colorize: true,\n        timestamp: false,\n      };\n\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [\n          {\n            provide: PinoLoggerConfigService,\n            useFactory: () => new PinoLoggerConfigService(customConfig),\n          },\n        ],\n      }).compile();\n\n      const customService = module.get<PinoLoggerConfigService>(\n        PinoLoggerConfigService,\n      );\n      const config = customService.getConfig();\n\n      // 自定义配置应该覆盖默认配置\n      expect(config.level).toBe('debug');\n      expect(config.colorize).toBe(true);\n      expect(config.timestamp).toBe(false);\n\n      // 未指定的配置应该保持默认值\n      expect(config.requestId).toBe(true);\n      expect(config.tenantId).toBe(true);\n      expect(config.userId).toBe(true);\n    });\n\n    it('应该正确处理环境变量和自定义配置的优先级', async () => {\n      process.env.LOG_LEVEL = 'warn';\n      process.env.LOG_FORMAT = 'text';\n\n      const customConfig: Partial<LogConfig> = {\n        level: 'debug',\n        colorize: true,\n      };\n\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [\n          {\n            provide: PinoLoggerConfigService,\n            useFactory: () => new PinoLoggerConfigService(customConfig),\n          },\n        ],\n      }).compile();\n\n      const customService = module.get<PinoLoggerConfigService>(\n        PinoLoggerConfigService,\n      );\n      const config = customService.getConfig();\n\n      // 环境变量应该覆盖默认配置，但自定义配置应该覆盖环境变量\n      expect(config.level).toBe('debug'); // 自定义配置优先级最高\n      expect(config.format).toBe('text'); // 环境变量\n      expect(config.colorize).toBe(true); // 自定义配置\n    });\n  });\n});\n"],"version":3}