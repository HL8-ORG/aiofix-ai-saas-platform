{"version":3,"names":["EventSourcedAggregateRoot","constructor","cov_16n01c2j8y","f","s","_uncommittedEvents","_version","uncommittedEvents","version","apply","event","isFromHistory","b","validateEvent","handleEvent","push","markEventsAsCommitted","loadFromHistory","events","fromVersion","length","sortedEvents","sort","a","eventVersion","createSnapshot","aggregateId","id","data","toSnapshot","createdAt","Date","restoreFromSnapshot","snapshot","Error","fromSnapshot","eventId","trim","eventType","hasUncommittedEvents","getUncommittedEventsCount","exports"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/core/src/domain/event-sourced-aggregate-root.ts"],"sourcesContent":["import {\n  IDomainEvent,\n  IAggregateSnapshot,\n} from './interfaces/domain-event.interface';\n\n/**\n * @class EventSourcedAggregateRoot\n * @description\n * 事件溯源聚合根基类，负责管理用户相关的业务方法、事件发布和不变性约束。\n *\n * 业务方法与事件发布：\n * 1. 提供聚合根的事件管理和版本控制\n * 2. 在状态变更时记录相应的领域事件\n * 3. 确保业务操作的事件一致性\n *\n * 不变性约束：\n * 1. 事件一旦创建不可修改\n * 2. 聚合状态只能通过事件变更\n * 3. 版本控制确保并发安全\n *\n * 事件溯源特性：\n * 1. 支持从历史事件重建聚合状态\n * 2. 提供快照机制优化性能\n * 3. 支持时间旅行和审计功能\n * 4. 通过版本控制防止并发冲突\n *\n * @property {string} id 聚合根的唯一标识符，子类必须实现\n * @property {IDomainEvent[]} uncommittedEvents 未提交的事件列表\n * @property {number} version 聚合根的当前版本号\n *\n * @example\n * ```typescript\n * class UserAggregate extends EventSourcedAggregateRoot {\n *   public readonly id: string;\n *\n *   protected handleEvent(event: IDomainEvent, isFromHistory: boolean): void {\n *     // 处理事件逻辑\n *   }\n *\n *   protected toSnapshot(): any {\n *     // 返回快照数据\n *   }\n *\n *   protected fromSnapshot(data: any): void {\n *     // 从快照恢复状态\n *   }\n * }\n * ```\n * @abstract\n * @since 1.0.0\n */\nexport abstract class EventSourcedAggregateRoot {\n  /**\n   * 聚合根的唯一标识符\n   * 子类必须实现此属性\n   */\n  public abstract readonly id: string;\n\n  /**\n   * 未提交的事件列表\n   * 存储聚合根中发生但尚未持久化的事件\n   */\n  private _uncommittedEvents: IDomainEvent[] = [];\n\n  /**\n   * 聚合根的当前版本号\n   * 用于乐观锁控制，防止并发冲突\n   */\n  private _version = 0;\n\n  /**\n   * 获取未提交的事件列表\n   *\n   * @returns {IDomainEvent[]} 未提交的事件列表的副本\n   */\n  public get uncommittedEvents(): IDomainEvent[] {\n    return [...this._uncommittedEvents];\n  }\n\n  /**\n   * 获取聚合根的当前版本号\n   *\n   * @returns {number} 当前版本号\n   */\n  public get version(): number {\n    return this._version;\n  }\n\n  /**\n   * 应用领域事件\n   *\n   * 这是事件溯源的核心方法，用于应用事件到聚合根。\n   * 事件应用会触发状态变更，并记录到未提交事件列表中。\n   *\n   * @param {IDomainEvent} event - 要应用的领域事件\n   * @param {boolean} [isFromHistory=false] - 是否来自历史事件重放\n   *\n   * @protected\n   */\n  protected apply(event: IDomainEvent, isFromHistory: boolean = false): void {\n    // 验证事件的有效性\n    this.validateEvent(event);\n\n    // 处理事件，更新聚合状态\n    this.handleEvent(event, isFromHistory);\n\n    // 如果不是来自历史事件重放，则记录到未提交事件列表\n    if (!isFromHistory) {\n      this._uncommittedEvents.push(event);\n      this._version++;\n    }\n  }\n\n  /**\n   * 处理领域事件\n   *\n   * 子类必须实现此方法，定义如何处理不同类型的事件。\n   * 这是聚合根业务逻辑的核心部分。\n   *\n   * @param {IDomainEvent} event - 要处理的领域事件\n   * @param {boolean} isFromHistory - 是否来自历史事件重放\n   *\n   * @protected\n   * @abstract\n   */\n  protected abstract handleEvent(\n    event: IDomainEvent,\n    isFromHistory: boolean,\n  ): void;\n\n  /**\n   * 标记事件为已提交\n   *\n   * 在事件成功持久化后调用此方法，清空未提交事件列表。\n   * 这通常在仓储的保存操作完成后调用。\n   *\n   * @public\n   */\n  public markEventsAsCommitted(): void {\n    this._uncommittedEvents = [];\n  }\n\n  /**\n   * 从历史事件重建聚合状态\n   *\n   * 通过重放历史事件来重建聚合的当前状态。\n   * 这是事件溯源的核心功能之一。\n   *\n   * @param {IDomainEvent[]} events - 历史事件列表\n   * @param {number} [fromVersion=0] - 起始版本号\n   *\n   * @public\n   */\n  public loadFromHistory(\n    events: IDomainEvent[],\n    fromVersion: number = 0,\n  ): void {\n    if (events.length === 0) {\n      return;\n    }\n\n    // 按版本号排序事件\n    const sortedEvents = events.sort((a, b) => a.eventVersion - b.eventVersion);\n\n    // 重放事件\n    for (const event of sortedEvents) {\n      this.apply(event, true);\n    }\n\n    // 设置版本号\n    this._version = fromVersion + events.length;\n  }\n\n  /**\n   * 创建聚合快照\n   *\n   * 快照用于优化性能，避免重放大量历史事件。\n   * 子类应该重写此方法，提供具体的快照数据。\n   *\n   * @returns {IAggregateSnapshot} 聚合快照\n   *\n   * @public\n   */\n  public createSnapshot(): IAggregateSnapshot {\n    return {\n      aggregateId: this.id,\n      version: this._version,\n      data: this.toSnapshot(),\n      createdAt: new Date(),\n    };\n  }\n\n  /**\n   * 从快照恢复聚合状态\n   *\n   * 从快照数据恢复聚合的状态，然后可以继续应用后续事件。\n   * 子类应该重写此方法，提供具体的快照恢复逻辑。\n   *\n   * @param {IAggregateSnapshot} snapshot - 聚合快照\n   *\n   * @public\n   */\n  public restoreFromSnapshot(snapshot: IAggregateSnapshot): void {\n    if (snapshot.aggregateId !== this.id) {\n      throw new Error('无效的快照数据');\n    }\n\n    this._version = snapshot.version;\n    this.fromSnapshot(snapshot.data);\n  }\n\n  /**\n   * 将聚合状态转换为快照数据\n   *\n   * 子类必须实现此方法，定义如何将聚合状态序列化为快照数据。\n   *\n   * @returns {Record<string, unknown>} 快照数据\n   *\n   * @protected\n   * @abstract\n   */\n  protected abstract toSnapshot(): Record<string, unknown>;\n\n  /**\n   * 从快照数据恢复聚合状态\n   *\n   * 子类必须实现此方法，定义如何从快照数据恢复聚合状态。\n   *\n   * @param {Record<string, unknown>} data - 快照数据\n   *\n   * @protected\n   * @abstract\n   */\n  protected abstract fromSnapshot(data: Record<string, unknown>): void;\n\n  /**\n   * 验证事件的有效性\n   *\n   * @param {IDomainEvent} event - 要验证的事件\n   *\n   * @private\n   */\n  private validateEvent(event: IDomainEvent): void {\n    if (event.aggregateId !== this.id) {\n      throw new Error('事件的聚合根ID与当前聚合根不匹配');\n    }\n\n    if (event.eventId.trim().length === 0) {\n      throw new Error('事件ID不能为空');\n    }\n\n    if (event.eventType.trim().length === 0) {\n      throw new Error('事件类型不能为空');\n    }\n\n    if (event.eventVersion < 1) {\n      throw new Error('事件版本号必须大于等于1');\n    }\n  }\n\n  /**\n   * 检查是否有未提交的事件\n   *\n   * @returns {boolean} 是否有未提交的事件\n   *\n   * @public\n   */\n  public hasUncommittedEvents(): boolean {\n    return this._uncommittedEvents.length > 0;\n  }\n\n  /**\n   * 获取未提交事件的数量\n   *\n   * @returns {number} 未提交事件的数量\n   *\n   * @public\n   */\n  public getUncommittedEventsCount(): number {\n    return this._uncommittedEvents.length;\n  }\n}\n"],"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","ignoreList":[]}