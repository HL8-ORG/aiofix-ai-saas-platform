f94fb5d3a3f002407112b08dfe80970f
"use strict";

/* istanbul ignore next */
function cov_1pteyjif5c() {
  var path = "/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-manager.service.ts";
  var hash = "592b6c91a1f452d68894a3f74c3b260990e6ada0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-manager.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 17
        },
        end: {
          line: 7,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 12
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 3,
          column: 34
        },
        end: {
          line: 3,
          column: 125
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "4": {
        start: {
          line: 4,
          column: 79
        },
        end: {
          line: 4,
          column: 131
        }
      },
      "5": {
        start: {
          line: 5,
          column: 9
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "6": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "7": {
        start: {
          line: 5,
          column: 58
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "8": {
        start: {
          line: 5,
          column: 81
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "9": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 6,
          column: 66
        }
      },
      "10": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "11": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 109
        }
      },
      "12": {
        start: {
          line: 9,
          column: 79
        },
        end: {
          line: 9,
          column: 109
        }
      },
      "13": {
        start: {
          line: 11,
          column: 14
        },
        end: {
          line: 13,
          column: 1
        }
      },
      "14": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 73
        }
      },
      "15": {
        start: {
          line: 12,
          column: 36
        },
        end: {
          line: 12,
          column: 71
        }
      },
      "16": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 62
        }
      },
      "17": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "18": {
        start: {
          line: 17,
          column: 17
        },
        end: {
          line: 17,
          column: 42
        }
      },
      "19": {
        start: {
          line: 18,
          column: 24
        },
        end: {
          line: 18,
          column: 56
        }
      },
      "20": {
        start: {
          line: 19,
          column: 26
        },
        end: {
          line: 19,
          column: 66
        }
      },
      "21": {
        start: {
          line: 20,
          column: 18
        },
        end: {
          line: 20,
          column: 44
        }
      },
      "22": {
        start: {
          line: 36,
          column: 26
        },
        end: {
          line: 667,
          column: 1
        }
      },
      "23": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 41
        }
      },
      "24": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 29
        }
      },
      "25": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 32
        }
      },
      "26": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 30
        }
      },
      "27": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 26
        }
      },
      "28": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 35
        }
      },
      "29": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 65,
          column: 10
        }
      },
      "30": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 44
        }
      },
      "31": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 32
        }
      },
      "32": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 31
        }
      },
      "33": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 28
        }
      },
      "34": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 88
        }
      },
      "35": {
        start: {
          line: 79,
          column: 26
        },
        end: {
          line: 79,
          column: 36
        }
      },
      "36": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 28
        }
      },
      "37": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "38": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "39": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 85,
          column: 29
        }
      },
      "40": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 29
        }
      },
      "41": {
        start: {
          line: 86,
          column: 30
        },
        end: {
          line: 86,
          column: 58
        }
      },
      "42": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 97,
          column: 17
        }
      },
      "43": {
        start: {
          line: 89,
          column: 20
        },
        end: {
          line: 89,
          column: 36
        }
      },
      "44": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 48
        }
      },
      "45": {
        start: {
          line: 92,
          column: 20
        },
        end: {
          line: 94,
          column: 21
        }
      },
      "46": {
        start: {
          line: 93,
          column: 24
        },
        end: {
          line: 93,
          column: 83
        }
      },
      "47": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 95,
          column: 83
        }
      },
      "48": {
        start: {
          line: 96,
          column: 20
        },
        end: {
          line: 96,
          column: 33
        }
      },
      "49": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 40
        }
      },
      "50": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 50
        }
      },
      "51": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 24
        }
      },
      "52": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 117
        }
      },
      "53": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 58
        }
      },
      "54": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 24
        }
      },
      "55": {
        start: {
          line: 119,
          column: 26
        },
        end: {
          line: 119,
          column: 36
        }
      },
      "56": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "57": {
        start: {
          line: 121,
          column: 34
        },
        end: {
          line: 121,
          column: 79
        }
      },
      "58": {
        start: {
          line: 122,
          column: 26
        },
        end: {
          line: 122,
          column: 31
        }
      },
      "59": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "60": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 126,
          column: 29
        }
      },
      "61": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 126,
          column: 29
        }
      },
      "62": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 139,
          column: 17
        }
      },
      "63": {
        start: {
          line: 128,
          column: 41
        },
        end: {
          line: 131,
          column: 22
        }
      },
      "64": {
        start: {
          line: 132,
          column: 20
        },
        end: {
          line: 135,
          column: 21
        }
      },
      "65": {
        start: {
          line: 133,
          column: 24
        },
        end: {
          line: 133,
          column: 39
        }
      },
      "66": {
        start: {
          line: 134,
          column: 24
        },
        end: {
          line: 134,
          column: 87
        }
      },
      "67": {
        start: {
          line: 138,
          column: 20
        },
        end: {
          line: 138,
          column: 141
        }
      },
      "68": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 40
        }
      },
      "69": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 27
        }
      },
      "70": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 117
        }
      },
      "71": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 58
        }
      },
      "72": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 25
        }
      },
      "73": {
        start: {
          line: 157,
          column: 26
        },
        end: {
          line: 157,
          column: 36
        }
      },
      "74": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "75": {
        start: {
          line: 159,
          column: 26
        },
        end: {
          line: 159,
          column: 31
        }
      },
      "76": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 174,
          column: 13
        }
      },
      "77": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 163,
          column: 29
        }
      },
      "78": {
        start: {
          line: 163,
          column: 20
        },
        end: {
          line: 163,
          column: 29
        }
      },
      "79": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 173,
          column: 17
        }
      },
      "80": {
        start: {
          line: 165,
          column: 41
        },
        end: {
          line: 165,
          column: 72
        }
      },
      "81": {
        start: {
          line: 166,
          column: 20
        },
        end: {
          line: 169,
          column: 21
        }
      },
      "82": {
        start: {
          line: 167,
          column: 24
        },
        end: {
          line: 167,
          column: 39
        }
      },
      "83": {
        start: {
          line: 168,
          column: 24
        },
        end: {
          line: 168,
          column: 83
        }
      },
      "84": {
        start: {
          line: 172,
          column: 20
        },
        end: {
          line: 172,
          column: 146
        }
      },
      "85": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 40
        }
      },
      "86": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 27
        }
      },
      "87": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 118
        }
      },
      "88": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 58
        }
      },
      "89": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 25
        }
      },
      "90": {
        start: {
          line: 191,
          column: 26
        },
        end: {
          line: 191,
          column: 36
        }
      },
      "91": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 28
        }
      },
      "92": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "93": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 205,
          column: 13
        }
      },
      "94": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 197,
          column: 29
        }
      },
      "95": {
        start: {
          line: 197,
          column: 20
        },
        end: {
          line: 197,
          column: 29
        }
      },
      "96": {
        start: {
          line: 198,
          column: 31
        },
        end: {
          line: 198,
          column: 62
        }
      },
      "97": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 204,
          column: 17
        }
      },
      "98": {
        start: {
          line: 200,
          column: 20
        },
        end: {
          line: 200,
          column: 36
        }
      },
      "99": {
        start: {
          line: 201,
          column: 20
        },
        end: {
          line: 201,
          column: 48
        }
      },
      "100": {
        start: {
          line: 202,
          column: 20
        },
        end: {
          line: 202,
          column: 79
        }
      },
      "101": {
        start: {
          line: 203,
          column: 20
        },
        end: {
          line: 203,
          column: 32
        }
      },
      "102": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 40
        }
      },
      "103": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 25
        }
      },
      "104": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 122
        }
      },
      "105": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 58
        }
      },
      "106": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 25
        }
      },
      "107": {
        start: {
          line: 222,
          column: 26
        },
        end: {
          line: 222,
          column: 36
        }
      },
      "108": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "109": {
        start: {
          line: 224,
          column: 26
        },
        end: {
          line: 224,
          column: 31
        }
      },
      "110": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "111": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 228,
          column: 29
        }
      },
      "112": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 228,
          column: 29
        }
      },
      "113": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 238,
          column: 17
        }
      },
      "114": {
        start: {
          line: 230,
          column: 41
        },
        end: {
          line: 230,
          column: 77
        }
      },
      "115": {
        start: {
          line: 231,
          column: 20
        },
        end: {
          line: 234,
          column: 21
        }
      },
      "116": {
        start: {
          line: 232,
          column: 24
        },
        end: {
          line: 232,
          column: 39
        }
      },
      "117": {
        start: {
          line: 233,
          column: 24
        },
        end: {
          line: 233,
          column: 88
        }
      },
      "118": {
        start: {
          line: 237,
          column: 20
        },
        end: {
          line: 237,
          column: 128
        }
      },
      "119": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 40
        }
      },
      "120": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 241,
          column: 27
        }
      },
      "121": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 100
        }
      },
      "122": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 53
        }
      },
      "123": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 25
        }
      },
      "124": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 280,
          column: 9
        }
      },
      "125": {
        start: {
          line: 257,
          column: 31
        },
        end: {
          line: 257,
          column: 33
        }
      },
      "126": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 268,
          column: 13
        }
      },
      "127": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 267,
          column: 17
        }
      },
      "128": {
        start: {
          line: 260,
          column: 20
        },
        end: {
          line: 266,
          column: 21
        }
      },
      "129": {
        start: {
          line: 261,
          column: 24
        },
        end: {
          line: 261,
          column: 74
        }
      },
      "130": {
        start: {
          line: 264,
          column: 24
        },
        end: {
          line: 264,
          column: 128
        }
      },
      "131": {
        start: {
          line: 265,
          column: 24
        },
        end: {
          line: 265,
          column: 48
        }
      },
      "132": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 271,
          column: 78
        }
      },
      "133": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 109
        }
      },
      "134": {
        start: {
          line: 272,
          column: 87
        },
        end: {
          line: 272,
          column: 100
        }
      },
      "135": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 47
        }
      },
      "136": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 48
        }
      },
      "137": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 37
        }
      },
      "138": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 105
        }
      },
      "139": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 30
        }
      },
      "140": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "141": {
        start: {
          line: 289,
          column: 32
        },
        end: {
          line: 289,
          column: 33
        }
      },
      "142": {
        start: {
          line: 290,
          column: 36
        },
        end: {
          line: 290,
          column: 37
        }
      },
      "143": {
        start: {
          line: 291,
          column: 27
        },
        end: {
          line: 291,
          column: 32
        }
      },
      "144": {
        start: {
          line: 292,
          column: 31
        },
        end: {
          line: 292,
          column: 33
        }
      },
      "145": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 312,
          column: 13
        }
      },
      "146": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 311,
          column: 17
        }
      },
      "147": {
        start: {
          line: 296,
          column: 20
        },
        end: {
          line: 310,
          column: 21
        }
      },
      "148": {
        start: {
          line: 297,
          column: 44
        },
        end: {
          line: 297,
          column: 75
        }
      },
      "149": {
        start: {
          line: 298,
          column: 24
        },
        end: {
          line: 298,
          column: 70
        }
      },
      "150": {
        start: {
          line: 299,
          column: 24
        },
        end: {
          line: 305,
          column: 25
        }
      },
      "151": {
        start: {
          line: 300,
          column: 28
        },
        end: {
          line: 300,
          column: 44
        }
      },
      "152": {
        start: {
          line: 303,
          column: 28
        },
        end: {
          line: 303,
          column: 44
        }
      },
      "153": {
        start: {
          line: 304,
          column: 28
        },
        end: {
          line: 304,
          column: 82
        }
      },
      "154": {
        start: {
          line: 308,
          column: 24
        },
        end: {
          line: 308,
          column: 40
        }
      },
      "155": {
        start: {
          line: 309,
          column: 24
        },
        end: {
          line: 309,
          column: 53
        }
      },
      "156": {
        start: {
          line: 313,
          column: 33
        },
        end: {
          line: 313,
          column: 103
        }
      },
      "157": {
        start: {
          line: 313,
          column: 82
        },
        end: {
          line: 313,
          column: 95
        }
      },
      "158": {
        start: {
          line: 314,
          column: 40
        },
        end: {
          line: 314,
          column: 95
        }
      },
      "159": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 321,
          column: 14
        }
      },
      "160": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 106
        }
      },
      "161": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 331,
          column: 14
        }
      },
      "162": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 361,
          column: 9
        }
      },
      "163": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 344,
          column: 13
        }
      },
      "164": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 343,
          column: 120
        }
      },
      "165": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 350,
          column: 15
        }
      },
      "166": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 127
        }
      },
      "167": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 355,
          column: 15
        }
      },
      "168": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 24
        }
      },
      "169": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 359,
          column: 121
        }
      },
      "170": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 25
        }
      },
      "171": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 383,
          column: 9
        }
      },
      "172": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 374,
          column: 13
        }
      },
      "173": {
        start: {
          line: 372,
          column: 16
        },
        end: {
          line: 372,
          column: 99
        }
      },
      "174": {
        start: {
          line: 373,
          column: 16
        },
        end: {
          line: 373,
          column: 29
        }
      },
      "175": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 37
        }
      },
      "176": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 89
        }
      },
      "177": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 377,
          column: 61
        }
      },
      "178": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 24
        }
      },
      "179": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 381,
          column: 117
        }
      },
      "180": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 382,
          column: 25
        }
      },
      "181": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 407,
          column: 9
        }
      },
      "182": {
        start: {
          line: 394,
          column: 26
        },
        end: {
          line: 394,
          column: 47
        }
      },
      "183": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 398,
          column: 13
        }
      },
      "184": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 396,
          column: 99
        }
      },
      "185": {
        start: {
          line: 397,
          column: 16
        },
        end: {
          line: 397,
          column: 29
        }
      },
      "186": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 36
        }
      },
      "187": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 117
        }
      },
      "188": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 70
        }
      },
      "189": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 24
        }
      },
      "190": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 117
        }
      },
      "191": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 25
        }
      },
      "192": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 415,
          column: 77
        }
      },
      "193": {
        start: {
          line: 415,
          column: 62
        },
        end: {
          line: 415,
          column: 74
        }
      },
      "194": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 444,
          column: 9
        }
      },
      "195": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 433,
          column: 13
        }
      },
      "196": {
        start: {
          line: 425,
          column: 16
        },
        end: {
          line: 432,
          column: 17
        }
      },
      "197": {
        start: {
          line: 426,
          column: 20
        },
        end: {
          line: 431,
          column: 21
        }
      },
      "198": {
        start: {
          line: 427,
          column: 24
        },
        end: {
          line: 427,
          column: 57
        }
      },
      "199": {
        start: {
          line: 430,
          column: 24
        },
        end: {
          line: 430,
          column: 130
        }
      },
      "200": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 435,
          column: 34
        }
      },
      "201": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 436,
          column: 30
        }
      },
      "202": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 437,
          column: 39
        }
      },
      "203": {
        start: {
          line: 438,
          column: 12
        },
        end: {
          line: 438,
          column: 48
        }
      },
      "204": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 439,
          column: 91
        }
      },
      "205": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 440,
          column: 46
        }
      },
      "206": {
        start: {
          line: 443,
          column: 12
        },
        end: {
          line: 443,
          column: 107
        }
      },
      "207": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 451,
          column: 30
        }
      },
      "208": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 452,
          column: 27
        }
      },
      "209": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 453,
          column: 86
        }
      },
      "210": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 476,
          column: 10
        }
      },
      "211": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 488,
          column: 9
        }
      },
      "212": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 487,
          column: 13
        }
      },
      "213": {
        start: {
          line: 486,
          column: 16
        },
        end: {
          line: 486,
          column: 43
        }
      },
      "214": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 499,
          column: 53
        }
      },
      "215": {
        start: {
          line: 498,
          column: 29
        },
        end: {
          line: 498,
          column: 42
        }
      },
      "216": {
        start: {
          line: 499,
          column: 28
        },
        end: {
          line: 499,
          column: 51
        }
      },
      "217": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 533,
          column: 9
        }
      },
      "218": {
        start: {
          line: 511,
          column: 33
        },
        end: {
          line: 515,
          column: 56
        }
      },
      "219": {
        start: {
          line: 512,
          column: 33
        },
        end: {
          line: 514,
          column: 48
        }
      },
      "220": {
        start: {
          line: 515,
          column: 32
        },
        end: {
          line: 515,
          column: 55
        }
      },
      "221": {
        start: {
          line: 516,
          column: 12
        },
        end: {
          line: 529,
          column: 13
        }
      },
      "222": {
        start: {
          line: 517,
          column: 16
        },
        end: {
          line: 528,
          column: 17
        }
      },
      "223": {
        start: {
          line: 518,
          column: 20
        },
        end: {
          line: 518,
          column: 56
        }
      },
      "224": {
        start: {
          line: 519,
          column: 20
        },
        end: {
          line: 524,
          column: 23
        }
      },
      "225": {
        start: {
          line: 527,
          column: 20
        },
        end: {
          line: 527,
          column: 145
        }
      },
      "226": {
        start: {
          line: 532,
          column: 12
        },
        end: {
          line: 532,
          column: 113
        }
      },
      "227": {
        start: {
          line: 542,
          column: 29
        },
        end: {
          line: 542,
          column: 51
        }
      },
      "228": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 543,
          column: 47
        }
      },
      "229": {
        start: {
          line: 544,
          column: 8
        },
        end: {
          line: 544,
          column: 40
        }
      },
      "230": {
        start: {
          line: 545,
          column: 8
        },
        end: {
          line: 545,
          column: 62
        }
      },
      "231": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 567,
          column: 9
        }
      },
      "232": {
        start: {
          line: 556,
          column: 12
        },
        end: {
          line: 566,
          column: 13
        }
      },
      "233": {
        start: {
          line: 557,
          column: 16
        },
        end: {
          line: 562,
          column: 19
        }
      },
      "234": {
        start: {
          line: 565,
          column: 16
        },
        end: {
          line: 565,
          column: 118
        }
      },
      "235": {
        start: {
          line: 575,
          column: 8
        },
        end: {
          line: 582,
          column: 9
        }
      },
      "236": {
        start: {
          line: 576,
          column: 12
        },
        end: {
          line: 580,
          column: 47
        }
      },
      "237": {
        start: {
          line: 577,
          column: 16
        },
        end: {
          line: 579,
          column: 19
        }
      },
      "238": {
        start: {
          line: 578,
          column: 20
        },
        end: {
          line: 578,
          column: 111
        }
      },
      "239": {
        start: {
          line: 581,
          column: 12
        },
        end: {
          line: 581,
          column: 132
        }
      },
      "240": {
        start: {
          line: 590,
          column: 8
        },
        end: {
          line: 594,
          column: 9
        }
      },
      "241": {
        start: {
          line: 591,
          column: 12
        },
        end: {
          line: 591,
          column: 48
        }
      },
      "242": {
        start: {
          line: 592,
          column: 12
        },
        end: {
          line: 592,
          column: 45
        }
      },
      "243": {
        start: {
          line: 593,
          column: 12
        },
        end: {
          line: 593,
          column: 85
        }
      },
      "244": {
        start: {
          line: 602,
          column: 8
        },
        end: {
          line: 609,
          column: 9
        }
      },
      "245": {
        start: {
          line: 603,
          column: 12
        },
        end: {
          line: 607,
          column: 44
        }
      },
      "246": {
        start: {
          line: 604,
          column: 16
        },
        end: {
          line: 606,
          column: 19
        }
      },
      "247": {
        start: {
          line: 605,
          column: 20
        },
        end: {
          line: 605,
          column: 108
        }
      },
      "248": {
        start: {
          line: 608,
          column: 12
        },
        end: {
          line: 608,
          column: 126
        }
      },
      "249": {
        start: {
          line: 617,
          column: 8
        },
        end: {
          line: 621,
          column: 9
        }
      },
      "250": {
        start: {
          line: 618,
          column: 12
        },
        end: {
          line: 618,
          column: 45
        }
      },
      "251": {
        start: {
          line: 619,
          column: 12
        },
        end: {
          line: 619,
          column: 42
        }
      },
      "252": {
        start: {
          line: 620,
          column: 12
        },
        end: {
          line: 620,
          column: 82
        }
      },
      "253": {
        start: {
          line: 629,
          column: 8
        },
        end: {
          line: 640,
          column: 9
        }
      },
      "254": {
        start: {
          line: 630,
          column: 27
        },
        end: {
          line: 630,
          column: 49
        }
      },
      "255": {
        start: {
          line: 631,
          column: 26
        },
        end: {
          line: 631,
          column: 47
        }
      },
      "256": {
        start: {
          line: 632,
          column: 12
        },
        end: {
          line: 632,
          column: 60
        }
      },
      "257": {
        start: {
          line: 634,
          column: 12
        },
        end: {
          line: 636,
          column: 13
        }
      },
      "258": {
        start: {
          line: 635,
          column: 16
        },
        end: {
          line: 635,
          column: 90
        }
      },
      "259": {
        start: {
          line: 639,
          column: 12
        },
        end: {
          line: 639,
          column: 113
        }
      },
      "260": {
        start: {
          line: 648,
          column: 8
        },
        end: {
          line: 665,
          column: 9
        }
      },
      "261": {
        start: {
          line: 650,
          column: 12
        },
        end: {
          line: 660,
          column: 13
        }
      },
      "262": {
        start: {
          line: 651,
          column: 16
        },
        end: {
          line: 659,
          column: 17
        }
      },
      "263": {
        start: {
          line: 652,
          column: 20
        },
        end: {
          line: 658,
          column: 21
        }
      },
      "264": {
        start: {
          line: 654,
          column: 24
        },
        end: {
          line: 654,
          column: 73
        }
      },
      "265": {
        start: {
          line: 657,
          column: 24
        },
        end: {
          line: 657,
          column: 128
        }
      },
      "266": {
        start: {
          line: 661,
          column: 12
        },
        end: {
          line: 661,
          column: 85
        }
      },
      "267": {
        start: {
          line: 664,
          column: 12
        },
        end: {
          line: 664,
          column: 110
        }
      },
      "268": {
        start: {
          line: 668,
          column: 0
        },
        end: {
          line: 668,
          column: 50
        }
      },
      "269": {
        start: {
          line: 669,
          column: 0
        },
        end: {
          line: 674,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 46
          },
          end: {
            line: 2,
            column: 47
          }
        },
        loc: {
          start: {
            line: 2,
            column: 87
          },
          end: {
            line: 7,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 8,
            column: 46
          },
          end: {
            line: 8,
            column: 47
          }
        },
        loc: {
          start: {
            line: 8,
            column: 62
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 8
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 11,
            column: 40
          },
          end: {
            line: 11,
            column: 41
          }
        },
        loc: {
          start: {
            line: 11,
            column: 73
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 11
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 12,
            column: 11
          },
          end: {
            line: 12,
            column: 12
          }
        },
        loc: {
          start: {
            line: 12,
            column: 34
          },
          end: {
            line: 12,
            column: 73
          }
        },
        line: 12
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 46
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 37
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 19
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 78
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        loc: {
          start: {
            line: 118,
            column: 35
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 118
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 22
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 156
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 22
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 190
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 221,
            column: 4
          },
          end: {
            line: 221,
            column: 5
          }
        },
        loc: {
          start: {
            line: 221,
            column: 27
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 221
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 21
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 254
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 272,
            column: 78
          },
          end: {
            line: 272,
            column: 79
          }
        },
        loc: {
          start: {
            line: 272,
            column: 87
          },
          end: {
            line: 272,
            column: 100
          }
        },
        line: 272
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 287,
            column: 4
          },
          end: {
            line: 287,
            column: 5
          }
        },
        loc: {
          start: {
            line: 287,
            column: 22
          },
          end: {
            line: 333,
            column: 5
          }
        },
        line: 287
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 313,
            column: 73
          },
          end: {
            line: 313,
            column: 74
          }
        },
        loc: {
          start: {
            line: 313,
            column: 82
          },
          end: {
            line: 313,
            column: 95
          }
        },
        line: 313
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 340,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        },
        loc: {
          start: {
            line: 340,
            column: 21
          },
          end: {
            line: 362,
            column: 5
          }
        },
        line: 340
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 369,
            column: 4
          },
          end: {
            line: 369,
            column: 5
          }
        },
        loc: {
          start: {
            line: 369,
            column: 22
          },
          end: {
            line: 384,
            column: 5
          }
        },
        line: 369
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 392,
            column: 4
          },
          end: {
            line: 392,
            column: 5
          }
        },
        loc: {
          start: {
            line: 392,
            column: 31
          },
          end: {
            line: 408,
            column: 5
          }
        },
        line: 392
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 414,
            column: 4
          },
          end: {
            line: 414,
            column: 5
          }
        },
        loc: {
          start: {
            line: 414,
            column: 16
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 414
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 415,
            column: 52
          },
          end: {
            line: 415,
            column: 53
          }
        },
        loc: {
          start: {
            line: 415,
            column: 62
          },
          end: {
            line: 415,
            column: 74
          }
        },
        line: 415
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 421,
            column: 4
          },
          end: {
            line: 421,
            column: 5
          }
        },
        loc: {
          start: {
            line: 421,
            column: 23
          },
          end: {
            line: 445,
            column: 5
          }
        },
        line: 421
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 450,
            column: 4
          },
          end: {
            line: 450,
            column: 5
          }
        },
        loc: {
          start: {
            line: 450,
            column: 16
          },
          end: {
            line: 454,
            column: 5
          }
        },
        line: 450
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 462,
            column: 4
          },
          end: {
            line: 462,
            column: 5
          }
        },
        loc: {
          start: {
            line: 462,
            column: 22
          },
          end: {
            line: 477,
            column: 5
          }
        },
        line: 462
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 483,
            column: 4
          },
          end: {
            line: 483,
            column: 5
          }
        },
        loc: {
          start: {
            line: 483,
            column: 23
          },
          end: {
            line: 489,
            column: 5
          }
        },
        line: 483
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 496,
            column: 4
          },
          end: {
            line: 496,
            column: 5
          }
        },
        loc: {
          start: {
            line: 496,
            column: 22
          },
          end: {
            line: 500,
            column: 5
          }
        },
        line: 496
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 498,
            column: 20
          },
          end: {
            line: 498,
            column: 21
          }
        },
        loc: {
          start: {
            line: 498,
            column: 29
          },
          end: {
            line: 498,
            column: 42
          }
        },
        line: 498
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 499,
            column: 18
          },
          end: {
            line: 499,
            column: 19
          }
        },
        loc: {
          start: {
            line: 499,
            column: 28
          },
          end: {
            line: 499,
            column: 51
          }
        },
        line: 499
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 509,
            column: 4
          },
          end: {
            line: 509,
            column: 5
          }
        },
        loc: {
          start: {
            line: 509,
            column: 60
          },
          end: {
            line: 534,
            column: 5
          }
        },
        line: 509
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 512,
            column: 24
          },
          end: {
            line: 512,
            column: 25
          }
        },
        loc: {
          start: {
            line: 512,
            column: 33
          },
          end: {
            line: 514,
            column: 48
          }
        },
        line: 512
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 515,
            column: 22
          },
          end: {
            line: 515,
            column: 23
          }
        },
        loc: {
          start: {
            line: 515,
            column: 32
          },
          end: {
            line: 515,
            column: 55
          }
        },
        line: 515
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 541,
            column: 4
          },
          end: {
            line: 541,
            column: 5
          }
        },
        loc: {
          start: {
            line: 541,
            column: 27
          },
          end: {
            line: 546,
            column: 5
          }
        },
        line: 541
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 554,
            column: 4
          },
          end: {
            line: 554,
            column: 5
          }
        },
        loc: {
          start: {
            line: 554,
            column: 27
          },
          end: {
            line: 568,
            column: 5
          }
        },
        line: 554
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 574,
            column: 4
          },
          end: {
            line: 574,
            column: 5
          }
        },
        loc: {
          start: {
            line: 574,
            column: 22
          },
          end: {
            line: 583,
            column: 5
          }
        },
        line: 574
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 576,
            column: 47
          },
          end: {
            line: 576,
            column: 48
          }
        },
        loc: {
          start: {
            line: 576,
            column: 53
          },
          end: {
            line: 580,
            column: 13
          }
        },
        line: 576
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 577,
            column: 47
          },
          end: {
            line: 577,
            column: 48
          }
        },
        loc: {
          start: {
            line: 577,
            column: 56
          },
          end: {
            line: 579,
            column: 17
          }
        },
        line: 577
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 589,
            column: 4
          },
          end: {
            line: 589,
            column: 5
          }
        },
        loc: {
          start: {
            line: 589,
            column: 21
          },
          end: {
            line: 595,
            column: 5
          }
        },
        line: 589
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 601,
            column: 4
          },
          end: {
            line: 601,
            column: 5
          }
        },
        loc: {
          start: {
            line: 601,
            column: 19
          },
          end: {
            line: 610,
            column: 5
          }
        },
        line: 601
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 603,
            column: 44
          },
          end: {
            line: 603,
            column: 45
          }
        },
        loc: {
          start: {
            line: 603,
            column: 50
          },
          end: {
            line: 607,
            column: 13
          }
        },
        line: 603
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 604,
            column: 44
          },
          end: {
            line: 604,
            column: 45
          }
        },
        loc: {
          start: {
            line: 604,
            column: 53
          },
          end: {
            line: 606,
            column: 17
          }
        },
        line: 604
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 616,
            column: 4
          },
          end: {
            line: 616,
            column: 5
          }
        },
        loc: {
          start: {
            line: 616,
            column: 18
          },
          end: {
            line: 622,
            column: 5
          }
        },
        line: 616
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 628,
            column: 4
          },
          end: {
            line: 628,
            column: 5
          }
        },
        loc: {
          start: {
            line: 628,
            column: 30
          },
          end: {
            line: 641,
            column: 5
          }
        },
        line: 628
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 647,
            column: 4
          },
          end: {
            line: 647,
            column: 5
          }
        },
        loc: {
          start: {
            line: 647,
            column: 27
          },
          end: {
            line: 666,
            column: 5
          }
        },
        line: 647
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 7,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 18
          },
          end: {
            line: 2,
            column: 22
          }
        }, {
          start: {
            line: 2,
            column: 26
          },
          end: {
            line: 2,
            column: 41
          }
        }, {
          start: {
            line: 2,
            column: 46
          },
          end: {
            line: 7,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 34
          },
          end: {
            line: 3,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 42
          },
          end: {
            line: 3,
            column: 48
          }
        }, {
          start: {
            line: 3,
            column: 51
          },
          end: {
            line: 3,
            column: 125
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 51
          },
          end: {
            line: 3,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 67
          },
          end: {
            line: 3,
            column: 118
          }
        }, {
          start: {
            line: 3,
            column: 121
          },
          end: {
            line: 3,
            column: 125
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 5,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 5,
            column: 150
          }
        }, {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 150
          }
        }],
        line: 4
      },
      "4": {
        loc: {
          start: {
            line: 4,
            column: 8
          },
          end: {
            line: 4,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 8
          },
          end: {
            line: 4,
            column: 35
          }
        }, {
          start: {
            line: 4,
            column: 39
          },
          end: {
            line: 4,
            column: 77
          }
        }],
        line: 4
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 58
          },
          end: {
            line: 5,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 58
          },
          end: {
            line: 5,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 85
          },
          end: {
            line: 5,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 86
          },
          end: {
            line: 5,
            column: 143
          }
        }, {
          start: {
            line: 5,
            column: 148
          },
          end: {
            line: 5,
            column: 149
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 5,
            column: 86
          },
          end: {
            line: 5,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 94
          },
          end: {
            line: 5,
            column: 98
          }
        }, {
          start: {
            line: 5,
            column: 101
          },
          end: {
            line: 5,
            column: 143
          }
        }],
        line: 5
      },
      "8": {
        loc: {
          start: {
            line: 5,
            column: 101
          },
          end: {
            line: 5,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 109
          },
          end: {
            line: 5,
            column: 126
          }
        }, {
          start: {
            line: 5,
            column: 129
          },
          end: {
            line: 5,
            column: 143
          }
        }],
        line: 5
      },
      "9": {
        loc: {
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 16
          }
        }, {
          start: {
            line: 6,
            column: 20
          },
          end: {
            line: 6,
            column: 21
          }
        }, {
          start: {
            line: 6,
            column: 25
          },
          end: {
            line: 6,
            column: 62
          }
        }],
        line: 6
      },
      "10": {
        loc: {
          start: {
            line: 8,
            column: 17
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 8,
            column: 22
          }
        }, {
          start: {
            line: 8,
            column: 26
          },
          end: {
            line: 8,
            column: 41
          }
        }, {
          start: {
            line: 8,
            column: 46
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 8
      },
      "11": {
        loc: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "12": {
        loc: {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 9,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 9,
            column: 35
          }
        }, {
          start: {
            line: 9,
            column: 39
          },
          end: {
            line: 9,
            column: 77
          }
        }],
        line: 9
      },
      "13": {
        loc: {
          start: {
            line: 11,
            column: 14
          },
          end: {
            line: 13,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 15
          },
          end: {
            line: 11,
            column: 19
          }
        }, {
          start: {
            line: 11,
            column: 23
          },
          end: {
            line: 11,
            column: 35
          }
        }, {
          start: {
            line: 11,
            column: 40
          },
          end: {
            line: 13,
            column: 1
          }
        }],
        line: 11
      },
      "14": {
        loc: {
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 85,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 85,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "15": {
        loc: {
          start: {
            line: 87,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "16": {
        loc: {
          start: {
            line: 92,
            column: 20
          },
          end: {
            line: 94,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 20
          },
          end: {
            line: 94,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "17": {
        loc: {
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 126,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 126,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "18": {
        loc: {
          start: {
            line: 125,
            column: 20
          },
          end: {
            line: 125,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 125,
            column: 20
          },
          end: {
            line: 125,
            column: 34
          }
        }, {
          start: {
            line: 125,
            column: 38
          },
          end: {
            line: 125,
            column: 52
          }
        }],
        line: 125
      },
      "19": {
        loc: {
          start: {
            line: 132,
            column: 20
          },
          end: {
            line: 135,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 20
          },
          end: {
            line: 135,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "20": {
        loc: {
          start: {
            line: 162,
            column: 16
          },
          end: {
            line: 163,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 16
          },
          end: {
            line: 163,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "21": {
        loc: {
          start: {
            line: 162,
            column: 20
          },
          end: {
            line: 162,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 20
          },
          end: {
            line: 162,
            column: 34
          }
        }, {
          start: {
            line: 162,
            column: 38
          },
          end: {
            line: 162,
            column: 52
          }
        }],
        line: 162
      },
      "22": {
        loc: {
          start: {
            line: 166,
            column: 20
          },
          end: {
            line: 169,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 20
          },
          end: {
            line: 169,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "23": {
        loc: {
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 197,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 197,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "24": {
        loc: {
          start: {
            line: 199,
            column: 16
          },
          end: {
            line: 204,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 16
          },
          end: {
            line: 204,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "25": {
        loc: {
          start: {
            line: 227,
            column: 16
          },
          end: {
            line: 228,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 16
          },
          end: {
            line: 228,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "26": {
        loc: {
          start: {
            line: 227,
            column: 20
          },
          end: {
            line: 227,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 20
          },
          end: {
            line: 227,
            column: 34
          }
        }, {
          start: {
            line: 227,
            column: 38
          },
          end: {
            line: 227,
            column: 52
          }
        }],
        line: 227
      },
      "27": {
        loc: {
          start: {
            line: 231,
            column: 20
          },
          end: {
            line: 234,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 20
          },
          end: {
            line: 234,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "28": {
        loc: {
          start: {
            line: 259,
            column: 16
          },
          end: {
            line: 267,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 16
          },
          end: {
            line: 267,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "29": {
        loc: {
          start: {
            line: 271,
            column: 16
          },
          end: {
            line: 271,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 271,
            column: 40
          },
          end: {
            line: 271,
            column: 73
          }
        }, {
          start: {
            line: 271,
            column: 76
          },
          end: {
            line: 271,
            column: 77
          }
        }],
        line: 271
      },
      "30": {
        loc: {
          start: {
            line: 295,
            column: 16
          },
          end: {
            line: 311,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 16
          },
          end: {
            line: 311,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "31": {
        loc: {
          start: {
            line: 299,
            column: 24
          },
          end: {
            line: 305,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 24
          },
          end: {
            line: 305,
            column: 25
          }
        }, {
          start: {
            line: 302,
            column: 29
          },
          end: {
            line: 305,
            column: 25
          }
        }],
        line: 299
      },
      "32": {
        loc: {
          start: {
            line: 304,
            column: 43
          },
          end: {
            line: 304,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 304,
            column: 43
          },
          end: {
            line: 304,
            column: 60
          }
        }, {
          start: {
            line: 304,
            column: 64
          },
          end: {
            line: 304,
            column: 81
          }
        }],
        line: 304
      },
      "33": {
        loc: {
          start: {
            line: 314,
            column: 40
          },
          end: {
            line: 314,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 314,
            column: 59
          },
          end: {
            line: 314,
            column: 91
          }
        }, {
          start: {
            line: 314,
            column: 94
          },
          end: {
            line: 314,
            column: 95
          }
        }],
        line: 314
      },
      "34": {
        loc: {
          start: {
            line: 316,
            column: 25
          },
          end: {
            line: 316,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 316,
            column: 25
          },
          end: {
            line: 316,
            column: 34
          }
        }, {
          start: {
            line: 316,
            column: 38
          },
          end: {
            line: 316,
            column: 68
          }
        }],
        line: 316
      },
      "35": {
        loc: {
          start: {
            line: 319,
            column: 23
          },
          end: {
            line: 319,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 319,
            column: 34
          },
          end: {
            line: 319,
            column: 46
          }
        }, {
          start: {
            line: 319,
            column: 49
          },
          end: {
            line: 319,
            column: 58
          }
        }],
        line: 319
      },
      "36": {
        loc: {
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 342
      },
      "37": {
        loc: {
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 374,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 12
          },
          end: {
            line: 374,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "38": {
        loc: {
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 398,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 398,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "39": {
        loc: {
          start: {
            line: 400,
            column: 32
          },
          end: {
            line: 400,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 400,
            column: 42
          },
          end: {
            line: 400,
            column: 51
          }
        }, {
          start: {
            line: 400,
            column: 54
          },
          end: {
            line: 400,
            column: 64
          }
        }],
        line: 400
      },
      "40": {
        loc: {
          start: {
            line: 425,
            column: 16
          },
          end: {
            line: 432,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 16
          },
          end: {
            line: 432,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      },
      "41": {
        loc: {
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 488,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 488,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 484
      },
      "42": {
        loc: {
          start: {
            line: 512,
            column: 33
          },
          end: {
            line: 514,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 512,
            column: 33
          },
          end: {
            line: 512,
            column: 46
          }
        }, {
          start: {
            line: 513,
            column: 16
          },
          end: {
            line: 513,
            column: 31
          }
        }, {
          start: {
            line: 514,
            column: 16
          },
          end: {
            line: 514,
            column: 48
          }
        }],
        line: 512
      },
      "43": {
        loc: {
          start: {
            line: 555,
            column: 8
          },
          end: {
            line: 567,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 555,
            column: 8
          },
          end: {
            line: 567,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 555
      },
      "44": {
        loc: {
          start: {
            line: 575,
            column: 8
          },
          end: {
            line: 582,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 575,
            column: 8
          },
          end: {
            line: 582,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 575
      },
      "45": {
        loc: {
          start: {
            line: 575,
            column: 12
          },
          end: {
            line: 575,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 575,
            column: 12
          },
          end: {
            line: 575,
            column: 42
          }
        }, {
          start: {
            line: 575,
            column: 46
          },
          end: {
            line: 575,
            column: 80
          }
        }],
        line: 575
      },
      "46": {
        loc: {
          start: {
            line: 590,
            column: 8
          },
          end: {
            line: 594,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 590,
            column: 8
          },
          end: {
            line: 594,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 590
      },
      "47": {
        loc: {
          start: {
            line: 602,
            column: 8
          },
          end: {
            line: 609,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 602,
            column: 8
          },
          end: {
            line: 609,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 602
      },
      "48": {
        loc: {
          start: {
            line: 602,
            column: 12
          },
          end: {
            line: 602,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 602,
            column: 12
          },
          end: {
            line: 602,
            column: 39
          }
        }, {
          start: {
            line: 602,
            column: 43
          },
          end: {
            line: 602,
            column: 74
          }
        }],
        line: 602
      },
      "49": {
        loc: {
          start: {
            line: 617,
            column: 8
          },
          end: {
            line: 621,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 617,
            column: 8
          },
          end: {
            line: 621,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 617
      },
      "50": {
        loc: {
          start: {
            line: 634,
            column: 12
          },
          end: {
            line: 636,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 634,
            column: 12
          },
          end: {
            line: 636,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 634
      },
      "51": {
        loc: {
          start: {
            line: 651,
            column: 16
          },
          end: {
            line: 659,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 651,
            column: 16
          },
          end: {
            line: 659,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 651
      },
      "52": {
        loc: {
          start: {
            line: 651,
            column: 20
          },
          end: {
            line: 651,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 651,
            column: 20
          },
          end: {
            line: 651,
            column: 33
          }
        }, {
          start: {
            line: 651,
            column: 37
          },
          end: {
            line: 651,
            column: 52
          }
        }],
        line: 651
      },
      "53": {
        loc: {
          start: {
            line: 673,
            column: 45
          },
          end: {
            line: 673,
            column: 173
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 673,
            column: 162
          },
          end: {
            line: 673,
            column: 164
          }
        }, {
          start: {
            line: 673,
            column: 167
          },
          end: {
            line: 673,
            column: 173
          }
        }],
        line: 673
      },
      "54": {
        loc: {
          start: {
            line: 673,
            column: 58
          },
          end: {
            line: 673,
            column: 143
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 673,
            column: 58
          },
          end: {
            line: 673,
            column: 110
          }
        }, {
          start: {
            line: 673,
            column: 114
          },
          end: {
            line: 673,
            column: 143
          }
        }],
        line: 673
      },
      "55": {
        loc: {
          start: {
            line: 673,
            column: 175
          },
          end: {
            line: 673,
            column: 299
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 673,
            column: 288
          },
          end: {
            line: 673,
            column: 290
          }
        }, {
          start: {
            line: 673,
            column: 293
          },
          end: {
            line: 673,
            column: 299
          }
        }],
        line: 673
      },
      "56": {
        loc: {
          start: {
            line: 673,
            column: 188
          },
          end: {
            line: 673,
            column: 269
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 673,
            column: 188
          },
          end: {
            line: 673,
            column: 238
          }
        }, {
          start: {
            line: 673,
            column: 242
          },
          end: {
            line: 673,
            column: 269
          }
        }],
        line: 673
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0]
    },
    inputSourceMap: {
      file: "/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-manager.service.ts",
      mappings: "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",
      names: [],
      sources: ["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-manager.service.ts"],
      sourcesContent: ["import { Injectable, Inject } from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\n\nimport type { ICacheService } from '../interfaces/cache.interface';\n\nimport type {\n  CacheOptions,\n  CacheKey,\n  CacheStats,\n  CacheHealth,\n} from '../interfaces/cache.interface';\nimport { CacheStrategy } from '../interfaces/cache.interface';\nimport { PinoLoggerService, LogContext } from '@aiofix/logging';\n\n/**\n * @interface CacheManagerConfig\n * @description\n * \u7F13\u5B58\u7BA1\u7406\u5668\u914D\u7F6E\u63A5\u53E3\uFF0C\u5B9A\u4E49\u7F13\u5B58\u7BA1\u7406\u5668\u7684\u914D\u7F6E\u9009\u9879\u3002\n */\nexport interface CacheManagerConfig {\n  /** \u9ED8\u8BA4\u7F13\u5B58\u9009\u9879 */\n  defaultOptions?: CacheOptions;\n  /** \u9ED8\u8BA4\u7F13\u5B58\u7B56\u7565 */\n  defaultStrategy?: CacheStrategy;\n  /** \u662F\u5426\u542F\u7528\u7F13\u5B58 */\n  enabled?: boolean;\n  /** \u7F13\u5B58\u5C42\u914D\u7F6E */\n  layers?: CacheLayerConfig[];\n  /** \u76D1\u63A7\u95F4\u9694\uFF08\u6BEB\u79D2\uFF09 */\n  monitoringInterval?: number;\n  /** \u81EA\u52A8\u6E05\u7406\u95F4\u9694\uFF08\u6BEB\u79D2\uFF09 */\n  cleanupInterval?: number;\n  /** \u6700\u5927\u7F13\u5B58\u5927\u5C0F */\n  maxSize?: number;\n  /** \u662F\u5426\u542F\u7528\u7EDF\u8BA1 */\n  enableStats?: boolean;\n  /** \u662F\u5426\u542F\u7528\u4E8B\u4EF6 */\n  enableEvents?: boolean;\n}\n\n/**\n * @interface CacheLayerConfig\n * @description\n * \u7F13\u5B58\u5C42\u914D\u7F6E\u63A5\u53E3\uFF0C\u5B9A\u4E49\u5355\u4E2A\u7F13\u5B58\u5C42\u7684\u914D\u7F6E\u3002\n */\nexport interface CacheLayerConfig {\n  /** \u7F13\u5B58\u5C42\u540D\u79F0 */\n  name: string;\n  /** \u7F13\u5B58\u5C42\u4F18\u5148\u7EA7\uFF08\u6570\u5B57\u8D8A\u5C0F\u4F18\u5148\u7EA7\u8D8A\u9AD8\uFF09 */\n  priority: number;\n  /** \u7F13\u5B58\u670D\u52A1\u5B9E\u4F8B */\n  service: ICacheService;\n  /** \u7F13\u5B58\u5C42\u9009\u9879 */\n  options?: CacheOptions;\n  /** \u662F\u5426\u542F\u7528 */\n  enabled?: boolean;\n  /** \u662F\u5426\u53EA\u8BFB */\n  readOnly?: boolean;\n  /** \u662F\u5426\u4F5C\u4E3A\u540E\u5907\u7F13\u5B58 */\n  fallback?: boolean;\n}\n\n/**\n * @interface CacheManagerStats\n * @description\n * \u7F13\u5B58\u7BA1\u7406\u5668\u7EDF\u8BA1\u4FE1\u606F\u63A5\u53E3\u3002\n */\nexport interface CacheManagerStats extends CacheStats {\n  /** \u6D3B\u8DC3\u7F13\u5B58\u5C42\u6570\u91CF */\n  activeLayers: number;\n  /** \u5404\u5C42\u7EDF\u8BA1\u4FE1\u606F */\n  layerStats: Record<string, unknown>;\n  /** \u6700\u540E\u66F4\u65B0\u65F6\u95F4 */\n  lastUpdated: Date;\n}\n\n/**\n * @class CacheManagerService\n * @description\n * \u7F13\u5B58\u7BA1\u7406\u5668\u670D\u52A1\uFF0C\u4F5C\u4E3A\u7F13\u5B58\u7CFB\u7EDF\u7684\u6838\u5FC3\u534F\u8C03\u5668\u3002\n *\n * \u4E3B\u8981\u529F\u80FD\u5305\u62EC\uFF1A\n * 1. \u7BA1\u7406\u591A\u4E2A\u7F13\u5B58\u5C42\uFF08L1\u3001L2\u3001L3\u7B49\uFF09\n * 2. \u5B9E\u73B0\u7F13\u5B58\u7B56\u7565\uFF08LRU\u3001LFU\u3001FIFO\u7B49\uFF09\n * 3. \u63D0\u4F9B\u7EDF\u4E00\u7684\u7F13\u5B58\u63A5\u53E3\n * 4. \u76D1\u63A7\u7F13\u5B58\u6027\u80FD\u548C\u5065\u5EB7\u72B6\u6001\n * 5. \u5904\u7406\u7F13\u5B58\u5931\u6548\u548C\u66F4\u65B0\n * 6. \u63D0\u4F9B\u7F13\u5B58\u7EDF\u8BA1\u548C\u5206\u6790\n *\n * @implements {ICacheService}\n */\n@Injectable()\nexport class CacheManagerService implements ICacheService {\n  /**\n   * \u7F13\u5B58\u5C42\u6620\u5C04\uFF0C\u6309\u4F18\u5148\u7EA7\u6392\u5E8F\n   */\n  private readonly layers = new Map<string, CacheLayerConfig>();\n\n  /**\n   * \u7F13\u5B58\u7BA1\u7406\u5668\u914D\u7F6E\n   */\n  private config: CacheManagerConfig;\n\n  /**\n   * \u7EDF\u8BA1\u4FE1\u606F\n   */\n  private stats: CacheManagerStats;\n\n  /**\n   * \u76D1\u63A7\u5B9A\u65F6\u5668\n   */\n  private monitoringTimer?: NodeJS.Timeout;\n\n  /**\n   * \u6E05\u7406\u5B9A\u65F6\u5668\n   */\n  private cleanupTimer?: NodeJS.Timeout;\n\n  /**\n   * \u8BF7\u6C42\u8BA1\u6570\u5668\n   */\n  private requestCount = 0;\n\n  /**\n   * \u547D\u4E2D\u8BA1\u6570\u5668\n   */\n  private hitCount = 0;\n\n  /**\n   * \u54CD\u5E94\u65F6\u95F4\u7D2F\u8BA1\n   */\n  private totalResponseTime = 0;\n\n  constructor(\n    @Inject('CACHE_MANAGER_CONFIG') config: CacheManagerConfig,\n    private readonly eventEmitter: EventEmitter2,\n    @Inject(PinoLoggerService) private readonly logger: PinoLoggerService,\n  ) {\n    this.config = {\n      enabled: true,\n      defaultStrategy: CacheStrategy.LRU,\n      monitoringInterval: 30000,\n      cleanupInterval: 60000,\n      maxSize: 10000,\n      enableStats: true,\n      enableEvents: true,\n      ...config,\n    };\n\n    this.stats = this.initializeStats();\n    this.initializeLayers();\n    this.startMonitoring();\n    this.startCleanup();\n\n    this.logger.info('CacheManagerService initialized', LogContext.CACHE);\n  }\n\n  /**\n   * @method get\n   * @description \u4ECE\u7F13\u5B58\u4E2D\u83B7\u53D6\u503C\n   * @param key \u7F13\u5B58\u952E\n   * @returns {Promise<T | null>} \u7F13\u5B58\u503C\n   */\n  async get<T = unknown>(key: CacheKey): Promise<T | null> {\n    const startTime = Date.now();\n    this.requestCount++;\n\n    try {\n      // \u6309\u4F18\u5148\u7EA7\u904D\u5386\u7F13\u5B58\u5C42\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled) continue;\n\n        const value = await layer.service.get<T>(key);\n\n        if (value !== null) {\n          // \u7F13\u5B58\u547D\u4E2D\uFF0C\u66F4\u65B0\u7EDF\u8BA1\n          this.hitCount++;\n          this.updateStats(startTime);\n\n          // \u5982\u679C\u547D\u4E2D\u7684\u662F\u4F4E\u4F18\u5148\u7EA7\u5C42\uFF0C\u5C1D\u8BD5\u63D0\u5347\u5230\u9AD8\u4F18\u5148\u7EA7\u5C42\n          if (layer.priority > 1) {\n            void this.promoteToHigherLayer(key, value, layer.priority);\n          }\n\n          this.emitEvent('cache_hit', { key, layer: layer.name, value });\n          return value;\n        }\n      }\n\n      // \u7F13\u5B58\u672A\u547D\u4E2D\n      this.updateStats(startTime);\n      this.emitEvent('cache_miss', { key });\n      return null;\n    } catch (error) {\n      this.logger.error(\n        `Error getting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return null;\n    }\n  }\n\n  /**\n   * @method set\n   * @description \u8BBE\u7F6E\u7F13\u5B58\u503C\n   * @param key \u7F13\u5B58\u952E\n   * @param value \u7F13\u5B58\u503C\n   * @param options \u7F13\u5B58\u9009\u9879\n   * @returns {Promise<boolean>} \u662F\u5426\u6210\u529F\n   */\n  async set<T = unknown>(\n    key: CacheKey,\n    value: T,\n    options?: Partial<CacheOptions>,\n  ): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      const mergedOptions = { ...this.config.defaultOptions, ...options };\n      let success = false;\n\n      // \u6309\u4F18\u5148\u7EA7\u8BBE\u7F6E\u5230\u6240\u6709\u542F\u7528\u7684\u7F13\u5B58\u5C42\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.set(key, value, {\n            ...layer.options,\n            ...mergedOptions,\n          });\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_set', { key, layer: layer.name, value });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to set cache in layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        `Error setting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method delete\n   * @description \u5220\u9664\u7F13\u5B58\u503C\n   * @param key \u7F13\u5B58\u952E\n   * @returns {Promise<boolean>} \u662F\u5426\u6210\u529F\n   */\n  async delete(key: CacheKey): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      let success = false;\n\n      // \u4ECE\u6240\u6709\u7F13\u5B58\u5C42\u5220\u9664\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.delete(key);\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_delete', { key, layer: layer.name });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to delete cache from layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        `Error deleting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method exists\n   * @description \u68C0\u67E5\u7F13\u5B58\u952E\u662F\u5426\u5B58\u5728\n   * @param key \u7F13\u5B58\u952E\n   * @returns {Promise<boolean>} \u662F\u5426\u5B58\u5728\n   */\n  async exists(key: CacheKey): Promise<boolean> {\n    const startTime = Date.now();\n    this.requestCount++;\n\n    try {\n      // \u68C0\u67E5\u6240\u6709\u7F13\u5B58\u5C42\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled) continue;\n\n        const exists = await layer.service.exists(key);\n        if (exists) {\n          this.hitCount++;\n          this.updateStats(startTime);\n          this.emitEvent('cache_exists', { key, layer: layer.name });\n          return true;\n        }\n      }\n\n      this.updateStats(startTime);\n      return false;\n    } catch (error) {\n      this.logger.error(\n        `Error checking cache existence: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method clear\n   * @description \u6E05\u7A7A\u7F13\u5B58\n   * @param namespace \u547D\u540D\u7A7A\u95F4\n   * @returns {Promise<boolean>} \u662F\u5426\u6210\u529F\n   */\n  async clear(namespace?: string): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      let success = false;\n\n      // \u6E05\u7A7A\u6240\u6709\u7F13\u5B58\u5C42\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.clear(namespace);\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_clear', { layer: layer.name, namespace });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to clear cache layer ${layer.name}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        'Error clearing cache',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { error });\n      return false;\n    }\n  }\n\n  /**\n   * @method getStats\n   * @description \u83B7\u53D6\u7F13\u5B58\u7EDF\u8BA1\u4FE1\u606F\n   * @returns {Promise<CacheStats>} \u7EDF\u8BA1\u4FE1\u606F\n   */\n  async getStats(): Promise<CacheStats> {\n    try {\n      // \u66F4\u65B0\u5404\u5C42\u7EDF\u8BA1\u4FE1\u606F\n      const layerStats: Record<string, unknown> = {};\n      for (const [name, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            layerStats[name] = await layer.service.getStats();\n          } catch (error) {\n            this.logger.warn(\n              `Failed to get stats for layer ${name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n            layerStats[name] = null;\n          }\n        }\n      }\n\n      // \u8BA1\u7B97\u603B\u4F53\u7EDF\u8BA1\n      this.stats.hitRate =\n        this.requestCount > 0 ? this.hitCount / this.requestCount : 0;\n      this.stats.activeLayers = Array.from(this.layers.values()).filter(\n        layer => layer.enabled,\n      ).length;\n      this.stats.layerStats = layerStats;\n      this.stats.lastUpdated = new Date();\n\n      return { ...this.stats };\n    } catch (error) {\n      this.logger.error(\n        'Error getting cache stats',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return this.stats;\n    }\n  }\n\n  /**\n   * @method getHealth\n   * @description \u83B7\u53D6\u7F13\u5B58\u5065\u5EB7\u72B6\u6001\n   * @returns {Promise<CacheHealth>} \u5065\u5EB7\u72B6\u6001\n   */\n  async getHealth(): Promise<CacheHealth> {\n    try {\n      let healthyLayers = 0;\n      let totalResponseTime = 0;\n      let hasError = false;\n      let errorMessage = '';\n\n      // \u68C0\u67E5\u5404\u5C42\u5065\u5EB7\u72B6\u6001\n      for (const [, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            const layerHealth = await layer.service.getHealth();\n            totalResponseTime += layerHealth.responseTime;\n            if (layerHealth.healthy) {\n              healthyLayers++;\n            } else {\n              hasError = true;\n              errorMessage = layerHealth.error ?? 'Layer unhealthy';\n            }\n          } catch (error) {\n            hasError = true;\n            errorMessage = (error as Error).message;\n          }\n        }\n      }\n\n      const activeLayers = Array.from(this.layers.values()).filter(\n        layer => layer.enabled,\n      ).length;\n      const averageResponseTime =\n        activeLayers > 0 ? totalResponseTime / activeLayers : 0;\n\n      return {\n        healthy: !hasError && healthyLayers === activeLayers,\n        connected: healthyLayers > 0,\n        responseTime: averageResponseTime,\n        error: hasError ? errorMessage : undefined,\n        lastCheck: Date.now(),\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error getting cache health',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return {\n        healthy: false,\n        connected: false,\n        responseTime: 0,\n        error: (error as Error).message,\n        lastCheck: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * @method addLayer\n   * @description \u6DFB\u52A0\u7F13\u5B58\u5C42\n   * @param config \u7F13\u5B58\u5C42\u914D\u7F6E\n   * @returns {boolean} \u662F\u5426\u6210\u529F\n   */\n  addLayer(config: CacheLayerConfig): boolean {\n    try {\n      if (this.layers.has(config.name)) {\n        this.logger.warn(\n          `Cache layer ${config.name} already exists, replacing...`,\n          LogContext.CACHE,\n        );\n      }\n\n      this.layers.set(config.name, {\n        enabled: true,\n        readOnly: false,\n        fallback: false,\n        ...config,\n      });\n\n      this.logger.info(\n        `Added cache layer: ${config.name} with priority ${config.priority}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('layer_added', {\n        layer: config.name,\n        priority: config.priority,\n      });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to add cache layer: ${config.name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method removeLayer\n   * @description \u79FB\u9664\u7F13\u5B58\u5C42\n   * @param name \u7F13\u5B58\u5C42\u540D\u79F0\n   * @returns {boolean} \u662F\u5426\u6210\u529F\n   */\n  removeLayer(name: string): boolean {\n    try {\n      if (!this.layers.has(name)) {\n        this.logger.warn(\n          `Cache layer ${name} does not exist`,\n          LogContext.CACHE,\n        );\n        return false;\n      }\n\n      this.layers.delete(name);\n      this.logger.info(`Removed cache layer: ${name}`, LogContext.CACHE);\n      this.emitEvent('layer_removed', { layer: name });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to remove cache layer: ${name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method enableLayer\n   * @description \u542F\u7528\u7F13\u5B58\u5C42\n   * @param name \u7F13\u5B58\u5C42\u540D\u79F0\n   * @param enabled \u662F\u5426\u542F\u7528\n   * @returns {boolean} \u662F\u5426\u6210\u529F\n   */\n  enableLayer(name: string, enabled: boolean): boolean {\n    try {\n      const layer = this.layers.get(name);\n      if (!layer) {\n        this.logger.warn(\n          `Cache layer ${name} does not exist`,\n          LogContext.CACHE,\n        );\n        return false;\n      }\n\n      layer.enabled = enabled;\n      this.logger.info(\n        `${enabled ? 'Enabled' : 'Disabled'} cache layer: ${name}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('layer_toggled', { layer: name, enabled });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to toggle cache layer: ${name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method getLayers\n   * @description \u83B7\u53D6\u6240\u6709\u7F13\u5B58\u5C42\u4FE1\u606F\n   * @returns {CacheLayerConfig[]} \u7F13\u5B58\u5C42\u914D\u7F6E\u5217\u8868\n   */\n  getLayers(): CacheLayerConfig[] {\n    return Array.from(this.layers.values()).map(layer => ({ ...layer }));\n  }\n\n  /**\n   * @method resetStats\n   * @description \u91CD\u7F6E\u7F13\u5B58\u7EDF\u8BA1\u4FE1\u606F\n   */\n  async resetStats(): Promise<void> {\n    try {\n      // \u91CD\u7F6E\u5404\u5C42\u7EDF\u8BA1\n      for (const [name, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            await layer.service.resetStats();\n          } catch (error) {\n            this.logger.warn(\n              `Failed to reset stats for layer ${name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n          }\n        }\n      }\n\n      // \u91CD\u7F6E\u7BA1\u7406\u5668\u7EDF\u8BA1\n      this.requestCount = 0;\n      this.hitCount = 0;\n      this.totalResponseTime = 0;\n      this.stats = this.initializeStats();\n\n      this.logger.info('Cache stats reset successfully', LogContext.CACHE);\n      this.emitEvent('stats_reset', {});\n    } catch (error) {\n      this.logger.error(\n        'Failed to reset cache stats',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @method onDestroy\n   * @description \u9500\u6BC1\u65F6\u6E05\u7406\u8D44\u6E90\n   */\n  onDestroy(): void {\n    this.stopMonitoring();\n    this.stopCleanup();\n    this.logger.info('CacheManagerService destroyed', LogContext.CACHE);\n  }\n\n  // \u79C1\u6709\u65B9\u6CD5\n\n  /**\n   * @private\n   * @method initializeStats\n   * @description \u521D\u59CB\u5316\u7EDF\u8BA1\u4FE1\u606F\n   * @returns {CacheManagerStats} \u521D\u59CB\u7EDF\u8BA1\u4FE1\u606F\n   */\n  private initializeStats(): CacheManagerStats {\n    return {\n      totalEntries: 0,\n      hits: 0,\n      misses: 0,\n      hitRate: 0,\n      totalSize: 0,\n      averageSize: 0,\n      expiredEntries: 0,\n      evictedEntries: 0,\n      lastReset: Date.now(),\n      activeLayers: 0,\n      layerStats: {},\n      lastUpdated: new Date(),\n    };\n  }\n\n  /**\n   * @private\n   * @method initializeLayers\n   * @description \u521D\u59CB\u5316\u7F13\u5B58\u5C42\n   */\n  private initializeLayers(): void {\n    if (this.config.layers) {\n      for (const layerConfig of this.config.layers) {\n        this.addLayer(layerConfig);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @method getSortedLayers\n   * @description \u83B7\u53D6\u6309\u4F18\u5148\u7EA7\u6392\u5E8F\u7684\u7F13\u5B58\u5C42\n   * @returns {CacheLayerConfig[]} \u6392\u5E8F\u540E\u7684\u7F13\u5B58\u5C42\n   */\n  private getSortedLayers(): CacheLayerConfig[] {\n    return Array.from(this.layers.values())\n      .filter(layer => layer.enabled)\n      .sort((a, b) => a.priority - b.priority);\n  }\n\n  /**\n   * @private\n   * @method promoteToHigherLayer\n   * @description \u5C06\u7F13\u5B58\u503C\u63D0\u5347\u5230\u66F4\u9AD8\u4F18\u5148\u7EA7\u7684\u5C42\n   * @param key \u7F13\u5B58\u952E\n   * @param value \u7F13\u5B58\u503C\n   * @param currentPriority \u5F53\u524D\u4F18\u5148\u7EA7\n   */\n  private async promoteToHigherLayer<T>(\n    key: CacheKey,\n    value: T,\n    currentPriority: number,\n  ): Promise<void> {\n    try {\n      const higherLayers = Array.from(this.layers.values())\n        .filter(\n          layer =>\n            layer.enabled &&\n            !layer.readOnly &&\n            layer.priority < currentPriority,\n        )\n        .sort((a, b) => a.priority - b.priority);\n\n      for (const layer of higherLayers) {\n        try {\n          await layer.service.set(key, value);\n          this.emitEvent('cache_promoted', {\n            key,\n            fromPriority: currentPriority,\n            toPriority: layer.priority,\n            layer: layer.name,\n          });\n        } catch (error) {\n          this.logger.warn(\n            `Failed to promote cache to layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        `Error promoting cache: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method updateStats\n   * @description \u66F4\u65B0\u7EDF\u8BA1\u4FE1\u606F\n   * @param startTime \u5F00\u59CB\u65F6\u95F4\n   */\n  private updateStats(startTime: number): void {\n    const responseTime = Date.now() - startTime;\n    this.totalResponseTime += responseTime;\n    this.stats.hits = this.hitCount;\n    this.stats.misses = this.requestCount - this.hitCount;\n  }\n\n  /**\n   * @private\n   * @method emitEvent\n   * @description \u53D1\u9001\u7F13\u5B58\u4E8B\u4EF6\n   * @param type \u4E8B\u4EF6\u7C7B\u578B\n   * @param data \u4E8B\u4EF6\u6570\u636E\n   */\n  private emitEvent(type: string, _data: Record<string, unknown>): void {\n    if (this.config.enableEvents) {\n      try {\n        this.eventEmitter.emit(`cache.${type}`, {\n          type,\n          data: _data,\n          timestamp: new Date(),\n          managerId: 'cache-manager',\n        });\n      } catch (error) {\n        this.logger.warn(\n          `Failed to emit cache event: ${type}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @method startMonitoring\n   * @description \u5F00\u59CB\u76D1\u63A7\n   */\n  private startMonitoring(): void {\n    if (this.config.monitoringInterval && this.config.monitoringInterval > 0) {\n      this.monitoringTimer = setInterval(() => {\n        this.performMonitoring().catch(error => {\n          this.logger.error(\n            'Cache monitoring failed',\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        });\n      }, this.config.monitoringInterval);\n\n      this.logger.info(\n        `Started cache monitoring, interval: ${this.config.monitoringInterval}ms`,\n        LogContext.CACHE,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method stopMonitoring\n   * @description \u505C\u6B62\u76D1\u63A7\n   */\n  private stopMonitoring(): void {\n    if (this.monitoringTimer) {\n      clearInterval(this.monitoringTimer);\n      this.monitoringTimer = undefined;\n      this.logger.info('Stopped cache monitoring', LogContext.CACHE);\n    }\n  }\n\n  /**\n   * @private\n   * @method startCleanup\n   * @description \u5F00\u59CB\u6E05\u7406\n   */\n  private startCleanup(): void {\n    if (this.config.cleanupInterval && this.config.cleanupInterval > 0) {\n      this.cleanupTimer = setInterval(() => {\n        this.performCleanup().catch(error => {\n          this.logger.error(\n            'Cache cleanup failed',\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        });\n      }, this.config.cleanupInterval);\n\n      this.logger.info(\n        `Started cache cleanup, interval: ${this.config.cleanupInterval}ms`,\n        LogContext.CACHE,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method stopCleanup\n   * @description \u505C\u6B62\u6E05\u7406\n   */\n  private stopCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = undefined;\n      this.logger.info('Stopped cache cleanup', LogContext.CACHE);\n    }\n  }\n\n  /**\n   * @private\n   * @method performMonitoring\n   * @description \u6267\u884C\u76D1\u63A7\n   */\n  private async performMonitoring(): Promise<void> {\n    try {\n      const health = await this.getHealth();\n      const stats = await this.getStats();\n\n      this.emitEvent('monitoring', { health, stats });\n\n      // \u68C0\u67E5\u5065\u5EB7\u72B6\u6001\n      if (!health.healthy) {\n        this.logger.warn('Cache health check failed', LogContext.CACHE);\n      }\n    } catch (error) {\n      this.logger.error(\n        'Cache monitoring execution failed',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method performCleanup\n   * @description \u6267\u884C\u6E05\u7406\n   */\n  private async performCleanup(): Promise<void> {\n    try {\n      // \u6E05\u7406\u8FC7\u671F\u7684\u7F13\u5B58\u9879\n      for (const layer of this.getSortedLayers()) {\n        if (layer.enabled && !layer.readOnly) {\n          try {\n            // \u8FD9\u91CC\u53EF\u4EE5\u8C03\u7528\u5404\u5C42\u7684\u6E05\u7406\u65B9\u6CD5\uFF0C\u5982\u679C\u6709\u7684\u8BDD\n            this.emitEvent('cleanup', { layer: layer.name });\n          } catch (error) {\n            this.logger.warn(\n              `Failed to cleanup layer ${layer.name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n          }\n        }\n      }\n\n      this.logger.debug('Cache cleanup completed', LogContext.CACHE);\n    } catch (error) {\n      this.logger.error(\n        'Cache cleanup execution failed',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "592b6c91a1f452d68894a3f74c3b260990e6ada0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1pteyjif5c = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1pteyjif5c();
var __decorate =
/* istanbul ignore next */
(cov_1pteyjif5c().s[0]++,
/* istanbul ignore next */
(cov_1pteyjif5c().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1pteyjif5c().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_1pteyjif5c().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_1pteyjif5c().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_1pteyjif5c().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_1pteyjif5c().b[3][0]++;
    cov_1pteyjif5c().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_1pteyjif5c().b[3][1]++;
    cov_1pteyjif5c().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[5][0]++;
        cov_1pteyjif5c().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_1pteyjif5c().s[9]++;
  return /* istanbul ignore next */(cov_1pteyjif5c().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_1pteyjif5c().s[10]++,
/* istanbul ignore next */
(cov_1pteyjif5c().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1pteyjif5c().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_1pteyjif5c().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_1pteyjif5c().f[1]++;
  cov_1pteyjif5c().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_1pteyjif5c().b[11][0]++;
    cov_1pteyjif5c().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_1pteyjif5c().b[11][1]++;
  }
}));
var __param =
/* istanbul ignore next */
(cov_1pteyjif5c().s[13]++,
/* istanbul ignore next */
(cov_1pteyjif5c().b[13][0]++, this) &&
/* istanbul ignore next */
(cov_1pteyjif5c().b[13][1]++, this.__param) ||
/* istanbul ignore next */
(cov_1pteyjif5c().b[13][2]++, function (paramIndex, decorator) {
  /* istanbul ignore next */
  cov_1pteyjif5c().f[2]++;
  cov_1pteyjif5c().s[14]++;
  return function (target, key) {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[3]++;
    cov_1pteyjif5c().s[15]++;
    decorator(target, key, paramIndex);
  };
}));
var _a, _b;
/* istanbul ignore next */
cov_1pteyjif5c().s[16]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1pteyjif5c().s[17]++;
exports.CacheManagerService = void 0;
const common_1 =
/* istanbul ignore next */
(cov_1pteyjif5c().s[18]++, require("@nestjs/common"));
const event_emitter_1 =
/* istanbul ignore next */
(cov_1pteyjif5c().s[19]++, require("@nestjs/event-emitter"));
const cache_interface_1 =
/* istanbul ignore next */
(cov_1pteyjif5c().s[20]++, require("../interfaces/cache.interface"));
const logging_1 =
/* istanbul ignore next */
(cov_1pteyjif5c().s[21]++, require("@aiofix/logging"));
/**
 * @class CacheManagerService
 * @description
 * 缓存管理器服务，作为缓存系统的核心协调器。
 *
 * 主要功能包括：
 * 1. 管理多个缓存层（L1、L2、L3等）
 * 2. 实现缓存策略（LRU、LFU、FIFO等）
 * 3. 提供统一的缓存接口
 * 4. 监控缓存性能和健康状态
 * 5. 处理缓存失效和更新
 * 6. 提供缓存统计和分析
 *
 * @implements {ICacheService}
 */
/* istanbul ignore next */
cov_1pteyjif5c().s[22]++;
let CacheManagerService = class CacheManagerService {
  constructor(config, eventEmitter, logger) {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[4]++;
    cov_1pteyjif5c().s[23]++;
    this.eventEmitter = eventEmitter;
    /* istanbul ignore next */
    cov_1pteyjif5c().s[24]++;
    this.logger = logger;
    /**
     * 缓存层映射，按优先级排序
     */
    /* istanbul ignore next */
    cov_1pteyjif5c().s[25]++;
    this.layers = new Map();
    /**
     * 请求计数器
     */
    /* istanbul ignore next */
    cov_1pteyjif5c().s[26]++;
    this.requestCount = 0;
    /**
     * 命中计数器
     */
    /* istanbul ignore next */
    cov_1pteyjif5c().s[27]++;
    this.hitCount = 0;
    /**
     * 响应时间累计
     */
    /* istanbul ignore next */
    cov_1pteyjif5c().s[28]++;
    this.totalResponseTime = 0;
    /* istanbul ignore next */
    cov_1pteyjif5c().s[29]++;
    this.config = {
      enabled: true,
      defaultStrategy: cache_interface_1.CacheStrategy.LRU,
      monitoringInterval: 30000,
      cleanupInterval: 60000,
      maxSize: 10000,
      enableStats: true,
      enableEvents: true,
      ...config
    };
    /* istanbul ignore next */
    cov_1pteyjif5c().s[30]++;
    this.stats = this.initializeStats();
    /* istanbul ignore next */
    cov_1pteyjif5c().s[31]++;
    this.initializeLayers();
    /* istanbul ignore next */
    cov_1pteyjif5c().s[32]++;
    this.startMonitoring();
    /* istanbul ignore next */
    cov_1pteyjif5c().s[33]++;
    this.startCleanup();
    /* istanbul ignore next */
    cov_1pteyjif5c().s[34]++;
    this.logger.info('CacheManagerService initialized', logging_1.LogContext.CACHE);
  }
  /**
   * @method get
   * @description 从缓存中获取值
   * @param key 缓存键
   * @returns {Promise<T | null>} 缓存值
   */
  async get(key) {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[5]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[35]++, Date.now());
    /* istanbul ignore next */
    cov_1pteyjif5c().s[36]++;
    this.requestCount++;
    /* istanbul ignore next */
    cov_1pteyjif5c().s[37]++;
    try {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[38]++;
      // 按优先级遍历缓存层
      for (const layer of this.getSortedLayers()) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[39]++;
        if (!layer.enabled) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[14][0]++;
          cov_1pteyjif5c().s[40]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[14][1]++;
        }
        const value =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[41]++, await layer.service.get(key));
        /* istanbul ignore next */
        cov_1pteyjif5c().s[42]++;
        if (value !== null) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[15][0]++;
          cov_1pteyjif5c().s[43]++;
          // 缓存命中，更新统计
          this.hitCount++;
          /* istanbul ignore next */
          cov_1pteyjif5c().s[44]++;
          this.updateStats(startTime);
          // 如果命中的是低优先级层，尝试提升到高优先级层
          /* istanbul ignore next */
          cov_1pteyjif5c().s[45]++;
          if (layer.priority > 1) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[16][0]++;
            cov_1pteyjif5c().s[46]++;
            void this.promoteToHigherLayer(key, value, layer.priority);
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[16][1]++;
          }
          cov_1pteyjif5c().s[47]++;
          this.emitEvent('cache_hit', {
            key,
            layer: layer.name,
            value
          });
          /* istanbul ignore next */
          cov_1pteyjif5c().s[48]++;
          return value;
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[15][1]++;
        }
      }
      // 缓存未命中
      /* istanbul ignore next */
      cov_1pteyjif5c().s[49]++;
      this.updateStats(startTime);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[50]++;
      this.emitEvent('cache_miss', {
        key
      });
      /* istanbul ignore next */
      cov_1pteyjif5c().s[51]++;
      return null;
    } catch (error) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[52]++;
      this.logger.error(`Error getting cache value: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[53]++;
      this.emitEvent('cache_error', {
        key,
        error
      });
      /* istanbul ignore next */
      cov_1pteyjif5c().s[54]++;
      return null;
    }
  }
  /**
   * @method set
   * @description 设置缓存值
   * @param key 缓存键
   * @param value 缓存值
   * @param options 缓存选项
   * @returns {Promise<boolean>} 是否成功
   */
  async set(key, value, options) {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[6]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[55]++, Date.now());
    /* istanbul ignore next */
    cov_1pteyjif5c().s[56]++;
    try {
      const mergedOptions =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[57]++, {
        ...this.config.defaultOptions,
        ...options
      });
      let success =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[58]++, false);
      // 按优先级设置到所有启用的缓存层
      /* istanbul ignore next */
      cov_1pteyjif5c().s[59]++;
      for (const layer of this.getSortedLayers()) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[60]++;
        if (
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[18][0]++, !layer.enabled) ||
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[18][1]++, layer.readOnly)) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[17][0]++;
          cov_1pteyjif5c().s[61]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[17][1]++;
        }
        cov_1pteyjif5c().s[62]++;
        try {
          const layerSuccess =
          /* istanbul ignore next */
          (cov_1pteyjif5c().s[63]++, await layer.service.set(key, value, {
            ...layer.options,
            ...mergedOptions
          }));
          /* istanbul ignore next */
          cov_1pteyjif5c().s[64]++;
          if (layerSuccess) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[19][0]++;
            cov_1pteyjif5c().s[65]++;
            success = true;
            /* istanbul ignore next */
            cov_1pteyjif5c().s[66]++;
            this.emitEvent('cache_set', {
              key,
              layer: layer.name,
              value
            });
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[19][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[67]++;
          this.logger.warn(`Failed to set cache in layer ${layer.name}: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
        }
      }
      /* istanbul ignore next */
      cov_1pteyjif5c().s[68]++;
      this.updateStats(startTime);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[69]++;
      return success;
    } catch (error) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[70]++;
      this.logger.error(`Error setting cache value: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[71]++;
      this.emitEvent('cache_error', {
        key,
        error
      });
      /* istanbul ignore next */
      cov_1pteyjif5c().s[72]++;
      return false;
    }
  }
  /**
   * @method delete
   * @description 删除缓存值
   * @param key 缓存键
   * @returns {Promise<boolean>} 是否成功
   */
  async delete(key) {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[7]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[73]++, Date.now());
    /* istanbul ignore next */
    cov_1pteyjif5c().s[74]++;
    try {
      let success =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[75]++, false);
      // 从所有缓存层删除
      /* istanbul ignore next */
      cov_1pteyjif5c().s[76]++;
      for (const layer of this.getSortedLayers()) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[77]++;
        if (
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[21][0]++, !layer.enabled) ||
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[21][1]++, layer.readOnly)) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[20][0]++;
          cov_1pteyjif5c().s[78]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[20][1]++;
        }
        cov_1pteyjif5c().s[79]++;
        try {
          const layerSuccess =
          /* istanbul ignore next */
          (cov_1pteyjif5c().s[80]++, await layer.service.delete(key));
          /* istanbul ignore next */
          cov_1pteyjif5c().s[81]++;
          if (layerSuccess) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[22][0]++;
            cov_1pteyjif5c().s[82]++;
            success = true;
            /* istanbul ignore next */
            cov_1pteyjif5c().s[83]++;
            this.emitEvent('cache_delete', {
              key,
              layer: layer.name
            });
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[22][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[84]++;
          this.logger.warn(`Failed to delete cache from layer ${layer.name}: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
        }
      }
      /* istanbul ignore next */
      cov_1pteyjif5c().s[85]++;
      this.updateStats(startTime);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[86]++;
      return success;
    } catch (error) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[87]++;
      this.logger.error(`Error deleting cache value: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[88]++;
      this.emitEvent('cache_error', {
        key,
        error
      });
      /* istanbul ignore next */
      cov_1pteyjif5c().s[89]++;
      return false;
    }
  }
  /**
   * @method exists
   * @description 检查缓存键是否存在
   * @param key 缓存键
   * @returns {Promise<boolean>} 是否存在
   */
  async exists(key) {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[8]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[90]++, Date.now());
    /* istanbul ignore next */
    cov_1pteyjif5c().s[91]++;
    this.requestCount++;
    /* istanbul ignore next */
    cov_1pteyjif5c().s[92]++;
    try {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[93]++;
      // 检查所有缓存层
      for (const layer of this.getSortedLayers()) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[94]++;
        if (!layer.enabled) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[23][0]++;
          cov_1pteyjif5c().s[95]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[23][1]++;
        }
        const exists =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[96]++, await layer.service.exists(key));
        /* istanbul ignore next */
        cov_1pteyjif5c().s[97]++;
        if (exists) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[24][0]++;
          cov_1pteyjif5c().s[98]++;
          this.hitCount++;
          /* istanbul ignore next */
          cov_1pteyjif5c().s[99]++;
          this.updateStats(startTime);
          /* istanbul ignore next */
          cov_1pteyjif5c().s[100]++;
          this.emitEvent('cache_exists', {
            key,
            layer: layer.name
          });
          /* istanbul ignore next */
          cov_1pteyjif5c().s[101]++;
          return true;
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[24][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1pteyjif5c().s[102]++;
      this.updateStats(startTime);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[103]++;
      return false;
    } catch (error) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[104]++;
      this.logger.error(`Error checking cache existence: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[105]++;
      this.emitEvent('cache_error', {
        key,
        error
      });
      /* istanbul ignore next */
      cov_1pteyjif5c().s[106]++;
      return false;
    }
  }
  /**
   * @method clear
   * @description 清空缓存
   * @param namespace 命名空间
   * @returns {Promise<boolean>} 是否成功
   */
  async clear(namespace) {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[9]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[107]++, Date.now());
    /* istanbul ignore next */
    cov_1pteyjif5c().s[108]++;
    try {
      let success =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[109]++, false);
      // 清空所有缓存层
      /* istanbul ignore next */
      cov_1pteyjif5c().s[110]++;
      for (const layer of this.getSortedLayers()) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[111]++;
        if (
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[26][0]++, !layer.enabled) ||
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[26][1]++, layer.readOnly)) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[25][0]++;
          cov_1pteyjif5c().s[112]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[25][1]++;
        }
        cov_1pteyjif5c().s[113]++;
        try {
          const layerSuccess =
          /* istanbul ignore next */
          (cov_1pteyjif5c().s[114]++, await layer.service.clear(namespace));
          /* istanbul ignore next */
          cov_1pteyjif5c().s[115]++;
          if (layerSuccess) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[27][0]++;
            cov_1pteyjif5c().s[116]++;
            success = true;
            /* istanbul ignore next */
            cov_1pteyjif5c().s[117]++;
            this.emitEvent('cache_clear', {
              layer: layer.name,
              namespace
            });
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[27][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[118]++;
          this.logger.warn(`Failed to clear cache layer ${layer.name}`, logging_1.LogContext.CACHE, undefined, error);
        }
      }
      /* istanbul ignore next */
      cov_1pteyjif5c().s[119]++;
      this.updateStats(startTime);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[120]++;
      return success;
    } catch (error) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[121]++;
      this.logger.error('Error clearing cache', logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[122]++;
      this.emitEvent('cache_error', {
        error
      });
      /* istanbul ignore next */
      cov_1pteyjif5c().s[123]++;
      return false;
    }
  }
  /**
   * @method getStats
   * @description 获取缓存统计信息
   * @returns {Promise<CacheStats>} 统计信息
   */
  async getStats() {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[10]++;
    cov_1pteyjif5c().s[124]++;
    try {
      // 更新各层统计信息
      const layerStats =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[125]++, {});
      /* istanbul ignore next */
      cov_1pteyjif5c().s[126]++;
      for (const [name, layer] of this.layers) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[127]++;
        if (layer.enabled) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[28][0]++;
          cov_1pteyjif5c().s[128]++;
          try {
            /* istanbul ignore next */
            cov_1pteyjif5c().s[129]++;
            layerStats[name] = await layer.service.getStats();
          } catch (error) {
            /* istanbul ignore next */
            cov_1pteyjif5c().s[130]++;
            this.logger.warn(`Failed to get stats for layer ${name}`, logging_1.LogContext.CACHE, undefined, error);
            /* istanbul ignore next */
            cov_1pteyjif5c().s[131]++;
            layerStats[name] = null;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[28][1]++;
        }
      }
      // 计算总体统计
      /* istanbul ignore next */
      cov_1pteyjif5c().s[132]++;
      this.stats.hitRate = this.requestCount > 0 ?
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[29][0]++, this.hitCount / this.requestCount) :
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[29][1]++, 0);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[133]++;
      this.stats.activeLayers = Array.from(this.layers.values()).filter(layer => {
        /* istanbul ignore next */
        cov_1pteyjif5c().f[11]++;
        cov_1pteyjif5c().s[134]++;
        return layer.enabled;
      }).length;
      /* istanbul ignore next */
      cov_1pteyjif5c().s[135]++;
      this.stats.layerStats = layerStats;
      /* istanbul ignore next */
      cov_1pteyjif5c().s[136]++;
      this.stats.lastUpdated = new Date();
      /* istanbul ignore next */
      cov_1pteyjif5c().s[137]++;
      return {
        ...this.stats
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[138]++;
      this.logger.error('Error getting cache stats', logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[139]++;
      return this.stats;
    }
  }
  /**
   * @method getHealth
   * @description 获取缓存健康状态
   * @returns {Promise<CacheHealth>} 健康状态
   */
  async getHealth() {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[12]++;
    cov_1pteyjif5c().s[140]++;
    try {
      let healthyLayers =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[141]++, 0);
      let totalResponseTime =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[142]++, 0);
      let hasError =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[143]++, false);
      let errorMessage =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[144]++, '');
      // 检查各层健康状态
      /* istanbul ignore next */
      cov_1pteyjif5c().s[145]++;
      for (const [, layer] of this.layers) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[146]++;
        if (layer.enabled) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[30][0]++;
          cov_1pteyjif5c().s[147]++;
          try {
            const layerHealth =
            /* istanbul ignore next */
            (cov_1pteyjif5c().s[148]++, await layer.service.getHealth());
            /* istanbul ignore next */
            cov_1pteyjif5c().s[149]++;
            totalResponseTime += layerHealth.responseTime;
            /* istanbul ignore next */
            cov_1pteyjif5c().s[150]++;
            if (layerHealth.healthy) {
              /* istanbul ignore next */
              cov_1pteyjif5c().b[31][0]++;
              cov_1pteyjif5c().s[151]++;
              healthyLayers++;
            } else {
              /* istanbul ignore next */
              cov_1pteyjif5c().b[31][1]++;
              cov_1pteyjif5c().s[152]++;
              hasError = true;
              /* istanbul ignore next */
              cov_1pteyjif5c().s[153]++;
              errorMessage =
              /* istanbul ignore next */
              (cov_1pteyjif5c().b[32][0]++, layerHealth.error) ??
              /* istanbul ignore next */
              (cov_1pteyjif5c().b[32][1]++, 'Layer unhealthy');
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_1pteyjif5c().s[154]++;
            hasError = true;
            /* istanbul ignore next */
            cov_1pteyjif5c().s[155]++;
            errorMessage = error.message;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[30][1]++;
        }
      }
      const activeLayers =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[156]++, Array.from(this.layers.values()).filter(layer => {
        /* istanbul ignore next */
        cov_1pteyjif5c().f[13]++;
        cov_1pteyjif5c().s[157]++;
        return layer.enabled;
      }).length);
      const averageResponseTime =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[158]++, activeLayers > 0 ?
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[33][0]++, totalResponseTime / activeLayers) :
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[33][1]++, 0));
      /* istanbul ignore next */
      cov_1pteyjif5c().s[159]++;
      return {
        healthy:
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[34][0]++, !hasError) &&
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[34][1]++, healthyLayers === activeLayers),
        connected: healthyLayers > 0,
        responseTime: averageResponseTime,
        error: hasError ?
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[35][0]++, errorMessage) :
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[35][1]++, undefined),
        lastCheck: Date.now()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[160]++;
      this.logger.error('Error getting cache health', logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[161]++;
      return {
        healthy: false,
        connected: false,
        responseTime: 0,
        error: error.message,
        lastCheck: Date.now()
      };
    }
  }
  /**
   * @method addLayer
   * @description 添加缓存层
   * @param config 缓存层配置
   * @returns {boolean} 是否成功
   */
  addLayer(config) {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[14]++;
    cov_1pteyjif5c().s[162]++;
    try {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[163]++;
      if (this.layers.has(config.name)) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[36][0]++;
        cov_1pteyjif5c().s[164]++;
        this.logger.warn(`Cache layer ${config.name} already exists, replacing...`, logging_1.LogContext.CACHE);
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[36][1]++;
      }
      cov_1pteyjif5c().s[165]++;
      this.layers.set(config.name, {
        enabled: true,
        readOnly: false,
        fallback: false,
        ...config
      });
      /* istanbul ignore next */
      cov_1pteyjif5c().s[166]++;
      this.logger.info(`Added cache layer: ${config.name} with priority ${config.priority}`, logging_1.LogContext.CACHE);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[167]++;
      this.emitEvent('layer_added', {
        layer: config.name,
        priority: config.priority
      });
      /* istanbul ignore next */
      cov_1pteyjif5c().s[168]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[169]++;
      this.logger.error(`Failed to add cache layer: ${config.name}`, logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[170]++;
      return false;
    }
  }
  /**
   * @method removeLayer
   * @description 移除缓存层
   * @param name 缓存层名称
   * @returns {boolean} 是否成功
   */
  removeLayer(name) {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[15]++;
    cov_1pteyjif5c().s[171]++;
    try {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[172]++;
      if (!this.layers.has(name)) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[37][0]++;
        cov_1pteyjif5c().s[173]++;
        this.logger.warn(`Cache layer ${name} does not exist`, logging_1.LogContext.CACHE);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[174]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[37][1]++;
      }
      cov_1pteyjif5c().s[175]++;
      this.layers.delete(name);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[176]++;
      this.logger.info(`Removed cache layer: ${name}`, logging_1.LogContext.CACHE);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[177]++;
      this.emitEvent('layer_removed', {
        layer: name
      });
      /* istanbul ignore next */
      cov_1pteyjif5c().s[178]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[179]++;
      this.logger.error(`Failed to remove cache layer: ${name}`, logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[180]++;
      return false;
    }
  }
  /**
   * @method enableLayer
   * @description 启用缓存层
   * @param name 缓存层名称
   * @param enabled 是否启用
   * @returns {boolean} 是否成功
   */
  enableLayer(name, enabled) {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[16]++;
    cov_1pteyjif5c().s[181]++;
    try {
      const layer =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[182]++, this.layers.get(name));
      /* istanbul ignore next */
      cov_1pteyjif5c().s[183]++;
      if (!layer) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[38][0]++;
        cov_1pteyjif5c().s[184]++;
        this.logger.warn(`Cache layer ${name} does not exist`, logging_1.LogContext.CACHE);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[185]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[38][1]++;
      }
      cov_1pteyjif5c().s[186]++;
      layer.enabled = enabled;
      /* istanbul ignore next */
      cov_1pteyjif5c().s[187]++;
      this.logger.info(`${enabled ?
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[39][0]++, 'Enabled') :
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[39][1]++, 'Disabled')} cache layer: ${name}`, logging_1.LogContext.CACHE);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[188]++;
      this.emitEvent('layer_toggled', {
        layer: name,
        enabled
      });
      /* istanbul ignore next */
      cov_1pteyjif5c().s[189]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[190]++;
      this.logger.error(`Failed to toggle cache layer: ${name}`, logging_1.LogContext.CACHE, undefined, error);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[191]++;
      return false;
    }
  }
  /**
   * @method getLayers
   * @description 获取所有缓存层信息
   * @returns {CacheLayerConfig[]} 缓存层配置列表
   */
  getLayers() {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[17]++;
    cov_1pteyjif5c().s[192]++;
    return Array.from(this.layers.values()).map(layer => {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[18]++;
      cov_1pteyjif5c().s[193]++;
      return {
        ...layer
      };
    });
  }
  /**
   * @method resetStats
   * @description 重置缓存统计信息
   */
  async resetStats() {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[19]++;
    cov_1pteyjif5c().s[194]++;
    try {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[195]++;
      // 重置各层统计
      for (const [name, layer] of this.layers) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[196]++;
        if (layer.enabled) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[40][0]++;
          cov_1pteyjif5c().s[197]++;
          try {
            /* istanbul ignore next */
            cov_1pteyjif5c().s[198]++;
            await layer.service.resetStats();
          } catch (error) {
            /* istanbul ignore next */
            cov_1pteyjif5c().s[199]++;
            this.logger.warn(`Failed to reset stats for layer ${name}`, logging_1.LogContext.CACHE, undefined, error);
          }
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[40][1]++;
        }
      }
      // 重置管理器统计
      /* istanbul ignore next */
      cov_1pteyjif5c().s[200]++;
      this.requestCount = 0;
      /* istanbul ignore next */
      cov_1pteyjif5c().s[201]++;
      this.hitCount = 0;
      /* istanbul ignore next */
      cov_1pteyjif5c().s[202]++;
      this.totalResponseTime = 0;
      /* istanbul ignore next */
      cov_1pteyjif5c().s[203]++;
      this.stats = this.initializeStats();
      /* istanbul ignore next */
      cov_1pteyjif5c().s[204]++;
      this.logger.info('Cache stats reset successfully', logging_1.LogContext.CACHE);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[205]++;
      this.emitEvent('stats_reset', {});
    } catch (error) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[206]++;
      this.logger.error('Failed to reset cache stats', logging_1.LogContext.CACHE, undefined, error);
    }
  }
  /**
   * @method onDestroy
   * @description 销毁时清理资源
   */
  onDestroy() {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[20]++;
    cov_1pteyjif5c().s[207]++;
    this.stopMonitoring();
    /* istanbul ignore next */
    cov_1pteyjif5c().s[208]++;
    this.stopCleanup();
    /* istanbul ignore next */
    cov_1pteyjif5c().s[209]++;
    this.logger.info('CacheManagerService destroyed', logging_1.LogContext.CACHE);
  }
  // 私有方法
  /**
   * @private
   * @method initializeStats
   * @description 初始化统计信息
   * @returns {CacheManagerStats} 初始统计信息
   */
  initializeStats() {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[21]++;
    cov_1pteyjif5c().s[210]++;
    return {
      totalEntries: 0,
      hits: 0,
      misses: 0,
      hitRate: 0,
      totalSize: 0,
      averageSize: 0,
      expiredEntries: 0,
      evictedEntries: 0,
      lastReset: Date.now(),
      activeLayers: 0,
      layerStats: {},
      lastUpdated: new Date()
    };
  }
  /**
   * @private
   * @method initializeLayers
   * @description 初始化缓存层
   */
  initializeLayers() {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[22]++;
    cov_1pteyjif5c().s[211]++;
    if (this.config.layers) {
      /* istanbul ignore next */
      cov_1pteyjif5c().b[41][0]++;
      cov_1pteyjif5c().s[212]++;
      for (const layerConfig of this.config.layers) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[213]++;
        this.addLayer(layerConfig);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1pteyjif5c().b[41][1]++;
    }
  }
  /**
   * @private
   * @method getSortedLayers
   * @description 获取按优先级排序的缓存层
   * @returns {CacheLayerConfig[]} 排序后的缓存层
   */
  getSortedLayers() {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[23]++;
    cov_1pteyjif5c().s[214]++;
    return Array.from(this.layers.values()).filter(layer => {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[24]++;
      cov_1pteyjif5c().s[215]++;
      return layer.enabled;
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[25]++;
      cov_1pteyjif5c().s[216]++;
      return a.priority - b.priority;
    });
  }
  /**
   * @private
   * @method promoteToHigherLayer
   * @description 将缓存值提升到更高优先级的层
   * @param key 缓存键
   * @param value 缓存值
   * @param currentPriority 当前优先级
   */
  async promoteToHigherLayer(key, value, currentPriority) {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[26]++;
    cov_1pteyjif5c().s[217]++;
    try {
      const higherLayers =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[218]++, Array.from(this.layers.values()).filter(layer => {
        /* istanbul ignore next */
        cov_1pteyjif5c().f[27]++;
        cov_1pteyjif5c().s[219]++;
        return /* istanbul ignore next */(cov_1pteyjif5c().b[42][0]++, layer.enabled) &&
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[42][1]++, !layer.readOnly) &&
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[42][2]++, layer.priority < currentPriority);
      }).sort((a, b) => {
        /* istanbul ignore next */
        cov_1pteyjif5c().f[28]++;
        cov_1pteyjif5c().s[220]++;
        return a.priority - b.priority;
      }));
      /* istanbul ignore next */
      cov_1pteyjif5c().s[221]++;
      for (const layer of higherLayers) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[222]++;
        try {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[223]++;
          await layer.service.set(key, value);
          /* istanbul ignore next */
          cov_1pteyjif5c().s[224]++;
          this.emitEvent('cache_promoted', {
            key,
            fromPriority: currentPriority,
            toPriority: layer.priority,
            layer: layer.name
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[225]++;
          this.logger.warn(`Failed to promote cache to layer ${layer.name}: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[226]++;
      this.logger.error(`Error promoting cache: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
    }
  }
  /**
   * @private
   * @method updateStats
   * @description 更新统计信息
   * @param startTime 开始时间
   */
  updateStats(startTime) {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[29]++;
    const responseTime =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[227]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_1pteyjif5c().s[228]++;
    this.totalResponseTime += responseTime;
    /* istanbul ignore next */
    cov_1pteyjif5c().s[229]++;
    this.stats.hits = this.hitCount;
    /* istanbul ignore next */
    cov_1pteyjif5c().s[230]++;
    this.stats.misses = this.requestCount - this.hitCount;
  }
  /**
   * @private
   * @method emitEvent
   * @description 发送缓存事件
   * @param type 事件类型
   * @param data 事件数据
   */
  emitEvent(type, _data) {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[30]++;
    cov_1pteyjif5c().s[231]++;
    if (this.config.enableEvents) {
      /* istanbul ignore next */
      cov_1pteyjif5c().b[43][0]++;
      cov_1pteyjif5c().s[232]++;
      try {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[233]++;
        this.eventEmitter.emit(`cache.${type}`, {
          type,
          data: _data,
          timestamp: new Date(),
          managerId: 'cache-manager'
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[234]++;
        this.logger.warn(`Failed to emit cache event: ${type}`, logging_1.LogContext.CACHE, undefined, error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1pteyjif5c().b[43][1]++;
    }
  }
  /**
   * @private
   * @method startMonitoring
   * @description 开始监控
   */
  startMonitoring() {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[31]++;
    cov_1pteyjif5c().s[235]++;
    if (
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[45][0]++, this.config.monitoringInterval) &&
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[45][1]++, this.config.monitoringInterval > 0)) {
      /* istanbul ignore next */
      cov_1pteyjif5c().b[44][0]++;
      cov_1pteyjif5c().s[236]++;
      this.monitoringTimer = setInterval(() => {
        /* istanbul ignore next */
        cov_1pteyjif5c().f[32]++;
        cov_1pteyjif5c().s[237]++;
        this.performMonitoring().catch(error => {
          /* istanbul ignore next */
          cov_1pteyjif5c().f[33]++;
          cov_1pteyjif5c().s[238]++;
          this.logger.error('Cache monitoring failed', logging_1.LogContext.CACHE, undefined, error);
        });
      }, this.config.monitoringInterval);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[239]++;
      this.logger.info(`Started cache monitoring, interval: ${this.config.monitoringInterval}ms`, logging_1.LogContext.CACHE);
    } else
    /* istanbul ignore next */
    {
      cov_1pteyjif5c().b[44][1]++;
    }
  }
  /**
   * @private
   * @method stopMonitoring
   * @description 停止监控
   */
  stopMonitoring() {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[34]++;
    cov_1pteyjif5c().s[240]++;
    if (this.monitoringTimer) {
      /* istanbul ignore next */
      cov_1pteyjif5c().b[46][0]++;
      cov_1pteyjif5c().s[241]++;
      clearInterval(this.monitoringTimer);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[242]++;
      this.monitoringTimer = undefined;
      /* istanbul ignore next */
      cov_1pteyjif5c().s[243]++;
      this.logger.info('Stopped cache monitoring', logging_1.LogContext.CACHE);
    } else
    /* istanbul ignore next */
    {
      cov_1pteyjif5c().b[46][1]++;
    }
  }
  /**
   * @private
   * @method startCleanup
   * @description 开始清理
   */
  startCleanup() {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[35]++;
    cov_1pteyjif5c().s[244]++;
    if (
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[48][0]++, this.config.cleanupInterval) &&
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[48][1]++, this.config.cleanupInterval > 0)) {
      /* istanbul ignore next */
      cov_1pteyjif5c().b[47][0]++;
      cov_1pteyjif5c().s[245]++;
      this.cleanupTimer = setInterval(() => {
        /* istanbul ignore next */
        cov_1pteyjif5c().f[36]++;
        cov_1pteyjif5c().s[246]++;
        this.performCleanup().catch(error => {
          /* istanbul ignore next */
          cov_1pteyjif5c().f[37]++;
          cov_1pteyjif5c().s[247]++;
          this.logger.error('Cache cleanup failed', logging_1.LogContext.CACHE, undefined, error);
        });
      }, this.config.cleanupInterval);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[248]++;
      this.logger.info(`Started cache cleanup, interval: ${this.config.cleanupInterval}ms`, logging_1.LogContext.CACHE);
    } else
    /* istanbul ignore next */
    {
      cov_1pteyjif5c().b[47][1]++;
    }
  }
  /**
   * @private
   * @method stopCleanup
   * @description 停止清理
   */
  stopCleanup() {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[38]++;
    cov_1pteyjif5c().s[249]++;
    if (this.cleanupTimer) {
      /* istanbul ignore next */
      cov_1pteyjif5c().b[49][0]++;
      cov_1pteyjif5c().s[250]++;
      clearInterval(this.cleanupTimer);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[251]++;
      this.cleanupTimer = undefined;
      /* istanbul ignore next */
      cov_1pteyjif5c().s[252]++;
      this.logger.info('Stopped cache cleanup', logging_1.LogContext.CACHE);
    } else
    /* istanbul ignore next */
    {
      cov_1pteyjif5c().b[49][1]++;
    }
  }
  /**
   * @private
   * @method performMonitoring
   * @description 执行监控
   */
  async performMonitoring() {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[39]++;
    cov_1pteyjif5c().s[253]++;
    try {
      const health =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[254]++, await this.getHealth());
      const stats =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[255]++, await this.getStats());
      /* istanbul ignore next */
      cov_1pteyjif5c().s[256]++;
      this.emitEvent('monitoring', {
        health,
        stats
      });
      // 检查健康状态
      /* istanbul ignore next */
      cov_1pteyjif5c().s[257]++;
      if (!health.healthy) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[50][0]++;
        cov_1pteyjif5c().s[258]++;
        this.logger.warn('Cache health check failed', logging_1.LogContext.CACHE);
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[50][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[259]++;
      this.logger.error('Cache monitoring execution failed', logging_1.LogContext.CACHE, undefined, error);
    }
  }
  /**
   * @private
   * @method performCleanup
   * @description 执行清理
   */
  async performCleanup() {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[40]++;
    cov_1pteyjif5c().s[260]++;
    try {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[261]++;
      // 清理过期的缓存项
      for (const layer of this.getSortedLayers()) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[262]++;
        if (
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[52][0]++, layer.enabled) &&
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[52][1]++, !layer.readOnly)) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[51][0]++;
          cov_1pteyjif5c().s[263]++;
          try {
            /* istanbul ignore next */
            cov_1pteyjif5c().s[264]++;
            // 这里可以调用各层的清理方法，如果有的话
            this.emitEvent('cleanup', {
              layer: layer.name
            });
          } catch (error) {
            /* istanbul ignore next */
            cov_1pteyjif5c().s[265]++;
            this.logger.warn(`Failed to cleanup layer ${layer.name}`, logging_1.LogContext.CACHE, undefined, error);
          }
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[51][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1pteyjif5c().s[266]++;
      this.logger.debug('Cache cleanup completed', logging_1.LogContext.CACHE);
    } catch (error) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[267]++;
      this.logger.error('Cache cleanup execution failed', logging_1.LogContext.CACHE, undefined, error);
    }
  }
};
/* istanbul ignore next */
cov_1pteyjif5c().s[268]++;
exports.CacheManagerService = CacheManagerService;
/* istanbul ignore next */
cov_1pteyjif5c().s[269]++;
exports.CacheManagerService = CacheManagerService = __decorate([(0, common_1.Injectable)(), __param(0, (0, common_1.Inject)('CACHE_MANAGER_CONFIG')), __param(2, (0, common_1.Inject)(logging_1.PinoLoggerService)), __metadata("design:paramtypes", [Object, typeof (_a =
/* istanbul ignore next */
(cov_1pteyjif5c().b[54][0]++, typeof event_emitter_1.EventEmitter2 !== "undefined") &&
/* istanbul ignore next */
(cov_1pteyjif5c().b[54][1]++, event_emitter_1.EventEmitter2)) === "function" ?
/* istanbul ignore next */
(cov_1pteyjif5c().b[53][0]++, _a) :
/* istanbul ignore next */
(cov_1pteyjif5c().b[53][1]++, Object), typeof (_b =
/* istanbul ignore next */
(cov_1pteyjif5c().b[56][0]++, typeof logging_1.PinoLoggerService !== "undefined") &&
/* istanbul ignore next */
(cov_1pteyjif5c().b[56][1]++, logging_1.PinoLoggerService)) === "function" ?
/* istanbul ignore next */
(cov_1pteyjif5c().b[55][0]++, _b) :
/* istanbul ignore next */
(cov_1pteyjif5c().b[55][1]++, Object)])], CacheManagerService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,