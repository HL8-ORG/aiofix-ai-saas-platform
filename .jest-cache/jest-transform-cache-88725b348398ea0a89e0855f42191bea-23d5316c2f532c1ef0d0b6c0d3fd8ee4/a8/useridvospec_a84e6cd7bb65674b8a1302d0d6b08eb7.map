{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/user/src/domain/value-objects/user-id.vo.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/user/src/domain/value-objects/user-id.vo.spec.ts"],"sourcesContent":["import { describe, it, expect } from '@jest/globals';\nimport { UserId, InvalidUserIdError } from './user-id.vo';\n\ndescribe('UserId', () => {\n  describe('constructor', () => {\n    it('should create UserId with valid UUID', () => {\n      const validUuid = '123e4567-e89b-12d3-a456-426614174000';\n      const userId = new UserId(validUuid);\n\n      expect(userId.toString()).toBe(validUuid);\n    });\n\n    it('should throw InvalidUserIdError for empty string', () => {\n      expect(() => new UserId('')).toThrow(InvalidUserIdError);\n      expect(() => new UserId('')).toThrow('User ID cannot be empty');\n    });\n\n    it('should throw InvalidUserIdError for invalid UUID format', () => {\n      expect(() => new UserId('invalid-uuid')).toThrow(InvalidUserIdError);\n      expect(() => new UserId('invalid-uuid')).toThrow('Invalid UUID format');\n    });\n\n    it('should throw InvalidUserIdError for null or undefined', () => {\n      expect(() => new UserId(null as any)).toThrow(InvalidUserIdError);\n      expect(() => new UserId(undefined as any)).toThrow(InvalidUserIdError);\n    });\n  });\n\n  describe('generate', () => {\n    it('should generate valid UUID', () => {\n      const userId = UserId.generate();\n\n      expect(userId.toString()).toMatch(\n        /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,\n      );\n    });\n\n    it('should generate different UUIDs', () => {\n      const userId1 = UserId.generate();\n      const userId2 = UserId.generate();\n\n      expect(userId1.toString()).not.toBe(userId2.toString());\n    });\n  });\n\n  describe('fromString', () => {\n    it('should create UserId from valid string', () => {\n      const validUuid = '123e4567-e89b-12d3-a456-426614174000';\n      const userId = UserId.fromString(validUuid);\n\n      expect(userId.toString()).toBe(validUuid);\n    });\n  });\n\n  describe('toString', () => {\n    it('should return string representation', () => {\n      const validUuid = '123e4567-e89b-12d3-a456-426614174000';\n      const userId = new UserId(validUuid);\n\n      expect(userId.toString()).toBe(validUuid);\n    });\n  });\n\n  describe('equals', () => {\n    it('should return true for same UserId', () => {\n      const validUuid = '123e4567-e89b-12d3-a456-426614174000';\n      const userId1 = new UserId(validUuid);\n      const userId2 = new UserId(validUuid);\n\n      expect(userId1.equals(userId2)).toBe(true);\n    });\n\n    it('should return false for different UserIds', () => {\n      const userId1 = UserId.generate();\n      const userId2 = UserId.generate();\n\n      expect(userId1.equals(userId2)).toBe(false);\n    });\n\n    it('should return false for null or undefined', () => {\n      const userId = UserId.generate();\n\n      expect(userId.equals(null as any)).toBe(false);\n      expect(userId.equals(undefined as any)).toBe(false);\n    });\n  });\n});\n"],"version":3}