9439e1deaab7df48fd3491264c08f9ea
"use strict";
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultLoggingConfig = exports.PinoLoggerConfigService = void 0;
const common_1 = require("@nestjs/common");
const logging_interface_1 = require("../interfaces/logging.interface");
/**
 * @class PinoLoggerConfigService
 * @description
 * Pino日志配置管理服务，负责日志配置的初始化、验证和管理。
 *
 * 主要功能包括：
 * 1. 从环境变量和默认值初始化配置
 * 2. 配置验证和类型检查
 * 3. 配置更新和动态调整
 * 4. 环境相关的配置适配
 * 5. 配置持久化和恢复
 *
 * 设计原则：
 * - 单一职责：只负责配置管理
 * - 可测试性：配置逻辑独立，易于单元测试
 * - 可扩展性：支持多种配置源和验证规则
 */
let PinoLoggerConfigService = (() => {
    let _classDecorators = [(0, common_1.Injectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    var PinoLoggerConfigService = _classThis = class {
        constructor(customConfig) {
            this.customConfig = customConfig;
            this.config = {};
            this.initializeConfig();
        }
        /**
         * @method getConfig
         * @description 获取当前日志配置
         * @returns {LogConfig} 当前配置的副本
         */
        getConfig() {
            return { ...this.config };
        }
        /**
         * @method updateConfig
         * @description 更新日志配置
         * @param {Partial<LogConfig>} newConfig 新的配置项
         */
        updateConfig(newConfig) {
            this.config = { ...this.config, ...newConfig };
            this.validateConfig(this.config);
        }
        /**
         * @method getLevel
         * @description 获取当前日志级别
         * @returns {LogLevel} 当前日志级别
         */
        getLevel() {
            return this.config.level;
        }
        /**
         * @method setLevel
         * @description 设置日志级别
         * @param {LogLevel} level 新的日志级别
         */
        setLevel(level) {
            this.updateConfig({ level });
        }
        /**
         * @method getFormat
         * @description 获取当前日志格式
         * @returns {LogFormat} 当前日志格式
         */
        getFormat() {
            return this.config.format;
        }
        /**
         * @method setFormat
         * @description 设置日志格式
         * @param {LogFormat} format 新的日志格式
         */
        setFormat(format) {
            this.updateConfig({ format });
        }
        /**
         * @method isProduction
         * @description 检查是否为生产环境
         * @returns {boolean} 是否为生产环境
         */
        isProduction() {
            return process.env.NODE_ENV === 'production';
        }
        /**
         * @method isDevelopment
         * @description 检查是否为开发环境
         * @returns {boolean} 是否为开发环境
         */
        isDevelopment() {
            return process.env.NODE_ENV !== 'production';
        }
        /**
         * @method shouldUsePrettyFormat
         * @description 判断是否应该使用美化格式
         * @returns {boolean} 是否使用美化格式
         */
        shouldUsePrettyFormat() {
            return this.config.format === logging_interface_1.LogFormat.TEXT && this.isDevelopment();
        }
        /**
         * @method resetToDefaults
         * @description 重置为默认配置
         */
        resetToDefaults() {
            this.initializeConfig();
        }
        /**
         * @method validateConfig
         * @description 验证配置的有效性
         * @param {LogConfig} config 要验证的配置
         * @throws {Error} 配置无效时抛出错误
         */
        validateConfig(config) {
            const validLevels = [
                'fatal',
                'error',
                'warn',
                'info',
                'debug',
                'trace',
            ];
            const validFormats = [logging_interface_1.LogFormat.JSON, logging_interface_1.LogFormat.TEXT];
            if (!validLevels.includes(config.level)) {
                throw new Error(`Invalid log level: ${config.level}. Valid levels are: ${validLevels.join(', ')}`);
            }
            if (!validFormats.includes(config.format)) {
                throw new Error(`Invalid log format: ${config.format}. Valid formats are: ${validFormats.join(', ')}`);
            }
            if (config.rotation) {
                if (config.rotation.maxSize &&
                    !this.isValidFileSize(config.rotation.maxSize)) {
                    throw new Error(`Invalid maxSize format: ${config.rotation.maxSize}. Use format like '10m', '1g'`);
                }
            }
            if (config.remote) {
                if (!config.remote.url) {
                    throw new Error('Remote logging URL is required when remote logging is enabled');
                }
                if (config.remote.timeout && config.remote.timeout <= 0) {
                    throw new Error('Remote logging timeout must be positive');
                }
                if (config.remote.retries && config.remote.retries < 0) {
                    throw new Error('Remote logging retries must be non-negative');
                }
            }
        }
        /**
         * @private
         * @method initializeConfig
         * @description 初始化日志配置
         */
        initializeConfig() {
            // 根据环境确定默认格式
            const defaultFormat = this.isProduction() ? logging_interface_1.LogFormat.JSON : logging_interface_1.LogFormat.TEXT;
            // 默认配置
            const defaultConfig = {
                level: process.env.LOG_LEVEL || 'info',
                format: process.env.LOG_FORMAT || defaultFormat,
                colorize: this.isDevelopment(),
                timestamp: true,
                requestId: true,
                tenantId: true,
                userId: true,
                performance: true,
                stackTrace: true,
                filePath: process.env.LOG_FILE_PATH,
                rotation: {
                    maxSize: '10m',
                    maxFiles: 5,
                    interval: '1d',
                },
                remote: process.env.LOG_REMOTE_URL
                    ? {
                        url: process.env.LOG_REMOTE_URL,
                        token: process.env.LOG_REMOTE_TOKEN,
                        timeout: 5000,
                        retries: 3,
                    }
                    : undefined,
            };
            // 合并自定义配置
            this.config = {
                ...defaultConfig,
                ...this.customConfig,
            };
            this.validateConfig(this.config);
        }
        /**
         * @private
         * @method isValidFileSize
         * @description 验证文件大小格式是否有效
         * @param {string} size 文件大小字符串
         * @returns {boolean} 是否有效
         */
        isValidFileSize(size) {
            const sizeRegex = /^\d+[kmg]?$/i;
            return sizeRegex.test(size);
        }
    };
    __setFunctionName(_classThis, "PinoLoggerConfigService");
    (() => {
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        PinoLoggerConfigService = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return PinoLoggerConfigService = _classThis;
})();
exports.PinoLoggerConfigService = PinoLoggerConfigService;
/**
 * @constant defaultLoggingConfig
 * @description 默认日志配置
 */
exports.defaultLoggingConfig = {
    level: 'info',
    format: logging_interface_1.LogFormat.JSON,
    colorize: false,
    timestamp: true,
    requestId: true,
    tenantId: true,
    userId: true,
    performance: true,
    stackTrace: true,
    rotation: {
        maxSize: '10m',
        maxFiles: 5,
        interval: '1d',
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,