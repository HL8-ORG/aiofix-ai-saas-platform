{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/services/pino-logger-config.service.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/services/pino-logger-config.service.ts"],"sourcesContent":["import { Inject, Injectable, Optional } from '@nestjs/common';\nimport { LogConfig, LogFormat } from '../interfaces/logging.interface';\n\nexport type LogLevel = 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace';\n\n/**\n * @class PinoLoggerConfigService\n * @description\n * Pino日志配置管理服务，负责日志配置的初始化、验证和管理。\n *\n * 主要功能包括：\n * 1. 从环境变量和默认值初始化配置\n * 2. 配置验证和类型检查\n * 3. 配置更新和动态调整\n * 4. 环境相关的配置适配\n * 5. 配置持久化和恢复\n *\n * 设计原则：\n * - 单一职责：只负责配置管理\n * - 可测试性：配置逻辑独立，易于单元测试\n * - 可扩展性：支持多种配置源和验证规则\n */\n@Injectable()\nexport class PinoLoggerConfigService {\n  private config: LogConfig = {} as LogConfig;\n\n  constructor(\n    @Optional()\n    @Inject('LOGGING_CONFIG')\n    private customConfig?: Partial<LogConfig>,\n  ) {\n    this.initializeConfig();\n  }\n\n  /**\n   * @method getConfig\n   * @description 获取当前日志配置\n   * @returns {LogConfig} 当前配置的副本\n   */\n  getConfig(): LogConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * @method updateConfig\n   * @description 更新日志配置\n   * @param {Partial<LogConfig>} newConfig 新的配置项\n   */\n  updateConfig(newConfig: Partial<LogConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    this.validateConfig(this.config);\n  }\n\n  /**\n   * @method getLevel\n   * @description 获取当前日志级别\n   * @returns {LogLevel} 当前日志级别\n   */\n  getLevel(): LogLevel {\n    return this.config.level;\n  }\n\n  /**\n   * @method setLevel\n   * @description 设置日志级别\n   * @param {LogLevel} level 新的日志级别\n   */\n  setLevel(level: LogLevel): void {\n    this.updateConfig({ level });\n  }\n\n  /**\n   * @method getFormat\n   * @description 获取当前日志格式\n   * @returns {LogFormat} 当前日志格式\n   */\n  getFormat(): LogFormat {\n    return this.config.format;\n  }\n\n  /**\n   * @method setFormat\n   * @description 设置日志格式\n   * @param {LogFormat} format 新的日志格式\n   */\n  setFormat(format: LogFormat): void {\n    this.updateConfig({ format });\n  }\n\n  /**\n   * @method isProduction\n   * @description 检查是否为生产环境\n   * @returns {boolean} 是否为生产环境\n   */\n  isProduction(): boolean {\n    return process.env.NODE_ENV === 'production';\n  }\n\n  /**\n   * @method isDevelopment\n   * @description 检查是否为开发环境\n   * @returns {boolean} 是否为开发环境\n   */\n  isDevelopment(): boolean {\n    return process.env.NODE_ENV !== 'production';\n  }\n\n  /**\n   * @method shouldUsePrettyFormat\n   * @description 判断是否应该使用美化格式\n   * @returns {boolean} 是否使用美化格式\n   */\n  shouldUsePrettyFormat(): boolean {\n    return this.config.format === LogFormat.TEXT && this.isDevelopment();\n  }\n\n  /**\n   * @method resetToDefaults\n   * @description 重置为默认配置\n   */\n  resetToDefaults(): void {\n    this.initializeConfig();\n  }\n\n  /**\n   * @method validateConfig\n   * @description 验证配置的有效性\n   * @param {LogConfig} config 要验证的配置\n   * @throws {Error} 配置无效时抛出错误\n   */\n  validateConfig(config: LogConfig): void {\n    const validLevels: LogLevel[] = [\n      'fatal',\n      'error',\n      'warn',\n      'info',\n      'debug',\n      'trace',\n    ];\n    const validFormats: LogFormat[] = [LogFormat.JSON, LogFormat.TEXT];\n\n    if (!validLevels.includes(config.level)) {\n      throw new Error(\n        `Invalid log level: ${config.level}. Valid levels are: ${validLevels.join(', ')}`,\n      );\n    }\n\n    if (!validFormats.includes(config.format)) {\n      throw new Error(\n        `Invalid log format: ${config.format}. Valid formats are: ${validFormats.join(', ')}`,\n      );\n    }\n\n    if (config.rotation) {\n      if (\n        config.rotation.maxSize &&\n        !this.isValidFileSize(config.rotation.maxSize)\n      ) {\n        throw new Error(\n          `Invalid maxSize format: ${config.rotation.maxSize}. Use format like '10m', '1g'`,\n        );\n      }\n    }\n\n    if (config.remote) {\n      if (!config.remote.url) {\n        throw new Error(\n          'Remote logging URL is required when remote logging is enabled',\n        );\n      }\n      if (config.remote.timeout && config.remote.timeout <= 0) {\n        throw new Error('Remote logging timeout must be positive');\n      }\n      if (config.remote.retries && config.remote.retries < 0) {\n        throw new Error('Remote logging retries must be non-negative');\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @method initializeConfig\n   * @description 初始化日志配置\n   */\n  private initializeConfig(): void {\n    // 根据环境确定默认格式\n    const defaultFormat = this.isProduction() ? LogFormat.JSON : LogFormat.TEXT;\n\n    // 默认配置\n    const defaultConfig: LogConfig = {\n      level: (process.env.LOG_LEVEL as LogLevel) || 'info',\n      format: (process.env.LOG_FORMAT as LogFormat) || defaultFormat,\n      colorize: this.isDevelopment(),\n      timestamp: true,\n      requestId: true,\n      tenantId: true,\n      userId: true,\n      performance: true,\n      stackTrace: true,\n      filePath: process.env.LOG_FILE_PATH,\n      rotation: {\n        maxSize: '10m',\n        maxFiles: 5,\n        interval: '1d',\n      },\n      remote: process.env.LOG_REMOTE_URL\n        ? {\n            url: process.env.LOG_REMOTE_URL,\n            token: process.env.LOG_REMOTE_TOKEN,\n            timeout: 5000,\n            retries: 3,\n          }\n        : undefined,\n    };\n\n    // 合并自定义配置\n    this.config = {\n      ...defaultConfig,\n      ...this.customConfig,\n    };\n\n    this.validateConfig(this.config);\n  }\n\n  /**\n   * @private\n   * @method isValidFileSize\n   * @description 验证文件大小格式是否有效\n   * @param {string} size 文件大小字符串\n   * @returns {boolean} 是否有效\n   */\n  private isValidFileSize(size: string): boolean {\n    const sizeRegex = /^\\d+[kmg]?$/i;\n    return sizeRegex.test(size);\n  }\n}\n\n/**\n * @constant defaultLoggingConfig\n * @description 默认日志配置\n */\nexport const defaultLoggingConfig: LogConfig = {\n  level: 'info',\n  format: LogFormat.JSON,\n  colorize: false,\n  timestamp: true,\n  requestId: true,\n  tenantId: true,\n  userId: true,\n  performance: true,\n  stackTrace: true,\n  rotation: {\n    maxSize: '10m',\n    maxFiles: 5,\n    interval: '1d',\n  },\n};\n"],"version":3}