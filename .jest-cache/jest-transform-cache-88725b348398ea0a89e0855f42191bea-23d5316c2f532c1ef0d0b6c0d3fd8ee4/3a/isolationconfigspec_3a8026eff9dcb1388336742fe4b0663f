a1fdf0df3db599ae1a2e022ffe3fabb9
"use strict";
/**
 * @file isolation.config.spec.ts
 * @description 隔离配置服务单元测试
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const isolation_config_1 = require("./isolation.config");
describe('IsolationConfigService', () => {
    let service;
    let configService;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            imports: [config_1.ConfigModule],
            providers: [isolation_config_1.IsolationConfigService],
        }).compile();
        service = module.get(isolation_config_1.IsolationConfigService);
        configService = module.get(config_1.ConfigService);
    });
    describe('getStrategy', () => {
        it('should return TABLE_LEVEL as default strategy', () => {
            // 模拟环境变量未设置
            jest.spyOn(configService, 'get').mockReturnValue(undefined);
            const strategy = service.getStrategy();
            expect(strategy).toBe(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
        });
        it('should return DATABASE_LEVEL when configured', () => {
            jest.spyOn(configService, 'get').mockReturnValue('DATABASE_LEVEL');
            const strategy = service.getStrategy();
            expect(strategy).toBe(isolation_config_1.IsolationStrategy.DATABASE_LEVEL);
        });
        it('should return SCHEMA_LEVEL when configured', () => {
            jest.spyOn(configService, 'get').mockReturnValue('SCHEMA_LEVEL');
            const strategy = service.getStrategy();
            expect(strategy).toBe(isolation_config_1.IsolationStrategy.SCHEMA_LEVEL);
        });
        it('should return TABLE_LEVEL when configured', () => {
            jest.spyOn(configService, 'get').mockReturnValue('TABLE_LEVEL');
            const strategy = service.getStrategy();
            expect(strategy).toBe(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
        });
        it('should throw error for invalid strategy', () => {
            jest.spyOn(configService, 'get').mockReturnValue('INVALID_STRATEGY');
            expect(() => service.getStrategy()).toThrow('Invalid isolation strategy: INVALID_STRATEGY');
        });
    });
    describe('getConnectionConfig', () => {
        beforeEach(() => {
            // 设置默认环境变量
            jest.spyOn(configService, 'get').mockImplementation((key) => {
                const defaults = {
                    PLATFORM_DB_NAME: 'aiofix_platform',
                    EVENTS_DB_NAME: 'aiofix_events',
                    AI_VECTORS_DB_NAME: 'aiofix_ai_vectors',
                    TENANT_DB_PREFIX: 'tenant_',
                    TENANT_SCHEMA_PREFIX: 'tenant_',
                    SHARED_SCHEMA_NAME: 'shared',
                };
                return defaults[key];
            });
        });
        it('should return platform database config for TABLE_LEVEL strategy', () => {
            jest.spyOn(service, 'getStrategy').mockReturnValue(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
            const config = service.getConnectionConfig('tenant-123');
            expect(config).toEqual({
                database: 'aiofix_platform',
                tenantId: 'tenant-123',
            });
        });
        it('should return tenant database config for DATABASE_LEVEL strategy', () => {
            jest.spyOn(service, 'getStrategy').mockReturnValue(isolation_config_1.IsolationStrategy.DATABASE_LEVEL);
            const config = service.getConnectionConfig('tenant-123');
            expect(config).toEqual({
                database: 'tenant_tenant-123',
                tenantId: 'tenant-123',
            });
        });
        it('should return schema config for SCHEMA_LEVEL strategy', () => {
            jest.spyOn(service, 'getStrategy').mockReturnValue(isolation_config_1.IsolationStrategy.SCHEMA_LEVEL);
            const config = service.getConnectionConfig('tenant-123');
            expect(config).toEqual({
                database: 'aiofix_platform',
                schema: 'tenant_tenant-123',
                tenantId: 'tenant-123',
            });
        });
        it('should return platform config when no tenantId provided', () => {
            jest.spyOn(service, 'getStrategy').mockReturnValue(isolation_config_1.IsolationStrategy.TABLE_LEVEL);
            const config = service.getConnectionConfig();
            expect(config).toEqual({
                database: 'aiofix_platform',
            });
        });
    });
    describe('shouldEnableRLS', () => {
        it('should return true by default', () => {
            jest.spyOn(configService, 'get').mockReturnValue(undefined);
            const result = service.shouldEnableRLS();
            expect(result).toBe(true);
        });
        it('should return true when ENABLE_RLS is true', () => {
            jest.spyOn(configService, 'get').mockReturnValue('true');
            const result = service.shouldEnableRLS();
            expect(result).toBe(true);
        });
        it('should return false when ENABLE_RLS is false', () => {
            jest.spyOn(configService, 'get').mockReturnValue('false');
            const result = service.shouldEnableRLS();
            expect(result).toBe(false);
        });
    });
    describe('getDatabaseNames', () => {
        beforeEach(() => {
            jest.spyOn(configService, 'get').mockImplementation((key) => {
                const defaults = {
                    PLATFORM_DB_NAME: 'aiofix_platform',
                    EVENTS_DB_NAME: 'aiofix_events',
                    AI_VECTORS_DB_NAME: 'aiofix_ai_vectors',
                };
                return defaults[key];
            });
        });
        it('should return correct database names', () => {
            expect(service.getPlatformDatabaseName()).toBe('aiofix_platform');
            expect(service.getEventsDatabaseName()).toBe('aiofix_events');
            expect(service.getAiVectorsDatabaseName()).toBe('aiofix_ai_vectors');
        });
    });
    describe('getTenantFieldName', () => {
        it('should return default tenant field name', () => {
            jest.spyOn(configService, 'get').mockReturnValue(undefined);
            const fieldName = service.getTenantFieldName();
            expect(fieldName).toBe('tenant_id');
        });
        it('should return configured tenant field name', () => {
            jest.spyOn(configService, 'get').mockReturnValue('custom_tenant_id');
            const fieldName = service.getTenantFieldName();
            expect(fieldName).toBe('custom_tenant_id');
        });
    });
    describe('shouldAutoAddTenantCondition', () => {
        it('should return true by default', () => {
            jest.spyOn(configService, 'get').mockReturnValue(undefined);
            const result = service.shouldAutoAddTenantCondition();
            expect(result).toBe(true);
        });
        it('should return configured value', () => {
            jest.spyOn(configService, 'get').mockReturnValue('false');
            const result = service.shouldAutoAddTenantCondition();
            expect(result).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,