{"version":3,"names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/core/src/domain/interfaces/event-bus.interface.ts"],"sourcesContent":["import { DomainEvent } from '../domain-event';\nimport { IEventHandler } from './event-handler.interface';\n\n/**\n * @interface EventSubscription\n * @description 事件订阅信息\n */\nexport interface EventSubscription {\n  readonly id: string;\n  readonly eventType: string;\n  readonly handler: IEventHandler;\n  readonly priority: number; // 处理优先级，数字越小优先级越高\n  readonly retryPolicy: RetryPolicy;\n  readonly isActive: boolean;\n  readonly createdAt: Date;\n}\n\n/**\n * @interface RetryPolicy\n * @description 重试策略\n */\nexport interface RetryPolicy {\n  readonly maxRetries: number;\n  readonly retryDelay: number; // 毫秒\n  readonly backoffMultiplier: number; // 退避乘数\n  readonly maxRetryDelay: number; // 最大重试延迟\n}\n\n/**\n * @interface EventBusConfig\n * @description 事件总线配置\n */\nexport interface EventBusConfig {\n  readonly maxConcurrentHandlers: number;\n  readonly defaultRetryPolicy: RetryPolicy;\n  readonly enableDeadLetterQueue: boolean;\n  readonly deadLetterQueueRetentionDays: number;\n  readonly enableEventOrdering: boolean;\n  readonly enableEventDeduplication: boolean;\n}\n\n/**\n * @interface IEventBus\n * @description\n * 事件总线接口，负责协调事件存储和消息队列的集成。\n *\n * 事件总线职责：\n * 1. 协调事件存储和消息队列\n * 2. 提供统一的事件发布接口\n * 3. 管理事件的生命周期\n * 4. 处理事件发布的事务性\n *\n * 集成策略：\n * 1. 同步保存到事件存储\n * 2. 异步发布到消息队列\n * 3. 支持事件重放和恢复\n * 4. 提供事件监控和统计\n *\n * 事务管理：\n * 1. 确保事件存储的原子性\n * 2. 支持消息队列的可靠性\n * 3. 处理跨系统的事务协调\n * 4. 提供失败恢复机制\n *\n * @example\n * ```typescript\n * const eventBus = new EventBus(eventStore, messageQueue);\n * await eventBus.publishAll(events);\n * ```\n * @since 1.0.0\n */\nexport interface IEventBus {\n  /**\n   * @method publish\n   * @description 发布单个领域事件\n   * @param {DomainEvent} event 领域事件\n   * @returns {Promise<void>}\n   * @throws {EventPublishError} 当事件发布失败时抛出\n   *\n   * 发布流程：\n   * 1. 验证事件的有效性\n   * 2. 同步保存到事件存储\n   * 3. 异步发布到消息队列\n   * 4. 记录发布结果\n   */\n  publish(event: DomainEvent): Promise<void>;\n\n  /**\n   * @method publishAll\n   * @description 发布所有领域事件，协调事件存储和消息队列\n   * @param {DomainEvent[]} events 领域事件列表\n   * @returns {Promise<void>}\n   * @throws {EventPublishError} 当事件发布失败时抛出\n   *\n   * 发布流程：\n   * 1. 验证事件列表的有效性\n   * 2. 同步保存到事件存储\n   * 3. 异步发布到消息队列\n   * 4. 记录发布结果\n   */\n  publishAll(events: DomainEvent[]): Promise<void>;\n\n  /**\n   * @method subscribe\n   * @description 订阅事件\n   * @param {string} eventType 事件类型\n   * @param {IEventHandler} handler 事件处理器\n   * @param {number} [priority=100] 处理优先级\n   * @param {RetryPolicy} [retryPolicy] 重试策略\n   * @returns {Promise<string>} 订阅ID\n   */\n  subscribe(\n    eventType: string,\n    handler: IEventHandler,\n    priority?: number,\n    retryPolicy?: RetryPolicy,\n  ): Promise<string>;\n\n  /**\n   * @method unsubscribe\n   * @description 取消订阅\n   * @param {string} subscriptionId 订阅ID\n   * @returns {Promise<void>}\n   */\n  unsubscribe(subscriptionId: string): Promise<void>;\n\n  /**\n   * @method getSubscriptions\n   * @description 获取事件订阅列表\n   * @param {string} [eventType] 事件类型，可选\n   * @returns {Promise<EventSubscription[]>} 订阅列表\n   */\n  getSubscriptions(eventType?: string): Promise<EventSubscription[]>;\n\n  /**\n   * @method isSubscribed\n   * @description 检查是否已订阅指定事件类型\n   * @param {string} eventType 事件类型\n   * @returns {Promise<boolean>} 是否已订阅\n   */\n  isSubscribed(eventType: string): Promise<boolean>;\n\n  /**\n   * @method replayEvents\n   * @description 重放事件\n   * @param {string} aggregateId 聚合根ID\n   * @param {number} fromVersion 起始版本号\n   * @param {number} [toVersion] 结束版本号，可选\n   * @returns {Promise<void>}\n   */\n  replayEvents(\n    aggregateId: string,\n    fromVersion: number,\n    toVersion?: number,\n  ): Promise<void>;\n\n  /**\n   * @method replayEventsByType\n   * @description 根据事件类型重放事件\n   * @param {string} eventType 事件类型\n   * @param {Date} fromDate 开始日期\n   * @param {Date} toDate 结束日期\n   * @returns {Promise<void>}\n   */\n  replayEventsByType(\n    eventType: string,\n    fromDate: Date,\n    toDate: Date,\n  ): Promise<void>;\n\n  /**\n   * @method getEventBusStatistics\n   * @description 获取事件总线统计信息\n   * @returns {Promise<EventBusStatistics>} 统计信息\n   */\n  getEventBusStatistics(): Promise<EventBusStatistics>;\n\n  /**\n   * @method start\n   * @description 启动事件总线\n   * @returns {Promise<void>}\n   */\n  start(): Promise<void>;\n\n  /**\n   * @method stop\n   * @description 停止事件总线\n   * @returns {Promise<void>}\n   */\n  stop(): Promise<void>;\n\n  /**\n   * @method isRunning\n   * @description 检查事件总线是否正在运行\n   * @returns {boolean} 是否正在运行\n   */\n  isRunning(): boolean;\n}\n\n/**\n * @interface EventBusStatistics\n * @description 事件总线统计信息\n */\nexport interface EventBusStatistics {\n  readonly totalEventsPublished: number;\n  readonly totalEventsProcessed: number;\n  readonly totalEventsFailed: number;\n  readonly activeSubscriptions: number;\n  readonly averageProcessingTime: number; // 毫秒\n  readonly eventsPerSecond: number;\n  readonly deadLetterQueueSize: number;\n  readonly retryQueueSize: number;\n  readonly uptime: number; // 秒\n}\n"],"mappings":"","ignoreList":[]}