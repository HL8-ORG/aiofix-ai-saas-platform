{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/repositories/tenant-aware.repository.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/repositories/tenant-aware.repository.spec.ts"],"sourcesContent":["/**\n * @file tenant-aware.repository.spec.ts\n * @description 租户感知仓储单元测试\n */\n\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TenantAwareRepository } from './tenant-aware.repository';\nimport {\n  IsolationConfigService,\n  IsolationStrategy,\n} from '../config/isolation.config';\nimport { IDatabaseAdapter } from '../interfaces/database.interface';\n\n// Mock database adapter\nconst mockDatabaseAdapter: jest.Mocked<IDatabaseAdapter> = {\n  name: 'test-adapter',\n  type: 'postgresql',\n  isConnected: true,\n  config: {} as any,\n  eventEmitter: {} as any,\n  connect: jest.fn(),\n  disconnect: jest.fn(),\n  query: jest.fn(),\n  execute: jest.fn(),\n  transaction: jest.fn(),\n  getHealth: jest.fn(),\n  getStats: jest.fn(),\n  resetStats: jest.fn(),\n  getConnection: jest.fn(),\n  ping: jest.fn(),\n  setTenantContext: jest.fn(),\n  getTenantContext: jest.fn(),\n  setDefaultSchema: jest.fn(),\n  getDefaultSchema: jest.fn(),\n  enableRowLevelSecurity: jest.fn(),\n  disableRowLevelSecurity: jest.fn(),\n  isRowLevelSecurityEnabled: jest.fn(),\n};\n\n// Test entity interface\ninterface TestEntity {\n  id: string;\n  name: string;\n  tenant_id?: string;\n  created_at: Date;\n  updated_at: Date;\n}\n\n// Concrete implementation for testing\nclass TestTenantAwareRepository extends TenantAwareRepository<TestEntity> {\n  constructor(\n    databaseAdapter: IDatabaseAdapter,\n    isolationConfig: IsolationConfigService,\n  ) {\n    super(databaseAdapter, isolationConfig, 'test_entities');\n  }\n\n  protected mapRowToEntity(row: any): TestEntity {\n    return {\n      id: row.id,\n      name: row.name,\n      tenant_id: row.tenant_id,\n      created_at: new Date(row.created_at),\n      updated_at: new Date(row.updated_at),\n    };\n  }\n\n  protected mapEntityToRow(entity: TestEntity): any {\n    return {\n      id: entity.id,\n      name: entity.name,\n      tenant_id: entity.tenant_id,\n      created_at: entity.created_at,\n      updated_at: entity.updated_at,\n    };\n  }\n}\n\ndescribe('TenantAwareRepository', () => {\n  let repository: TestTenantAwareRepository;\n  let isolationConfig: IsolationConfigService;\n  let databaseAdapter: jest.Mocked<IDatabaseAdapter>;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [ConfigModule],\n      providers: [\n        IsolationConfigService,\n        {\n          provide: 'IDatabaseAdapter',\n          useValue: mockDatabaseAdapter,\n        },\n      ],\n    }).compile();\n\n    isolationConfig = module.get<IsolationConfigService>(\n      IsolationConfigService,\n    );\n    databaseAdapter = module.get('IDatabaseAdapter');\n\n    repository = new TestTenantAwareRepository(\n      databaseAdapter,\n      isolationConfig,\n    );\n\n    // 重置所有 mock\n    jest.clearAllMocks();\n  });\n\n  describe('findAll', () => {\n    it('should find all entities with tenant isolation', async () => {\n      const mockRows = [\n        {\n          id: '1',\n          name: 'Entity 1',\n          tenant_id: 'tenant-123',\n          created_at: '2024-01-01',\n          updated_at: '2024-01-01',\n        },\n        {\n          id: '2',\n          name: 'Entity 2',\n          tenant_id: 'tenant-123',\n          created_at: '2024-01-02',\n          updated_at: '2024-01-02',\n        },\n      ];\n\n      databaseAdapter.query.mockResolvedValue({ rows: mockRows } as any);\n      jest\n        .spyOn(isolationConfig, 'getStrategy')\n        .mockReturnValue(IsolationStrategy.TABLE_LEVEL);\n      jest\n        .spyOn(isolationConfig, 'getTenantFieldName')\n        .mockReturnValue('tenant_id');\n      jest\n        .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')\n        .mockReturnValue(true);\n\n      const result = await repository.findAll('tenant-123');\n\n      expect(databaseAdapter.query).toHaveBeenCalledWith(\n        'SELECT * FROM test_entities WHERE tenant_id = $1',\n        ['tenant-123'],\n        undefined,\n      );\n      expect(result).toHaveLength(2);\n      expect(result[0].id).toBe('1');\n      expect(result[0].tenant_id).toBe('tenant-123');\n    });\n\n    it('should find all entities without tenant isolation for platform level', async () => {\n      const mockRows = [\n        {\n          id: '1',\n          name: 'Entity 1',\n          tenant_id: 'tenant-123',\n          created_at: '2024-01-01',\n          updated_at: '2024-01-01',\n        },\n        {\n          id: '2',\n          name: 'Entity 2',\n          tenant_id: 'tenant-456',\n          created_at: '2024-01-02',\n          updated_at: '2024-01-02',\n        },\n      ];\n\n      databaseAdapter.query.mockResolvedValue({ rows: mockRows } as any);\n      jest\n        .spyOn(isolationConfig, 'getStrategy')\n        .mockReturnValue(IsolationStrategy.DATABASE_LEVEL);\n\n      const result = await repository.findAll();\n\n      expect(databaseAdapter.query).toHaveBeenCalledWith(\n        'SELECT * FROM test_entities',\n        [],\n        undefined,\n      );\n      expect(result).toHaveLength(2);\n    });\n  });\n\n  describe('findById', () => {\n    it('should find entity by ID with tenant isolation', async () => {\n      const mockRow = {\n        id: '1',\n        name: 'Entity 1',\n        tenant_id: 'tenant-123',\n        created_at: '2024-01-01',\n        updated_at: '2024-01-01',\n      };\n\n      databaseAdapter.query.mockResolvedValue({ rows: [mockRow] } as any);\n      jest\n        .spyOn(isolationConfig, 'getStrategy')\n        .mockReturnValue(IsolationStrategy.TABLE_LEVEL);\n      jest\n        .spyOn(isolationConfig, 'getTenantFieldName')\n        .mockReturnValue('tenant_id');\n      jest\n        .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')\n        .mockReturnValue(true);\n\n      const result = await repository.findById('1', 'tenant-123');\n\n      expect(databaseAdapter.query).toHaveBeenCalledWith(\n        'SELECT * FROM test_entities WHERE id = $1 AND tenant_id = $2',\n        ['1', 'tenant-123'],\n        undefined,\n      );\n      expect(result).toBeDefined();\n      expect(result?.id).toBe('1');\n    });\n\n    it('should return null when entity not found', async () => {\n      databaseAdapter.query.mockResolvedValue({ rows: [] } as any);\n      jest\n        .spyOn(isolationConfig, 'getStrategy')\n        .mockReturnValue(IsolationStrategy.TABLE_LEVEL);\n      jest\n        .spyOn(isolationConfig, 'getTenantFieldName')\n        .mockReturnValue('tenant_id');\n      jest\n        .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')\n        .mockReturnValue(true);\n\n      const result = await repository.findById('1', 'tenant-123');\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('create', () => {\n    it('should create entity with tenant ID', async () => {\n      const entity: TestEntity = {\n        id: '1',\n        name: 'New Entity',\n        tenant_id: 'tenant-123',\n        created_at: new Date('2024-01-01'),\n        updated_at: new Date('2024-01-01'),\n      };\n\n      databaseAdapter.execute.mockResolvedValue({ rows: [entity] } as any);\n      jest\n        .spyOn(isolationConfig, 'getStrategy')\n        .mockReturnValue(IsolationStrategy.TABLE_LEVEL);\n      jest\n        .spyOn(isolationConfig, 'getTenantFieldName')\n        .mockReturnValue('tenant_id');\n\n      const result = await repository.create(entity, 'tenant-123');\n\n      expect(databaseAdapter.execute).toHaveBeenCalledWith(\n        'INSERT INTO test_entities (id, name, tenant_id, created_at, updated_at) VALUES ($1, $2, $3, $4, $5) RETURNING *',\n        ['1', 'New Entity', 'tenant-123', entity.created_at, entity.updated_at],\n        undefined,\n      );\n      expect(result).toBeDefined();\n    });\n  });\n\n  describe('update', () => {\n    it('should update entity with tenant isolation', async () => {\n      const entity: TestEntity = {\n        id: '1',\n        name: 'Updated Entity',\n        tenant_id: 'tenant-123',\n        created_at: new Date('2024-01-01'),\n        updated_at: new Date('2024-01-02'),\n      };\n\n      databaseAdapter.execute.mockResolvedValue({ rows: [entity] } as any);\n      jest\n        .spyOn(isolationConfig, 'getStrategy')\n        .mockReturnValue(IsolationStrategy.TABLE_LEVEL);\n      jest\n        .spyOn(isolationConfig, 'getTenantFieldName')\n        .mockReturnValue('tenant_id');\n      jest\n        .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')\n        .mockReturnValue(true);\n\n      const result = await repository.update('1', entity, 'tenant-123');\n\n      expect(databaseAdapter.execute).toHaveBeenCalledWith(\n        'UPDATE test_entities SET name = $1, updated_at = $2 WHERE id = $3 AND tenant_id = $4 RETURNING *',\n        ['Updated Entity', entity.updated_at, '1', 'tenant-123'],\n        undefined,\n      );\n      expect(result).toBeDefined();\n    });\n  });\n\n  describe('delete', () => {\n    it('should delete entity with tenant isolation', async () => {\n      databaseAdapter.execute.mockResolvedValue({ rowCount: 1 } as any);\n      jest\n        .spyOn(isolationConfig, 'getStrategy')\n        .mockReturnValue(IsolationStrategy.TABLE_LEVEL);\n      jest\n        .spyOn(isolationConfig, 'getTenantFieldName')\n        .mockReturnValue('tenant_id');\n      jest\n        .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')\n        .mockReturnValue(true);\n\n      const result = await repository.delete('1', 'tenant-123');\n\n      expect(databaseAdapter.execute).toHaveBeenCalledWith(\n        'DELETE FROM test_entities WHERE id = $1 AND tenant_id = $2',\n        ['1', 'tenant-123'],\n        undefined,\n      );\n      expect(result).toBe(true);\n    });\n\n    it('should return false when no rows affected', async () => {\n      databaseAdapter.execute.mockResolvedValue({ rowCount: 0 } as any);\n      jest\n        .spyOn(isolationConfig, 'getStrategy')\n        .mockReturnValue(IsolationStrategy.TABLE_LEVEL);\n      jest\n        .spyOn(isolationConfig, 'getTenantFieldName')\n        .mockReturnValue('tenant_id');\n      jest\n        .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')\n        .mockReturnValue(true);\n\n      const result = await repository.delete('1', 'tenant-123');\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('count', () => {\n    it('should count entities with tenant isolation', async () => {\n      databaseAdapter.query.mockResolvedValue({\n        rows: [{ count: '5' }],\n      } as any);\n      jest\n        .spyOn(isolationConfig, 'getStrategy')\n        .mockReturnValue(IsolationStrategy.TABLE_LEVEL);\n      jest\n        .spyOn(isolationConfig, 'getTenantFieldName')\n        .mockReturnValue('tenant_id');\n      jest\n        .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')\n        .mockReturnValue(true);\n\n      const result = await repository.count('tenant-123');\n\n      expect(databaseAdapter.query).toHaveBeenCalledWith(\n        'SELECT COUNT(*) as count FROM test_entities WHERE tenant_id = $1',\n        ['tenant-123'],\n        undefined,\n      );\n      expect(result).toBe(5);\n    });\n  });\n\n  describe('exists', () => {\n    it('should return true when entity exists', async () => {\n      databaseAdapter.query.mockResolvedValue({\n        rows: [{ count: '1' }],\n      } as any);\n      jest\n        .spyOn(isolationConfig, 'getStrategy')\n        .mockReturnValue(IsolationStrategy.TABLE_LEVEL);\n      jest\n        .spyOn(isolationConfig, 'getTenantFieldName')\n        .mockReturnValue('tenant_id');\n      jest\n        .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')\n        .mockReturnValue(true);\n\n      const result = await repository.exists('1', 'tenant-123');\n\n      expect(databaseAdapter.query).toHaveBeenCalledWith(\n        'SELECT COUNT(*) as count FROM test_entities WHERE id = $1 AND tenant_id = $2',\n        ['1', 'tenant-123'],\n        undefined,\n      );\n      expect(result).toBe(true);\n    });\n\n    it('should return false when entity does not exist', async () => {\n      databaseAdapter.query.mockResolvedValue({\n        rows: [{ count: '0' }],\n      } as any);\n      jest\n        .spyOn(isolationConfig, 'getStrategy')\n        .mockReturnValue(IsolationStrategy.TABLE_LEVEL);\n      jest\n        .spyOn(isolationConfig, 'getTenantFieldName')\n        .mockReturnValue('tenant_id');\n      jest\n        .spyOn(isolationConfig, 'shouldAutoAddTenantCondition')\n        .mockReturnValue(true);\n\n      const result = await repository.exists('1', 'tenant-123');\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('createTenantSpecificRepository', () => {\n    it('should create tenant-specific repository', () => {\n      const tenantRepo =\n        repository.createTenantSpecificRepository('tenant-123');\n\n      expect(tenantRepo).toBeDefined();\n      expect(tenantRepo).toBeInstanceOf(TestTenantAwareRepository);\n    });\n  });\n});\n"],"version":3}