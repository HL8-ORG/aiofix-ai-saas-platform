ea60dd6d06c64b3993ab936872133a7c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types="jest" />
/* eslint-env jest */
const globals_1 = require("@jest/globals");
(0, globals_1.describe)('Database Interfaces', () => {
    (0, globals_1.describe)('DatabaseConnection', () => {
        (0, globals_1.it)('应该定义正确的连接状态类型', () => {
            const validStatuses = [
                'connected',
                'disconnected',
                'connecting',
                'error',
            ];
            validStatuses.forEach(status => {
                (0, globals_1.expect)(typeof status).toBe('string');
            });
        });
        (0, globals_1.it)('应该包含所有必需的属性', () => {
            const connection = {
                id: 'test-connection-id',
                status: 'connected',
                config: {
                    type: 'postgresql',
                    host: 'localhost',
                    port: 5432,
                    username: 'test',
                    password: 'test',
                    database: 'test',
                },
                instance: {},
                lastActivity: new Date(),
            };
            (0, globals_1.expect)(connection.id).toBeDefined();
            (0, globals_1.expect)(connection.status).toBeDefined();
            (0, globals_1.expect)(connection.config).toBeDefined();
            (0, globals_1.expect)(connection.instance).toBeDefined();
            (0, globals_1.expect)(connection.lastActivity).toBeDefined();
        });
        (0, globals_1.it)('应该支持可选的错误属性', () => {
            const connectionWithError = {
                id: 'test-connection-id',
                status: 'error',
                config: {
                    type: 'postgresql',
                    host: 'localhost',
                    port: 5432,
                    username: 'test',
                    password: 'test',
                    database: 'test',
                },
                instance: {},
                lastActivity: new Date(),
                error: 'Connection failed',
            };
            (0, globals_1.expect)(connectionWithError.error).toBe('Connection failed');
        });
    });
    (0, globals_1.describe)('DatabaseConfig', () => {
        (0, globals_1.it)('应该支持所有数据库类型', () => {
            const validTypes = [
                'postgresql',
                'mysql',
                'mongodb',
            ];
            validTypes.forEach(type => {
                (0, globals_1.expect)(typeof type).toBe('string');
            });
        });
        (0, globals_1.it)('应该包含所有必需的配置属性', () => {
            const config = {
                type: 'postgresql',
                host: 'localhost',
                port: 5432,
                username: 'test',
                password: 'test',
                database: 'test',
            };
            (0, globals_1.expect)(config.type).toBeDefined();
            (0, globals_1.expect)(config.host).toBeDefined();
            (0, globals_1.expect)(config.port).toBeDefined();
            (0, globals_1.expect)(config.username).toBeDefined();
            (0, globals_1.expect)(config.password).toBeDefined();
            (0, globals_1.expect)(config.database).toBeDefined();
        });
        (0, globals_1.it)('应该支持可选的配置属性', () => {
            const configWithOptions = {
                type: 'postgresql',
                host: 'localhost',
                port: 5432,
                username: 'test',
                password: 'test',
                database: 'test',
                schema: 'public',
                ssl: { rejectUnauthorized: false },
                pool: {
                    min: 2,
                    max: 10,
                    acquireTimeoutMillis: 60000,
                    createTimeoutMillis: 30000,
                    destroyTimeoutMillis: 5000,
                    idleTimeoutMillis: 30000,
                    reapIntervalMillis: 1000,
                    createRetryIntervalMillis: 200,
                },
                options: {
                    application_name: 'test-app',
                },
            };
            (0, globals_1.expect)(configWithOptions.schema).toBe('public');
            (0, globals_1.expect)(configWithOptions.ssl).toBeDefined();
            (0, globals_1.expect)(configWithOptions.pool).toBeDefined();
            (0, globals_1.expect)(configWithOptions.options).toBeDefined();
        });
    });
    (0, globals_1.describe)('DatabaseHealth', () => {
        (0, globals_1.it)('应该包含所有健康检查属性', () => {
            const health = {
                healthy: true,
                connected: true,
                responseTime: 15,
                lastCheck: new Date(),
                poolStatus: {
                    total: 10,
                    idle: 8,
                    active: 2,
                    waiting: 0,
                },
            };
            (0, globals_1.expect)(health.healthy).toBeDefined();
            (0, globals_1.expect)(health.connected).toBeDefined();
            (0, globals_1.expect)(health.responseTime).toBeDefined();
            (0, globals_1.expect)(health.lastCheck).toBeDefined();
            (0, globals_1.expect)(health.poolStatus).toBeDefined();
        });
        (0, globals_1.it)('应该支持可选的错误属性', () => {
            const healthWithError = {
                healthy: false,
                connected: false,
                responseTime: 0,
                lastCheck: new Date(),
                error: 'Connection timeout',
            };
            (0, globals_1.expect)(healthWithError.error).toBe('Connection timeout');
        });
    });
    (0, globals_1.describe)('DatabaseStats', () => {
        (0, globals_1.it)('应该包含所有统计属性', () => {
            const stats = {
                totalQueries: 1000,
                successfulQueries: 950,
                failedQueries: 50,
                averageResponseTime: 45,
                maxResponseTime: 200,
                minResponseTime: 5,
                activeConnections: 25,
                idleConnections: 75,
                lastReset: new Date(),
            };
            (0, globals_1.expect)(stats.totalQueries).toBeDefined();
            (0, globals_1.expect)(stats.successfulQueries).toBeDefined();
            (0, globals_1.expect)(stats.failedQueries).toBeDefined();
            (0, globals_1.expect)(stats.averageResponseTime).toBeDefined();
            (0, globals_1.expect)(stats.maxResponseTime).toBeDefined();
            (0, globals_1.expect)(stats.minResponseTime).toBeDefined();
            (0, globals_1.expect)(stats.activeConnections).toBeDefined();
            (0, globals_1.expect)(stats.idleConnections).toBeDefined();
            (0, globals_1.expect)(stats.lastReset).toBeDefined();
        });
    });
    (0, globals_1.describe)('QueryOptions', () => {
        (0, globals_1.it)('应该支持所有查询选项', () => {
            const options = {
                timeout: 30000,
                transaction: true,
                params: ['param1', 'param2'],
                tag: 'test-query',
                logQuery: true,
            };
            (0, globals_1.expect)(options.timeout).toBeDefined();
            (0, globals_1.expect)(options.transaction).toBeDefined();
            (0, globals_1.expect)(options.params).toBeDefined();
            (0, globals_1.expect)(options.tag).toBeDefined();
            (0, globals_1.expect)(options.logQuery).toBeDefined();
        });
    });
    (0, globals_1.describe)('TransactionOptions', () => {
        (0, globals_1.it)('应该支持所有事务选项', () => {
            const options = {
                isolationLevel: 'read committed',
                timeout: 60000,
                readOnly: false,
                tag: 'test-transaction',
            };
            (0, globals_1.expect)(options.isolationLevel).toBeDefined();
            (0, globals_1.expect)(options.timeout).toBeDefined();
            (0, globals_1.expect)(options.readOnly).toBeDefined();
            (0, globals_1.expect)(options.tag).toBeDefined();
        });
    });
    (0, globals_1.describe)('IDatabaseAdapter', () => {
        (0, globals_1.it)('应该定义所有必需的适配器方法', () => {
            // 这是一个类型检查测试，确保接口定义了所有必需的方法
            const adapter = {
                name: 'test-adapter',
                type: 'postgresql',
                eventEmitter: {},
                config: {},
                isConnected: true,
                connect: globals_1.jest.fn(),
                disconnect: globals_1.jest.fn(),
                query: globals_1.jest.fn(),
                execute: globals_1.jest.fn(),
                transaction: globals_1.jest.fn(),
                getHealth: globals_1.jest.fn(),
                getStats: globals_1.jest.fn(),
                getConnection: globals_1.jest.fn(),
                ping: globals_1.jest.fn(),
                resetStats: globals_1.jest.fn(),
            };
            (0, globals_1.expect)(adapter.name).toBeDefined();
            (0, globals_1.expect)(adapter.type).toBeDefined();
            (0, globals_1.expect)(adapter.isConnected).toBeDefined();
            (0, globals_1.expect)(typeof adapter.connect).toBe('function');
            (0, globals_1.expect)(typeof adapter.disconnect).toBe('function');
            (0, globals_1.expect)(typeof adapter.query).toBe('function');
            (0, globals_1.expect)(typeof adapter.execute).toBe('function');
            (0, globals_1.expect)(typeof adapter.transaction).toBe('function');
            (0, globals_1.expect)(typeof adapter.getHealth).toBe('function');
            (0, globals_1.expect)(typeof adapter.getStats).toBe('function');
            (0, globals_1.expect)(typeof adapter.getConnection).toBe('function');
            (0, globals_1.expect)(typeof adapter.ping).toBe('function');
            (0, globals_1.expect)(typeof adapter.resetStats).toBe('function');
        });
    });
    (0, globals_1.describe)('IDatabaseManager', () => {
        (0, globals_1.it)('应该定义所有必需的管理器方法', () => {
            // 这是一个类型检查测试，确保接口定义了所有必需的方法
            const manager = {
                name: 'test-manager',
                adapterCount: 0,
                isInitialized: false,
                addAdapter: globals_1.jest.fn(),
                removeAdapter: globals_1.jest.fn(),
                getAdapter: globals_1.jest.fn(),
                getDefaultAdapter: globals_1.jest.fn(),
                connectAll: globals_1.jest.fn(),
                disconnectAll: globals_1.jest.fn(),
                getHealth: globals_1.jest.fn(),
                getStats: globals_1.jest.fn(),
            };
            (0, globals_1.expect)(manager.name).toBeDefined();
            (0, globals_1.expect)(manager.adapterCount).toBeDefined();
            (0, globals_1.expect)(manager.isInitialized).toBeDefined();
            (0, globals_1.expect)(typeof manager.addAdapter).toBe('function');
            (0, globals_1.expect)(typeof manager.removeAdapter).toBe('function');
            (0, globals_1.expect)(typeof manager.getAdapter).toBe('function');
            (0, globals_1.expect)(typeof manager.getDefaultAdapter).toBe('function');
            (0, globals_1.expect)(typeof manager.connectAll).toBe('function');
            (0, globals_1.expect)(typeof manager.disconnectAll).toBe('function');
            (0, globals_1.expect)(typeof manager.getHealth).toBe('function');
            (0, globals_1.expect)(typeof manager.getStats).toBe('function');
        });
    });
    (0, globals_1.describe)('IDatabaseFactory', () => {
        (0, globals_1.it)('应该定义所有必需的工厂方法', () => {
            // 这是一个类型检查测试，确保接口定义了所有必需的方法
            const factory = {
                createAdapter: globals_1.jest.fn(),
                createManager: globals_1.jest.fn(),
                validateConfig: globals_1.jest.fn(),
            };
            (0, globals_1.expect)(typeof factory.createAdapter).toBe('function');
            (0, globals_1.expect)(typeof factory.createManager).toBe('function');
            (0, globals_1.expect)(typeof factory.validateConfig).toBe('function');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,