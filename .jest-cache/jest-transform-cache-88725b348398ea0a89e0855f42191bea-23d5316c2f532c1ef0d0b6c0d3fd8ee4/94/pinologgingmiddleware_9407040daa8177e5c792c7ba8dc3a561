644244d9665a818d31078ff1db68ae88
"use strict";
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinoLoggingMiddleware = void 0;
const common_1 = require("@nestjs/common");
const uuid_1 = require("uuid");
const logging_interface_1 = require("../interfaces/logging.interface");
/**
 * @class PinoLoggingMiddleware
 * @description Pino日志中间件，用于记录HTTP请求和响应日志
 *
 * 主要功能：
 * 1. 自动生成请求ID
 * 2. 记录请求详情（方法、URL、头部、查询参数、请求体）
 * 3. 记录响应详情（状态码、响应时间、响应大小）
 * 4. 支持多租户和用户上下文
 * 5. 错误日志记录
 * 6. 性能监控
 */
let PinoLoggingMiddleware = (() => {
    let _classDecorators = [(0, common_1.Injectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    var PinoLoggingMiddleware = _classThis = class {
        constructor(logger) {
            this.logger = logger;
        }
        /**
         * @method use
         * @description 中间件主方法，处理HTTP请求和响应日志
         * @param {FastifyRequest} req Fastify请求对象
         * @param {FastifyReply} res Fastify响应对象
         * @param {() => void} next 下一个中间件函数
         */
        use(req, res, next) {
            const startTime = Date.now();
            const requestId = this.generateRequestId();
            const tenantId = this.extractTenantId(req);
            const userId = this.extractUserId(req);
            // 构建请求日志数据
            const requestLogData = {
                requestId,
                method: req.method,
                url: req.url,
                headers: req.headers,
                query: req.query,
                body: req.body,
                ip: this.getClientIp(req),
                userAgent: req.headers['user-agent'] || '',
                tenantId,
                userId,
                timestamp: new Date(),
            };
            // 记录请求日志
            this.logRequest(requestLogData);
            // 设置响应变量
            let responseBody;
            let responseSize = 0;
            // Fastify的响应处理
            const originalSend = res.send;
            res.send = (payload) => {
                if (payload && !responseBody) {
                    responseBody = payload;
                    responseSize =
                        typeof payload === 'string'
                            ? payload.length
                            : JSON.stringify(payload).length;
                }
                // 记录响应日志
                const duration = Date.now() - startTime;
                const responseLogData = {
                    ...requestLogData,
                    statusCode: res.statusCode,
                    duration,
                    responseSize,
                };
                // 异步记录日志，不阻塞响应
                setImmediate(() => {
                    this.logResponse(responseLogData);
                });
                return originalSend.call(res, payload);
            };
            next();
        }
        /**
         * @private
         * @method generateRequestId
         * @description 生成请求ID
         * @returns {string} 请求ID
         */
        generateRequestId() {
            return (0, uuid_1.v4)();
        }
        /**
         * @private
         * @method extractTenantId
         * @description 从请求中提取租户ID
         * @param {FastifyRequest} req Fastify请求对象
         * @returns {string | undefined} 租户ID
         */
        extractTenantId(req) {
            // 从请求头中提取
            const headerTenantId = req.headers['x-tenant-id'] || req.headers['X-Tenant-ID'];
            if (headerTenantId)
                return String(headerTenantId);
            // 从查询参数中提取
            const queryTenantId = req.query?.tenantId ||
                req.query?.tenant_id;
            if (queryTenantId)
                return String(queryTenantId);
            // 从请求体中提取
            const bodyTenantId = req.body?.tenantId ||
                req.body?.tenant_id;
            if (bodyTenantId)
                return String(bodyTenantId);
            return undefined;
        }
        /**
         * @private
         * @method extractUserId
         * @description 从请求中提取用户ID
         * @param {FastifyRequest} req Fastify请求对象
         * @returns {string | undefined} 用户ID
         */
        extractUserId(req) {
            // 从请求头中提取
            const headerUserId = req.headers['x-user-id'] || req.headers['X-User-ID'];
            if (headerUserId)
                return String(headerUserId);
            // 从查询参数中提取
            const queryUserId = req.query?.userId ||
                req.query?.user_id;
            if (queryUserId)
                return String(queryUserId);
            // 从请求体中提取
            const bodyUserId = req.body?.userId ||
                req.body?.user_id;
            if (bodyUserId)
                return String(bodyUserId);
            return undefined;
        }
        /**
         * @private
         * @method getClientIp
         * @description 获取客户端IP地址
         * @param {FastifyRequest} req Fastify请求对象
         * @returns {string} 客户端IP地址
         */
        getClientIp(req) {
            return (req.headers['x-forwarded-for'] ||
                req.headers['x-real-ip'] ||
                req.ip ||
                req.socket.remoteAddress ||
                'unknown');
        }
        /**
         * @private
         * @method logRequest
         * @description 记录请求日志
         * @param {RequestLogData} data 请求日志数据
         */
        logRequest(data) {
            this.logger.info('HTTP Request', logging_interface_1.LogContext.HTTP_REQUEST, {
                requestId: data.requestId,
                method: data.method,
                url: data.url,
                ip: data.ip,
                userAgent: data.userAgent,
                tenantId: data.tenantId,
                userId: data.userId,
                query: data.query,
                body: this.sanitizeBody(data.body),
                headers: this.sanitizeHeaders(data.headers),
            });
        }
        /**
         * @private
         * @method logResponse
         * @description 记录响应日志
         * @param {ResponseLogData} data 响应日志数据
         */
        logResponse(data) {
            const logLevel = data.statusCode >= 400 ? 'warn' : 'info';
            const logMethod = this.logger[logLevel];
            logMethod.call(this.logger, 'HTTP Response', logging_interface_1.LogContext.HTTP_REQUEST, {
                requestId: data.requestId,
                method: data.method,
                url: data.url,
                statusCode: data.statusCode,
                duration: data.duration,
                responseSize: data.responseSize,
                tenantId: data.tenantId,
                userId: data.userId,
            });
        }
        /**
         * @private
         * @method logError
         * @description 记录错误日志
         * @param {ResponseLogData} data 错误日志数据
         */
        // private logError(data: ResponseLogData): void {
        //   this.logger.error('HTTP Error', LogContext.HTTP_REQUEST, {
        //     requestId: data.requestId,
        //     method: data.method,
        //     url: data.url,
        //     statusCode: data.statusCode,
        //     duration: data.duration,
        //     error: data.error?.message,
        //     stack: data.error?.stack,
        //     tenantId: data.tenantId,
        //     userId: data.userId,
        //   });
        // }
        /**
         * @private
         * @method sanitizeBody
         * @description 清理请求体中的敏感信息
         * @param {unknown} body 请求体
         * @returns {unknown} 清理后的请求体
         */
        sanitizeBody(body) {
            if (!body || typeof body !== 'object')
                return body;
            const sensitiveFields = ['password', 'token', 'secret', 'key'];
            const sanitized = { ...body };
            sensitiveFields.forEach(field => {
                if (sanitized[field]) {
                    sanitized[field] = '***REDACTED***';
                }
            });
            return sanitized;
        }
        /**
         * @private
         * @method sanitizeHeaders
         * @description 清理请求头中的敏感信息
         * @param {Record<string, string>} headers 请求头
         * @returns {Record<string, string>} 清理后的请求头
         */
        sanitizeHeaders(headers) {
            const sensitiveHeaders = ['authorization', 'cookie', 'x-api-key'];
            const sanitized = { ...headers };
            sensitiveHeaders.forEach(header => {
                if (sanitized[header]) {
                    sanitized[header] = '***REDACTED***';
                }
            });
            return sanitized;
        }
    };
    __setFunctionName(_classThis, "PinoLoggingMiddleware");
    (() => {
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        PinoLoggingMiddleware = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return PinoLoggingMiddleware = _classThis;
})();
exports.PinoLoggingMiddleware = PinoLoggingMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,