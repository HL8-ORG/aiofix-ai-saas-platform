{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/interfaces/database.interface.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/database/src/interfaces/database.interface.spec.ts"],"sourcesContent":["/// <reference types=\"jest\" />\n/* eslint-env jest */\nimport { describe, it, expect, jest } from '@jest/globals';\n/**\n * @file database.interface.spec.ts\n * @description 数据库接口单元测试\n *\n * 测试数据库接口的类型定义、结构验证和接口一致性。\n */\n\nimport {\n  DatabaseConnection,\n  DatabaseConfig,\n  DatabaseHealth,\n  DatabaseStats,\n  QueryOptions,\n  TransactionOptions,\n  IDatabaseAdapter,\n  IDatabaseManager,\n  IDatabaseFactory,\n} from './database.interface';\n\ndescribe('Database Interfaces', () => {\n  describe('DatabaseConnection', () => {\n    it('应该定义正确的连接状态类型', () => {\n      const validStatuses: DatabaseConnection['status'][] = [\n        'connected',\n        'disconnected',\n        'connecting',\n        'error',\n      ];\n\n      validStatuses.forEach(status => {\n        expect(typeof status).toBe('string');\n      });\n    });\n\n    it('应该包含所有必需的属性', () => {\n      const connection: DatabaseConnection = {\n        id: 'test-connection-id',\n        status: 'connected',\n        config: {\n          type: 'postgresql',\n          host: 'localhost',\n          port: 5432,\n          username: 'test',\n          password: 'test',\n          database: 'test',\n        },\n        instance: {} as any,\n        lastActivity: new Date(),\n      };\n\n      expect(connection.id).toBeDefined();\n      expect(connection.status).toBeDefined();\n      expect(connection.config).toBeDefined();\n      expect(connection.instance).toBeDefined();\n      expect(connection.lastActivity).toBeDefined();\n    });\n\n    it('应该支持可选的错误属性', () => {\n      const connectionWithError: DatabaseConnection = {\n        id: 'test-connection-id',\n        status: 'error',\n        config: {\n          type: 'postgresql',\n          host: 'localhost',\n          port: 5432,\n          username: 'test',\n          password: 'test',\n          database: 'test',\n        },\n        instance: {} as any,\n        lastActivity: new Date(),\n        error: 'Connection failed',\n      };\n\n      expect(connectionWithError.error).toBe('Connection failed');\n    });\n  });\n\n  describe('DatabaseConfig', () => {\n    it('应该支持所有数据库类型', () => {\n      const validTypes: DatabaseConfig['type'][] = [\n        'postgresql',\n        'mysql',\n        'mongodb',\n      ];\n\n      validTypes.forEach(type => {\n        expect(typeof type).toBe('string');\n      });\n    });\n\n    it('应该包含所有必需的配置属性', () => {\n      const config: DatabaseConfig = {\n        type: 'postgresql',\n        host: 'localhost',\n        port: 5432,\n        username: 'test',\n        password: 'test',\n        database: 'test',\n      };\n\n      expect(config.type).toBeDefined();\n      expect(config.host).toBeDefined();\n      expect(config.port).toBeDefined();\n      expect(config.username).toBeDefined();\n      expect(config.password).toBeDefined();\n      expect(config.database).toBeDefined();\n    });\n\n    it('应该支持可选的配置属性', () => {\n      const configWithOptions: DatabaseConfig = {\n        type: 'postgresql',\n        host: 'localhost',\n        port: 5432,\n        username: 'test',\n        password: 'test',\n        database: 'test',\n        schema: 'public',\n        ssl: { rejectUnauthorized: false },\n        pool: {\n          min: 2,\n          max: 10,\n          acquireTimeoutMillis: 60000,\n          createTimeoutMillis: 30000,\n          destroyTimeoutMillis: 5000,\n          idleTimeoutMillis: 30000,\n          reapIntervalMillis: 1000,\n          createRetryIntervalMillis: 200,\n        },\n        options: {\n          application_name: 'test-app',\n        },\n      };\n\n      expect(configWithOptions.schema).toBe('public');\n      expect(configWithOptions.ssl).toBeDefined();\n      expect(configWithOptions.pool).toBeDefined();\n      expect(configWithOptions.options).toBeDefined();\n    });\n  });\n\n  describe('DatabaseHealth', () => {\n    it('应该包含所有健康检查属性', () => {\n      const health: DatabaseHealth = {\n        healthy: true,\n        connected: true,\n        responseTime: 15,\n        lastCheck: new Date(),\n        poolStatus: {\n          total: 10,\n          idle: 8,\n          active: 2,\n          waiting: 0,\n        },\n      };\n\n      expect(health.healthy).toBeDefined();\n      expect(health.connected).toBeDefined();\n      expect(health.responseTime).toBeDefined();\n      expect(health.lastCheck).toBeDefined();\n      expect(health.poolStatus).toBeDefined();\n    });\n\n    it('应该支持可选的错误属性', () => {\n      const healthWithError: DatabaseHealth = {\n        healthy: false,\n        connected: false,\n        responseTime: 0,\n        lastCheck: new Date(),\n        error: 'Connection timeout',\n      };\n\n      expect(healthWithError.error).toBe('Connection timeout');\n    });\n  });\n\n  describe('DatabaseStats', () => {\n    it('应该包含所有统计属性', () => {\n      const stats: DatabaseStats = {\n        totalQueries: 1000,\n        successfulQueries: 950,\n        failedQueries: 50,\n        averageResponseTime: 45,\n        maxResponseTime: 200,\n        minResponseTime: 5,\n        activeConnections: 25,\n        idleConnections: 75,\n        lastReset: new Date(),\n      };\n\n      expect(stats.totalQueries).toBeDefined();\n      expect(stats.successfulQueries).toBeDefined();\n      expect(stats.failedQueries).toBeDefined();\n      expect(stats.averageResponseTime).toBeDefined();\n      expect(stats.maxResponseTime).toBeDefined();\n      expect(stats.minResponseTime).toBeDefined();\n      expect(stats.activeConnections).toBeDefined();\n      expect(stats.idleConnections).toBeDefined();\n      expect(stats.lastReset).toBeDefined();\n    });\n  });\n\n  describe('QueryOptions', () => {\n    it('应该支持所有查询选项', () => {\n      const options: QueryOptions = {\n        timeout: 30000,\n        transaction: true,\n        params: ['param1', 'param2'],\n        tag: 'test-query',\n        logQuery: true,\n      };\n\n      expect(options.timeout).toBeDefined();\n      expect(options.transaction).toBeDefined();\n      expect(options.params).toBeDefined();\n      expect(options.tag).toBeDefined();\n      expect(options.logQuery).toBeDefined();\n    });\n  });\n\n  describe('TransactionOptions', () => {\n    it('应该支持所有事务选项', () => {\n      const options: TransactionOptions = {\n        isolationLevel: 'read committed',\n        timeout: 60000,\n        readOnly: false,\n        tag: 'test-transaction',\n      };\n\n      expect(options.isolationLevel).toBeDefined();\n      expect(options.timeout).toBeDefined();\n      expect(options.readOnly).toBeDefined();\n      expect(options.tag).toBeDefined();\n    });\n  });\n\n  describe('IDatabaseAdapter', () => {\n    it('应该定义所有必需的适配器方法', () => {\n      // 这是一个类型检查测试，确保接口定义了所有必需的方法\n      const adapter: IDatabaseAdapter = {\n        name: 'test-adapter',\n        type: 'postgresql',\n        eventEmitter: {} as any,\n        config: {} as any,\n        isConnected: true,\n        connect: jest.fn() as any,\n        disconnect: jest.fn() as any,\n        query: jest.fn() as any,\n        execute: jest.fn() as any,\n        transaction: jest.fn() as any,\n        getHealth: jest.fn() as any,\n        getStats: jest.fn() as any,\n        getConnection: jest.fn() as any,\n        ping: jest.fn() as any,\n        resetStats: jest.fn() as any,\n      };\n\n      expect(adapter.name).toBeDefined();\n      expect(adapter.type).toBeDefined();\n      expect(adapter.isConnected).toBeDefined();\n      expect(typeof adapter.connect).toBe('function');\n      expect(typeof adapter.disconnect).toBe('function');\n      expect(typeof adapter.query).toBe('function');\n      expect(typeof adapter.execute).toBe('function');\n      expect(typeof adapter.transaction).toBe('function');\n      expect(typeof adapter.getHealth).toBe('function');\n      expect(typeof adapter.getStats).toBe('function');\n      expect(typeof adapter.getConnection).toBe('function');\n      expect(typeof adapter.ping).toBe('function');\n      expect(typeof adapter.resetStats).toBe('function');\n    });\n  });\n\n  describe('IDatabaseManager', () => {\n    it('应该定义所有必需的管理器方法', () => {\n      // 这是一个类型检查测试，确保接口定义了所有必需的方法\n      const manager: IDatabaseManager = {\n        name: 'test-manager',\n        adapterCount: 0,\n        isInitialized: false,\n        addAdapter: jest.fn() as any,\n        removeAdapter: jest.fn() as any,\n        getAdapter: jest.fn() as any,\n        getDefaultAdapter: jest.fn() as any,\n        connectAll: jest.fn() as any,\n        disconnectAll: jest.fn() as any,\n        getHealth: jest.fn() as any,\n        getStats: jest.fn() as any,\n      };\n\n      expect(manager.name).toBeDefined();\n      expect(manager.adapterCount).toBeDefined();\n      expect(manager.isInitialized).toBeDefined();\n      expect(typeof manager.addAdapter).toBe('function');\n      expect(typeof manager.removeAdapter).toBe('function');\n      expect(typeof manager.getAdapter).toBe('function');\n      expect(typeof manager.getDefaultAdapter).toBe('function');\n      expect(typeof manager.connectAll).toBe('function');\n      expect(typeof manager.disconnectAll).toBe('function');\n      expect(typeof manager.getHealth).toBe('function');\n      expect(typeof manager.getStats).toBe('function');\n    });\n  });\n\n  describe('IDatabaseFactory', () => {\n    it('应该定义所有必需的工厂方法', () => {\n      // 这是一个类型检查测试，确保接口定义了所有必需的方法\n      const factory: IDatabaseFactory = {\n        createAdapter: jest.fn() as any,\n        createManager: jest.fn() as any,\n        validateConfig: jest.fn() as any,\n      };\n\n      expect(typeof factory.createAdapter).toBe('function');\n      expect(typeof factory.createManager).toBe('function');\n      expect(typeof factory.validateConfig).toBe('function');\n    });\n  });\n});\n"],"version":3}