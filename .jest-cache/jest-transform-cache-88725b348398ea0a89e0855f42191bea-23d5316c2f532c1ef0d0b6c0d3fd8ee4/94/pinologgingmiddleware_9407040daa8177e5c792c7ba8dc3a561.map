{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/middleware/pino-logging.middleware.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/middleware/pino-logging.middleware.ts"],"sourcesContent":["import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { FastifyRequest, FastifyReply } from 'fastify';\nimport { v4 as uuidv4 } from 'uuid';\nimport { PinoLoggerService } from '../services/pino-logger.service';\nimport { LogContext } from '../interfaces/logging.interface';\n\n/**\n * @interface RequestLogData\n * @description 请求日志数据接口\n */\ninterface RequestLogData {\n  requestId: string;\n  method: string;\n  url: string;\n  headers: Record<string, string>;\n  query: Record<string, unknown>;\n  body: unknown;\n  ip: string;\n  userAgent: string;\n  tenantId?: string;\n  userId?: string;\n  timestamp: Date;\n}\n\n/**\n * @interface ResponseLogData\n * @description 响应日志数据接口\n */\ninterface ResponseLogData extends RequestLogData {\n  statusCode: number;\n  duration: number;\n  responseSize?: number;\n  error?: Error;\n}\n\n/**\n * @class PinoLoggingMiddleware\n * @description Pino日志中间件，用于记录HTTP请求和响应日志\n *\n * 主要功能：\n * 1. 自动生成请求ID\n * 2. 记录请求详情（方法、URL、头部、查询参数、请求体）\n * 3. 记录响应详情（状态码、响应时间、响应大小）\n * 4. 支持多租户和用户上下文\n * 5. 错误日志记录\n * 6. 性能监控\n */\n@Injectable()\nexport class PinoLoggingMiddleware implements NestMiddleware {\n  constructor(private readonly logger: PinoLoggerService) {}\n\n  /**\n   * @method use\n   * @description 中间件主方法，处理HTTP请求和响应日志\n   * @param {FastifyRequest} req Fastify请求对象\n   * @param {FastifyReply} res Fastify响应对象\n   * @param {() => void} next 下一个中间件函数\n   */\n  use(req: FastifyRequest, res: FastifyReply, next: () => void): void {\n    const startTime = Date.now();\n    const requestId = this.generateRequestId();\n    const tenantId = this.extractTenantId(req);\n    const userId = this.extractUserId(req);\n\n    // 构建请求日志数据\n    const requestLogData: RequestLogData = {\n      requestId,\n      method: req.method,\n      url: req.url,\n      headers: req.headers as Record<string, string>,\n      query: req.query as Record<string, unknown>,\n      body: req.body,\n      ip: this.getClientIp(req),\n      userAgent: req.headers['user-agent'] || '',\n      tenantId,\n      userId,\n      timestamp: new Date(),\n    };\n\n    // 记录请求日志\n    this.logRequest(requestLogData);\n\n    // 设置响应变量\n    let responseBody: unknown;\n    let responseSize = 0;\n\n    // Fastify的响应处理\n    const originalSend = res.send;\n    res.send = (payload?: unknown): FastifyReply => {\n      if (payload && !responseBody) {\n        responseBody = payload;\n        responseSize =\n          typeof payload === 'string'\n            ? payload.length\n            : JSON.stringify(payload).length;\n      }\n\n      // 记录响应日志\n      const duration = Date.now() - startTime;\n      const responseLogData: ResponseLogData = {\n        ...requestLogData,\n        statusCode: res.statusCode,\n        duration,\n        responseSize,\n      };\n\n      // 异步记录日志，不阻塞响应\n      setImmediate(() => {\n        this.logResponse(responseLogData);\n      });\n\n      return originalSend.call(res, payload);\n    };\n\n    next();\n  }\n\n  /**\n   * @private\n   * @method generateRequestId\n   * @description 生成请求ID\n   * @returns {string} 请求ID\n   */\n  private generateRequestId(): string {\n    return uuidv4();\n  }\n\n  /**\n   * @private\n   * @method extractTenantId\n   * @description 从请求中提取租户ID\n   * @param {FastifyRequest} req Fastify请求对象\n   * @returns {string | undefined} 租户ID\n   */\n  private extractTenantId(req: FastifyRequest): string | undefined {\n    // 从请求头中提取\n    const headerTenantId =\n      req.headers['x-tenant-id'] || req.headers['X-Tenant-ID'];\n    if (headerTenantId) return String(headerTenantId);\n\n    // 从查询参数中提取\n    const queryTenantId =\n      (req.query as Record<string, unknown>)?.tenantId ||\n      (req.query as Record<string, unknown>)?.tenant_id;\n    if (queryTenantId) return String(queryTenantId);\n\n    // 从请求体中提取\n    const bodyTenantId =\n      (req.body as Record<string, unknown>)?.tenantId ||\n      (req.body as Record<string, unknown>)?.tenant_id;\n    if (bodyTenantId) return String(bodyTenantId);\n\n    return undefined;\n  }\n\n  /**\n   * @private\n   * @method extractUserId\n   * @description 从请求中提取用户ID\n   * @param {FastifyRequest} req Fastify请求对象\n   * @returns {string | undefined} 用户ID\n   */\n  private extractUserId(req: FastifyRequest): string | undefined {\n    // 从请求头中提取\n    const headerUserId = req.headers['x-user-id'] || req.headers['X-User-ID'];\n    if (headerUserId) return String(headerUserId);\n\n    // 从查询参数中提取\n    const queryUserId =\n      (req.query as Record<string, unknown>)?.userId ||\n      (req.query as Record<string, unknown>)?.user_id;\n    if (queryUserId) return String(queryUserId);\n\n    // 从请求体中提取\n    const bodyUserId =\n      (req.body as Record<string, unknown>)?.userId ||\n      (req.body as Record<string, unknown>)?.user_id;\n    if (bodyUserId) return String(bodyUserId);\n\n    return undefined;\n  }\n\n  /**\n   * @private\n   * @method getClientIp\n   * @description 获取客户端IP地址\n   * @param {FastifyRequest} req Fastify请求对象\n   * @returns {string} 客户端IP地址\n   */\n  private getClientIp(req: FastifyRequest): string {\n    return (\n      (req.headers['x-forwarded-for'] as string) ||\n      (req.headers['x-real-ip'] as string) ||\n      req.ip ||\n      req.socket.remoteAddress ||\n      'unknown'\n    );\n  }\n\n  /**\n   * @private\n   * @method logRequest\n   * @description 记录请求日志\n   * @param {RequestLogData} data 请求日志数据\n   */\n  private logRequest(data: RequestLogData): void {\n    this.logger.info('HTTP Request', LogContext.HTTP_REQUEST, {\n      requestId: data.requestId,\n      method: data.method,\n      url: data.url,\n      ip: data.ip,\n      userAgent: data.userAgent,\n      tenantId: data.tenantId,\n      userId: data.userId,\n      query: data.query,\n      body: this.sanitizeBody(data.body),\n      headers: this.sanitizeHeaders(data.headers),\n    });\n  }\n\n  /**\n   * @private\n   * @method logResponse\n   * @description 记录响应日志\n   * @param {ResponseLogData} data 响应日志数据\n   */\n  private logResponse(data: ResponseLogData): void {\n    const logLevel = data.statusCode >= 400 ? 'warn' : 'info';\n    const logMethod = this.logger[logLevel as keyof PinoLoggerService] as (\n      message: string,\n      context: LogContext,\n      metadata?: Record<string, unknown>,\n    ) => void;\n\n    logMethod.call(this.logger, 'HTTP Response', LogContext.HTTP_REQUEST, {\n      requestId: data.requestId,\n      method: data.method,\n      url: data.url,\n      statusCode: data.statusCode,\n      duration: data.duration,\n      responseSize: data.responseSize,\n      tenantId: data.tenantId,\n      userId: data.userId,\n    });\n  }\n\n  /**\n   * @private\n   * @method logError\n   * @description 记录错误日志\n   * @param {ResponseLogData} data 错误日志数据\n   */\n  // private logError(data: ResponseLogData): void {\n  //   this.logger.error('HTTP Error', LogContext.HTTP_REQUEST, {\n  //     requestId: data.requestId,\n  //     method: data.method,\n  //     url: data.url,\n  //     statusCode: data.statusCode,\n  //     duration: data.duration,\n  //     error: data.error?.message,\n  //     stack: data.error?.stack,\n  //     tenantId: data.tenantId,\n  //     userId: data.userId,\n  //   });\n  // }\n\n  /**\n   * @private\n   * @method sanitizeBody\n   * @description 清理请求体中的敏感信息\n   * @param {unknown} body 请求体\n   * @returns {unknown} 清理后的请求体\n   */\n  private sanitizeBody(body: unknown): unknown {\n    if (!body || typeof body !== 'object') return body;\n\n    const sensitiveFields = ['password', 'token', 'secret', 'key'];\n    const sanitized = { ...(body as Record<string, unknown>) };\n\n    sensitiveFields.forEach(field => {\n      if (sanitized[field]) {\n        sanitized[field] = '***REDACTED***';\n      }\n    });\n\n    return sanitized;\n  }\n\n  /**\n   * @private\n   * @method sanitizeHeaders\n   * @description 清理请求头中的敏感信息\n   * @param {Record<string, string>} headers 请求头\n   * @returns {Record<string, string>} 清理后的请求头\n   */\n  private sanitizeHeaders(\n    headers: Record<string, string>,\n  ): Record<string, string> {\n    const sensitiveHeaders = ['authorization', 'cookie', 'x-api-key'];\n    const sanitized = { ...headers };\n\n    sensitiveHeaders.forEach(header => {\n      if (sanitized[header]) {\n        sanitized[header] = '***REDACTED***';\n      }\n    });\n\n    return sanitized;\n  }\n}\n"],"version":3}