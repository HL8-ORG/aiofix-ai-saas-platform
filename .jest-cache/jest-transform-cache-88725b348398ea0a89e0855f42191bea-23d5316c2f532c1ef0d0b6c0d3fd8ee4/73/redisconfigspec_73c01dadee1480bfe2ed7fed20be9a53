e4c3546d004e8e75c231dd8c238b564d
"use strict";
/**
 * @file redis.config.spec.ts
 * @description Redis配置服务单元测试
 */
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const redis_config_1 = require("./redis.config");
describe('RedisConfigService', () => {
    let service;
    let configService;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            imports: [config_1.ConfigModule],
            providers: [redis_config_1.RedisConfigService],
        }).compile();
        service = module.get(redis_config_1.RedisConfigService);
        configService = module.get(config_1.ConfigService);
    });
    describe('getCacheConfig', () => {
        it('should return default cache configuration', () => {
            jest.spyOn(configService, 'get').mockReturnValue(undefined);
            const config = service.getCacheConfig();
            expect(config).toEqual({
                host: 'localhost',
                port: 6379,
                password: 'aiofix_password',
                db: 0,
                keyPrefix: 'aiofix:cache:',
                ttl: 3600,
                maxRetriesPerRequest: 3,
                retryDelayOnFailover: 100,
                enableReadyCheck: true,
                maxRetriesPerRequest: 3,
                lazyConnect: true,
                keepAlive: 30000,
                family: 4,
                connectTimeout: 10000,
                commandTimeout: 5000,
                retryDelayOnFailover: 100,
                enableOfflineQueue: false,
            });
        });
        it('should return configured cache configuration', () => {
            jest.spyOn(configService, 'get').mockImplementation((key) => {
                const configs = {
                    REDIS_HOST: 'redis-host',
                    REDIS_PORT: '6380',
                    REDIS_PASSWORD: 'redis_password',
                    REDIS_CACHE_DB: '1',
                    REDIS_CACHE_PREFIX: 'custom:cache:',
                    REDIS_CACHE_TTL: '7200',
                    REDIS_MAX_RETRIES: '5',
                    REDIS_RETRY_DELAY: '200',
                    REDIS_CONNECT_TIMEOUT: '15000',
                    REDIS_COMMAND_TIMEOUT: '8000',
                };
                return configs[key];
            });
            const config = service.getCacheConfig();
            expect(config).toEqual({
                host: 'redis-host',
                port: 6380,
                password: 'redis_password',
                db: 1,
                keyPrefix: 'custom:cache:',
                ttl: 7200,
                maxRetriesPerRequest: 5,
                retryDelayOnFailover: 200,
                enableReadyCheck: true,
                lazyConnect: true,
                keepAlive: 30000,
                family: 4,
                connectTimeout: 15000,
                commandTimeout: 8000,
                enableOfflineQueue: false,
            });
        });
    });
    describe('getMessageQueueConfig', () => {
        it('should return default message queue configuration', () => {
            jest.spyOn(configService, 'get').mockReturnValue(undefined);
            const config = service.getMessageQueueConfig();
            expect(config).toEqual({
                host: 'localhost',
                port: 6379,
                password: 'aiofix_password',
                db: 1,
                keyPrefix: 'aiofix:queue:',
                maxRetriesPerRequest: 3,
                retryDelayOnFailover: 100,
                enableReadyCheck: true,
                lazyConnect: true,
                keepAlive: 30000,
                family: 4,
                connectTimeout: 10000,
                commandTimeout: 5000,
                enableOfflineQueue: false,
            });
        });
        it('should return configured message queue configuration', () => {
            jest.spyOn(configService, 'get').mockImplementation((key) => {
                const configs = {
                    REDIS_HOST: 'redis-host',
                    REDIS_PORT: '6380',
                    REDIS_PASSWORD: 'redis_password',
                    REDIS_QUEUE_DB: '2',
                    REDIS_QUEUE_PREFIX: 'custom:queue:',
                    REDIS_MAX_RETRIES: '5',
                    REDIS_RETRY_DELAY: '200',
                };
                return configs[key];
            });
            const config = service.getMessageQueueConfig();
            expect(config).toEqual({
                host: 'redis-host',
                port: 6380,
                password: 'redis_password',
                db: 2,
                keyPrefix: 'custom:queue:',
                maxRetriesPerRequest: 5,
                retryDelayOnFailover: 200,
                enableReadyCheck: true,
                lazyConnect: true,
                keepAlive: 30000,
                family: 4,
                connectTimeout: 10000,
                commandTimeout: 5000,
                enableOfflineQueue: false,
            });
        });
    });
    describe('getSessionConfig', () => {
        it('should return default session configuration', () => {
            jest.spyOn(configService, 'get').mockReturnValue(undefined);
            const config = service.getSessionConfig();
            expect(config).toEqual({
                host: 'localhost',
                port: 6379,
                password: 'aiofix_password',
                db: 2,
                keyPrefix: 'aiofix:session:',
                ttl: 86400,
                maxRetriesPerRequest: 3,
                retryDelayOnFailover: 100,
                enableReadyCheck: true,
                lazyConnect: true,
                keepAlive: 30000,
                family: 4,
                connectTimeout: 10000,
                commandTimeout: 5000,
                enableOfflineQueue: false,
            });
        });
        it('should return configured session configuration', () => {
            jest.spyOn(configService, 'get').mockImplementation((key) => {
                const configs = {
                    REDIS_HOST: 'redis-host',
                    REDIS_PORT: '6380',
                    REDIS_PASSWORD: 'redis_password',
                    REDIS_SESSION_DB: '3',
                    REDIS_SESSION_PREFIX: 'custom:session:',
                    REDIS_SESSION_TTL: '172800',
                };
                return configs[key];
            });
            const config = service.getSessionConfig();
            expect(config).toEqual({
                host: 'redis-host',
                port: 6380,
                password: 'redis_password',
                db: 3,
                keyPrefix: 'custom:session:',
                ttl: 172800,
                maxRetriesPerRequest: 3,
                retryDelayOnFailover: 100,
                enableReadyCheck: true,
                lazyConnect: true,
                keepAlive: 30000,
                family: 4,
                connectTimeout: 10000,
                commandTimeout: 5000,
                enableOfflineQueue: false,
            });
        });
    });
    describe('validateConfig', () => {
        it('should validate correct Redis config', () => {
            const config = {
                host: 'localhost',
                port: 6379,
                password: 'password',
                db: 0,
                keyPrefix: 'test:',
                ttl: 3600,
                maxRetriesPerRequest: 3,
                retryDelayOnFailover: 100,
                enableReadyCheck: true,
                lazyConnect: true,
                keepAlive: 30000,
                family: 4,
                connectTimeout: 10000,
                commandTimeout: 5000,
                enableOfflineQueue: false,
            };
            const isValid = service.validateConfig(config);
            expect(isValid).toBe(true);
        });
        it('should reject config with missing required fields', () => {
            const config = {
                host: 'localhost',
                // 缺少 port, password, db 等必需字段
            };
            const isValid = service.validateConfig(config);
            expect(isValid).toBe(false);
        });
        it('should reject config with invalid port', () => {
            const config = {
                host: 'localhost',
                port: 'invalid',
                password: 'password',
                db: 0,
                keyPrefix: 'test:',
                ttl: 3600,
                maxRetriesPerRequest: 3,
                retryDelayOnFailover: 100,
                enableReadyCheck: true,
                lazyConnect: true,
                keepAlive: 30000,
                family: 4,
                connectTimeout: 10000,
                commandTimeout: 5000,
                enableOfflineQueue: false,
            };
            const isValid = service.validateConfig(config);
            expect(isValid).toBe(false);
        });
        it('should reject config with invalid db number', () => {
            const config = {
                host: 'localhost',
                port: 6379,
                password: 'password',
                db: 'invalid',
                keyPrefix: 'test:',
                ttl: 3600,
                maxRetriesPerRequest: 3,
                retryDelayOnFailover: 100,
                enableReadyCheck: true,
                lazyConnect: true,
                keepAlive: 30000,
                family: 4,
                connectTimeout: 10000,
                commandTimeout: 5000,
                enableOfflineQueue: false,
            };
            const isValid = service.validateConfig(config);
            expect(isValid).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,