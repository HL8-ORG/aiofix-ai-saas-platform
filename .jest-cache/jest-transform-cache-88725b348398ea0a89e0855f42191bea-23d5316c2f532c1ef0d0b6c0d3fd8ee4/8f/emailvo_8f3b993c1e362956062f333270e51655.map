{"version":3,"names":["core_1","cov_o9y77tsz3","s","require","Email","ValueObject","constructor","value","f","toLowerCase","trim","validate","b","length","InvalidEmailError","includes","emailRegex","test","localPart","split","equals","other","getLocalPart","getDomain","isFromDomain","domain","isGmail","isOutlook","isCorporate","publicDomains","toString","fromString","isValid","exports","Error","message","name"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/shared/src/common/email.vo.ts"],"sourcesContent":["import { ValueObject } from '@aiofix/core';\n\n/**\n * @class Email\n * @description\n * 邮箱值对象，封装邮箱地址的不变性约束、相等性判断和业务概念。\n *\n * 不变性约束：\n * 1. 邮箱地址一旦创建不可变更\n * 2. 邮箱格式必须符合RFC 5322标准\n * 3. 邮箱地址不区分大小写\n * 4. 邮箱地址必须有效且完整\n *\n * 相等性判断：\n * 1. 基于邮箱地址的标准化值进行相等性比较\n * 2. 忽略大小写差异\n * 3. 支持哈希码计算用于集合操作\n *\n * 业务概念封装：\n * 1. 封装邮箱验证逻辑\n * 2. 提供邮箱标准化方法\n * 3. 隐藏邮箱格式细节\n *\n * @property {string} value 标准化的邮箱地址值\n *\n * @example\n * ```typescript\n * const email1 = new Email('User@Example.COM');\n * const email2 = new Email('user@example.com');\n * console.log(email1.equals(email2)); // true\n * ```\n * @since 1.0.0\n */\nexport class Email extends ValueObject<string> {\n  constructor(value: string) {\n    super(value.toLowerCase().trim());\n    this.validate();\n  }\n\n  /**\n   * @method validate\n   * @description 验证邮箱格式的有效性\n   * @returns {void}\n   * @throws {InvalidEmailError} 当邮箱格式无效时抛出\n   * @private\n   */\n  private validate(): void {\n    if (!this.value || this.value.trim().length === 0) {\n      throw new InvalidEmailError('邮箱地址不能为空');\n    }\n\n    // 基础格式验证\n    if (!this.value.includes('@')) {\n      throw new InvalidEmailError('邮箱地址必须包含@符号');\n    }\n\n    // RFC 5322 邮箱格式验证\n    const emailRegex =\n      /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n    if (!emailRegex.test(this.value)) {\n      throw new InvalidEmailError(`无效的邮箱格式: ${this.value}`);\n    }\n\n    // 长度验证\n    if (this.value.length > 254) {\n      throw new InvalidEmailError('邮箱地址过长');\n    }\n\n    // 本地部分长度验证\n    const [localPart] = this.value.split('@');\n    if (localPart.length > 64) {\n      throw new InvalidEmailError('邮箱本地部分过长');\n    }\n  }\n\n  /**\n   * @method equals\n   * @description 比较两个邮箱对象是否相等，忽略大小写\n   * @param {Email} other 另一个邮箱对象\n   * @returns {boolean} 是否相等\n   */\n  equals(other: Email): boolean {\n    if (!(other instanceof Email)) {\n      return false;\n    }\n    return this.value.toLowerCase() === other.value.toLowerCase();\n  }\n\n  /**\n   * @method getLocalPart\n   * @description 获取邮箱的本地部分（@符号前的部分）\n   * @returns {string} 邮箱本地部分\n   */\n  getLocalPart(): string {\n    return this.value.split('@')[0];\n  }\n\n  /**\n   * @method getDomain\n   * @description 获取邮箱的域名部分（@符号后的部分）\n   * @returns {string} 邮箱域名部分\n   */\n  getDomain(): string {\n    return this.value.split('@')[1];\n  }\n\n  /**\n   * @method isFromDomain\n   * @description 检查邮箱是否为特定域名\n   * @param {string} domain 要检查的域名\n   * @returns {boolean} 是否为指定域名\n   */\n  isFromDomain(domain: string): boolean {\n    return this.getDomain().toLowerCase() === domain.toLowerCase();\n  }\n\n  /**\n   * @method isGmail\n   * @description 检查是否为Gmail邮箱\n   * @returns {boolean} 是否为Gmail邮箱\n   */\n  isGmail(): boolean {\n    return this.isFromDomain('gmail.com');\n  }\n\n  /**\n   * @method isOutlook\n   * @description 检查是否为Outlook邮箱\n   * @returns {boolean} 是否为Outlook邮箱\n   */\n  isOutlook(): boolean {\n    return this.isFromDomain('outlook.com') || this.isFromDomain('hotmail.com');\n  }\n\n  /**\n   * @method isCorporate\n   * @description 检查是否为企业邮箱（非公共邮箱服务）\n   * @returns {boolean} 是否为企业邮箱\n   */\n  isCorporate(): boolean {\n    const publicDomains = [\n      'gmail.com',\n      'outlook.com',\n      'hotmail.com',\n      'yahoo.com',\n      'qq.com',\n      '163.com',\n      '126.com',\n    ];\n    return !publicDomains.includes(this.getDomain().toLowerCase());\n  }\n\n  /**\n   * @method toString\n   * @description 返回邮箱地址的字符串表示\n   * @returns {string} 邮箱地址字符串\n   */\n  toString(): string {\n    return this.value;\n  }\n\n  /**\n   * @method fromString\n   * @description 从字符串创建邮箱值对象\n   * @param {string} value 邮箱字符串\n   * @returns {Email} 邮箱值对象\n   * @static\n   */\n  static fromString(value: string): Email {\n    return new Email(value);\n  }\n\n  /**\n   * @method isValid\n   * @description 检查字符串是否为有效的邮箱格式\n   * @param {string} value 要检查的字符串\n   * @returns {boolean} 是否为有效的邮箱格式\n   * @static\n   */\n  static isValid(value: string): boolean {\n    try {\n      new Email(value);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\n/**\n * @class InvalidEmailError\n * @description\n * 无效邮箱异常，当邮箱格式不符合业务规则时抛出。\n *\n * 业务规则：\n * 1. 当邮箱格式无效时抛出\n * 2. 当邮箱为空时抛出\n * 3. 提供清晰的错误信息\n *\n * @example\n * ```typescript\n * try {\n *   new Email('invalid-email');\n * } catch (error) {\n *   console.log(error instanceof InvalidEmailError); // true\n * }\n * ```\n * @since 1.0.0\n */\nexport class InvalidEmailError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidEmailError';\n  }\n}\n"],"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","ignoreList":[]}