{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/services/pino-logger.service.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/services/pino-logger.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { ClsService } from 'nestjs-cls';\nimport { PinoLoggerService } from './pino-logger.service';\nimport { PinoLoggerConfigService } from './pino-logger-config.service';\nimport { PinoLoggerFactory } from '../factories/pino-logger.factory';\nimport { LogContext, LogLevel } from '../interfaces/logging.interface';\n\ndescribe('PinoLoggerService', () => {\n  let service: PinoLoggerService;\n  let eventEmitter: EventEmitter2;\n  let configService: PinoLoggerConfigService;\n  let loggerFactory: PinoLoggerFactory;\n  // let _clsService: ClsService; // 暂时注释掉，因为测试中没有使用\n\n  beforeEach(async () => {\n    const mockLogger = {\n      debug: jest.fn(),\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n      fatal: jest.fn(),\n      trace: jest.fn(),\n      child: jest.fn(),\n      flush: jest.fn(),\n    };\n\n    const mockConfigService = {\n      getConfig: jest.fn().mockReturnValue({\n        level: 'info',\n        format: 'json',\n        colorize: true,\n        timestamp: true,\n        requestId: true,\n        tenantId: true,\n        userId: true,\n        performance: true,\n        stackTrace: true,\n        filePath: undefined,\n        rotation: { maxSize: '10m', maxFiles: 5, interval: '1d' },\n        remote: undefined,\n      }),\n      getLevel: jest.fn().mockReturnValue('info'),\n      setLevel: jest.fn(),\n      updateConfig: jest.fn(),\n    };\n\n    const mockLoggerFactory = {\n      createLogger: jest.fn().mockReturnValue(mockLogger),\n      createChildLogger: jest.fn().mockReturnValue(mockLogger),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        {\n          provide: PinoLoggerService,\n          useFactory: (\n            eventEmitter: EventEmitter2,\n            configService: PinoLoggerConfigService,\n            loggerFactory: PinoLoggerFactory,\n            cls: ClsService,\n          ) => {\n            return new PinoLoggerService(\n              eventEmitter,\n              configService,\n              loggerFactory,\n              cls,\n            );\n          },\n          inject: [\n            EventEmitter2,\n            PinoLoggerConfigService,\n            PinoLoggerFactory,\n            ClsService,\n          ],\n        },\n        {\n          provide: PinoLoggerConfigService,\n          useValue: mockConfigService,\n        },\n        {\n          provide: PinoLoggerFactory,\n          useValue: mockLoggerFactory,\n        },\n        {\n          provide: EventEmitter2,\n          useValue: {\n            emit: jest.fn(),\n          },\n        },\n        {\n          provide: ClsService,\n          useValue: {\n            get: jest.fn(),\n            set: jest.fn(),\n            run: jest.fn(),\n            runWith: jest.fn(),\n            enter: jest.fn(),\n            exit: jest.fn(),\n            isActive: jest.fn().mockReturnValue(true),\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<PinoLoggerService>(PinoLoggerService);\n    eventEmitter = module.get<EventEmitter2>(EventEmitter2);\n    configService = module.get<PinoLoggerConfigService>(\n      PinoLoggerConfigService,\n    );\n    loggerFactory = module.get<PinoLoggerFactory>(PinoLoggerFactory);\n    // _clsService = module.get<ClsService>(ClsService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('basic logging', () => {\n    it('should log debug messages', () => {\n      const spy = jest.spyOn(service as any, 'log');\n      service.debug('Debug message', LogContext.SYSTEM, { test: 'data' });\n      expect(spy).toHaveBeenCalledWith(\n        'debug',\n        'Debug message',\n        LogContext.SYSTEM,\n        { test: 'data' },\n        undefined,\n      );\n    });\n\n    it('should log info messages', () => {\n      const spy = jest.spyOn(service as any, 'log');\n      service.info('Info message', LogContext.BUSINESS, { operation: 'test' });\n      expect(spy).toHaveBeenCalledWith(\n        'info',\n        'Info message',\n        LogContext.BUSINESS,\n        { operation: 'test' },\n        undefined,\n      );\n    });\n\n    it('should log warn messages', () => {\n      const spy = jest.spyOn(service as any, 'log');\n      service.warn('Warning message', LogContext.AUTH, { userId: '123' });\n      expect(spy).toHaveBeenCalledWith(\n        'warn',\n        'Warning message',\n        LogContext.AUTH,\n        { userId: '123' },\n        undefined,\n      );\n    });\n\n    it('should log error messages', () => {\n      const error = new Error('Test error');\n      const spy = jest.spyOn(service as any, 'log');\n      service.error(\n        'Error message',\n        LogContext.DATABASE,\n        { query: 'SELECT *' },\n        error,\n      );\n      expect(spy).toHaveBeenCalledWith(\n        'error',\n        'Error message',\n        LogContext.DATABASE,\n        { query: 'SELECT *' },\n        error,\n      );\n    });\n\n    it('should log fatal messages', () => {\n      const spy = jest.spyOn(service as any, 'log');\n      service.fatal('Fatal message', LogContext.SYSTEM, { critical: true });\n      expect(spy).toHaveBeenCalledWith(\n        'fatal',\n        'Fatal message',\n        LogContext.SYSTEM,\n        { critical: true },\n        undefined,\n      );\n    });\n\n    it('should log trace messages', () => {\n      const spy = jest.spyOn(service as any, 'log');\n      service.trace('Trace message', LogContext.PERFORMANCE, { duration: 100 });\n      expect(spy).toHaveBeenCalledWith(\n        'trace',\n        'Trace message',\n        LogContext.PERFORMANCE,\n        { duration: 100 },\n        undefined,\n      );\n    });\n  });\n\n  describe('specialized logging', () => {\n    it('should log performance messages', () => {\n      const spy = jest.spyOn(service as any, 'log');\n      service.performance('database_query', 150, LogContext.DATABASE, {\n        table: 'users',\n      });\n      expect(spy).toHaveBeenCalledWith(\n        'info',\n        'Performance: database_query took 150ms',\n        LogContext.DATABASE,\n        {\n          table: 'users',\n          operation: 'database_query',\n          duration: 150,\n          type: 'performance',\n        },\n      );\n    });\n\n    it('should log business messages', () => {\n      const spy = jest.spyOn(service as any, 'log');\n      service.business('User registered', {\n        userId: '123',\n        email: 'test@example.com',\n      });\n      expect(spy).toHaveBeenCalledWith(\n        'info',\n        'User registered',\n        LogContext.BUSINESS,\n        {\n          userId: '123',\n          email: 'test@example.com',\n        },\n      );\n    });\n\n    it('should log security messages', () => {\n      const spy = jest.spyOn(service as any, 'log');\n      service.security('Failed login attempt', {\n        ip: '192.168.1.1',\n        username: 'test',\n      });\n      expect(spy).toHaveBeenCalledWith(\n        'warn',\n        'Failed login attempt',\n        LogContext.AUTH,\n        {\n          ip: '192.168.1.1',\n          username: 'test',\n        },\n      );\n    });\n  });\n\n  describe('configuration', () => {\n    it('should get and set log level', () => {\n      jest.spyOn(configService, 'getLevel').mockReturnValue('info');\n      jest.spyOn(configService, 'setLevel').mockImplementation(() => undefined);\n\n      service.setLevel('debug');\n\n      expect(configService.setLevel).toHaveBeenCalledWith('debug');\n      expect(configService.getLevel).toHaveBeenCalled();\n    });\n\n    it('should get and update config', () => {\n      const mockConfig = {\n        level: 'warn' as LogLevel,\n        format: 'json' as any,\n        colorize: true,\n        timestamp: true,\n        requestId: true,\n        tenantId: true,\n        userId: true,\n        performance: true,\n        stackTrace: true,\n        filePath: undefined,\n        rotation: { maxSize: '10m', maxFiles: 5, interval: '1d' },\n        remote: undefined,\n      };\n      jest.spyOn(configService, 'getConfig').mockReturnValue(mockConfig);\n      jest\n        .spyOn(configService, 'updateConfig')\n        .mockImplementation(() => undefined);\n\n      const config = service.getConfig();\n      service.updateConfig({ level: 'warn' });\n\n      expect(configService.getConfig).toHaveBeenCalled();\n      expect(configService.updateConfig).toHaveBeenCalledWith({\n        level: 'warn',\n      });\n      expect(config).toEqual(mockConfig);\n    });\n  });\n\n  describe('child logger', () => {\n    it('should create child logger', () => {\n      const mockChildLogger = {\n        debug: jest.fn(),\n        info: jest.fn(),\n        warn: jest.fn(),\n        error: jest.fn(),\n        fatal: jest.fn(),\n        trace: jest.fn(),\n      };\n      jest\n        .spyOn(loggerFactory, 'createChildLogger')\n        .mockReturnValue(mockChildLogger as any);\n\n      const childLogger = service.child(LogContext.DATABASE, {\n        tenantId: '123',\n      });\n\n      expect(childLogger).toBeDefined();\n      expect(childLogger).toBeInstanceOf(PinoLoggerService);\n      expect(loggerFactory.createChildLogger).toHaveBeenCalledWith(\n        expect.anything(),\n        { context: LogContext.DATABASE, tenantId: '123' },\n      );\n    });\n  });\n\n  describe('statistics', () => {\n    it('should track log statistics', () => {\n      // 重置统计\n      service.resetStats();\n\n      // 记录一些日志\n      service.info('Test message 1', LogContext.BUSINESS);\n      service.warn('Test message 2', LogContext.AUTH);\n      service.error('Test message 3', LogContext.DATABASE);\n\n      const stats = service.getStats();\n\n      expect(stats.totalLogs).toBeGreaterThanOrEqual(3);\n      expect(stats.logsByLevel.info).toBeGreaterThanOrEqual(1);\n      expect(stats.logsByLevel.warn).toBeGreaterThanOrEqual(1);\n      expect(stats.logsByLevel.error).toBeGreaterThanOrEqual(1);\n      expect(stats.logsByContext[LogContext.BUSINESS]).toBeGreaterThanOrEqual(\n        1,\n      );\n      expect(stats.logsByContext[LogContext.AUTH]).toBeGreaterThanOrEqual(1);\n      expect(stats.logsByContext[LogContext.DATABASE]).toBeGreaterThanOrEqual(\n        1,\n      );\n      expect(stats.averageLogSize).toBeGreaterThan(0);\n      expect(stats.lastLogTime).toBeDefined();\n    });\n\n    it('should reset statistics', () => {\n      // 记录一些日志\n      service.info('Test message');\n\n      // 重置统计\n      service.resetStats();\n\n      const stats = service.getStats();\n      expect(stats.totalLogs).toBe(0);\n      expect(stats.logsByLevel.info).toBe(0);\n    });\n  });\n\n  describe('event emission', () => {\n    it('should emit log events', () => {\n      service.info('Test message', LogContext.BUSINESS, { test: 'data' });\n\n      expect(eventEmitter.emit).toHaveBeenCalledWith(\n        'logger.log',\n        expect.objectContaining({\n          level: 'info',\n          message: 'Test message',\n          context: LogContext.BUSINESS,\n          metadata: { test: 'data' },\n        }),\n      );\n    });\n  });\n\n  describe('lifecycle methods', () => {\n    it('should flush and close logger', async () => {\n      await expect(service.flush()).resolves.not.toThrow();\n      await expect(service.close()).resolves.not.toThrow();\n    });\n\n    it('should handle module destruction', async () => {\n      await expect(service.onModuleDestroy()).resolves.not.toThrow();\n    });\n  });\n});\n"],"version":3}