{"version":3,"names":["cov_c8dgmnb52","actualCoverage","common_1","s","require","rxjs_1","operators_1","uuid_1","pino_logger_service_1","logging_interface_1","PinoLoggingInterceptor","constructor","logger","f","sensitiveParameters","intercept","context","next","startTime","Date","now","methodId","generateMethodId","request","switchToHttp","getRequest","requestId","tenantId","userId","handler","getHandler","className","getClass","name","methodName","parameters","extractParameters","methodLogData","sanitizeParameters","logMethodStart","handle","pipe","tap","result","duration","completedLogData","sanitizeResult","logMethodSuccess","catchError","error","errorLogData","logMethodError","throwError","v4","args","getArgs","filter","arg","index","b","method","statusCode","undefined","map","param","sanitizeObject","obj","Array","isArray","item","sanitized","key","value","Object","entries","includes","toLowerCase","data","debug","LogContext","BUSINESS","info","performance","PERFORMANCE","exports","__decorate","Injectable","PinoLoggerService","_a"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/interceptors/pino-logging.interceptor.ts"],"sourcesContent":["import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\n\nimport { tap, catchError } from 'rxjs/operators';\nimport { v4 as uuidv4 } from 'uuid';\nimport { PinoLoggerService } from '../services/pino-logger.service';\nimport { LogContext } from '../interfaces/logging.interface';\n\n/**\n * @interface MethodLogData\n * @description 方法日志数据结构\n */\ninterface MethodLogData {\n  methodId: string;\n  className: string;\n  methodName: string;\n  startTime: number;\n  requestId?: string;\n  tenantId?: string;\n  userId?: string;\n  parameters?: unknown[];\n  result?: unknown;\n  error?: Error;\n  duration?: number;\n}\n\n/**\n * @class PinoLoggingInterceptor\n * @description\n * Pino日志拦截器，负责记录方法调用的详细日志。\n *\n * 主要功能包括：\n * 1. 为每个方法调用生成唯一ID\n * 2. 记录方法调用的开始和结束时间\n * 3. 记录方法参数和返回值\n * 4. 计算方法执行时间\n * 5. 记录异常信息\n * 6. 支持请求上下文追踪\n *\n * 设计原则：\n * - 高性能：最小化对方法执行的影响\n * - 结构化：提供结构化的日志数据\n * - 可配置：支持不同级别的日志记录\n * - 安全性：敏感参数过滤\n */\n@Injectable()\nexport class PinoLoggingInterceptor implements NestInterceptor {\n  private readonly sensitiveParameters = [\n    'password',\n    'token',\n    'secret',\n    'apikey',\n    'api_key',\n    'api-key',\n  ];\n\n  constructor(private readonly logger: PinoLoggerService) {}\n\n  /**\n   * @method intercept\n   * @description 拦截器主方法\n   * @param {ExecutionContext} context 执行上下文\n   * @param {CallHandler} next 下一个处理器\n   * @returns {Observable<unknown>} 可观察对象\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable<unknown> {\n    const startTime = Date.now();\n    const methodId = this.generateMethodId();\n    const request = context.switchToHttp().getRequest();\n\n    // 提取上下文信息\n    const requestId = request?.requestId;\n    const tenantId = request?.tenantId;\n    const userId = request?.userId;\n\n    // 获取方法信息\n    const handler = context.getHandler();\n    const className = context.getClass().name;\n    const methodName = handler.name;\n\n    // 获取方法参数\n    const parameters = this.extractParameters(context);\n\n    // 创建方法日志数据\n    const methodLogData: MethodLogData = {\n      methodId,\n      className,\n      methodName,\n      startTime,\n      requestId,\n      tenantId,\n      userId,\n      parameters: this.sanitizeParameters(parameters),\n    };\n\n    // 记录方法开始日志\n    this.logMethodStart(methodLogData);\n\n    return next.handle().pipe(\n      tap(result => {\n        // 记录方法成功完成\n        const duration = Date.now() - startTime;\n        const completedLogData: MethodLogData = {\n          ...methodLogData,\n          result: this.sanitizeResult(result),\n          duration,\n        };\n        this.logMethodSuccess(completedLogData);\n      }),\n      catchError(error => {\n        // 记录方法异常\n        const duration = Date.now() - startTime;\n        const errorLogData: MethodLogData = {\n          ...methodLogData,\n          error,\n          duration,\n        };\n        this.logMethodError(errorLogData);\n        return throwError(() => error);\n      }),\n    );\n  }\n\n  /**\n   * @private\n   * @method generateMethodId\n   * @description 生成方法调用ID\n   * @returns {string} 方法调用ID\n   */\n  private generateMethodId(): string {\n    return uuidv4();\n  }\n\n  /**\n   * @private\n   * @method extractParameters\n   * @description 提取方法参数\n   * @param {ExecutionContext} context 执行上下文\n   * @returns {unknown[]} 方法参数\n   */\n  private extractParameters(context: ExecutionContext): unknown[] {\n    const args = context.getArgs();\n\n    // 过滤掉请求和响应对象，只保留业务参数\n    return args.filter((arg, index) => {\n      // 通常前两个参数是 request 和 response\n      if (index === 0 && arg?.method) return false; // HTTP request\n      if (index === 1 && arg?.statusCode !== undefined) return false; // HTTP response\n      return true;\n    });\n  }\n\n  /**\n   * @private\n   * @method sanitizeParameters\n   * @description 清理方法参数，移除敏感信息\n   * @param {unknown[]} parameters 方法参数\n   * @returns {unknown[]} 清理后的参数\n   */\n  private sanitizeParameters(parameters: unknown[]): unknown[] {\n    return parameters.map(param => this.sanitizeObject(param));\n  }\n\n  /**\n   * @private\n   * @method sanitizeResult\n   * @description 清理方法返回值，移除敏感信息\n   * @param {unknown} result 方法返回值\n   * @returns {unknown} 清理后的返回值\n   */\n  private sanitizeResult(result: unknown): unknown {\n    return this.sanitizeObject(result);\n  }\n\n  /**\n   * @private\n   * @method sanitizeObject\n   * @description 清理对象，移除敏感信息\n   * @param {unknown} obj 要清理的对象\n   * @returns {unknown} 清理后的对象\n   */\n  private sanitizeObject(obj: unknown): unknown {\n    if (!obj || typeof obj !== 'object') {\n      return obj;\n    }\n\n    // 如果是数组，递归处理每个元素\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.sanitizeObject(item));\n    }\n\n    // 如果是对象，递归处理每个属性\n    const sanitized = { ...(obj as Record<string, unknown>) };\n\n    for (const [key, value] of Object.entries(sanitized)) {\n      if (this.sensitiveParameters.includes(key.toLowerCase())) {\n        (sanitized as Record<string, unknown>)[key] = '[REDACTED]';\n      } else if (typeof value === 'object' && value !== null) {\n        (sanitized as Record<string, unknown>)[key] =\n          this.sanitizeObject(value);\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * @private\n   * @method logMethodStart\n   * @description 记录方法开始日志\n   * @param {MethodLogData} data 方法日志数据\n   */\n  private logMethodStart(data: MethodLogData): void {\n    this.logger.debug(\n      `Method Start: ${data.className}.${data.methodName}`,\n      LogContext.BUSINESS,\n      {\n        methodId: data.methodId,\n        className: data.className,\n        methodName: data.methodName,\n        requestId: data.requestId,\n        tenantId: data.tenantId,\n        userId: data.userId,\n        parameters: data.parameters,\n      },\n    );\n  }\n\n  /**\n   * @private\n   * @method logMethodSuccess\n   * @description 记录方法成功完成日志\n   * @param {MethodLogData} data 方法日志数据\n   */\n  private logMethodSuccess(data: MethodLogData): void {\n    this.logger.info(\n      `Method Success: ${data.className}.${data.methodName} - ${data.duration}ms`,\n      LogContext.BUSINESS,\n      {\n        methodId: data.methodId,\n        className: data.className,\n        methodName: data.methodName,\n        requestId: data.requestId,\n        tenantId: data.tenantId,\n        userId: data.userId,\n        result: data.result,\n        duration: data.duration,\n      },\n    );\n\n    // 记录性能日志\n    this.logger.performance(\n      'method_execution',\n      data.duration ?? 0,\n      LogContext.PERFORMANCE,\n      {\n        methodId: data.methodId,\n        className: data.className,\n        methodName: data.methodName,\n        requestId: data.requestId,\n        tenantId: data.tenantId,\n        userId: data.userId,\n      },\n    );\n  }\n\n  /**\n   * @private\n   * @method logMethodError\n   * @description 记录方法异常日志\n   * @param {MethodLogData} data 方法日志数据\n   */\n  private logMethodError(data: MethodLogData): void {\n    this.logger.error(\n      `Method Error: ${data.className}.${data.methodName} - ${data.duration}ms`,\n      LogContext.BUSINESS,\n      {\n        methodId: data.methodId,\n        className: data.className,\n        methodName: data.methodName,\n        requestId: data.requestId,\n        tenantId: data.tenantId,\n        userId: data.userId,\n        parameters: data.parameters,\n        duration: data.duration,\n      },\n      data.error,\n    );\n  }\n}\n"],"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","ignoreList":[]}