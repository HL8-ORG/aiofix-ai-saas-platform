{"version":3,"names":["cov_179xblmwcd","actualCoverage","common_1","s","require","event_emitter_1","nestjs_cls_1","logging_interface_1","pino_logger_config_service_1","pino_logger_factory_1","PinoLoggerService","PinoLoggerService_1","constructor","eventEmitter","configService","loggerFactory","cls","f","logger","stats","totalLogs","logsByLevel","fatal","error","warn","info","debug","trace","logsByContext","LogContext","HTTP_REQUEST","DATABASE","BUSINESS","AUTH","CONFIG","CACHE","EVENT","SYSTEM","EXTERNAL","PERFORMANCE","totalLogSize","initializeStats","message","context","metadata","log","performance","operation","duration","performanceMetadata","type","b","business","security","child","ensureLoggerInitialized","childLogger","createChildLogger","childService","setLevel","level","createLogger","getLevel","updateConfig","config","getConfig","flush","result","close","onModuleDestroy","getStats","averageLogSize","lastLogTime","resetStats","Object","keys","length","requestId","get","tenantId","userId","logData","timestamp","Date","toISOString","stack","stackTrace","undefined","code","name","updateStats","emit","logSize","exports","__decorate","Injectable","EventEmitter2","_a","_b","PinoLoggerConfigService","_c","PinoLoggerFactory","_d","ClsService"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/logging/src/services/pino-logger.service.ts"],"sourcesContent":["import { Injectable, OnModuleDestroy } from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { ClsService } from 'nestjs-cls';\nimport pino from 'pino';\nimport {\n  ILoggerService,\n  LogContext,\n  LogConfig,\n  LogMetadata,\n} from '../interfaces/logging.interface';\nimport {\n  PinoLoggerConfigService,\n  LogLevel,\n} from './pino-logger-config.service';\nimport { PinoLoggerFactory } from '../factories/pino-logger.factory';\n\n/**\n * @class PinoLoggerService\n * @description\n * 基于Pino的日志服务实现类，提供高性能的结构化日志功能。\n *\n * 主要功能包括：\n * 1. 支持多种日志级别（trace, debug, info, warn, error, fatal）\n * 2. 结构化日志输出（JSON格式）\n * 3. 日志上下文和元数据支持\n * 4. 性能监控和错误追踪\n * 5. 日志配置管理和动态更新\n * 6. 子日志器创建和管理\n * 7. 日志统计和监控\n *\n * @implements {ILoggerService}\n * @implements {OnModuleDestroy}\n */\n@Injectable()\nexport class PinoLoggerService implements ILoggerService, OnModuleDestroy {\n  private logger: pino.Logger = {} as pino.Logger;\n  private stats: {\n    totalLogs: number;\n    logsByLevel: Record<LogLevel, number>;\n    logsByContext: Record<LogContext, number>;\n    totalLogSize: number;\n    lastLogTime?: Date;\n  } = {\n    totalLogs: 0,\n    logsByLevel: {\n      fatal: 0,\n      error: 0,\n      warn: 0,\n      info: 0,\n      debug: 0,\n      trace: 0,\n    },\n    logsByContext: {\n      [LogContext.HTTP_REQUEST]: 0,\n      [LogContext.DATABASE]: 0,\n      [LogContext.BUSINESS]: 0,\n      [LogContext.AUTH]: 0,\n      [LogContext.CONFIG]: 0,\n      [LogContext.CACHE]: 0,\n      [LogContext.EVENT]: 0,\n      [LogContext.SYSTEM]: 0,\n      [LogContext.EXTERNAL]: 0,\n      [LogContext.PERFORMANCE]: 0,\n    },\n    totalLogSize: 0,\n  };\n\n  constructor(\n    private readonly eventEmitter: EventEmitter2,\n    private readonly configService: PinoLoggerConfigService,\n    private readonly loggerFactory: PinoLoggerFactory,\n    private readonly cls: ClsService,\n  ) {\n    this.initializeStats();\n    // 延迟初始化logger，避免循环依赖\n    this.logger = {} as pino.Logger;\n  }\n\n  /**\n   * @method debug\n   * @description 记录调试日志\n   */\n  debug(\n    message: string,\n    context?: LogContext,\n    metadata?: LogMetadata,\n    error?: Error,\n  ): void {\n    this.log('debug', message, context, metadata, error);\n  }\n\n  /**\n   * @method info\n   * @description 记录信息日志\n   */\n  info(\n    message: string,\n    context?: LogContext,\n    metadata?: LogMetadata,\n    error?: Error,\n  ): void {\n    this.log('info', message, context, metadata, error);\n  }\n\n  /**\n   * @method warn\n   * @description 记录警告日志\n   */\n  warn(\n    message: string,\n    context?: LogContext,\n    metadata?: LogMetadata,\n    error?: Error,\n  ): void {\n    this.log('warn', message, context, metadata, error);\n  }\n\n  /**\n   * @method error\n   * @description 记录错误日志\n   */\n  error(\n    message: string,\n    context?: LogContext,\n    metadata?: LogMetadata,\n    error?: Error,\n  ): void {\n    this.log('error', message, context, metadata, error);\n  }\n\n  /**\n   * @method fatal\n   * @description 记录致命错误日志\n   */\n  fatal(\n    message: string,\n    context?: LogContext,\n    metadata?: LogMetadata,\n    error?: Error,\n  ): void {\n    this.log('fatal', message, context, metadata, error);\n  }\n\n  /**\n   * @method trace\n   * @description 记录跟踪日志\n   */\n  trace(\n    message: string,\n    context?: LogContext,\n    metadata?: LogMetadata,\n    error?: Error,\n  ): void {\n    this.log('trace', message, context, metadata, error);\n  }\n\n  /**\n   * @method performance\n   * @description 记录性能日志\n   */\n  performance(\n    operation: string,\n    duration: number,\n    context?: LogContext,\n    metadata?: LogMetadata,\n  ): void {\n    const performanceMetadata: LogMetadata = {\n      ...metadata,\n      operation,\n      duration,\n      type: 'performance',\n    };\n    this.log(\n      'info',\n      `Performance: ${operation} took ${duration}ms`,\n      context ?? LogContext.PERFORMANCE,\n      performanceMetadata,\n    );\n  }\n\n  /**\n   * @method business\n   * @description 记录业务日志\n   */\n  business(message: string, metadata?: LogMetadata): void {\n    this.log('info', message, LogContext.BUSINESS, metadata);\n  }\n\n  /**\n   * @method security\n   * @description 记录安全日志\n   */\n  security(message: string, metadata?: LogMetadata): void {\n    this.log('warn', message, LogContext.AUTH, metadata);\n  }\n\n  /**\n   * @method child\n   * @description 创建子日志器\n   */\n  child(context: LogContext, metadata?: LogMetadata): ILoggerService {\n    this.ensureLoggerInitialized();\n    const childLogger = this.loggerFactory.createChildLogger(this.logger, {\n      context,\n      ...metadata,\n    });\n\n    // 创建一个新的PinoLoggerService实例，使用子日志器\n    const childService = new PinoLoggerService(\n      this.eventEmitter,\n      this.configService,\n      this.loggerFactory,\n      this.cls,\n    );\n    (\n      childService as unknown as {\n        logger: pino.Logger;\n        stats: PinoLoggerService['stats'];\n      }\n    ).logger = childLogger;\n    (\n      childService as unknown as {\n        logger: pino.Logger;\n        stats: PinoLoggerService['stats'];\n      }\n    ).stats = this.stats;\n\n    return childService;\n  }\n\n  /**\n   * @method setLevel\n   * @description 设置日志级别\n   */\n  setLevel(level: LogLevel): void {\n    this.configService.setLevel(level);\n    this.logger = this.loggerFactory.createLogger();\n  }\n\n  /**\n   * @method getLevel\n   * @description 获取日志级别\n   */\n  getLevel(): LogLevel {\n    return this.configService.getLevel();\n  }\n\n  /**\n   * @method updateConfig\n   * @description 更新日志配置\n   */\n  updateConfig(config: Partial<LogConfig>): void {\n    this.configService.updateConfig(config);\n    this.logger = this.loggerFactory.createLogger();\n  }\n\n  /**\n   * @method getConfig\n   * @description 获取日志配置\n   */\n  getConfig(): LogConfig {\n    return this.configService.getConfig();\n  }\n\n  /**\n   * @method flush\n   * @description 刷新日志缓冲区\n   */\n  async flush(): Promise<void> {\n    if (typeof this.logger.flush === 'function') {\n      const result = this.logger.flush() as unknown;\n      if (typeof result === 'object' && result !== null && 'then' in result) {\n        await (result as Promise<void>);\n      }\n    }\n  }\n\n  /**\n   * @method close\n   * @description 关闭日志器\n   */\n  async close(): Promise<void> {\n    await this.flush();\n  }\n\n  /**\n   * @method onModuleDestroy\n   * @description 模块销毁时的清理工作\n   */\n  async onModuleDestroy(): Promise<void> {\n    await this.close();\n  }\n\n  /**\n   * @method getStats\n   * @description 获取日志统计信息\n   */\n  getStats(): {\n    totalLogs: number;\n    logsByLevel: Record<LogLevel, number>;\n    logsByContext: Record<LogContext, number>;\n    averageLogSize: number;\n    lastLogTime?: Date;\n  } {\n    return {\n      totalLogs: this.stats.totalLogs,\n      logsByLevel: { ...this.stats.logsByLevel },\n      logsByContext: { ...this.stats.logsByContext },\n      averageLogSize:\n        this.stats.totalLogs > 0\n          ? this.stats.totalLogSize / this.stats.totalLogs\n          : 0,\n      lastLogTime: this.stats.lastLogTime,\n    };\n  }\n\n  /**\n   * @method resetStats\n   * @description 重置日志统计\n   */\n  resetStats(): void {\n    this.initializeStats();\n  }\n\n  // 私有辅助方法\n\n  /**\n   * @private\n   * @method initializeStats\n   * @description 初始化统计信息\n   */\n  private initializeStats(): void {\n    this.stats = {\n      totalLogs: 0,\n      logsByLevel: {\n        trace: 0,\n        debug: 0,\n        info: 0,\n        warn: 0,\n        error: 0,\n        fatal: 0,\n      },\n      logsByContext: {\n        [LogContext.HTTP_REQUEST]: 0,\n        [LogContext.DATABASE]: 0,\n        [LogContext.BUSINESS]: 0,\n        [LogContext.AUTH]: 0,\n        [LogContext.CONFIG]: 0,\n        [LogContext.CACHE]: 0,\n        [LogContext.EVENT]: 0,\n        [LogContext.SYSTEM]: 0,\n        [LogContext.EXTERNAL]: 0,\n        [LogContext.PERFORMANCE]: 0,\n      },\n      totalLogSize: 0,\n    };\n  }\n\n  /**\n   * @private\n   * @method ensureLoggerInitialized\n   * @description 确保日志器已初始化\n   */\n  private ensureLoggerInitialized(): void {\n    if (Object.keys(this.logger).length === 0) {\n      this.logger = this.loggerFactory.createLogger();\n    }\n  }\n\n  /**\n   * @private\n   * @method log\n   * @description 内部日志记录方法\n   */\n  private log(\n    level: LogLevel,\n    message: string,\n    context?: LogContext,\n    metadata?: LogMetadata,\n    error?: Error,\n  ): void {\n    this.ensureLoggerInitialized();\n    const config = this.configService.getConfig();\n\n    // 从CLS获取上下文信息\n    const requestId = this.cls.get<string>('requestId');\n    const tenantId = this.cls.get<string>('tenantId');\n    const userId = this.cls.get<string>('userId');\n\n    const logData: Record<string, unknown> = {\n      message,\n      context: context ?? LogContext.SYSTEM,\n      timestamp: new Date().toISOString(),\n      requestId,\n      tenantId,\n      userId,\n      ...metadata,\n    };\n\n    if (error) {\n      logData.error = {\n        message: error.message,\n        stack: config.stackTrace ? error.stack : undefined,\n        code: (error as unknown as Record<string, unknown>).code,\n        name: error.name,\n      };\n    }\n\n    // 更新统计信息\n    this.updateStats(level, context ?? LogContext.SYSTEM, message.length);\n\n    // 记录日志\n    this.logger[level](logData);\n\n    // 发送事件\n    this.eventEmitter.emit('logger.log', {\n      level,\n      message,\n      context: context ?? LogContext.SYSTEM,\n      metadata,\n      error,\n      timestamp: new Date(),\n    });\n  }\n\n  /**\n   * @private\n   * @method updateStats\n   * @description 更新统计信息\n   */\n  private updateStats(\n    level: LogLevel,\n    context: LogContext,\n    logSize: number,\n  ): void {\n    this.stats.totalLogs++;\n    this.stats.logsByLevel[level]++;\n    this.stats.logsByContext[context]++;\n    this.stats.totalLogSize += logSize;\n    this.stats.lastLogTime = new Date();\n  }\n}\n"],"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","ignoreList":[]}