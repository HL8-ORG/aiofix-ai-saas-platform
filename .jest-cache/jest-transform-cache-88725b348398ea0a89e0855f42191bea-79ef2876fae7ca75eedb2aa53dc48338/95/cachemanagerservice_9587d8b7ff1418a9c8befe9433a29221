fad4f1233e588a90869d02a7251fc741
"use strict";

/* istanbul ignore next */
function cov_1pteyjif5c() {
  var path = "/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-manager.service.ts";
  var hash = "9cf70558db1eb6bbf6972a23eacb559dc0fb71a8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-manager.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 19
        },
        end: {
          line: 28,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 25
        },
        end: {
          line: 3,
          column: 111
        }
      },
      "2": {
        start: {
          line: 3,
          column: 70
        },
        end: {
          line: 3,
          column: 111
        }
      },
      "3": {
        start: {
          line: 3,
          column: 112
        },
        end: {
          line: 3,
          column: 121
        }
      },
      "4": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 29
        }
      },
      "5": {
        start: {
          line: 4,
          column: 37
        },
        end: {
          line: 4,
          column: 100
        }
      },
      "6": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 91
        }
      },
      "7": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 6,
          column: 108
        }
      },
      "8": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 7,
          column: 23
        }
      },
      "9": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      "10": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "11": {
        start: {
          line: 9,
          column: 22
        },
        end: {
          line: 9,
          column: 24
        }
      },
      "12": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 81
        }
      },
      "13": {
        start: {
          line: 10,
          column: 33
        },
        end: {
          line: 10,
          column: 81
        }
      },
      "14": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 80
        }
      },
      "15": {
        start: {
          line: 11,
          column: 40
        },
        end: {
          line: 11,
          column: 80
        }
      },
      "16": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 182
        }
      },
      "17": {
        start: {
          line: 12,
          column: 48
        },
        end: {
          line: 12,
          column: 136
        }
      },
      "18": {
        start: {
          line: 12,
          column: 58
        },
        end: {
          line: 12,
          column: 136
        }
      },
      "19": {
        start: {
          line: 12,
          column: 137
        },
        end: {
          line: 12,
          column: 179
        }
      },
      "20": {
        start: {
          line: 13,
          column: 21
        },
        end: {
          line: 13,
          column: 134
        }
      },
      "21": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "22": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 44
        }
      },
      "23": {
        start: {
          line: 15,
          column: 35
        },
        end: {
          line: 15,
          column: 44
        }
      },
      "24": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 102
        }
      },
      "25": {
        start: {
          line: 16,
          column: 63
        },
        end: {
          line: 16,
          column: 102
        }
      },
      "26": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 59
        }
      },
      "27": {
        start: {
          line: 17,
          column: 40
        },
        end: {
          line: 17,
          column: 59
        }
      },
      "28": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 59
        }
      },
      "29": {
        start: {
          line: 18,
          column: 40
        },
        end: {
          line: 18,
          column: 59
        }
      },
      "30": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 65
        }
      },
      "31": {
        start: {
          line: 19,
          column: 41
        },
        end: {
          line: 19,
          column: 65
        }
      },
      "32": {
        start: {
          line: 21,
          column: 13
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "33": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 23,
          column: 37
        }
      },
      "34": {
        start: {
          line: 22,
          column: 34
        },
        end: {
          line: 22,
          column: 58
        }
      },
      "35": {
        start: {
          line: 23,
          column: 17
        },
        end: {
          line: 23,
          column: 37
        }
      },
      "36": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 74
        }
      },
      "37": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 74
        }
      },
      "38": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 16
        }
      },
      "39": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 35,
          column: 1
        }
      },
      "40": {
        start: {
          line: 30,
          column: 19
        },
        end: {
          line: 30,
          column: 39
        }
      },
      "41": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 33,
          column: 5
        }
      },
      "42": {
        start: {
          line: 31,
          column: 17
        },
        end: {
          line: 31,
          column: 18
        }
      },
      "43": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 96
        }
      },
      "44": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 37
        }
      },
      "45": {
        start: {
          line: 36,
          column: 24
        },
        end: {
          line: 39,
          column: 1
        }
      },
      "46": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 99
        }
      },
      "47": {
        start: {
          line: 37,
          column: 34
        },
        end: {
          line: 37,
          column: 99
        }
      },
      "48": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 121
        }
      },
      "49": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 40,
          column: 62
        }
      },
      "50": {
        start: {
          line: 41,
          column: 0
        },
        end: {
          line: 41,
          column: 37
        }
      },
      "51": {
        start: {
          line: 42,
          column: 17
        },
        end: {
          line: 42,
          column: 42
        }
      },
      "52": {
        start: {
          line: 43,
          column: 26
        },
        end: {
          line: 43,
          column: 66
        }
      },
      "53": {
        start: {
          line: 44,
          column: 18
        },
        end: {
          line: 44,
          column: 44
        }
      },
      "54": {
        start: {
          line: 60,
          column: 26
        },
        end: {
          line: 706,
          column: 4
        }
      },
      "55": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 61,
          column: 55
        }
      },
      "56": {
        start: {
          line: 63,
          column: 34
        },
        end: {
          line: 63,
          column: 36
        }
      },
      "57": {
        start: {
          line: 65,
          column: 30
        },
        end: {
          line: 696,
          column: 5
        }
      },
      "58": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 45
        }
      },
      "59": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 33
        }
      },
      "60": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 36
        }
      },
      "61": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 34
        }
      },
      "62": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 30
        }
      },
      "63": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 39
        }
      },
      "64": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 94,
          column: 14
        }
      },
      "65": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 48
        }
      },
      "66": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 36
        }
      },
      "67": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 35
        }
      },
      "68": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 32
        }
      },
      "69": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 92
        }
      },
      "70": {
        start: {
          line: 108,
          column: 30
        },
        end: {
          line: 108,
          column: 40
        }
      },
      "71": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 32
        }
      },
      "72": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "73": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 127,
          column: 17
        }
      },
      "74": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 114,
          column: 33
        }
      },
      "75": {
        start: {
          line: 114,
          column: 24
        },
        end: {
          line: 114,
          column: 33
        }
      },
      "76": {
        start: {
          line: 115,
          column: 34
        },
        end: {
          line: 115,
          column: 62
        }
      },
      "77": {
        start: {
          line: 116,
          column: 20
        },
        end: {
          line: 126,
          column: 21
        }
      },
      "78": {
        start: {
          line: 118,
          column: 24
        },
        end: {
          line: 118,
          column: 40
        }
      },
      "79": {
        start: {
          line: 119,
          column: 24
        },
        end: {
          line: 119,
          column: 52
        }
      },
      "80": {
        start: {
          line: 121,
          column: 24
        },
        end: {
          line: 123,
          column: 25
        }
      },
      "81": {
        start: {
          line: 122,
          column: 28
        },
        end: {
          line: 122,
          column: 82
        }
      },
      "82": {
        start: {
          line: 124,
          column: 24
        },
        end: {
          line: 124,
          column: 87
        }
      },
      "83": {
        start: {
          line: 125,
          column: 24
        },
        end: {
          line: 125,
          column: 37
        }
      },
      "84": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 44
        }
      },
      "85": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 54
        }
      },
      "86": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 28
        }
      },
      "87": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 121
        }
      },
      "88": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 135,
          column: 62
        }
      },
      "89": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 28
        }
      },
      "90": {
        start: {
          line: 148,
          column: 30
        },
        end: {
          line: 148,
          column: 40
        }
      },
      "91": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 177,
          column: 13
        }
      },
      "92": {
        start: {
          line: 150,
          column: 38
        },
        end: {
          line: 150,
          column: 83
        }
      },
      "93": {
        start: {
          line: 151,
          column: 30
        },
        end: {
          line: 151,
          column: 35
        }
      },
      "94": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 169,
          column: 17
        }
      },
      "95": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 155,
          column: 33
        }
      },
      "96": {
        start: {
          line: 155,
          column: 24
        },
        end: {
          line: 155,
          column: 33
        }
      },
      "97": {
        start: {
          line: 156,
          column: 20
        },
        end: {
          line: 168,
          column: 21
        }
      },
      "98": {
        start: {
          line: 157,
          column: 45
        },
        end: {
          line: 160,
          column: 26
        }
      },
      "99": {
        start: {
          line: 161,
          column: 24
        },
        end: {
          line: 164,
          column: 25
        }
      },
      "100": {
        start: {
          line: 162,
          column: 28
        },
        end: {
          line: 162,
          column: 43
        }
      },
      "101": {
        start: {
          line: 163,
          column: 28
        },
        end: {
          line: 163,
          column: 91
        }
      },
      "102": {
        start: {
          line: 167,
          column: 24
        },
        end: {
          line: 167,
          column: 145
        }
      },
      "103": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 44
        }
      },
      "104": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 31
        }
      },
      "105": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 121
        }
      },
      "106": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 62
        }
      },
      "107": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 29
        }
      },
      "108": {
        start: {
          line: 186,
          column: 30
        },
        end: {
          line: 186,
          column: 40
        }
      },
      "109": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 211,
          column: 13
        }
      },
      "110": {
        start: {
          line: 188,
          column: 30
        },
        end: {
          line: 188,
          column: 35
        }
      },
      "111": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 203,
          column: 17
        }
      },
      "112": {
        start: {
          line: 191,
          column: 20
        },
        end: {
          line: 192,
          column: 33
        }
      },
      "113": {
        start: {
          line: 192,
          column: 24
        },
        end: {
          line: 192,
          column: 33
        }
      },
      "114": {
        start: {
          line: 193,
          column: 20
        },
        end: {
          line: 202,
          column: 21
        }
      },
      "115": {
        start: {
          line: 194,
          column: 45
        },
        end: {
          line: 194,
          column: 76
        }
      },
      "116": {
        start: {
          line: 195,
          column: 24
        },
        end: {
          line: 198,
          column: 25
        }
      },
      "117": {
        start: {
          line: 196,
          column: 28
        },
        end: {
          line: 196,
          column: 43
        }
      },
      "118": {
        start: {
          line: 197,
          column: 28
        },
        end: {
          line: 197,
          column: 87
        }
      },
      "119": {
        start: {
          line: 201,
          column: 24
        },
        end: {
          line: 201,
          column: 150
        }
      },
      "120": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 44
        }
      },
      "121": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 31
        }
      },
      "122": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 122
        }
      },
      "123": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 62
        }
      },
      "124": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 29
        }
      },
      "125": {
        start: {
          line: 220,
          column: 30
        },
        end: {
          line: 220,
          column: 40
        }
      },
      "126": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 32
        }
      },
      "127": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 242,
          column: 13
        }
      },
      "128": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 234,
          column: 17
        }
      },
      "129": {
        start: {
          line: 225,
          column: 20
        },
        end: {
          line: 226,
          column: 33
        }
      },
      "130": {
        start: {
          line: 226,
          column: 24
        },
        end: {
          line: 226,
          column: 33
        }
      },
      "131": {
        start: {
          line: 227,
          column: 35
        },
        end: {
          line: 227,
          column: 66
        }
      },
      "132": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 233,
          column: 21
        }
      },
      "133": {
        start: {
          line: 229,
          column: 24
        },
        end: {
          line: 229,
          column: 40
        }
      },
      "134": {
        start: {
          line: 230,
          column: 24
        },
        end: {
          line: 230,
          column: 52
        }
      },
      "135": {
        start: {
          line: 231,
          column: 24
        },
        end: {
          line: 231,
          column: 83
        }
      },
      "136": {
        start: {
          line: 232,
          column: 24
        },
        end: {
          line: 232,
          column: 36
        }
      },
      "137": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 44
        }
      },
      "138": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 29
        }
      },
      "139": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 126
        }
      },
      "140": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 62
        }
      },
      "141": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 29
        }
      },
      "142": {
        start: {
          line: 251,
          column: 30
        },
        end: {
          line: 251,
          column: 40
        }
      },
      "143": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 276,
          column: 13
        }
      },
      "144": {
        start: {
          line: 253,
          column: 30
        },
        end: {
          line: 253,
          column: 35
        }
      },
      "145": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 268,
          column: 17
        }
      },
      "146": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 257,
          column: 33
        }
      },
      "147": {
        start: {
          line: 257,
          column: 24
        },
        end: {
          line: 257,
          column: 33
        }
      },
      "148": {
        start: {
          line: 258,
          column: 20
        },
        end: {
          line: 267,
          column: 21
        }
      },
      "149": {
        start: {
          line: 259,
          column: 45
        },
        end: {
          line: 259,
          column: 81
        }
      },
      "150": {
        start: {
          line: 260,
          column: 24
        },
        end: {
          line: 263,
          column: 25
        }
      },
      "151": {
        start: {
          line: 261,
          column: 28
        },
        end: {
          line: 261,
          column: 43
        }
      },
      "152": {
        start: {
          line: 262,
          column: 28
        },
        end: {
          line: 262,
          column: 92
        }
      },
      "153": {
        start: {
          line: 266,
          column: 24
        },
        end: {
          line: 266,
          column: 132
        }
      },
      "154": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 44
        }
      },
      "155": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 31
        }
      },
      "156": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 104
        }
      },
      "157": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 57
        }
      },
      "158": {
        start: {
          line: 275,
          column: 16
        },
        end: {
          line: 275,
          column: 29
        }
      },
      "159": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 309,
          column: 13
        }
      },
      "160": {
        start: {
          line: 286,
          column: 35
        },
        end: {
          line: 286,
          column: 37
        }
      },
      "161": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 297,
          column: 17
        }
      },
      "162": {
        start: {
          line: 288,
          column: 20
        },
        end: {
          line: 296,
          column: 21
        }
      },
      "163": {
        start: {
          line: 289,
          column: 24
        },
        end: {
          line: 295,
          column: 25
        }
      },
      "164": {
        start: {
          line: 290,
          column: 28
        },
        end: {
          line: 290,
          column: 78
        }
      },
      "165": {
        start: {
          line: 293,
          column: 28
        },
        end: {
          line: 293,
          column: 132
        }
      },
      "166": {
        start: {
          line: 294,
          column: 28
        },
        end: {
          line: 294,
          column: 52
        }
      },
      "167": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 300,
          column: 82
        }
      },
      "168": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 301,
          column: 113
        }
      },
      "169": {
        start: {
          line: 301,
          column: 91
        },
        end: {
          line: 301,
          column: 104
        }
      },
      "170": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 51
        }
      },
      "171": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 52
        }
      },
      "172": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 304,
          column: 41
        }
      },
      "173": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 307,
          column: 109
        }
      },
      "174": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 308,
          column: 34
        }
      },
      "175": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 361,
          column: 13
        }
      },
      "176": {
        start: {
          line: 318,
          column: 36
        },
        end: {
          line: 318,
          column: 37
        }
      },
      "177": {
        start: {
          line: 319,
          column: 40
        },
        end: {
          line: 319,
          column: 41
        }
      },
      "178": {
        start: {
          line: 320,
          column: 31
        },
        end: {
          line: 320,
          column: 36
        }
      },
      "179": {
        start: {
          line: 321,
          column: 35
        },
        end: {
          line: 321,
          column: 37
        }
      },
      "180": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 341,
          column: 17
        }
      },
      "181": {
        start: {
          line: 324,
          column: 20
        },
        end: {
          line: 340,
          column: 21
        }
      },
      "182": {
        start: {
          line: 325,
          column: 24
        },
        end: {
          line: 339,
          column: 25
        }
      },
      "183": {
        start: {
          line: 326,
          column: 48
        },
        end: {
          line: 326,
          column: 79
        }
      },
      "184": {
        start: {
          line: 327,
          column: 28
        },
        end: {
          line: 327,
          column: 74
        }
      },
      "185": {
        start: {
          line: 328,
          column: 28
        },
        end: {
          line: 334,
          column: 29
        }
      },
      "186": {
        start: {
          line: 329,
          column: 32
        },
        end: {
          line: 329,
          column: 48
        }
      },
      "187": {
        start: {
          line: 332,
          column: 32
        },
        end: {
          line: 332,
          column: 48
        }
      },
      "188": {
        start: {
          line: 333,
          column: 32
        },
        end: {
          line: 333,
          column: 86
        }
      },
      "189": {
        start: {
          line: 337,
          column: 28
        },
        end: {
          line: 337,
          column: 44
        }
      },
      "190": {
        start: {
          line: 338,
          column: 28
        },
        end: {
          line: 338,
          column: 57
        }
      },
      "191": {
        start: {
          line: 342,
          column: 37
        },
        end: {
          line: 342,
          column: 107
        }
      },
      "192": {
        start: {
          line: 342,
          column: 86
        },
        end: {
          line: 342,
          column: 99
        }
      },
      "193": {
        start: {
          line: 343,
          column: 44
        },
        end: {
          line: 343,
          column: 99
        }
      },
      "194": {
        start: {
          line: 344,
          column: 16
        },
        end: {
          line: 350,
          column: 18
        }
      },
      "195": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 353,
          column: 110
        }
      },
      "196": {
        start: {
          line: 354,
          column: 16
        },
        end: {
          line: 360,
          column: 18
        }
      },
      "197": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 390,
          column: 13
        }
      },
      "198": {
        start: {
          line: 371,
          column: 16
        },
        end: {
          line: 373,
          column: 17
        }
      },
      "199": {
        start: {
          line: 372,
          column: 20
        },
        end: {
          line: 372,
          column: 124
        }
      },
      "200": {
        start: {
          line: 374,
          column: 16
        },
        end: {
          line: 379,
          column: 19
        }
      },
      "201": {
        start: {
          line: 380,
          column: 16
        },
        end: {
          line: 380,
          column: 131
        }
      },
      "202": {
        start: {
          line: 381,
          column: 16
        },
        end: {
          line: 384,
          column: 19
        }
      },
      "203": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 385,
          column: 28
        }
      },
      "204": {
        start: {
          line: 388,
          column: 16
        },
        end: {
          line: 388,
          column: 125
        }
      },
      "205": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 389,
          column: 29
        }
      },
      "206": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 412,
          column: 13
        }
      },
      "207": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 403,
          column: 17
        }
      },
      "208": {
        start: {
          line: 401,
          column: 20
        },
        end: {
          line: 401,
          column: 103
        }
      },
      "209": {
        start: {
          line: 402,
          column: 20
        },
        end: {
          line: 402,
          column: 33
        }
      },
      "210": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 41
        }
      },
      "211": {
        start: {
          line: 405,
          column: 16
        },
        end: {
          line: 405,
          column: 93
        }
      },
      "212": {
        start: {
          line: 406,
          column: 16
        },
        end: {
          line: 406,
          column: 65
        }
      },
      "213": {
        start: {
          line: 407,
          column: 16
        },
        end: {
          line: 407,
          column: 28
        }
      },
      "214": {
        start: {
          line: 410,
          column: 16
        },
        end: {
          line: 410,
          column: 121
        }
      },
      "215": {
        start: {
          line: 411,
          column: 16
        },
        end: {
          line: 411,
          column: 29
        }
      },
      "216": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 436,
          column: 13
        }
      },
      "217": {
        start: {
          line: 423,
          column: 30
        },
        end: {
          line: 423,
          column: 51
        }
      },
      "218": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 427,
          column: 17
        }
      },
      "219": {
        start: {
          line: 425,
          column: 20
        },
        end: {
          line: 425,
          column: 103
        }
      },
      "220": {
        start: {
          line: 426,
          column: 20
        },
        end: {
          line: 426,
          column: 33
        }
      },
      "221": {
        start: {
          line: 428,
          column: 16
        },
        end: {
          line: 428,
          column: 40
        }
      },
      "222": {
        start: {
          line: 429,
          column: 16
        },
        end: {
          line: 429,
          column: 121
        }
      },
      "223": {
        start: {
          line: 430,
          column: 16
        },
        end: {
          line: 430,
          column: 74
        }
      },
      "224": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 431,
          column: 28
        }
      },
      "225": {
        start: {
          line: 434,
          column: 16
        },
        end: {
          line: 434,
          column: 121
        }
      },
      "226": {
        start: {
          line: 435,
          column: 16
        },
        end: {
          line: 435,
          column: 29
        }
      },
      "227": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 81
        }
      },
      "228": {
        start: {
          line: 444,
          column: 66
        },
        end: {
          line: 444,
          column: 78
        }
      },
      "229": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 473,
          column: 13
        }
      },
      "230": {
        start: {
          line: 453,
          column: 16
        },
        end: {
          line: 462,
          column: 17
        }
      },
      "231": {
        start: {
          line: 454,
          column: 20
        },
        end: {
          line: 461,
          column: 21
        }
      },
      "232": {
        start: {
          line: 455,
          column: 24
        },
        end: {
          line: 460,
          column: 25
        }
      },
      "233": {
        start: {
          line: 456,
          column: 28
        },
        end: {
          line: 456,
          column: 61
        }
      },
      "234": {
        start: {
          line: 459,
          column: 28
        },
        end: {
          line: 459,
          column: 134
        }
      },
      "235": {
        start: {
          line: 464,
          column: 16
        },
        end: {
          line: 464,
          column: 38
        }
      },
      "236": {
        start: {
          line: 465,
          column: 16
        },
        end: {
          line: 465,
          column: 34
        }
      },
      "237": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 466,
          column: 43
        }
      },
      "238": {
        start: {
          line: 467,
          column: 16
        },
        end: {
          line: 467,
          column: 52
        }
      },
      "239": {
        start: {
          line: 468,
          column: 16
        },
        end: {
          line: 468,
          column: 95
        }
      },
      "240": {
        start: {
          line: 469,
          column: 16
        },
        end: {
          line: 469,
          column: 50
        }
      },
      "241": {
        start: {
          line: 472,
          column: 16
        },
        end: {
          line: 472,
          column: 111
        }
      },
      "242": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 480,
          column: 34
        }
      },
      "243": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 481,
          column: 31
        }
      },
      "244": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 482,
          column: 90
        }
      },
      "245": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 505,
          column: 14
        }
      },
      "246": {
        start: {
          line: 513,
          column: 12
        },
        end: {
          line: 517,
          column: 13
        }
      },
      "247": {
        start: {
          line: 514,
          column: 16
        },
        end: {
          line: 516,
          column: 17
        }
      },
      "248": {
        start: {
          line: 515,
          column: 20
        },
        end: {
          line: 515,
          column: 47
        }
      },
      "249": {
        start: {
          line: 526,
          column: 12
        },
        end: {
          line: 528,
          column: 57
        }
      },
      "250": {
        start: {
          line: 527,
          column: 33
        },
        end: {
          line: 527,
          column: 46
        }
      },
      "251": {
        start: {
          line: 528,
          column: 32
        },
        end: {
          line: 528,
          column: 55
        }
      },
      "252": {
        start: {
          line: 539,
          column: 12
        },
        end: {
          line: 562,
          column: 13
        }
      },
      "253": {
        start: {
          line: 540,
          column: 37
        },
        end: {
          line: 544,
          column: 60
        }
      },
      "254": {
        start: {
          line: 541,
          column: 37
        },
        end: {
          line: 543,
          column: 52
        }
      },
      "255": {
        start: {
          line: 544,
          column: 36
        },
        end: {
          line: 544,
          column: 59
        }
      },
      "256": {
        start: {
          line: 545,
          column: 16
        },
        end: {
          line: 558,
          column: 17
        }
      },
      "257": {
        start: {
          line: 546,
          column: 20
        },
        end: {
          line: 557,
          column: 21
        }
      },
      "258": {
        start: {
          line: 547,
          column: 24
        },
        end: {
          line: 547,
          column: 60
        }
      },
      "259": {
        start: {
          line: 548,
          column: 24
        },
        end: {
          line: 553,
          column: 27
        }
      },
      "260": {
        start: {
          line: 556,
          column: 24
        },
        end: {
          line: 556,
          column: 149
        }
      },
      "261": {
        start: {
          line: 561,
          column: 16
        },
        end: {
          line: 561,
          column: 117
        }
      },
      "262": {
        start: {
          line: 571,
          column: 33
        },
        end: {
          line: 571,
          column: 55
        }
      },
      "263": {
        start: {
          line: 572,
          column: 12
        },
        end: {
          line: 572,
          column: 51
        }
      },
      "264": {
        start: {
          line: 573,
          column: 12
        },
        end: {
          line: 573,
          column: 44
        }
      },
      "265": {
        start: {
          line: 574,
          column: 12
        },
        end: {
          line: 574,
          column: 66
        }
      },
      "266": {
        start: {
          line: 584,
          column: 12
        },
        end: {
          line: 596,
          column: 13
        }
      },
      "267": {
        start: {
          line: 585,
          column: 16
        },
        end: {
          line: 595,
          column: 17
        }
      },
      "268": {
        start: {
          line: 586,
          column: 20
        },
        end: {
          line: 591,
          column: 23
        }
      },
      "269": {
        start: {
          line: 594,
          column: 20
        },
        end: {
          line: 594,
          column: 122
        }
      },
      "270": {
        start: {
          line: 604,
          column: 12
        },
        end: {
          line: 611,
          column: 13
        }
      },
      "271": {
        start: {
          line: 605,
          column: 16
        },
        end: {
          line: 609,
          column: 51
        }
      },
      "272": {
        start: {
          line: 606,
          column: 20
        },
        end: {
          line: 608,
          column: 23
        }
      },
      "273": {
        start: {
          line: 607,
          column: 24
        },
        end: {
          line: 607,
          column: 115
        }
      },
      "274": {
        start: {
          line: 610,
          column: 16
        },
        end: {
          line: 610,
          column: 136
        }
      },
      "275": {
        start: {
          line: 619,
          column: 12
        },
        end: {
          line: 623,
          column: 13
        }
      },
      "276": {
        start: {
          line: 620,
          column: 16
        },
        end: {
          line: 620,
          column: 52
        }
      },
      "277": {
        start: {
          line: 621,
          column: 16
        },
        end: {
          line: 621,
          column: 49
        }
      },
      "278": {
        start: {
          line: 622,
          column: 16
        },
        end: {
          line: 622,
          column: 89
        }
      },
      "279": {
        start: {
          line: 631,
          column: 12
        },
        end: {
          line: 638,
          column: 13
        }
      },
      "280": {
        start: {
          line: 632,
          column: 16
        },
        end: {
          line: 636,
          column: 48
        }
      },
      "281": {
        start: {
          line: 633,
          column: 20
        },
        end: {
          line: 635,
          column: 23
        }
      },
      "282": {
        start: {
          line: 634,
          column: 24
        },
        end: {
          line: 634,
          column: 112
        }
      },
      "283": {
        start: {
          line: 637,
          column: 16
        },
        end: {
          line: 637,
          column: 130
        }
      },
      "284": {
        start: {
          line: 646,
          column: 12
        },
        end: {
          line: 650,
          column: 13
        }
      },
      "285": {
        start: {
          line: 647,
          column: 16
        },
        end: {
          line: 647,
          column: 49
        }
      },
      "286": {
        start: {
          line: 648,
          column: 16
        },
        end: {
          line: 648,
          column: 46
        }
      },
      "287": {
        start: {
          line: 649,
          column: 16
        },
        end: {
          line: 649,
          column: 86
        }
      },
      "288": {
        start: {
          line: 658,
          column: 12
        },
        end: {
          line: 669,
          column: 13
        }
      },
      "289": {
        start: {
          line: 659,
          column: 31
        },
        end: {
          line: 659,
          column: 53
        }
      },
      "290": {
        start: {
          line: 660,
          column: 30
        },
        end: {
          line: 660,
          column: 51
        }
      },
      "291": {
        start: {
          line: 661,
          column: 16
        },
        end: {
          line: 661,
          column: 64
        }
      },
      "292": {
        start: {
          line: 663,
          column: 16
        },
        end: {
          line: 665,
          column: 17
        }
      },
      "293": {
        start: {
          line: 664,
          column: 20
        },
        end: {
          line: 664,
          column: 94
        }
      },
      "294": {
        start: {
          line: 668,
          column: 16
        },
        end: {
          line: 668,
          column: 117
        }
      },
      "295": {
        start: {
          line: 677,
          column: 12
        },
        end: {
          line: 694,
          column: 13
        }
      },
      "296": {
        start: {
          line: 679,
          column: 16
        },
        end: {
          line: 689,
          column: 17
        }
      },
      "297": {
        start: {
          line: 680,
          column: 20
        },
        end: {
          line: 688,
          column: 21
        }
      },
      "298": {
        start: {
          line: 681,
          column: 24
        },
        end: {
          line: 687,
          column: 25
        }
      },
      "299": {
        start: {
          line: 683,
          column: 28
        },
        end: {
          line: 683,
          column: 77
        }
      },
      "300": {
        start: {
          line: 686,
          column: 28
        },
        end: {
          line: 686,
          column: 132
        }
      },
      "301": {
        start: {
          line: 690,
          column: 16
        },
        end: {
          line: 690,
          column: 89
        }
      },
      "302": {
        start: {
          line: 693,
          column: 16
        },
        end: {
          line: 693,
          column: 114
        }
      },
      "303": {
        start: {
          line: 697,
          column: 4
        },
        end: {
          line: 697,
          column: 57
        }
      },
      "304": {
        start: {
          line: 698,
          column: 4
        },
        end: {
          line: 704,
          column: 9
        }
      },
      "305": {
        start: {
          line: 699,
          column: 26
        },
        end: {
          line: 699,
          column: 104
        }
      },
      "306": {
        start: {
          line: 700,
          column: 8
        },
        end: {
          line: 700,
          column: 181
        }
      },
      "307": {
        start: {
          line: 701,
          column: 8
        },
        end: {
          line: 701,
          column: 66
        }
      },
      "308": {
        start: {
          line: 702,
          column: 8
        },
        end: {
          line: 702,
          column: 150
        }
      },
      "309": {
        start: {
          line: 702,
          column: 23
        },
        end: {
          line: 702,
          column: 150
        }
      },
      "310": {
        start: {
          line: 703,
          column: 8
        },
        end: {
          line: 703,
          column: 63
        }
      },
      "311": {
        start: {
          line: 705,
          column: 4
        },
        end: {
          line: 705,
          column: 44
        }
      },
      "312": {
        start: {
          line: 707,
          column: 0
        },
        end: {
          line: 707,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 50
          },
          end: {
            line: 2,
            column: 51
          }
        },
        loc: {
          start: {
            line: 2,
            column: 136
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "accept",
        decl: {
          start: {
            line: 3,
            column: 13
          },
          end: {
            line: 3,
            column: 19
          }
        },
        loc: {
          start: {
            line: 3,
            column: 23
          },
          end: {
            line: 3,
            column: 123
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 12,
            column: 33
          },
          end: {
            line: 12,
            column: 34
          }
        },
        loc: {
          start: {
            line: 12,
            column: 46
          },
          end: {
            line: 12,
            column: 181
          }
        },
        line: 12
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 29,
            column: 60
          },
          end: {
            line: 29,
            column: 61
          }
        },
        loc: {
          start: {
            line: 29,
            column: 100
          },
          end: {
            line: 35,
            column: 1
          }
        },
        line: 29
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 36,
            column: 60
          },
          end: {
            line: 36,
            column: 61
          }
        },
        loc: {
          start: {
            line: 36,
            column: 87
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 36
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 60,
            column: 27
          },
          end: {
            line: 60,
            column: 28
          }
        },
        loc: {
          start: {
            line: 60,
            column: 33
          },
          end: {
            line: 706,
            column: 1
          }
        },
        line: 60
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        },
        loc: {
          start: {
            line: 66,
            column: 50
          },
          end: {
            line: 100,
            column: 9
          }
        },
        line: 66
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        loc: {
          start: {
            line: 107,
            column: 23
          },
          end: {
            line: 138,
            column: 9
          }
        },
        line: 107
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        },
        loc: {
          start: {
            line: 147,
            column: 39
          },
          end: {
            line: 178,
            column: 9
          }
        },
        line: 147
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        loc: {
          start: {
            line: 185,
            column: 26
          },
          end: {
            line: 212,
            column: 9
          }
        },
        line: 185
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        },
        loc: {
          start: {
            line: 219,
            column: 26
          },
          end: {
            line: 243,
            column: 9
          }
        },
        line: 219
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        loc: {
          start: {
            line: 250,
            column: 31
          },
          end: {
            line: 277,
            column: 9
          }
        },
        line: 250
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        loc: {
          start: {
            line: 283,
            column: 25
          },
          end: {
            line: 310,
            column: 9
          }
        },
        line: 283
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 301,
            column: 82
          },
          end: {
            line: 301,
            column: 83
          }
        },
        loc: {
          start: {
            line: 301,
            column: 91
          },
          end: {
            line: 301,
            column: 104
          }
        },
        line: 301
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 316,
            column: 9
          }
        },
        loc: {
          start: {
            line: 316,
            column: 26
          },
          end: {
            line: 362,
            column: 9
          }
        },
        line: 316
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 342,
            column: 77
          },
          end: {
            line: 342,
            column: 78
          }
        },
        loc: {
          start: {
            line: 342,
            column: 86
          },
          end: {
            line: 342,
            column: 99
          }
        },
        line: 342
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 369,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        },
        loc: {
          start: {
            line: 369,
            column: 25
          },
          end: {
            line: 391,
            column: 9
          }
        },
        line: 369
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        },
        loc: {
          start: {
            line: 398,
            column: 26
          },
          end: {
            line: 413,
            column: 9
          }
        },
        line: 398
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        },
        loc: {
          start: {
            line: 421,
            column: 35
          },
          end: {
            line: 437,
            column: 9
          }
        },
        line: 421
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 443,
            column: 8
          },
          end: {
            line: 443,
            column: 9
          }
        },
        loc: {
          start: {
            line: 443,
            column: 20
          },
          end: {
            line: 445,
            column: 9
          }
        },
        line: 443
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 444,
            column: 56
          },
          end: {
            line: 444,
            column: 57
          }
        },
        loc: {
          start: {
            line: 444,
            column: 66
          },
          end: {
            line: 444,
            column: 78
          }
        },
        line: 444
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 450,
            column: 8
          },
          end: {
            line: 450,
            column: 9
          }
        },
        loc: {
          start: {
            line: 450,
            column: 27
          },
          end: {
            line: 474,
            column: 9
          }
        },
        line: 450
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 479,
            column: 8
          },
          end: {
            line: 479,
            column: 9
          }
        },
        loc: {
          start: {
            line: 479,
            column: 20
          },
          end: {
            line: 483,
            column: 9
          }
        },
        line: 479
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 491,
            column: 8
          },
          end: {
            line: 491,
            column: 9
          }
        },
        loc: {
          start: {
            line: 491,
            column: 26
          },
          end: {
            line: 506,
            column: 9
          }
        },
        line: 491
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 512,
            column: 8
          },
          end: {
            line: 512,
            column: 9
          }
        },
        loc: {
          start: {
            line: 512,
            column: 27
          },
          end: {
            line: 518,
            column: 9
          }
        },
        line: 512
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 525,
            column: 8
          },
          end: {
            line: 525,
            column: 9
          }
        },
        loc: {
          start: {
            line: 525,
            column: 26
          },
          end: {
            line: 529,
            column: 9
          }
        },
        line: 525
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 527,
            column: 24
          },
          end: {
            line: 527,
            column: 25
          }
        },
        loc: {
          start: {
            line: 527,
            column: 33
          },
          end: {
            line: 527,
            column: 46
          }
        },
        line: 527
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 528,
            column: 22
          },
          end: {
            line: 528,
            column: 23
          }
        },
        loc: {
          start: {
            line: 528,
            column: 32
          },
          end: {
            line: 528,
            column: 55
          }
        },
        line: 528
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 538,
            column: 8
          },
          end: {
            line: 538,
            column: 9
          }
        },
        loc: {
          start: {
            line: 538,
            column: 64
          },
          end: {
            line: 563,
            column: 9
          }
        },
        line: 538
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 541,
            column: 28
          },
          end: {
            line: 541,
            column: 29
          }
        },
        loc: {
          start: {
            line: 541,
            column: 37
          },
          end: {
            line: 543,
            column: 52
          }
        },
        line: 541
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 544,
            column: 26
          },
          end: {
            line: 544,
            column: 27
          }
        },
        loc: {
          start: {
            line: 544,
            column: 36
          },
          end: {
            line: 544,
            column: 59
          }
        },
        line: 544
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 570,
            column: 8
          },
          end: {
            line: 570,
            column: 9
          }
        },
        loc: {
          start: {
            line: 570,
            column: 31
          },
          end: {
            line: 575,
            column: 9
          }
        },
        line: 570
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 583,
            column: 8
          },
          end: {
            line: 583,
            column: 9
          }
        },
        loc: {
          start: {
            line: 583,
            column: 31
          },
          end: {
            line: 597,
            column: 9
          }
        },
        line: 583
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 603,
            column: 8
          },
          end: {
            line: 603,
            column: 9
          }
        },
        loc: {
          start: {
            line: 603,
            column: 26
          },
          end: {
            line: 612,
            column: 9
          }
        },
        line: 603
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 605,
            column: 51
          },
          end: {
            line: 605,
            column: 52
          }
        },
        loc: {
          start: {
            line: 605,
            column: 57
          },
          end: {
            line: 609,
            column: 17
          }
        },
        line: 605
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 606,
            column: 51
          },
          end: {
            line: 606,
            column: 52
          }
        },
        loc: {
          start: {
            line: 606,
            column: 60
          },
          end: {
            line: 608,
            column: 21
          }
        },
        line: 606
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 618,
            column: 8
          },
          end: {
            line: 618,
            column: 9
          }
        },
        loc: {
          start: {
            line: 618,
            column: 25
          },
          end: {
            line: 624,
            column: 9
          }
        },
        line: 618
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 630,
            column: 8
          },
          end: {
            line: 630,
            column: 9
          }
        },
        loc: {
          start: {
            line: 630,
            column: 23
          },
          end: {
            line: 639,
            column: 9
          }
        },
        line: 630
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 632,
            column: 48
          },
          end: {
            line: 632,
            column: 49
          }
        },
        loc: {
          start: {
            line: 632,
            column: 54
          },
          end: {
            line: 636,
            column: 17
          }
        },
        line: 632
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 633,
            column: 48
          },
          end: {
            line: 633,
            column: 49
          }
        },
        loc: {
          start: {
            line: 633,
            column: 57
          },
          end: {
            line: 635,
            column: 21
          }
        },
        line: 633
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 645,
            column: 8
          },
          end: {
            line: 645,
            column: 9
          }
        },
        loc: {
          start: {
            line: 645,
            column: 22
          },
          end: {
            line: 651,
            column: 9
          }
        },
        line: 645
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 657,
            column: 8
          },
          end: {
            line: 657,
            column: 9
          }
        },
        loc: {
          start: {
            line: 657,
            column: 34
          },
          end: {
            line: 670,
            column: 9
          }
        },
        line: 657
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 676,
            column: 8
          },
          end: {
            line: 676,
            column: 9
          }
        },
        loc: {
          start: {
            line: 676,
            column: 31
          },
          end: {
            line: 695,
            column: 9
          }
        },
        line: 676
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 698,
            column: 5
          },
          end: {
            line: 698,
            column: 6
          }
        },
        loc: {
          start: {
            line: 698,
            column: 11
          },
          end: {
            line: 704,
            column: 5
          }
        },
        line: 698
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 19
          },
          end: {
            line: 28,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 20
          },
          end: {
            line: 2,
            column: 24
          }
        }, {
          start: {
            line: 2,
            column: 28
          },
          end: {
            line: 2,
            column: 45
          }
        }, {
          start: {
            line: 2,
            column: 50
          },
          end: {
            line: 28,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 25
          },
          end: {
            line: 3,
            column: 111
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 25
          },
          end: {
            line: 3,
            column: 111
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 29
          },
          end: {
            line: 3,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 29
          },
          end: {
            line: 3,
            column: 41
          }
        }, {
          start: {
            line: 3,
            column: 45
          },
          end: {
            line: 3,
            column: 68
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 4,
            column: 37
          },
          end: {
            line: 4,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 57
          },
          end: {
            line: 4,
            column: 62
          }
        }, {
          start: {
            line: 4,
            column: 65
          },
          end: {
            line: 4,
            column: 100
          }
        }],
        line: 4
      },
      "4": {
        loc: {
          start: {
            line: 4,
            column: 65
          },
          end: {
            line: 4,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 4,
            column: 85
          },
          end: {
            line: 4,
            column: 90
          }
        }, {
          start: {
            line: 4,
            column: 93
          },
          end: {
            line: 4,
            column: 100
          }
        }],
        line: 4
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 41
          },
          end: {
            line: 5,
            column: 84
          }
        }, {
          start: {
            line: 5,
            column: 87
          },
          end: {
            line: 5,
            column: 91
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 30
          }
        }, {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 38
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 5,
            column: 41
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 63
          },
          end: {
            line: 5,
            column: 67
          }
        }, {
          start: {
            line: 5,
            column: 70
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "8": {
        loc: {
          start: {
            line: 6,
            column: 21
          },
          end: {
            line: 6,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 6,
            column: 21
          },
          end: {
            line: 6,
            column: 33
          }
        }, {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 107
          }
        }],
        line: 6
      },
      "9": {
        loc: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 6,
            column: 47
          },
          end: {
            line: 6,
            column: 102
          }
        }, {
          start: {
            line: 6,
            column: 105
          },
          end: {
            line: 6,
            column: 107
          }
        }],
        line: 6
      },
      "10": {
        loc: {
          start: {
            line: 10,
            column: 46
          },
          end: {
            line: 10,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 10,
            column: 63
          },
          end: {
            line: 10,
            column: 65
          }
        }, {
          start: {
            line: 10,
            column: 68
          },
          end: {
            line: 10,
            column: 80
          }
        }],
        line: 10
      },
      "11": {
        loc: {
          start: {
            line: 12,
            column: 48
          },
          end: {
            line: 12,
            column: 136
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 48
          },
          end: {
            line: 12,
            column: 136
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      },
      "12": {
        loc: {
          start: {
            line: 12,
            column: 167
          },
          end: {
            line: 12,
            column: 176
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 167
          },
          end: {
            line: 12,
            column: 168
          }
        }, {
          start: {
            line: 12,
            column: 172
          },
          end: {
            line: 12,
            column: 176
          }
        }],
        line: 12
      },
      "13": {
        loc: {
          start: {
            line: 13,
            column: 40
          },
          end: {
            line: 13,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 62
          },
          end: {
            line: 13,
            column: 106
          }
        }, {
          start: {
            line: 13,
            column: 109
          },
          end: {
            line: 13,
            column: 124
          }
        }],
        line: 13
      },
      "14": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: 21,
            column: 13
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 14
      },
      "15": {
        loc: {
          start: {
            line: 15,
            column: 12
          },
          end: {
            line: 15,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 12
          },
          end: {
            line: 15,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "16": {
        loc: {
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 16,
            column: 102
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 16,
            column: 102
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "17": {
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 16,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 16,
            column: 31
          }
        }, {
          start: {
            line: 16,
            column: 35
          },
          end: {
            line: 16,
            column: 61
          }
        }],
        line: 16
      },
      "18": {
        loc: {
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 17,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 12
          },
          end: {
            line: 17,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "19": {
        loc: {
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "20": {
        loc: {
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 19,
            column: 65
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 19,
            column: 65
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "21": {
        loc: {
          start: {
            line: 21,
            column: 13
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 13
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "22": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 23,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 23,
            column: 37
          }
        }, {
          start: {
            line: 23,
            column: 17
          },
          end: {
            line: 23,
            column: 37
          }
        }],
        line: 22
      },
      "23": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 74
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 74
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "24": {
        loc: {
          start: {
            line: 29,
            column: 24
          },
          end: {
            line: 35,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 25
          },
          end: {
            line: 29,
            column: 29
          }
        }, {
          start: {
            line: 29,
            column: 33
          },
          end: {
            line: 29,
            column: 55
          }
        }, {
          start: {
            line: 29,
            column: 60
          },
          end: {
            line: 35,
            column: 1
          }
        }],
        line: 29
      },
      "25": {
        loc: {
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 32,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 27
          },
          end: {
            line: 32,
            column: 63
          }
        }, {
          start: {
            line: 32,
            column: 66
          },
          end: {
            line: 32,
            column: 95
          }
        }],
        line: 32
      },
      "26": {
        loc: {
          start: {
            line: 34,
            column: 11
          },
          end: {
            line: 34,
            column: 36
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 34,
            column: 22
          },
          end: {
            line: 34,
            column: 27
          }
        }, {
          start: {
            line: 34,
            column: 30
          },
          end: {
            line: 34,
            column: 36
          }
        }],
        line: 34
      },
      "27": {
        loc: {
          start: {
            line: 36,
            column: 24
          },
          end: {
            line: 39,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 25
          },
          end: {
            line: 36,
            column: 29
          }
        }, {
          start: {
            line: 36,
            column: 33
          },
          end: {
            line: 36,
            column: 55
          }
        }, {
          start: {
            line: 36,
            column: 60
          },
          end: {
            line: 39,
            column: 1
          }
        }],
        line: 36
      },
      "28": {
        loc: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 99
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 99
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "29": {
        loc: {
          start: {
            line: 37,
            column: 41
          },
          end: {
            line: 37,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 37,
            column: 60
          },
          end: {
            line: 37,
            column: 93
          }
        }, {
          start: {
            line: 37,
            column: 96
          },
          end: {
            line: 37,
            column: 98
          }
        }],
        line: 37
      },
      "30": {
        loc: {
          start: {
            line: 38,
            column: 73
          },
          end: {
            line: 38,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 82
          },
          end: {
            line: 38,
            column: 110
          }
        }, {
          start: {
            line: 38,
            column: 113
          },
          end: {
            line: 38,
            column: 117
          }
        }],
        line: 38
      },
      "31": {
        loc: {
          start: {
            line: 113,
            column: 20
          },
          end: {
            line: 114,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 20
          },
          end: {
            line: 114,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "32": {
        loc: {
          start: {
            line: 116,
            column: 20
          },
          end: {
            line: 126,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 20
          },
          end: {
            line: 126,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "33": {
        loc: {
          start: {
            line: 121,
            column: 24
          },
          end: {
            line: 123,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 24
          },
          end: {
            line: 123,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "34": {
        loc: {
          start: {
            line: 154,
            column: 20
          },
          end: {
            line: 155,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 20
          },
          end: {
            line: 155,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "35": {
        loc: {
          start: {
            line: 154,
            column: 24
          },
          end: {
            line: 154,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 24
          },
          end: {
            line: 154,
            column: 38
          }
        }, {
          start: {
            line: 154,
            column: 42
          },
          end: {
            line: 154,
            column: 56
          }
        }],
        line: 154
      },
      "36": {
        loc: {
          start: {
            line: 161,
            column: 24
          },
          end: {
            line: 164,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 24
          },
          end: {
            line: 164,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "37": {
        loc: {
          start: {
            line: 191,
            column: 20
          },
          end: {
            line: 192,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 20
          },
          end: {
            line: 192,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "38": {
        loc: {
          start: {
            line: 191,
            column: 24
          },
          end: {
            line: 191,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 24
          },
          end: {
            line: 191,
            column: 38
          }
        }, {
          start: {
            line: 191,
            column: 42
          },
          end: {
            line: 191,
            column: 56
          }
        }],
        line: 191
      },
      "39": {
        loc: {
          start: {
            line: 195,
            column: 24
          },
          end: {
            line: 198,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 24
          },
          end: {
            line: 198,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "40": {
        loc: {
          start: {
            line: 225,
            column: 20
          },
          end: {
            line: 226,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 20
          },
          end: {
            line: 226,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "41": {
        loc: {
          start: {
            line: 228,
            column: 20
          },
          end: {
            line: 233,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 20
          },
          end: {
            line: 233,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "42": {
        loc: {
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 257,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 20
          },
          end: {
            line: 257,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "43": {
        loc: {
          start: {
            line: 256,
            column: 24
          },
          end: {
            line: 256,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 24
          },
          end: {
            line: 256,
            column: 38
          }
        }, {
          start: {
            line: 256,
            column: 42
          },
          end: {
            line: 256,
            column: 56
          }
        }],
        line: 256
      },
      "44": {
        loc: {
          start: {
            line: 260,
            column: 24
          },
          end: {
            line: 263,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 24
          },
          end: {
            line: 263,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "45": {
        loc: {
          start: {
            line: 288,
            column: 20
          },
          end: {
            line: 296,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 20
          },
          end: {
            line: 296,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "46": {
        loc: {
          start: {
            line: 300,
            column: 20
          },
          end: {
            line: 300,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 300,
            column: 44
          },
          end: {
            line: 300,
            column: 77
          }
        }, {
          start: {
            line: 300,
            column: 80
          },
          end: {
            line: 300,
            column: 81
          }
        }],
        line: 300
      },
      "47": {
        loc: {
          start: {
            line: 324,
            column: 20
          },
          end: {
            line: 340,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 324,
            column: 20
          },
          end: {
            line: 340,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 324
      },
      "48": {
        loc: {
          start: {
            line: 328,
            column: 28
          },
          end: {
            line: 334,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 28
          },
          end: {
            line: 334,
            column: 29
          }
        }, {
          start: {
            line: 331,
            column: 33
          },
          end: {
            line: 334,
            column: 29
          }
        }],
        line: 328
      },
      "49": {
        loc: {
          start: {
            line: 333,
            column: 47
          },
          end: {
            line: 333,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 47
          },
          end: {
            line: 333,
            column: 64
          }
        }, {
          start: {
            line: 333,
            column: 68
          },
          end: {
            line: 333,
            column: 85
          }
        }],
        line: 333
      },
      "50": {
        loc: {
          start: {
            line: 343,
            column: 44
          },
          end: {
            line: 343,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 343,
            column: 63
          },
          end: {
            line: 343,
            column: 95
          }
        }, {
          start: {
            line: 343,
            column: 98
          },
          end: {
            line: 343,
            column: 99
          }
        }],
        line: 343
      },
      "51": {
        loc: {
          start: {
            line: 345,
            column: 29
          },
          end: {
            line: 345,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 345,
            column: 29
          },
          end: {
            line: 345,
            column: 38
          }
        }, {
          start: {
            line: 345,
            column: 42
          },
          end: {
            line: 345,
            column: 72
          }
        }],
        line: 345
      },
      "52": {
        loc: {
          start: {
            line: 348,
            column: 27
          },
          end: {
            line: 348,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 348,
            column: 38
          },
          end: {
            line: 348,
            column: 50
          }
        }, {
          start: {
            line: 348,
            column: 53
          },
          end: {
            line: 348,
            column: 62
          }
        }],
        line: 348
      },
      "53": {
        loc: {
          start: {
            line: 371,
            column: 16
          },
          end: {
            line: 373,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 16
          },
          end: {
            line: 373,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "54": {
        loc: {
          start: {
            line: 400,
            column: 16
          },
          end: {
            line: 403,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 400,
            column: 16
          },
          end: {
            line: 403,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 400
      },
      "55": {
        loc: {
          start: {
            line: 424,
            column: 16
          },
          end: {
            line: 427,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 16
          },
          end: {
            line: 427,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "56": {
        loc: {
          start: {
            line: 429,
            column: 36
          },
          end: {
            line: 429,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 429,
            column: 46
          },
          end: {
            line: 429,
            column: 55
          }
        }, {
          start: {
            line: 429,
            column: 58
          },
          end: {
            line: 429,
            column: 68
          }
        }],
        line: 429
      },
      "57": {
        loc: {
          start: {
            line: 454,
            column: 20
          },
          end: {
            line: 461,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 454,
            column: 20
          },
          end: {
            line: 461,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 454
      },
      "58": {
        loc: {
          start: {
            line: 513,
            column: 12
          },
          end: {
            line: 517,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 513,
            column: 12
          },
          end: {
            line: 517,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 513
      },
      "59": {
        loc: {
          start: {
            line: 541,
            column: 37
          },
          end: {
            line: 543,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 541,
            column: 37
          },
          end: {
            line: 541,
            column: 50
          }
        }, {
          start: {
            line: 542,
            column: 20
          },
          end: {
            line: 542,
            column: 35
          }
        }, {
          start: {
            line: 543,
            column: 20
          },
          end: {
            line: 543,
            column: 52
          }
        }],
        line: 541
      },
      "60": {
        loc: {
          start: {
            line: 584,
            column: 12
          },
          end: {
            line: 596,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 584,
            column: 12
          },
          end: {
            line: 596,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 584
      },
      "61": {
        loc: {
          start: {
            line: 604,
            column: 12
          },
          end: {
            line: 611,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 604,
            column: 12
          },
          end: {
            line: 611,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 604
      },
      "62": {
        loc: {
          start: {
            line: 604,
            column: 16
          },
          end: {
            line: 604,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 604,
            column: 16
          },
          end: {
            line: 604,
            column: 46
          }
        }, {
          start: {
            line: 604,
            column: 50
          },
          end: {
            line: 604,
            column: 84
          }
        }],
        line: 604
      },
      "63": {
        loc: {
          start: {
            line: 619,
            column: 12
          },
          end: {
            line: 623,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 619,
            column: 12
          },
          end: {
            line: 623,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 619
      },
      "64": {
        loc: {
          start: {
            line: 631,
            column: 12
          },
          end: {
            line: 638,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 631,
            column: 12
          },
          end: {
            line: 638,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 631
      },
      "65": {
        loc: {
          start: {
            line: 631,
            column: 16
          },
          end: {
            line: 631,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 631,
            column: 16
          },
          end: {
            line: 631,
            column: 43
          }
        }, {
          start: {
            line: 631,
            column: 47
          },
          end: {
            line: 631,
            column: 78
          }
        }],
        line: 631
      },
      "66": {
        loc: {
          start: {
            line: 646,
            column: 12
          },
          end: {
            line: 650,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 646,
            column: 12
          },
          end: {
            line: 650,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 646
      },
      "67": {
        loc: {
          start: {
            line: 663,
            column: 16
          },
          end: {
            line: 665,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 663,
            column: 16
          },
          end: {
            line: 665,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 663
      },
      "68": {
        loc: {
          start: {
            line: 680,
            column: 20
          },
          end: {
            line: 688,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 680,
            column: 20
          },
          end: {
            line: 688,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 680
      },
      "69": {
        loc: {
          start: {
            line: 680,
            column: 24
          },
          end: {
            line: 680,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 680,
            column: 24
          },
          end: {
            line: 680,
            column: 37
          }
        }, {
          start: {
            line: 680,
            column: 41
          },
          end: {
            line: 680,
            column: 56
          }
        }],
        line: 680
      },
      "70": {
        loc: {
          start: {
            line: 699,
            column: 26
          },
          end: {
            line: 699,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 699,
            column: 76
          },
          end: {
            line: 699,
            column: 95
          }
        }, {
          start: {
            line: 699,
            column: 98
          },
          end: {
            line: 699,
            column: 104
          }
        }],
        line: 699
      },
      "71": {
        loc: {
          start: {
            line: 699,
            column: 26
          },
          end: {
            line: 699,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 699,
            column: 26
          },
          end: {
            line: 699,
            column: 54
          }
        }, {
          start: {
            line: 699,
            column: 58
          },
          end: {
            line: 699,
            column: 73
          }
        }],
        line: 699
      },
      "72": {
        loc: {
          start: {
            line: 702,
            column: 8
          },
          end: {
            line: 702,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 702,
            column: 8
          },
          end: {
            line: 702,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 702
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0]
    },
    inputSourceMap: {
      file: "/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-manager.service.ts",
      mappings: "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",
      names: [],
      sources: ["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-manager.service.ts"],
      sourcesContent: ["import { Injectable, Inject } from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\n\nimport type { ICacheService } from '../interfaces/cache.interface';\n\nimport type {\n  CacheOptions,\n  CacheKey,\n  CacheStats,\n  CacheHealth,\n} from '../interfaces/cache.interface';\nimport { CacheStrategy } from '../interfaces/cache.interface';\nimport { PinoLoggerService, LogContext } from '@aiofix/logging';\n\n/**\n * @interface CacheManagerConfig\n * @description\n * \u7F13\u5B58\u7BA1\u7406\u5668\u914D\u7F6E\u63A5\u53E3\uFF0C\u5B9A\u4E49\u7F13\u5B58\u7BA1\u7406\u5668\u7684\u914D\u7F6E\u9009\u9879\u3002\n */\nexport interface CacheManagerConfig {\n  /** \u9ED8\u8BA4\u7F13\u5B58\u9009\u9879 */\n  defaultOptions?: CacheOptions;\n  /** \u9ED8\u8BA4\u7F13\u5B58\u7B56\u7565 */\n  defaultStrategy?: CacheStrategy;\n  /** \u662F\u5426\u542F\u7528\u7F13\u5B58 */\n  enabled?: boolean;\n  /** \u7F13\u5B58\u5C42\u914D\u7F6E */\n  layers?: CacheLayerConfig[];\n  /** \u76D1\u63A7\u95F4\u9694\uFF08\u6BEB\u79D2\uFF09 */\n  monitoringInterval?: number;\n  /** \u81EA\u52A8\u6E05\u7406\u95F4\u9694\uFF08\u6BEB\u79D2\uFF09 */\n  cleanupInterval?: number;\n  /** \u6700\u5927\u7F13\u5B58\u5927\u5C0F */\n  maxSize?: number;\n  /** \u662F\u5426\u542F\u7528\u7EDF\u8BA1 */\n  enableStats?: boolean;\n  /** \u662F\u5426\u542F\u7528\u4E8B\u4EF6 */\n  enableEvents?: boolean;\n}\n\n/**\n * @interface CacheLayerConfig\n * @description\n * \u7F13\u5B58\u5C42\u914D\u7F6E\u63A5\u53E3\uFF0C\u5B9A\u4E49\u5355\u4E2A\u7F13\u5B58\u5C42\u7684\u914D\u7F6E\u3002\n */\nexport interface CacheLayerConfig {\n  /** \u7F13\u5B58\u5C42\u540D\u79F0 */\n  name: string;\n  /** \u7F13\u5B58\u5C42\u4F18\u5148\u7EA7\uFF08\u6570\u5B57\u8D8A\u5C0F\u4F18\u5148\u7EA7\u8D8A\u9AD8\uFF09 */\n  priority: number;\n  /** \u7F13\u5B58\u670D\u52A1\u5B9E\u4F8B */\n  service: ICacheService;\n  /** \u7F13\u5B58\u5C42\u9009\u9879 */\n  options?: CacheOptions;\n  /** \u662F\u5426\u542F\u7528 */\n  enabled?: boolean;\n  /** \u662F\u5426\u53EA\u8BFB */\n  readOnly?: boolean;\n  /** \u662F\u5426\u4F5C\u4E3A\u540E\u5907\u7F13\u5B58 */\n  fallback?: boolean;\n}\n\n/**\n * @interface CacheManagerStats\n * @description\n * \u7F13\u5B58\u7BA1\u7406\u5668\u7EDF\u8BA1\u4FE1\u606F\u63A5\u53E3\u3002\n */\nexport interface CacheManagerStats extends CacheStats {\n  /** \u6D3B\u8DC3\u7F13\u5B58\u5C42\u6570\u91CF */\n  activeLayers: number;\n  /** \u5404\u5C42\u7EDF\u8BA1\u4FE1\u606F */\n  layerStats: Record<string, any>;\n  /** \u6700\u540E\u66F4\u65B0\u65F6\u95F4 */\n  lastUpdated: Date;\n}\n\n/**\n * @class CacheManagerService\n * @description\n * \u7F13\u5B58\u7BA1\u7406\u5668\u670D\u52A1\uFF0C\u4F5C\u4E3A\u7F13\u5B58\u7CFB\u7EDF\u7684\u6838\u5FC3\u534F\u8C03\u5668\u3002\n *\n * \u4E3B\u8981\u529F\u80FD\u5305\u62EC\uFF1A\n * 1. \u7BA1\u7406\u591A\u4E2A\u7F13\u5B58\u5C42\uFF08L1\u3001L2\u3001L3\u7B49\uFF09\n * 2. \u5B9E\u73B0\u7F13\u5B58\u7B56\u7565\uFF08LRU\u3001LFU\u3001FIFO\u7B49\uFF09\n * 3. \u63D0\u4F9B\u7EDF\u4E00\u7684\u7F13\u5B58\u63A5\u53E3\n * 4. \u76D1\u63A7\u7F13\u5B58\u6027\u80FD\u548C\u5065\u5EB7\u72B6\u6001\n * 5. \u5904\u7406\u7F13\u5B58\u5931\u6548\u548C\u66F4\u65B0\n * 6. \u63D0\u4F9B\u7F13\u5B58\u7EDF\u8BA1\u548C\u5206\u6790\n *\n * @implements {ICacheService}\n */\n@Injectable()\nexport class CacheManagerService implements ICacheService {\n  /**\n   * \u7F13\u5B58\u5C42\u6620\u5C04\uFF0C\u6309\u4F18\u5148\u7EA7\u6392\u5E8F\n   */\n  private readonly layers = new Map<string, CacheLayerConfig>();\n\n  /**\n   * \u7F13\u5B58\u7BA1\u7406\u5668\u914D\u7F6E\n   */\n  private config: CacheManagerConfig;\n\n  /**\n   * \u7EDF\u8BA1\u4FE1\u606F\n   */\n  private stats: CacheManagerStats;\n\n  /**\n   * \u76D1\u63A7\u5B9A\u65F6\u5668\n   */\n  private monitoringTimer?: NodeJS.Timeout;\n\n  /**\n   * \u6E05\u7406\u5B9A\u65F6\u5668\n   */\n  private cleanupTimer?: NodeJS.Timeout;\n\n  /**\n   * \u8BF7\u6C42\u8BA1\u6570\u5668\n   */\n  private requestCount = 0;\n\n  /**\n   * \u547D\u4E2D\u8BA1\u6570\u5668\n   */\n  private hitCount = 0;\n\n  /**\n   * \u54CD\u5E94\u65F6\u95F4\u7D2F\u8BA1\n   */\n  private totalResponseTime = 0;\n\n  constructor(\n    @Inject('CACHE_MANAGER_CONFIG') config: CacheManagerConfig,\n    private readonly eventEmitter: EventEmitter2,\n    @Inject(PinoLoggerService) private readonly logger: PinoLoggerService,\n  ) {\n    this.config = {\n      enabled: true,\n      defaultStrategy: CacheStrategy.LRU,\n      monitoringInterval: 30000,\n      cleanupInterval: 60000,\n      maxSize: 10000,\n      enableStats: true,\n      enableEvents: true,\n      ...config,\n    };\n\n    this.stats = this.initializeStats();\n    this.initializeLayers();\n    this.startMonitoring();\n    this.startCleanup();\n\n    this.logger.info('CacheManagerService initialized', LogContext.CACHE);\n  }\n\n  /**\n   * @method get\n   * @description \u4ECE\u7F13\u5B58\u4E2D\u83B7\u53D6\u503C\n   * @param key \u7F13\u5B58\u952E\n   * @returns {Promise<T | null>} \u7F13\u5B58\u503C\n   */\n  async get<T = any>(key: CacheKey): Promise<T | null> {\n    const startTime = Date.now();\n    this.requestCount++;\n\n    try {\n      // \u6309\u4F18\u5148\u7EA7\u904D\u5386\u7F13\u5B58\u5C42\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled) continue;\n\n        const value = await layer.service.get<T>(key);\n\n        if (value !== null) {\n          // \u7F13\u5B58\u547D\u4E2D\uFF0C\u66F4\u65B0\u7EDF\u8BA1\n          this.hitCount++;\n          this.updateStats(startTime);\n\n          // \u5982\u679C\u547D\u4E2D\u7684\u662F\u4F4E\u4F18\u5148\u7EA7\u5C42\uFF0C\u5C1D\u8BD5\u63D0\u5347\u5230\u9AD8\u4F18\u5148\u7EA7\u5C42\n          if (layer.priority > 1) {\n            this.promoteToHigherLayer(key, value, layer.priority);\n          }\n\n          this.emitEvent('cache_hit', { key, layer: layer.name, value });\n          return value;\n        }\n      }\n\n      // \u7F13\u5B58\u672A\u547D\u4E2D\n      this.updateStats(startTime);\n      this.emitEvent('cache_miss', { key });\n      return null;\n    } catch (error) {\n      this.logger.error(\n        `Error getting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return null;\n    }\n  }\n\n  /**\n   * @method set\n   * @description \u8BBE\u7F6E\u7F13\u5B58\u503C\n   * @param key \u7F13\u5B58\u952E\n   * @param value \u7F13\u5B58\u503C\n   * @param options \u7F13\u5B58\u9009\u9879\n   * @returns {Promise<boolean>} \u662F\u5426\u6210\u529F\n   */\n  async set<T = any>(\n    key: CacheKey,\n    value: T,\n    options?: Partial<CacheOptions>,\n  ): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      const mergedOptions = { ...this.config.defaultOptions, ...options };\n      let success = false;\n\n      // \u6309\u4F18\u5148\u7EA7\u8BBE\u7F6E\u5230\u6240\u6709\u542F\u7528\u7684\u7F13\u5B58\u5C42\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.set(key, value, {\n            ...layer.options,\n            ...mergedOptions,\n          });\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_set', { key, layer: layer.name, value });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to set cache in layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        `Error setting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method delete\n   * @description \u5220\u9664\u7F13\u5B58\u503C\n   * @param key \u7F13\u5B58\u952E\n   * @returns {Promise<boolean>} \u662F\u5426\u6210\u529F\n   */\n  async delete(key: CacheKey): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      let success = false;\n\n      // \u4ECE\u6240\u6709\u7F13\u5B58\u5C42\u5220\u9664\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.delete(key);\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_delete', { key, layer: layer.name });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to delete cache from layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        `Error deleting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method exists\n   * @description \u68C0\u67E5\u7F13\u5B58\u952E\u662F\u5426\u5B58\u5728\n   * @param key \u7F13\u5B58\u952E\n   * @returns {Promise<boolean>} \u662F\u5426\u5B58\u5728\n   */\n  async exists(key: CacheKey): Promise<boolean> {\n    const startTime = Date.now();\n    this.requestCount++;\n\n    try {\n      // \u68C0\u67E5\u6240\u6709\u7F13\u5B58\u5C42\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled) continue;\n\n        const exists = await layer.service.exists(key);\n        if (exists) {\n          this.hitCount++;\n          this.updateStats(startTime);\n          this.emitEvent('cache_exists', { key, layer: layer.name });\n          return true;\n        }\n      }\n\n      this.updateStats(startTime);\n      return false;\n    } catch (error) {\n      this.logger.error(\n        `Error checking cache existence: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method clear\n   * @description \u6E05\u7A7A\u7F13\u5B58\n   * @param namespace \u547D\u540D\u7A7A\u95F4\n   * @returns {Promise<boolean>} \u662F\u5426\u6210\u529F\n   */\n  async clear(namespace?: string): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      let success = false;\n\n      // \u6E05\u7A7A\u6240\u6709\u7F13\u5B58\u5C42\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.clear(namespace);\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_clear', { layer: layer.name, namespace });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to clear cache layer ${layer.name}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        'Error clearing cache',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { error });\n      return false;\n    }\n  }\n\n  /**\n   * @method getStats\n   * @description \u83B7\u53D6\u7F13\u5B58\u7EDF\u8BA1\u4FE1\u606F\n   * @returns {Promise<CacheStats>} \u7EDF\u8BA1\u4FE1\u606F\n   */\n  async getStats(): Promise<CacheStats> {\n    try {\n      // \u66F4\u65B0\u5404\u5C42\u7EDF\u8BA1\u4FE1\u606F\n      const layerStats: Record<string, any> = {};\n      for (const [name, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            layerStats[name] = await layer.service.getStats();\n          } catch (error) {\n            this.logger.warn(\n              `Failed to get stats for layer ${name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n            layerStats[name] = null;\n          }\n        }\n      }\n\n      // \u8BA1\u7B97\u603B\u4F53\u7EDF\u8BA1\n      this.stats.hitRate =\n        this.requestCount > 0 ? this.hitCount / this.requestCount : 0;\n      this.stats.activeLayers = Array.from(this.layers.values()).filter(\n        layer => layer.enabled,\n      ).length;\n      this.stats.layerStats = layerStats;\n      this.stats.lastUpdated = new Date();\n\n      return { ...this.stats };\n    } catch (error) {\n      this.logger.error(\n        'Error getting cache stats',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return this.stats;\n    }\n  }\n\n  /**\n   * @method getHealth\n   * @description \u83B7\u53D6\u7F13\u5B58\u5065\u5EB7\u72B6\u6001\n   * @returns {Promise<CacheHealth>} \u5065\u5EB7\u72B6\u6001\n   */\n  async getHealth(): Promise<CacheHealth> {\n    try {\n      let healthyLayers = 0;\n      let totalResponseTime = 0;\n      let hasError = false;\n      let errorMessage = '';\n\n      // \u68C0\u67E5\u5404\u5C42\u5065\u5EB7\u72B6\u6001\n      for (const [, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            const layerHealth = await layer.service.getHealth();\n            totalResponseTime += layerHealth.responseTime;\n            if (layerHealth.healthy) {\n              healthyLayers++;\n            } else {\n              hasError = true;\n              errorMessage = layerHealth.error || 'Layer unhealthy';\n            }\n          } catch (error) {\n            hasError = true;\n            errorMessage = (error as Error).message;\n          }\n        }\n      }\n\n      const activeLayers = Array.from(this.layers.values()).filter(\n        layer => layer.enabled,\n      ).length;\n      const averageResponseTime =\n        activeLayers > 0 ? totalResponseTime / activeLayers : 0;\n\n      return {\n        healthy: !hasError && healthyLayers === activeLayers,\n        connected: healthyLayers > 0,\n        responseTime: averageResponseTime,\n        error: hasError ? errorMessage : undefined,\n        lastCheck: Date.now(),\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error getting cache health',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return {\n        healthy: false,\n        connected: false,\n        responseTime: 0,\n        error: (error as Error).message,\n        lastCheck: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * @method addLayer\n   * @description \u6DFB\u52A0\u7F13\u5B58\u5C42\n   * @param config \u7F13\u5B58\u5C42\u914D\u7F6E\n   * @returns {boolean} \u662F\u5426\u6210\u529F\n   */\n  addLayer(config: CacheLayerConfig): boolean {\n    try {\n      if (this.layers.has(config.name)) {\n        this.logger.warn(\n          `Cache layer ${config.name} already exists, replacing...`,\n          LogContext.CACHE,\n        );\n      }\n\n      this.layers.set(config.name, {\n        enabled: true,\n        readOnly: false,\n        fallback: false,\n        ...config,\n      });\n\n      this.logger.info(\n        `Added cache layer: ${config.name} with priority ${config.priority}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('layer_added', {\n        layer: config.name,\n        priority: config.priority,\n      });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to add cache layer: ${config.name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method removeLayer\n   * @description \u79FB\u9664\u7F13\u5B58\u5C42\n   * @param name \u7F13\u5B58\u5C42\u540D\u79F0\n   * @returns {boolean} \u662F\u5426\u6210\u529F\n   */\n  removeLayer(name: string): boolean {\n    try {\n      if (!this.layers.has(name)) {\n        this.logger.warn(\n          `Cache layer ${name} does not exist`,\n          LogContext.CACHE,\n        );\n        return false;\n      }\n\n      this.layers.delete(name);\n      this.logger.info(`Removed cache layer: ${name}`, LogContext.CACHE);\n      this.emitEvent('layer_removed', { layer: name });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to remove cache layer: ${name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method enableLayer\n   * @description \u542F\u7528\u7F13\u5B58\u5C42\n   * @param name \u7F13\u5B58\u5C42\u540D\u79F0\n   * @param enabled \u662F\u5426\u542F\u7528\n   * @returns {boolean} \u662F\u5426\u6210\u529F\n   */\n  enableLayer(name: string, enabled: boolean): boolean {\n    try {\n      const layer = this.layers.get(name);\n      if (!layer) {\n        this.logger.warn(\n          `Cache layer ${name} does not exist`,\n          LogContext.CACHE,\n        );\n        return false;\n      }\n\n      layer.enabled = enabled;\n      this.logger.info(\n        `${enabled ? 'Enabled' : 'Disabled'} cache layer: ${name}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('layer_toggled', { layer: name, enabled });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to toggle cache layer: ${name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method getLayers\n   * @description \u83B7\u53D6\u6240\u6709\u7F13\u5B58\u5C42\u4FE1\u606F\n   * @returns {CacheLayerConfig[]} \u7F13\u5B58\u5C42\u914D\u7F6E\u5217\u8868\n   */\n  getLayers(): CacheLayerConfig[] {\n    return Array.from(this.layers.values()).map(layer => ({ ...layer }));\n  }\n\n  /**\n   * @method resetStats\n   * @description \u91CD\u7F6E\u7F13\u5B58\u7EDF\u8BA1\u4FE1\u606F\n   */\n  async resetStats(): Promise<void> {\n    try {\n      // \u91CD\u7F6E\u5404\u5C42\u7EDF\u8BA1\n      for (const [name, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            await layer.service.resetStats();\n          } catch (error) {\n            this.logger.warn(\n              `Failed to reset stats for layer ${name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n          }\n        }\n      }\n\n      // \u91CD\u7F6E\u7BA1\u7406\u5668\u7EDF\u8BA1\n      this.requestCount = 0;\n      this.hitCount = 0;\n      this.totalResponseTime = 0;\n      this.stats = this.initializeStats();\n\n      this.logger.info('Cache stats reset successfully', LogContext.CACHE);\n      this.emitEvent('stats_reset', {});\n    } catch (error) {\n      this.logger.error(\n        'Failed to reset cache stats',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @method onDestroy\n   * @description \u9500\u6BC1\u65F6\u6E05\u7406\u8D44\u6E90\n   */\n  onDestroy(): void {\n    this.stopMonitoring();\n    this.stopCleanup();\n    this.logger.info('CacheManagerService destroyed', LogContext.CACHE);\n  }\n\n  // \u79C1\u6709\u65B9\u6CD5\n\n  /**\n   * @private\n   * @method initializeStats\n   * @description \u521D\u59CB\u5316\u7EDF\u8BA1\u4FE1\u606F\n   * @returns {CacheManagerStats} \u521D\u59CB\u7EDF\u8BA1\u4FE1\u606F\n   */\n  private initializeStats(): CacheManagerStats {\n    return {\n      totalEntries: 0,\n      hits: 0,\n      misses: 0,\n      hitRate: 0,\n      totalSize: 0,\n      averageSize: 0,\n      expiredEntries: 0,\n      evictedEntries: 0,\n      lastReset: Date.now(),\n      activeLayers: 0,\n      layerStats: {},\n      lastUpdated: new Date(),\n    };\n  }\n\n  /**\n   * @private\n   * @method initializeLayers\n   * @description \u521D\u59CB\u5316\u7F13\u5B58\u5C42\n   */\n  private initializeLayers(): void {\n    if (this.config.layers) {\n      for (const layerConfig of this.config.layers) {\n        this.addLayer(layerConfig);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @method getSortedLayers\n   * @description \u83B7\u53D6\u6309\u4F18\u5148\u7EA7\u6392\u5E8F\u7684\u7F13\u5B58\u5C42\n   * @returns {CacheLayerConfig[]} \u6392\u5E8F\u540E\u7684\u7F13\u5B58\u5C42\n   */\n  private getSortedLayers(): CacheLayerConfig[] {\n    return Array.from(this.layers.values())\n      .filter(layer => layer.enabled)\n      .sort((a, b) => a.priority - b.priority);\n  }\n\n  /**\n   * @private\n   * @method promoteToHigherLayer\n   * @description \u5C06\u7F13\u5B58\u503C\u63D0\u5347\u5230\u66F4\u9AD8\u4F18\u5148\u7EA7\u7684\u5C42\n   * @param key \u7F13\u5B58\u952E\n   * @param value \u7F13\u5B58\u503C\n   * @param currentPriority \u5F53\u524D\u4F18\u5148\u7EA7\n   */\n  private async promoteToHigherLayer<T>(\n    key: CacheKey,\n    value: T,\n    currentPriority: number,\n  ): Promise<void> {\n    try {\n      const higherLayers = Array.from(this.layers.values())\n        .filter(\n          layer =>\n            layer.enabled &&\n            !layer.readOnly &&\n            layer.priority < currentPriority,\n        )\n        .sort((a, b) => a.priority - b.priority);\n\n      for (const layer of higherLayers) {\n        try {\n          await layer.service.set(key, value);\n          this.emitEvent('cache_promoted', {\n            key,\n            fromPriority: currentPriority,\n            toPriority: layer.priority,\n            layer: layer.name,\n          });\n        } catch (error) {\n          this.logger.warn(\n            `Failed to promote cache to layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        `Error promoting cache: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method updateStats\n   * @description \u66F4\u65B0\u7EDF\u8BA1\u4FE1\u606F\n   * @param startTime \u5F00\u59CB\u65F6\u95F4\n   */\n  private updateStats(startTime: number): void {\n    const responseTime = Date.now() - startTime;\n    this.totalResponseTime += responseTime;\n    this.stats.hits = this.hitCount;\n    this.stats.misses = this.requestCount - this.hitCount;\n  }\n\n  /**\n   * @private\n   * @method emitEvent\n   * @description \u53D1\u9001\u7F13\u5B58\u4E8B\u4EF6\n   * @param type \u4E8B\u4EF6\u7C7B\u578B\n   * @param data \u4E8B\u4EF6\u6570\u636E\n   */\n  private emitEvent(type: string, _data: Record<string, unknown>): void {\n    if (this.config.enableEvents) {\n      try {\n        this.eventEmitter.emit(`cache.${type}`, {\n          type,\n          data: _data,\n          timestamp: new Date(),\n          managerId: 'cache-manager',\n        });\n      } catch (error) {\n        this.logger.warn(\n          `Failed to emit cache event: ${type}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @method startMonitoring\n   * @description \u5F00\u59CB\u76D1\u63A7\n   */\n  private startMonitoring(): void {\n    if (this.config.monitoringInterval && this.config.monitoringInterval > 0) {\n      this.monitoringTimer = setInterval(() => {\n        this.performMonitoring().catch(error => {\n          this.logger.error(\n            'Cache monitoring failed',\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        });\n      }, this.config.monitoringInterval);\n\n      this.logger.info(\n        `Started cache monitoring, interval: ${this.config.monitoringInterval}ms`,\n        LogContext.CACHE,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method stopMonitoring\n   * @description \u505C\u6B62\u76D1\u63A7\n   */\n  private stopMonitoring(): void {\n    if (this.monitoringTimer) {\n      clearInterval(this.monitoringTimer);\n      this.monitoringTimer = undefined;\n      this.logger.info('Stopped cache monitoring', LogContext.CACHE);\n    }\n  }\n\n  /**\n   * @private\n   * @method startCleanup\n   * @description \u5F00\u59CB\u6E05\u7406\n   */\n  private startCleanup(): void {\n    if (this.config.cleanupInterval && this.config.cleanupInterval > 0) {\n      this.cleanupTimer = setInterval(() => {\n        this.performCleanup().catch(error => {\n          this.logger.error(\n            'Cache cleanup failed',\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        });\n      }, this.config.cleanupInterval);\n\n      this.logger.info(\n        `Started cache cleanup, interval: ${this.config.cleanupInterval}ms`,\n        LogContext.CACHE,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method stopCleanup\n   * @description \u505C\u6B62\u6E05\u7406\n   */\n  private stopCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = undefined;\n      this.logger.info('Stopped cache cleanup', LogContext.CACHE);\n    }\n  }\n\n  /**\n   * @private\n   * @method performMonitoring\n   * @description \u6267\u884C\u76D1\u63A7\n   */\n  private async performMonitoring(): Promise<void> {\n    try {\n      const health = await this.getHealth();\n      const stats = await this.getStats();\n\n      this.emitEvent('monitoring', { health, stats });\n\n      // \u68C0\u67E5\u5065\u5EB7\u72B6\u6001\n      if (!health.healthy) {\n        this.logger.warn('Cache health check failed', LogContext.CACHE);\n      }\n    } catch (error) {\n      this.logger.error(\n        'Cache monitoring execution failed',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method performCleanup\n   * @description \u6267\u884C\u6E05\u7406\n   */\n  private async performCleanup(): Promise<void> {\n    try {\n      // \u6E05\u7406\u8FC7\u671F\u7684\u7F13\u5B58\u9879\n      for (const layer of this.getSortedLayers()) {\n        if (layer.enabled && !layer.readOnly) {\n          try {\n            // \u8FD9\u91CC\u53EF\u4EE5\u8C03\u7528\u5404\u5C42\u7684\u6E05\u7406\u65B9\u6CD5\uFF0C\u5982\u679C\u6709\u7684\u8BDD\n            this.emitEvent('cleanup', { layer: layer.name });\n          } catch (error) {\n            this.logger.warn(\n              `Failed to cleanup layer ${layer.name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n          }\n        }\n      }\n\n      this.logger.debug('Cache cleanup completed', LogContext.CACHE);\n    } catch (error) {\n      this.logger.error(\n        'Cache cleanup execution failed',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9cf70558db1eb6bbf6972a23eacb559dc0fb71a8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1pteyjif5c = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1pteyjif5c();
var __esDecorate =
/* istanbul ignore next */
(cov_1pteyjif5c().s[0]++,
/* istanbul ignore next */
(cov_1pteyjif5c().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1pteyjif5c().b[0][1]++, this.__esDecorate) ||
/* istanbul ignore next */
(cov_1pteyjif5c().b[0][2]++, function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  /* istanbul ignore next */
  cov_1pteyjif5c().f[0]++;
  function accept(f) {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[1]++;
    cov_1pteyjif5c().s[1]++;
    if (
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[2][0]++, f !== void 0) &&
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[2][1]++, typeof f !== "function")) {
      /* istanbul ignore next */
      cov_1pteyjif5c().b[1][0]++;
      cov_1pteyjif5c().s[2]++;
      throw new TypeError("Function expected");
    } else
    /* istanbul ignore next */
    {
      cov_1pteyjif5c().b[1][1]++;
    }
    cov_1pteyjif5c().s[3]++;
    return f;
  }
  var kind =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[4]++, contextIn.kind),
    key =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[5]++, kind === "getter" ?
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[3][0]++, "get") :
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[3][1]++, kind === "setter" ?
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[4][0]++, "set") :
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[4][1]++, "value")));
  var target =
  /* istanbul ignore next */
  (cov_1pteyjif5c().s[6]++,
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[6][0]++, !descriptorIn) &&
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[6][1]++, ctor) ?
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[5][0]++, contextIn["static"] ?
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[7][0]++, ctor) :
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[7][1]++, ctor.prototype)) :
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[5][1]++, null));
  var descriptor =
  /* istanbul ignore next */
  (cov_1pteyjif5c().s[7]++,
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[8][0]++, descriptorIn) ||
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[8][1]++, target ?
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[9][0]++, Object.getOwnPropertyDescriptor(target, contextIn.name)) :
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[9][1]++, {})));
  var _,
    done =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[8]++, false);
  /* istanbul ignore next */
  cov_1pteyjif5c().s[9]++;
  for (var i =
  /* istanbul ignore next */
  (cov_1pteyjif5c().s[10]++, decorators.length - 1); i >= 0; i--) {
    var context =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[11]++, {});
    /* istanbul ignore next */
    cov_1pteyjif5c().s[12]++;
    for (var p in contextIn) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[13]++;
      context[p] = p === "access" ?
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[10][0]++, {}) :
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[10][1]++, contextIn[p]);
    }
    /* istanbul ignore next */
    cov_1pteyjif5c().s[14]++;
    for (var p in contextIn.access) {
      /* istanbul ignore next */
      cov_1pteyjif5c().s[15]++;
      context.access[p] = contextIn.access[p];
    }
    /* istanbul ignore next */
    cov_1pteyjif5c().s[16]++;
    context.addInitializer = function (f) {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[2]++;
      cov_1pteyjif5c().s[17]++;
      if (done) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[11][0]++;
        cov_1pteyjif5c().s[18]++;
        throw new TypeError("Cannot add initializers after decoration has completed");
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[11][1]++;
      }
      cov_1pteyjif5c().s[19]++;
      extraInitializers.push(accept(
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[12][0]++, f) ||
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[12][1]++, null)));
    };
    var result =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[20]++, (0, decorators[i])(kind === "accessor" ?
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[13][0]++, {
      get: descriptor.get,
      set: descriptor.set
    }) :
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[13][1]++, descriptor[key]), context));
    /* istanbul ignore next */
    cov_1pteyjif5c().s[21]++;
    if (kind === "accessor") {
      /* istanbul ignore next */
      cov_1pteyjif5c().b[14][0]++;
      cov_1pteyjif5c().s[22]++;
      if (result === void 0) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[15][0]++;
        cov_1pteyjif5c().s[23]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[15][1]++;
      }
      cov_1pteyjif5c().s[24]++;
      if (
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[17][0]++, result === null) ||
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[17][1]++, typeof result !== "object")) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[16][0]++;
        cov_1pteyjif5c().s[25]++;
        throw new TypeError("Object expected");
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[16][1]++;
      }
      cov_1pteyjif5c().s[26]++;
      if (_ = accept(result.get)) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[18][0]++;
        cov_1pteyjif5c().s[27]++;
        descriptor.get = _;
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[18][1]++;
      }
      cov_1pteyjif5c().s[28]++;
      if (_ = accept(result.set)) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[19][0]++;
        cov_1pteyjif5c().s[29]++;
        descriptor.set = _;
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[19][1]++;
      }
      cov_1pteyjif5c().s[30]++;
      if (_ = accept(result.init)) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[20][0]++;
        cov_1pteyjif5c().s[31]++;
        initializers.unshift(_);
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[20][1]++;
      }
    } else {
      /* istanbul ignore next */
      cov_1pteyjif5c().b[14][1]++;
      cov_1pteyjif5c().s[32]++;
      if (_ = accept(result)) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[21][0]++;
        cov_1pteyjif5c().s[33]++;
        if (kind === "field") {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[22][0]++;
          cov_1pteyjif5c().s[34]++;
          initializers.unshift(_);
        } else {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[22][1]++;
          cov_1pteyjif5c().s[35]++;
          descriptor[key] = _;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[21][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_1pteyjif5c().s[36]++;
  if (target) {
    /* istanbul ignore next */
    cov_1pteyjif5c().b[23][0]++;
    cov_1pteyjif5c().s[37]++;
    Object.defineProperty(target, contextIn.name, descriptor);
  } else
  /* istanbul ignore next */
  {
    cov_1pteyjif5c().b[23][1]++;
  }
  cov_1pteyjif5c().s[38]++;
  done = true;
}));
var __runInitializers =
/* istanbul ignore next */
(cov_1pteyjif5c().s[39]++,
/* istanbul ignore next */
(cov_1pteyjif5c().b[24][0]++, this) &&
/* istanbul ignore next */
(cov_1pteyjif5c().b[24][1]++, this.__runInitializers) ||
/* istanbul ignore next */
(cov_1pteyjif5c().b[24][2]++, function (thisArg, initializers, value) {
  /* istanbul ignore next */
  cov_1pteyjif5c().f[3]++;
  var useValue =
  /* istanbul ignore next */
  (cov_1pteyjif5c().s[40]++, arguments.length > 2);
  /* istanbul ignore next */
  cov_1pteyjif5c().s[41]++;
  for (var i =
  /* istanbul ignore next */
  (cov_1pteyjif5c().s[42]++, 0); i < initializers.length; i++) {
    /* istanbul ignore next */
    cov_1pteyjif5c().s[43]++;
    value = useValue ?
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[25][0]++, initializers[i].call(thisArg, value)) :
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[25][1]++, initializers[i].call(thisArg));
  }
  /* istanbul ignore next */
  cov_1pteyjif5c().s[44]++;
  return useValue ?
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[26][0]++, value) :
  /* istanbul ignore next */
  (cov_1pteyjif5c().b[26][1]++, void 0);
}));
var __setFunctionName =
/* istanbul ignore next */
(cov_1pteyjif5c().s[45]++,
/* istanbul ignore next */
(cov_1pteyjif5c().b[27][0]++, this) &&
/* istanbul ignore next */
(cov_1pteyjif5c().b[27][1]++, this.__setFunctionName) ||
/* istanbul ignore next */
(cov_1pteyjif5c().b[27][2]++, function (f, name, prefix) {
  /* istanbul ignore next */
  cov_1pteyjif5c().f[4]++;
  cov_1pteyjif5c().s[46]++;
  if (typeof name === "symbol") {
    /* istanbul ignore next */
    cov_1pteyjif5c().b[28][0]++;
    cov_1pteyjif5c().s[47]++;
    name = name.description ?
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[29][0]++, "[".concat(name.description, "]")) :
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[29][1]++, "");
  } else
  /* istanbul ignore next */
  {
    cov_1pteyjif5c().b[28][1]++;
  }
  cov_1pteyjif5c().s[48]++;
  return Object.defineProperty(f, "name", {
    configurable: true,
    value: prefix ?
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[30][0]++, "".concat(prefix, " ", name)) :
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[30][1]++, name)
  });
}));
/* istanbul ignore next */
cov_1pteyjif5c().s[49]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1pteyjif5c().s[50]++;
exports.CacheManagerService = void 0;
const common_1 =
/* istanbul ignore next */
(cov_1pteyjif5c().s[51]++, require("@nestjs/common"));
const cache_interface_1 =
/* istanbul ignore next */
(cov_1pteyjif5c().s[52]++, require("../interfaces/cache.interface"));
const logging_1 =
/* istanbul ignore next */
(cov_1pteyjif5c().s[53]++, require("@aiofix/logging"));
/**
 * @class CacheManagerService
 * @description
 * 缓存管理器服务，作为缓存系统的核心协调器。
 *
 * 主要功能包括：
 * 1. 管理多个缓存层（L1、L2、L3等）
 * 2. 实现缓存策略（LRU、LFU、FIFO等）
 * 3. 提供统一的缓存接口
 * 4. 监控缓存性能和健康状态
 * 5. 处理缓存失效和更新
 * 6. 提供缓存统计和分析
 *
 * @implements {ICacheService}
 */
let CacheManagerService =
/* istanbul ignore next */
(cov_1pteyjif5c().s[54]++, (() => {
  /* istanbul ignore next */
  cov_1pteyjif5c().f[5]++;
  let _classDecorators =
  /* istanbul ignore next */
  (cov_1pteyjif5c().s[55]++, [(0, common_1.Injectable)()]);
  let _classDescriptor;
  let _classExtraInitializers =
  /* istanbul ignore next */
  (cov_1pteyjif5c().s[56]++, []);
  let _classThis;
  var CacheManagerService =
  /* istanbul ignore next */
  (cov_1pteyjif5c().s[57]++, _classThis = class {
    constructor(config, eventEmitter, logger) {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[6]++;
      cov_1pteyjif5c().s[58]++;
      this.eventEmitter = eventEmitter;
      /* istanbul ignore next */
      cov_1pteyjif5c().s[59]++;
      this.logger = logger;
      /**
       * 缓存层映射，按优先级排序
       */
      /* istanbul ignore next */
      cov_1pteyjif5c().s[60]++;
      this.layers = new Map();
      /**
       * 请求计数器
       */
      /* istanbul ignore next */
      cov_1pteyjif5c().s[61]++;
      this.requestCount = 0;
      /**
       * 命中计数器
       */
      /* istanbul ignore next */
      cov_1pteyjif5c().s[62]++;
      this.hitCount = 0;
      /**
       * 响应时间累计
       */
      /* istanbul ignore next */
      cov_1pteyjif5c().s[63]++;
      this.totalResponseTime = 0;
      /* istanbul ignore next */
      cov_1pteyjif5c().s[64]++;
      this.config = {
        enabled: true,
        defaultStrategy: cache_interface_1.CacheStrategy.LRU,
        monitoringInterval: 30000,
        cleanupInterval: 60000,
        maxSize: 10000,
        enableStats: true,
        enableEvents: true,
        ...config
      };
      /* istanbul ignore next */
      cov_1pteyjif5c().s[65]++;
      this.stats = this.initializeStats();
      /* istanbul ignore next */
      cov_1pteyjif5c().s[66]++;
      this.initializeLayers();
      /* istanbul ignore next */
      cov_1pteyjif5c().s[67]++;
      this.startMonitoring();
      /* istanbul ignore next */
      cov_1pteyjif5c().s[68]++;
      this.startCleanup();
      /* istanbul ignore next */
      cov_1pteyjif5c().s[69]++;
      this.logger.info('CacheManagerService initialized', logging_1.LogContext.CACHE);
    }
    /**
     * @method get
     * @description 从缓存中获取值
     * @param key 缓存键
     * @returns {Promise<T | null>} 缓存值
     */
    async get(key) {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[7]++;
      const startTime =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[70]++, Date.now());
      /* istanbul ignore next */
      cov_1pteyjif5c().s[71]++;
      this.requestCount++;
      /* istanbul ignore next */
      cov_1pteyjif5c().s[72]++;
      try {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[73]++;
        // 按优先级遍历缓存层
        for (const layer of this.getSortedLayers()) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[74]++;
          if (!layer.enabled) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[31][0]++;
            cov_1pteyjif5c().s[75]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[31][1]++;
          }
          const value =
          /* istanbul ignore next */
          (cov_1pteyjif5c().s[76]++, await layer.service.get(key));
          /* istanbul ignore next */
          cov_1pteyjif5c().s[77]++;
          if (value !== null) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[32][0]++;
            cov_1pteyjif5c().s[78]++;
            // 缓存命中，更新统计
            this.hitCount++;
            /* istanbul ignore next */
            cov_1pteyjif5c().s[79]++;
            this.updateStats(startTime);
            // 如果命中的是低优先级层，尝试提升到高优先级层
            /* istanbul ignore next */
            cov_1pteyjif5c().s[80]++;
            if (layer.priority > 1) {
              /* istanbul ignore next */
              cov_1pteyjif5c().b[33][0]++;
              cov_1pteyjif5c().s[81]++;
              this.promoteToHigherLayer(key, value, layer.priority);
            } else
            /* istanbul ignore next */
            {
              cov_1pteyjif5c().b[33][1]++;
            }
            cov_1pteyjif5c().s[82]++;
            this.emitEvent('cache_hit', {
              key,
              layer: layer.name,
              value
            });
            /* istanbul ignore next */
            cov_1pteyjif5c().s[83]++;
            return value;
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[32][1]++;
          }
        }
        // 缓存未命中
        /* istanbul ignore next */
        cov_1pteyjif5c().s[84]++;
        this.updateStats(startTime);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[85]++;
        this.emitEvent('cache_miss', {
          key
        });
        /* istanbul ignore next */
        cov_1pteyjif5c().s[86]++;
        return null;
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[87]++;
        this.logger.error(`Error getting cache value: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[88]++;
        this.emitEvent('cache_error', {
          key,
          error
        });
        /* istanbul ignore next */
        cov_1pteyjif5c().s[89]++;
        return null;
      }
    }
    /**
     * @method set
     * @description 设置缓存值
     * @param key 缓存键
     * @param value 缓存值
     * @param options 缓存选项
     * @returns {Promise<boolean>} 是否成功
     */
    async set(key, value, options) {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[8]++;
      const startTime =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[90]++, Date.now());
      /* istanbul ignore next */
      cov_1pteyjif5c().s[91]++;
      try {
        const mergedOptions =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[92]++, {
          ...this.config.defaultOptions,
          ...options
        });
        let success =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[93]++, false);
        // 按优先级设置到所有启用的缓存层
        /* istanbul ignore next */
        cov_1pteyjif5c().s[94]++;
        for (const layer of this.getSortedLayers()) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[95]++;
          if (
          /* istanbul ignore next */
          (cov_1pteyjif5c().b[35][0]++, !layer.enabled) ||
          /* istanbul ignore next */
          (cov_1pteyjif5c().b[35][1]++, layer.readOnly)) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[34][0]++;
            cov_1pteyjif5c().s[96]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[34][1]++;
          }
          cov_1pteyjif5c().s[97]++;
          try {
            const layerSuccess =
            /* istanbul ignore next */
            (cov_1pteyjif5c().s[98]++, await layer.service.set(key, value, {
              ...layer.options,
              ...mergedOptions
            }));
            /* istanbul ignore next */
            cov_1pteyjif5c().s[99]++;
            if (layerSuccess) {
              /* istanbul ignore next */
              cov_1pteyjif5c().b[36][0]++;
              cov_1pteyjif5c().s[100]++;
              success = true;
              /* istanbul ignore next */
              cov_1pteyjif5c().s[101]++;
              this.emitEvent('cache_set', {
                key,
                layer: layer.name,
                value
              });
            } else
            /* istanbul ignore next */
            {
              cov_1pteyjif5c().b[36][1]++;
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_1pteyjif5c().s[102]++;
            this.logger.warn(`Failed to set cache in layer ${layer.name}: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
          }
        }
        /* istanbul ignore next */
        cov_1pteyjif5c().s[103]++;
        this.updateStats(startTime);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[104]++;
        return success;
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[105]++;
        this.logger.error(`Error setting cache value: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[106]++;
        this.emitEvent('cache_error', {
          key,
          error
        });
        /* istanbul ignore next */
        cov_1pteyjif5c().s[107]++;
        return false;
      }
    }
    /**
     * @method delete
     * @description 删除缓存值
     * @param key 缓存键
     * @returns {Promise<boolean>} 是否成功
     */
    async delete(key) {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[9]++;
      const startTime =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[108]++, Date.now());
      /* istanbul ignore next */
      cov_1pteyjif5c().s[109]++;
      try {
        let success =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[110]++, false);
        // 从所有缓存层删除
        /* istanbul ignore next */
        cov_1pteyjif5c().s[111]++;
        for (const layer of this.getSortedLayers()) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[112]++;
          if (
          /* istanbul ignore next */
          (cov_1pteyjif5c().b[38][0]++, !layer.enabled) ||
          /* istanbul ignore next */
          (cov_1pteyjif5c().b[38][1]++, layer.readOnly)) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[37][0]++;
            cov_1pteyjif5c().s[113]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[37][1]++;
          }
          cov_1pteyjif5c().s[114]++;
          try {
            const layerSuccess =
            /* istanbul ignore next */
            (cov_1pteyjif5c().s[115]++, await layer.service.delete(key));
            /* istanbul ignore next */
            cov_1pteyjif5c().s[116]++;
            if (layerSuccess) {
              /* istanbul ignore next */
              cov_1pteyjif5c().b[39][0]++;
              cov_1pteyjif5c().s[117]++;
              success = true;
              /* istanbul ignore next */
              cov_1pteyjif5c().s[118]++;
              this.emitEvent('cache_delete', {
                key,
                layer: layer.name
              });
            } else
            /* istanbul ignore next */
            {
              cov_1pteyjif5c().b[39][1]++;
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_1pteyjif5c().s[119]++;
            this.logger.warn(`Failed to delete cache from layer ${layer.name}: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
          }
        }
        /* istanbul ignore next */
        cov_1pteyjif5c().s[120]++;
        this.updateStats(startTime);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[121]++;
        return success;
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[122]++;
        this.logger.error(`Error deleting cache value: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[123]++;
        this.emitEvent('cache_error', {
          key,
          error
        });
        /* istanbul ignore next */
        cov_1pteyjif5c().s[124]++;
        return false;
      }
    }
    /**
     * @method exists
     * @description 检查缓存键是否存在
     * @param key 缓存键
     * @returns {Promise<boolean>} 是否存在
     */
    async exists(key) {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[10]++;
      const startTime =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[125]++, Date.now());
      /* istanbul ignore next */
      cov_1pteyjif5c().s[126]++;
      this.requestCount++;
      /* istanbul ignore next */
      cov_1pteyjif5c().s[127]++;
      try {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[128]++;
        // 检查所有缓存层
        for (const layer of this.getSortedLayers()) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[129]++;
          if (!layer.enabled) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[40][0]++;
            cov_1pteyjif5c().s[130]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[40][1]++;
          }
          const exists =
          /* istanbul ignore next */
          (cov_1pteyjif5c().s[131]++, await layer.service.exists(key));
          /* istanbul ignore next */
          cov_1pteyjif5c().s[132]++;
          if (exists) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[41][0]++;
            cov_1pteyjif5c().s[133]++;
            this.hitCount++;
            /* istanbul ignore next */
            cov_1pteyjif5c().s[134]++;
            this.updateStats(startTime);
            /* istanbul ignore next */
            cov_1pteyjif5c().s[135]++;
            this.emitEvent('cache_exists', {
              key,
              layer: layer.name
            });
            /* istanbul ignore next */
            cov_1pteyjif5c().s[136]++;
            return true;
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[41][1]++;
          }
        }
        /* istanbul ignore next */
        cov_1pteyjif5c().s[137]++;
        this.updateStats(startTime);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[138]++;
        return false;
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[139]++;
        this.logger.error(`Error checking cache existence: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[140]++;
        this.emitEvent('cache_error', {
          key,
          error
        });
        /* istanbul ignore next */
        cov_1pteyjif5c().s[141]++;
        return false;
      }
    }
    /**
     * @method clear
     * @description 清空缓存
     * @param namespace 命名空间
     * @returns {Promise<boolean>} 是否成功
     */
    async clear(namespace) {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[11]++;
      const startTime =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[142]++, Date.now());
      /* istanbul ignore next */
      cov_1pteyjif5c().s[143]++;
      try {
        let success =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[144]++, false);
        // 清空所有缓存层
        /* istanbul ignore next */
        cov_1pteyjif5c().s[145]++;
        for (const layer of this.getSortedLayers()) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[146]++;
          if (
          /* istanbul ignore next */
          (cov_1pteyjif5c().b[43][0]++, !layer.enabled) ||
          /* istanbul ignore next */
          (cov_1pteyjif5c().b[43][1]++, layer.readOnly)) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[42][0]++;
            cov_1pteyjif5c().s[147]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[42][1]++;
          }
          cov_1pteyjif5c().s[148]++;
          try {
            const layerSuccess =
            /* istanbul ignore next */
            (cov_1pteyjif5c().s[149]++, await layer.service.clear(namespace));
            /* istanbul ignore next */
            cov_1pteyjif5c().s[150]++;
            if (layerSuccess) {
              /* istanbul ignore next */
              cov_1pteyjif5c().b[44][0]++;
              cov_1pteyjif5c().s[151]++;
              success = true;
              /* istanbul ignore next */
              cov_1pteyjif5c().s[152]++;
              this.emitEvent('cache_clear', {
                layer: layer.name,
                namespace
              });
            } else
            /* istanbul ignore next */
            {
              cov_1pteyjif5c().b[44][1]++;
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_1pteyjif5c().s[153]++;
            this.logger.warn(`Failed to clear cache layer ${layer.name}`, logging_1.LogContext.CACHE, undefined, error);
          }
        }
        /* istanbul ignore next */
        cov_1pteyjif5c().s[154]++;
        this.updateStats(startTime);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[155]++;
        return success;
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[156]++;
        this.logger.error('Error clearing cache', logging_1.LogContext.CACHE, undefined, error);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[157]++;
        this.emitEvent('cache_error', {
          error
        });
        /* istanbul ignore next */
        cov_1pteyjif5c().s[158]++;
        return false;
      }
    }
    /**
     * @method getStats
     * @description 获取缓存统计信息
     * @returns {Promise<CacheStats>} 统计信息
     */
    async getStats() {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[12]++;
      cov_1pteyjif5c().s[159]++;
      try {
        // 更新各层统计信息
        const layerStats =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[160]++, {});
        /* istanbul ignore next */
        cov_1pteyjif5c().s[161]++;
        for (const [name, layer] of this.layers) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[162]++;
          if (layer.enabled) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[45][0]++;
            cov_1pteyjif5c().s[163]++;
            try {
              /* istanbul ignore next */
              cov_1pteyjif5c().s[164]++;
              layerStats[name] = await layer.service.getStats();
            } catch (error) {
              /* istanbul ignore next */
              cov_1pteyjif5c().s[165]++;
              this.logger.warn(`Failed to get stats for layer ${name}`, logging_1.LogContext.CACHE, undefined, error);
              /* istanbul ignore next */
              cov_1pteyjif5c().s[166]++;
              layerStats[name] = null;
            }
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[45][1]++;
          }
        }
        // 计算总体统计
        /* istanbul ignore next */
        cov_1pteyjif5c().s[167]++;
        this.stats.hitRate = this.requestCount > 0 ?
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[46][0]++, this.hitCount / this.requestCount) :
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[46][1]++, 0);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[168]++;
        this.stats.activeLayers = Array.from(this.layers.values()).filter(layer => {
          /* istanbul ignore next */
          cov_1pteyjif5c().f[13]++;
          cov_1pteyjif5c().s[169]++;
          return layer.enabled;
        }).length;
        /* istanbul ignore next */
        cov_1pteyjif5c().s[170]++;
        this.stats.layerStats = layerStats;
        /* istanbul ignore next */
        cov_1pteyjif5c().s[171]++;
        this.stats.lastUpdated = new Date();
        /* istanbul ignore next */
        cov_1pteyjif5c().s[172]++;
        return {
          ...this.stats
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[173]++;
        this.logger.error('Error getting cache stats', logging_1.LogContext.CACHE, undefined, error);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[174]++;
        return this.stats;
      }
    }
    /**
     * @method getHealth
     * @description 获取缓存健康状态
     * @returns {Promise<CacheHealth>} 健康状态
     */
    async getHealth() {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[14]++;
      cov_1pteyjif5c().s[175]++;
      try {
        let healthyLayers =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[176]++, 0);
        let totalResponseTime =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[177]++, 0);
        let hasError =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[178]++, false);
        let errorMessage =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[179]++, '');
        // 检查各层健康状态
        /* istanbul ignore next */
        cov_1pteyjif5c().s[180]++;
        for (const [, layer] of this.layers) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[181]++;
          if (layer.enabled) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[47][0]++;
            cov_1pteyjif5c().s[182]++;
            try {
              const layerHealth =
              /* istanbul ignore next */
              (cov_1pteyjif5c().s[183]++, await layer.service.getHealth());
              /* istanbul ignore next */
              cov_1pteyjif5c().s[184]++;
              totalResponseTime += layerHealth.responseTime;
              /* istanbul ignore next */
              cov_1pteyjif5c().s[185]++;
              if (layerHealth.healthy) {
                /* istanbul ignore next */
                cov_1pteyjif5c().b[48][0]++;
                cov_1pteyjif5c().s[186]++;
                healthyLayers++;
              } else {
                /* istanbul ignore next */
                cov_1pteyjif5c().b[48][1]++;
                cov_1pteyjif5c().s[187]++;
                hasError = true;
                /* istanbul ignore next */
                cov_1pteyjif5c().s[188]++;
                errorMessage =
                /* istanbul ignore next */
                (cov_1pteyjif5c().b[49][0]++, layerHealth.error) ||
                /* istanbul ignore next */
                (cov_1pteyjif5c().b[49][1]++, 'Layer unhealthy');
              }
            } catch (error) {
              /* istanbul ignore next */
              cov_1pteyjif5c().s[189]++;
              hasError = true;
              /* istanbul ignore next */
              cov_1pteyjif5c().s[190]++;
              errorMessage = error.message;
            }
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[47][1]++;
          }
        }
        const activeLayers =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[191]++, Array.from(this.layers.values()).filter(layer => {
          /* istanbul ignore next */
          cov_1pteyjif5c().f[15]++;
          cov_1pteyjif5c().s[192]++;
          return layer.enabled;
        }).length);
        const averageResponseTime =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[193]++, activeLayers > 0 ?
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[50][0]++, totalResponseTime / activeLayers) :
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[50][1]++, 0));
        /* istanbul ignore next */
        cov_1pteyjif5c().s[194]++;
        return {
          healthy:
          /* istanbul ignore next */
          (cov_1pteyjif5c().b[51][0]++, !hasError) &&
          /* istanbul ignore next */
          (cov_1pteyjif5c().b[51][1]++, healthyLayers === activeLayers),
          connected: healthyLayers > 0,
          responseTime: averageResponseTime,
          error: hasError ?
          /* istanbul ignore next */
          (cov_1pteyjif5c().b[52][0]++, errorMessage) :
          /* istanbul ignore next */
          (cov_1pteyjif5c().b[52][1]++, undefined),
          lastCheck: Date.now()
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[195]++;
        this.logger.error('Error getting cache health', logging_1.LogContext.CACHE, undefined, error);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[196]++;
        return {
          healthy: false,
          connected: false,
          responseTime: 0,
          error: error.message,
          lastCheck: Date.now()
        };
      }
    }
    /**
     * @method addLayer
     * @description 添加缓存层
     * @param config 缓存层配置
     * @returns {boolean} 是否成功
     */
    addLayer(config) {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[16]++;
      cov_1pteyjif5c().s[197]++;
      try {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[198]++;
        if (this.layers.has(config.name)) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[53][0]++;
          cov_1pteyjif5c().s[199]++;
          this.logger.warn(`Cache layer ${config.name} already exists, replacing...`, logging_1.LogContext.CACHE);
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[53][1]++;
        }
        cov_1pteyjif5c().s[200]++;
        this.layers.set(config.name, {
          enabled: true,
          readOnly: false,
          fallback: false,
          ...config
        });
        /* istanbul ignore next */
        cov_1pteyjif5c().s[201]++;
        this.logger.info(`Added cache layer: ${config.name} with priority ${config.priority}`, logging_1.LogContext.CACHE);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[202]++;
        this.emitEvent('layer_added', {
          layer: config.name,
          priority: config.priority
        });
        /* istanbul ignore next */
        cov_1pteyjif5c().s[203]++;
        return true;
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[204]++;
        this.logger.error(`Failed to add cache layer: ${config.name}`, logging_1.LogContext.CACHE, undefined, error);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[205]++;
        return false;
      }
    }
    /**
     * @method removeLayer
     * @description 移除缓存层
     * @param name 缓存层名称
     * @returns {boolean} 是否成功
     */
    removeLayer(name) {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[17]++;
      cov_1pteyjif5c().s[206]++;
      try {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[207]++;
        if (!this.layers.has(name)) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[54][0]++;
          cov_1pteyjif5c().s[208]++;
          this.logger.warn(`Cache layer ${name} does not exist`, logging_1.LogContext.CACHE);
          /* istanbul ignore next */
          cov_1pteyjif5c().s[209]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[54][1]++;
        }
        cov_1pteyjif5c().s[210]++;
        this.layers.delete(name);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[211]++;
        this.logger.info(`Removed cache layer: ${name}`, logging_1.LogContext.CACHE);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[212]++;
        this.emitEvent('layer_removed', {
          layer: name
        });
        /* istanbul ignore next */
        cov_1pteyjif5c().s[213]++;
        return true;
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[214]++;
        this.logger.error(`Failed to remove cache layer: ${name}`, logging_1.LogContext.CACHE, undefined, error);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[215]++;
        return false;
      }
    }
    /**
     * @method enableLayer
     * @description 启用缓存层
     * @param name 缓存层名称
     * @param enabled 是否启用
     * @returns {boolean} 是否成功
     */
    enableLayer(name, enabled) {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[18]++;
      cov_1pteyjif5c().s[216]++;
      try {
        const layer =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[217]++, this.layers.get(name));
        /* istanbul ignore next */
        cov_1pteyjif5c().s[218]++;
        if (!layer) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[55][0]++;
          cov_1pteyjif5c().s[219]++;
          this.logger.warn(`Cache layer ${name} does not exist`, logging_1.LogContext.CACHE);
          /* istanbul ignore next */
          cov_1pteyjif5c().s[220]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[55][1]++;
        }
        cov_1pteyjif5c().s[221]++;
        layer.enabled = enabled;
        /* istanbul ignore next */
        cov_1pteyjif5c().s[222]++;
        this.logger.info(`${enabled ?
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[56][0]++, 'Enabled') :
        /* istanbul ignore next */
        (cov_1pteyjif5c().b[56][1]++, 'Disabled')} cache layer: ${name}`, logging_1.LogContext.CACHE);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[223]++;
        this.emitEvent('layer_toggled', {
          layer: name,
          enabled
        });
        /* istanbul ignore next */
        cov_1pteyjif5c().s[224]++;
        return true;
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[225]++;
        this.logger.error(`Failed to toggle cache layer: ${name}`, logging_1.LogContext.CACHE, undefined, error);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[226]++;
        return false;
      }
    }
    /**
     * @method getLayers
     * @description 获取所有缓存层信息
     * @returns {CacheLayerConfig[]} 缓存层配置列表
     */
    getLayers() {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[19]++;
      cov_1pteyjif5c().s[227]++;
      return Array.from(this.layers.values()).map(layer => {
        /* istanbul ignore next */
        cov_1pteyjif5c().f[20]++;
        cov_1pteyjif5c().s[228]++;
        return {
          ...layer
        };
      });
    }
    /**
     * @method resetStats
     * @description 重置缓存统计信息
     */
    async resetStats() {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[21]++;
      cov_1pteyjif5c().s[229]++;
      try {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[230]++;
        // 重置各层统计
        for (const [name, layer] of this.layers) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[231]++;
          if (layer.enabled) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[57][0]++;
            cov_1pteyjif5c().s[232]++;
            try {
              /* istanbul ignore next */
              cov_1pteyjif5c().s[233]++;
              await layer.service.resetStats();
            } catch (error) {
              /* istanbul ignore next */
              cov_1pteyjif5c().s[234]++;
              this.logger.warn(`Failed to reset stats for layer ${name}`, logging_1.LogContext.CACHE, undefined, error);
            }
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[57][1]++;
          }
        }
        // 重置管理器统计
        /* istanbul ignore next */
        cov_1pteyjif5c().s[235]++;
        this.requestCount = 0;
        /* istanbul ignore next */
        cov_1pteyjif5c().s[236]++;
        this.hitCount = 0;
        /* istanbul ignore next */
        cov_1pteyjif5c().s[237]++;
        this.totalResponseTime = 0;
        /* istanbul ignore next */
        cov_1pteyjif5c().s[238]++;
        this.stats = this.initializeStats();
        /* istanbul ignore next */
        cov_1pteyjif5c().s[239]++;
        this.logger.info('Cache stats reset successfully', logging_1.LogContext.CACHE);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[240]++;
        this.emitEvent('stats_reset', {});
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[241]++;
        this.logger.error('Failed to reset cache stats', logging_1.LogContext.CACHE, undefined, error);
      }
    }
    /**
     * @method onDestroy
     * @description 销毁时清理资源
     */
    onDestroy() {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[22]++;
      cov_1pteyjif5c().s[242]++;
      this.stopMonitoring();
      /* istanbul ignore next */
      cov_1pteyjif5c().s[243]++;
      this.stopCleanup();
      /* istanbul ignore next */
      cov_1pteyjif5c().s[244]++;
      this.logger.info('CacheManagerService destroyed', logging_1.LogContext.CACHE);
    }
    // 私有方法
    /**
     * @private
     * @method initializeStats
     * @description 初始化统计信息
     * @returns {CacheManagerStats} 初始统计信息
     */
    initializeStats() {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[23]++;
      cov_1pteyjif5c().s[245]++;
      return {
        totalEntries: 0,
        hits: 0,
        misses: 0,
        hitRate: 0,
        totalSize: 0,
        averageSize: 0,
        expiredEntries: 0,
        evictedEntries: 0,
        lastReset: Date.now(),
        activeLayers: 0,
        layerStats: {},
        lastUpdated: new Date()
      };
    }
    /**
     * @private
     * @method initializeLayers
     * @description 初始化缓存层
     */
    initializeLayers() {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[24]++;
      cov_1pteyjif5c().s[246]++;
      if (this.config.layers) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[58][0]++;
        cov_1pteyjif5c().s[247]++;
        for (const layerConfig of this.config.layers) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[248]++;
          this.addLayer(layerConfig);
        }
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[58][1]++;
      }
    }
    /**
     * @private
     * @method getSortedLayers
     * @description 获取按优先级排序的缓存层
     * @returns {CacheLayerConfig[]} 排序后的缓存层
     */
    getSortedLayers() {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[25]++;
      cov_1pteyjif5c().s[249]++;
      return Array.from(this.layers.values()).filter(layer => {
        /* istanbul ignore next */
        cov_1pteyjif5c().f[26]++;
        cov_1pteyjif5c().s[250]++;
        return layer.enabled;
      }).sort((a, b) => {
        /* istanbul ignore next */
        cov_1pteyjif5c().f[27]++;
        cov_1pteyjif5c().s[251]++;
        return a.priority - b.priority;
      });
    }
    /**
     * @private
     * @method promoteToHigherLayer
     * @description 将缓存值提升到更高优先级的层
     * @param key 缓存键
     * @param value 缓存值
     * @param currentPriority 当前优先级
     */
    async promoteToHigherLayer(key, value, currentPriority) {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[28]++;
      cov_1pteyjif5c().s[252]++;
      try {
        const higherLayers =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[253]++, Array.from(this.layers.values()).filter(layer => {
          /* istanbul ignore next */
          cov_1pteyjif5c().f[29]++;
          cov_1pteyjif5c().s[254]++;
          return /* istanbul ignore next */(cov_1pteyjif5c().b[59][0]++, layer.enabled) &&
          /* istanbul ignore next */
          (cov_1pteyjif5c().b[59][1]++, !layer.readOnly) &&
          /* istanbul ignore next */
          (cov_1pteyjif5c().b[59][2]++, layer.priority < currentPriority);
        }).sort((a, b) => {
          /* istanbul ignore next */
          cov_1pteyjif5c().f[30]++;
          cov_1pteyjif5c().s[255]++;
          return a.priority - b.priority;
        }));
        /* istanbul ignore next */
        cov_1pteyjif5c().s[256]++;
        for (const layer of higherLayers) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[257]++;
          try {
            /* istanbul ignore next */
            cov_1pteyjif5c().s[258]++;
            await layer.service.set(key, value);
            /* istanbul ignore next */
            cov_1pteyjif5c().s[259]++;
            this.emitEvent('cache_promoted', {
              key,
              fromPriority: currentPriority,
              toPriority: layer.priority,
              layer: layer.name
            });
          } catch (error) {
            /* istanbul ignore next */
            cov_1pteyjif5c().s[260]++;
            this.logger.warn(`Failed to promote cache to layer ${layer.name}: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
          }
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[261]++;
        this.logger.error(`Error promoting cache: ${key.key}`, logging_1.LogContext.CACHE, undefined, error);
      }
    }
    /**
     * @private
     * @method updateStats
     * @description 更新统计信息
     * @param startTime 开始时间
     */
    updateStats(startTime) {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[31]++;
      const responseTime =
      /* istanbul ignore next */
      (cov_1pteyjif5c().s[262]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_1pteyjif5c().s[263]++;
      this.totalResponseTime += responseTime;
      /* istanbul ignore next */
      cov_1pteyjif5c().s[264]++;
      this.stats.hits = this.hitCount;
      /* istanbul ignore next */
      cov_1pteyjif5c().s[265]++;
      this.stats.misses = this.requestCount - this.hitCount;
    }
    /**
     * @private
     * @method emitEvent
     * @description 发送缓存事件
     * @param type 事件类型
     * @param data 事件数据
     */
    emitEvent(type, _data) {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[32]++;
      cov_1pteyjif5c().s[266]++;
      if (this.config.enableEvents) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[60][0]++;
        cov_1pteyjif5c().s[267]++;
        try {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[268]++;
          this.eventEmitter.emit(`cache.${type}`, {
            type,
            data: _data,
            timestamp: new Date(),
            managerId: 'cache-manager'
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[269]++;
          this.logger.warn(`Failed to emit cache event: ${type}`, logging_1.LogContext.CACHE, undefined, error);
        }
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[60][1]++;
      }
    }
    /**
     * @private
     * @method startMonitoring
     * @description 开始监控
     */
    startMonitoring() {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[33]++;
      cov_1pteyjif5c().s[270]++;
      if (
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[62][0]++, this.config.monitoringInterval) &&
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[62][1]++, this.config.monitoringInterval > 0)) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[61][0]++;
        cov_1pteyjif5c().s[271]++;
        this.monitoringTimer = setInterval(() => {
          /* istanbul ignore next */
          cov_1pteyjif5c().f[34]++;
          cov_1pteyjif5c().s[272]++;
          this.performMonitoring().catch(error => {
            /* istanbul ignore next */
            cov_1pteyjif5c().f[35]++;
            cov_1pteyjif5c().s[273]++;
            this.logger.error('Cache monitoring failed', logging_1.LogContext.CACHE, undefined, error);
          });
        }, this.config.monitoringInterval);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[274]++;
        this.logger.info(`Started cache monitoring, interval: ${this.config.monitoringInterval}ms`, logging_1.LogContext.CACHE);
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[61][1]++;
      }
    }
    /**
     * @private
     * @method stopMonitoring
     * @description 停止监控
     */
    stopMonitoring() {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[36]++;
      cov_1pteyjif5c().s[275]++;
      if (this.monitoringTimer) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[63][0]++;
        cov_1pteyjif5c().s[276]++;
        clearInterval(this.monitoringTimer);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[277]++;
        this.monitoringTimer = undefined;
        /* istanbul ignore next */
        cov_1pteyjif5c().s[278]++;
        this.logger.info('Stopped cache monitoring', logging_1.LogContext.CACHE);
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[63][1]++;
      }
    }
    /**
     * @private
     * @method startCleanup
     * @description 开始清理
     */
    startCleanup() {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[37]++;
      cov_1pteyjif5c().s[279]++;
      if (
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[65][0]++, this.config.cleanupInterval) &&
      /* istanbul ignore next */
      (cov_1pteyjif5c().b[65][1]++, this.config.cleanupInterval > 0)) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[64][0]++;
        cov_1pteyjif5c().s[280]++;
        this.cleanupTimer = setInterval(() => {
          /* istanbul ignore next */
          cov_1pteyjif5c().f[38]++;
          cov_1pteyjif5c().s[281]++;
          this.performCleanup().catch(error => {
            /* istanbul ignore next */
            cov_1pteyjif5c().f[39]++;
            cov_1pteyjif5c().s[282]++;
            this.logger.error('Cache cleanup failed', logging_1.LogContext.CACHE, undefined, error);
          });
        }, this.config.cleanupInterval);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[283]++;
        this.logger.info(`Started cache cleanup, interval: ${this.config.cleanupInterval}ms`, logging_1.LogContext.CACHE);
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[64][1]++;
      }
    }
    /**
     * @private
     * @method stopCleanup
     * @description 停止清理
     */
    stopCleanup() {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[40]++;
      cov_1pteyjif5c().s[284]++;
      if (this.cleanupTimer) {
        /* istanbul ignore next */
        cov_1pteyjif5c().b[66][0]++;
        cov_1pteyjif5c().s[285]++;
        clearInterval(this.cleanupTimer);
        /* istanbul ignore next */
        cov_1pteyjif5c().s[286]++;
        this.cleanupTimer = undefined;
        /* istanbul ignore next */
        cov_1pteyjif5c().s[287]++;
        this.logger.info('Stopped cache cleanup', logging_1.LogContext.CACHE);
      } else
      /* istanbul ignore next */
      {
        cov_1pteyjif5c().b[66][1]++;
      }
    }
    /**
     * @private
     * @method performMonitoring
     * @description 执行监控
     */
    async performMonitoring() {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[41]++;
      cov_1pteyjif5c().s[288]++;
      try {
        const health =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[289]++, await this.getHealth());
        const stats =
        /* istanbul ignore next */
        (cov_1pteyjif5c().s[290]++, await this.getStats());
        /* istanbul ignore next */
        cov_1pteyjif5c().s[291]++;
        this.emitEvent('monitoring', {
          health,
          stats
        });
        // 检查健康状态
        /* istanbul ignore next */
        cov_1pteyjif5c().s[292]++;
        if (!health.healthy) {
          /* istanbul ignore next */
          cov_1pteyjif5c().b[67][0]++;
          cov_1pteyjif5c().s[293]++;
          this.logger.warn('Cache health check failed', logging_1.LogContext.CACHE);
        } else
        /* istanbul ignore next */
        {
          cov_1pteyjif5c().b[67][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[294]++;
        this.logger.error('Cache monitoring execution failed', logging_1.LogContext.CACHE, undefined, error);
      }
    }
    /**
     * @private
     * @method performCleanup
     * @description 执行清理
     */
    async performCleanup() {
      /* istanbul ignore next */
      cov_1pteyjif5c().f[42]++;
      cov_1pteyjif5c().s[295]++;
      try {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[296]++;
        // 清理过期的缓存项
        for (const layer of this.getSortedLayers()) {
          /* istanbul ignore next */
          cov_1pteyjif5c().s[297]++;
          if (
          /* istanbul ignore next */
          (cov_1pteyjif5c().b[69][0]++, layer.enabled) &&
          /* istanbul ignore next */
          (cov_1pteyjif5c().b[69][1]++, !layer.readOnly)) {
            /* istanbul ignore next */
            cov_1pteyjif5c().b[68][0]++;
            cov_1pteyjif5c().s[298]++;
            try {
              /* istanbul ignore next */
              cov_1pteyjif5c().s[299]++;
              // 这里可以调用各层的清理方法，如果有的话
              this.emitEvent('cleanup', {
                layer: layer.name
              });
            } catch (error) {
              /* istanbul ignore next */
              cov_1pteyjif5c().s[300]++;
              this.logger.warn(`Failed to cleanup layer ${layer.name}`, logging_1.LogContext.CACHE, undefined, error);
            }
          } else
          /* istanbul ignore next */
          {
            cov_1pteyjif5c().b[68][1]++;
          }
        }
        /* istanbul ignore next */
        cov_1pteyjif5c().s[301]++;
        this.logger.debug('Cache cleanup completed', logging_1.LogContext.CACHE);
      } catch (error) {
        /* istanbul ignore next */
        cov_1pteyjif5c().s[302]++;
        this.logger.error('Cache cleanup execution failed', logging_1.LogContext.CACHE, undefined, error);
      }
    }
  });
  /* istanbul ignore next */
  cov_1pteyjif5c().s[303]++;
  __setFunctionName(_classThis, "CacheManagerService");
  /* istanbul ignore next */
  cov_1pteyjif5c().s[304]++;
  (() => {
    /* istanbul ignore next */
    cov_1pteyjif5c().f[43]++;
    const _metadata =
    /* istanbul ignore next */
    (cov_1pteyjif5c().s[305]++,
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[71][0]++, typeof Symbol === "function") &&
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[71][1]++, Symbol.metadata) ?
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[70][0]++, Object.create(null)) :
    /* istanbul ignore next */
    (cov_1pteyjif5c().b[70][1]++, void 0));
    /* istanbul ignore next */
    cov_1pteyjif5c().s[306]++;
    __esDecorate(null, _classDescriptor = {
      value: _classThis
    }, _classDecorators, {
      kind: "class",
      name: _classThis.name,
      metadata: _metadata
    }, null, _classExtraInitializers);
    /* istanbul ignore next */
    cov_1pteyjif5c().s[307]++;
    CacheManagerService = _classThis = _classDescriptor.value;
    /* istanbul ignore next */
    cov_1pteyjif5c().s[308]++;
    if (_metadata) {
      /* istanbul ignore next */
      cov_1pteyjif5c().b[72][0]++;
      cov_1pteyjif5c().s[309]++;
      Object.defineProperty(_classThis, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    } else
    /* istanbul ignore next */
    {
      cov_1pteyjif5c().b[72][1]++;
    }
    cov_1pteyjif5c().s[310]++;
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  /* istanbul ignore next */
  cov_1pteyjif5c().s[311]++;
  return CacheManagerService = _classThis;
})());
/* istanbul ignore next */
cov_1pteyjif5c().s[312]++;
exports.CacheManagerService = CacheManagerService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,