{"version":3,"names":["common_1","cov_1pteyjif5c","s","require","cache_interface_1","logging_1","CacheManagerService","f","Injectable","constructor","config","eventEmitter","logger","layers","Map","requestCount","hitCount","totalResponseTime","enabled","defaultStrategy","CacheStrategy","LRU","monitoringInterval","cleanupInterval","maxSize","enableStats","enableEvents","stats","initializeStats","initializeLayers","startMonitoring","startCleanup","info","LogContext","CACHE","get","key","startTime","Date","now","layer","getSortedLayers","b","value","service","updateStats","priority","promoteToHigherLayer","emitEvent","name","error","undefined","set","options","mergedOptions","defaultOptions","success","readOnly","layerSuccess","warn","delete","exists","clear","namespace","getStats","layerStats","hitRate","activeLayers","Array","from","values","filter","length","lastUpdated","getHealth","healthyLayers","hasError","errorMessage","layerHealth","responseTime","healthy","message","averageResponseTime","connected","lastCheck","addLayer","has","fallback","removeLayer","enableLayer","getLayers","map","resetStats","onDestroy","stopMonitoring","stopCleanup","totalEntries","hits","misses","totalSize","averageSize","expiredEntries","evictedEntries","lastReset","layerConfig","sort","a","currentPriority","higherLayers","fromPriority","toPriority","type","_data","emit","data","timestamp","managerId","monitoringTimer","setInterval","performMonitoring","catch","clearInterval","cleanupTimer","performCleanup","health","debug","__esDecorate","_classDescriptor","_classThis","_classDecorators","kind","metadata","_metadata","_classExtraInitializers","__runInitializers","exports"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-manager.service.ts"],"sourcesContent":["import { Injectable, Inject } from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\n\nimport type { ICacheService } from '../interfaces/cache.interface';\n\nimport type {\n  CacheOptions,\n  CacheKey,\n  CacheStats,\n  CacheHealth,\n} from '../interfaces/cache.interface';\nimport { CacheStrategy } from '../interfaces/cache.interface';\nimport { PinoLoggerService, LogContext } from '@aiofix/logging';\n\n/**\n * @interface CacheManagerConfig\n * @description\n * 缓存管理器配置接口，定义缓存管理器的配置选项。\n */\nexport interface CacheManagerConfig {\n  /** 默认缓存选项 */\n  defaultOptions?: CacheOptions;\n  /** 默认缓存策略 */\n  defaultStrategy?: CacheStrategy;\n  /** 是否启用缓存 */\n  enabled?: boolean;\n  /** 缓存层配置 */\n  layers?: CacheLayerConfig[];\n  /** 监控间隔（毫秒） */\n  monitoringInterval?: number;\n  /** 自动清理间隔（毫秒） */\n  cleanupInterval?: number;\n  /** 最大缓存大小 */\n  maxSize?: number;\n  /** 是否启用统计 */\n  enableStats?: boolean;\n  /** 是否启用事件 */\n  enableEvents?: boolean;\n}\n\n/**\n * @interface CacheLayerConfig\n * @description\n * 缓存层配置接口，定义单个缓存层的配置。\n */\nexport interface CacheLayerConfig {\n  /** 缓存层名称 */\n  name: string;\n  /** 缓存层优先级（数字越小优先级越高） */\n  priority: number;\n  /** 缓存服务实例 */\n  service: ICacheService;\n  /** 缓存层选项 */\n  options?: CacheOptions;\n  /** 是否启用 */\n  enabled?: boolean;\n  /** 是否只读 */\n  readOnly?: boolean;\n  /** 是否作为后备缓存 */\n  fallback?: boolean;\n}\n\n/**\n * @interface CacheManagerStats\n * @description\n * 缓存管理器统计信息接口。\n */\nexport interface CacheManagerStats extends CacheStats {\n  /** 活跃缓存层数量 */\n  activeLayers: number;\n  /** 各层统计信息 */\n  layerStats: Record<string, any>;\n  /** 最后更新时间 */\n  lastUpdated: Date;\n}\n\n/**\n * @class CacheManagerService\n * @description\n * 缓存管理器服务，作为缓存系统的核心协调器。\n *\n * 主要功能包括：\n * 1. 管理多个缓存层（L1、L2、L3等）\n * 2. 实现缓存策略（LRU、LFU、FIFO等）\n * 3. 提供统一的缓存接口\n * 4. 监控缓存性能和健康状态\n * 5. 处理缓存失效和更新\n * 6. 提供缓存统计和分析\n *\n * @implements {ICacheService}\n */\n@Injectable()\nexport class CacheManagerService implements ICacheService {\n  /**\n   * 缓存层映射，按优先级排序\n   */\n  private readonly layers = new Map<string, CacheLayerConfig>();\n\n  /**\n   * 缓存管理器配置\n   */\n  private config: CacheManagerConfig;\n\n  /**\n   * 统计信息\n   */\n  private stats: CacheManagerStats;\n\n  /**\n   * 监控定时器\n   */\n  private monitoringTimer?: NodeJS.Timeout;\n\n  /**\n   * 清理定时器\n   */\n  private cleanupTimer?: NodeJS.Timeout;\n\n  /**\n   * 请求计数器\n   */\n  private requestCount = 0;\n\n  /**\n   * 命中计数器\n   */\n  private hitCount = 0;\n\n  /**\n   * 响应时间累计\n   */\n  private totalResponseTime = 0;\n\n  constructor(\n    @Inject('CACHE_MANAGER_CONFIG') config: CacheManagerConfig,\n    private readonly eventEmitter: EventEmitter2,\n    @Inject(PinoLoggerService) private readonly logger: PinoLoggerService,\n  ) {\n    this.config = {\n      enabled: true,\n      defaultStrategy: CacheStrategy.LRU,\n      monitoringInterval: 30000,\n      cleanupInterval: 60000,\n      maxSize: 10000,\n      enableStats: true,\n      enableEvents: true,\n      ...config,\n    };\n\n    this.stats = this.initializeStats();\n    this.initializeLayers();\n    this.startMonitoring();\n    this.startCleanup();\n\n    this.logger.info('CacheManagerService initialized', LogContext.CACHE);\n  }\n\n  /**\n   * @method get\n   * @description 从缓存中获取值\n   * @param key 缓存键\n   * @returns {Promise<T | null>} 缓存值\n   */\n  async get<T = any>(key: CacheKey): Promise<T | null> {\n    const startTime = Date.now();\n    this.requestCount++;\n\n    try {\n      // 按优先级遍历缓存层\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled) continue;\n\n        const value = await layer.service.get<T>(key);\n\n        if (value !== null) {\n          // 缓存命中，更新统计\n          this.hitCount++;\n          this.updateStats(startTime);\n\n          // 如果命中的是低优先级层，尝试提升到高优先级层\n          if (layer.priority > 1) {\n            this.promoteToHigherLayer(key, value, layer.priority);\n          }\n\n          this.emitEvent('cache_hit', { key, layer: layer.name, value });\n          return value;\n        }\n      }\n\n      // 缓存未命中\n      this.updateStats(startTime);\n      this.emitEvent('cache_miss', { key });\n      return null;\n    } catch (error) {\n      this.logger.error(\n        `Error getting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return null;\n    }\n  }\n\n  /**\n   * @method set\n   * @description 设置缓存值\n   * @param key 缓存键\n   * @param value 缓存值\n   * @param options 缓存选项\n   * @returns {Promise<boolean>} 是否成功\n   */\n  async set<T = any>(\n    key: CacheKey,\n    value: T,\n    options?: Partial<CacheOptions>,\n  ): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      const mergedOptions = { ...this.config.defaultOptions, ...options };\n      let success = false;\n\n      // 按优先级设置到所有启用的缓存层\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.set(key, value, {\n            ...layer.options,\n            ...mergedOptions,\n          });\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_set', { key, layer: layer.name, value });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to set cache in layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        `Error setting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method delete\n   * @description 删除缓存值\n   * @param key 缓存键\n   * @returns {Promise<boolean>} 是否成功\n   */\n  async delete(key: CacheKey): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      let success = false;\n\n      // 从所有缓存层删除\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.delete(key);\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_delete', { key, layer: layer.name });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to delete cache from layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        `Error deleting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method exists\n   * @description 检查缓存键是否存在\n   * @param key 缓存键\n   * @returns {Promise<boolean>} 是否存在\n   */\n  async exists(key: CacheKey): Promise<boolean> {\n    const startTime = Date.now();\n    this.requestCount++;\n\n    try {\n      // 检查所有缓存层\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled) continue;\n\n        const exists = await layer.service.exists(key);\n        if (exists) {\n          this.hitCount++;\n          this.updateStats(startTime);\n          this.emitEvent('cache_exists', { key, layer: layer.name });\n          return true;\n        }\n      }\n\n      this.updateStats(startTime);\n      return false;\n    } catch (error) {\n      this.logger.error(\n        `Error checking cache existence: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method clear\n   * @description 清空缓存\n   * @param namespace 命名空间\n   * @returns {Promise<boolean>} 是否成功\n   */\n  async clear(namespace?: string): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      let success = false;\n\n      // 清空所有缓存层\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.clear(namespace);\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_clear', { layer: layer.name, namespace });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to clear cache layer ${layer.name}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        'Error clearing cache',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { error });\n      return false;\n    }\n  }\n\n  /**\n   * @method getStats\n   * @description 获取缓存统计信息\n   * @returns {Promise<CacheStats>} 统计信息\n   */\n  async getStats(): Promise<CacheStats> {\n    try {\n      // 更新各层统计信息\n      const layerStats: Record<string, any> = {};\n      for (const [name, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            layerStats[name] = await layer.service.getStats();\n          } catch (error) {\n            this.logger.warn(\n              `Failed to get stats for layer ${name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n            layerStats[name] = null;\n          }\n        }\n      }\n\n      // 计算总体统计\n      this.stats.hitRate =\n        this.requestCount > 0 ? this.hitCount / this.requestCount : 0;\n      this.stats.activeLayers = Array.from(this.layers.values()).filter(\n        layer => layer.enabled,\n      ).length;\n      this.stats.layerStats = layerStats;\n      this.stats.lastUpdated = new Date();\n\n      return { ...this.stats };\n    } catch (error) {\n      this.logger.error(\n        'Error getting cache stats',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return this.stats;\n    }\n  }\n\n  /**\n   * @method getHealth\n   * @description 获取缓存健康状态\n   * @returns {Promise<CacheHealth>} 健康状态\n   */\n  async getHealth(): Promise<CacheHealth> {\n    try {\n      let healthyLayers = 0;\n      let totalResponseTime = 0;\n      let hasError = false;\n      let errorMessage = '';\n\n      // 检查各层健康状态\n      for (const [, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            const layerHealth = await layer.service.getHealth();\n            totalResponseTime += layerHealth.responseTime;\n            if (layerHealth.healthy) {\n              healthyLayers++;\n            } else {\n              hasError = true;\n              errorMessage = layerHealth.error || 'Layer unhealthy';\n            }\n          } catch (error) {\n            hasError = true;\n            errorMessage = (error as Error).message;\n          }\n        }\n      }\n\n      const activeLayers = Array.from(this.layers.values()).filter(\n        layer => layer.enabled,\n      ).length;\n      const averageResponseTime =\n        activeLayers > 0 ? totalResponseTime / activeLayers : 0;\n\n      return {\n        healthy: !hasError && healthyLayers === activeLayers,\n        connected: healthyLayers > 0,\n        responseTime: averageResponseTime,\n        error: hasError ? errorMessage : undefined,\n        lastCheck: Date.now(),\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error getting cache health',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return {\n        healthy: false,\n        connected: false,\n        responseTime: 0,\n        error: (error as Error).message,\n        lastCheck: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * @method addLayer\n   * @description 添加缓存层\n   * @param config 缓存层配置\n   * @returns {boolean} 是否成功\n   */\n  addLayer(config: CacheLayerConfig): boolean {\n    try {\n      if (this.layers.has(config.name)) {\n        this.logger.warn(\n          `Cache layer ${config.name} already exists, replacing...`,\n          LogContext.CACHE,\n        );\n      }\n\n      this.layers.set(config.name, {\n        enabled: true,\n        readOnly: false,\n        fallback: false,\n        ...config,\n      });\n\n      this.logger.info(\n        `Added cache layer: ${config.name} with priority ${config.priority}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('layer_added', {\n        layer: config.name,\n        priority: config.priority,\n      });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to add cache layer: ${config.name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method removeLayer\n   * @description 移除缓存层\n   * @param name 缓存层名称\n   * @returns {boolean} 是否成功\n   */\n  removeLayer(name: string): boolean {\n    try {\n      if (!this.layers.has(name)) {\n        this.logger.warn(\n          `Cache layer ${name} does not exist`,\n          LogContext.CACHE,\n        );\n        return false;\n      }\n\n      this.layers.delete(name);\n      this.logger.info(`Removed cache layer: ${name}`, LogContext.CACHE);\n      this.emitEvent('layer_removed', { layer: name });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to remove cache layer: ${name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method enableLayer\n   * @description 启用缓存层\n   * @param name 缓存层名称\n   * @param enabled 是否启用\n   * @returns {boolean} 是否成功\n   */\n  enableLayer(name: string, enabled: boolean): boolean {\n    try {\n      const layer = this.layers.get(name);\n      if (!layer) {\n        this.logger.warn(\n          `Cache layer ${name} does not exist`,\n          LogContext.CACHE,\n        );\n        return false;\n      }\n\n      layer.enabled = enabled;\n      this.logger.info(\n        `${enabled ? 'Enabled' : 'Disabled'} cache layer: ${name}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('layer_toggled', { layer: name, enabled });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to toggle cache layer: ${name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method getLayers\n   * @description 获取所有缓存层信息\n   * @returns {CacheLayerConfig[]} 缓存层配置列表\n   */\n  getLayers(): CacheLayerConfig[] {\n    return Array.from(this.layers.values()).map(layer => ({ ...layer }));\n  }\n\n  /**\n   * @method resetStats\n   * @description 重置缓存统计信息\n   */\n  async resetStats(): Promise<void> {\n    try {\n      // 重置各层统计\n      for (const [name, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            await layer.service.resetStats();\n          } catch (error) {\n            this.logger.warn(\n              `Failed to reset stats for layer ${name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n          }\n        }\n      }\n\n      // 重置管理器统计\n      this.requestCount = 0;\n      this.hitCount = 0;\n      this.totalResponseTime = 0;\n      this.stats = this.initializeStats();\n\n      this.logger.info('Cache stats reset successfully', LogContext.CACHE);\n      this.emitEvent('stats_reset', {});\n    } catch (error) {\n      this.logger.error(\n        'Failed to reset cache stats',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @method onDestroy\n   * @description 销毁时清理资源\n   */\n  onDestroy(): void {\n    this.stopMonitoring();\n    this.stopCleanup();\n    this.logger.info('CacheManagerService destroyed', LogContext.CACHE);\n  }\n\n  // 私有方法\n\n  /**\n   * @private\n   * @method initializeStats\n   * @description 初始化统计信息\n   * @returns {CacheManagerStats} 初始统计信息\n   */\n  private initializeStats(): CacheManagerStats {\n    return {\n      totalEntries: 0,\n      hits: 0,\n      misses: 0,\n      hitRate: 0,\n      totalSize: 0,\n      averageSize: 0,\n      expiredEntries: 0,\n      evictedEntries: 0,\n      lastReset: Date.now(),\n      activeLayers: 0,\n      layerStats: {},\n      lastUpdated: new Date(),\n    };\n  }\n\n  /**\n   * @private\n   * @method initializeLayers\n   * @description 初始化缓存层\n   */\n  private initializeLayers(): void {\n    if (this.config.layers) {\n      for (const layerConfig of this.config.layers) {\n        this.addLayer(layerConfig);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @method getSortedLayers\n   * @description 获取按优先级排序的缓存层\n   * @returns {CacheLayerConfig[]} 排序后的缓存层\n   */\n  private getSortedLayers(): CacheLayerConfig[] {\n    return Array.from(this.layers.values())\n      .filter(layer => layer.enabled)\n      .sort((a, b) => a.priority - b.priority);\n  }\n\n  /**\n   * @private\n   * @method promoteToHigherLayer\n   * @description 将缓存值提升到更高优先级的层\n   * @param key 缓存键\n   * @param value 缓存值\n   * @param currentPriority 当前优先级\n   */\n  private async promoteToHigherLayer<T>(\n    key: CacheKey,\n    value: T,\n    currentPriority: number,\n  ): Promise<void> {\n    try {\n      const higherLayers = Array.from(this.layers.values())\n        .filter(\n          layer =>\n            layer.enabled &&\n            !layer.readOnly &&\n            layer.priority < currentPriority,\n        )\n        .sort((a, b) => a.priority - b.priority);\n\n      for (const layer of higherLayers) {\n        try {\n          await layer.service.set(key, value);\n          this.emitEvent('cache_promoted', {\n            key,\n            fromPriority: currentPriority,\n            toPriority: layer.priority,\n            layer: layer.name,\n          });\n        } catch (error) {\n          this.logger.warn(\n            `Failed to promote cache to layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        `Error promoting cache: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method updateStats\n   * @description 更新统计信息\n   * @param startTime 开始时间\n   */\n  private updateStats(startTime: number): void {\n    const responseTime = Date.now() - startTime;\n    this.totalResponseTime += responseTime;\n    this.stats.hits = this.hitCount;\n    this.stats.misses = this.requestCount - this.hitCount;\n  }\n\n  /**\n   * @private\n   * @method emitEvent\n   * @description 发送缓存事件\n   * @param type 事件类型\n   * @param data 事件数据\n   */\n  private emitEvent(type: string, _data: Record<string, unknown>): void {\n    if (this.config.enableEvents) {\n      try {\n        this.eventEmitter.emit(`cache.${type}`, {\n          type,\n          data: _data,\n          timestamp: new Date(),\n          managerId: 'cache-manager',\n        });\n      } catch (error) {\n        this.logger.warn(\n          `Failed to emit cache event: ${type}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @method startMonitoring\n   * @description 开始监控\n   */\n  private startMonitoring(): void {\n    if (this.config.monitoringInterval && this.config.monitoringInterval > 0) {\n      this.monitoringTimer = setInterval(() => {\n        this.performMonitoring().catch(error => {\n          this.logger.error(\n            'Cache monitoring failed',\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        });\n      }, this.config.monitoringInterval);\n\n      this.logger.info(\n        `Started cache monitoring, interval: ${this.config.monitoringInterval}ms`,\n        LogContext.CACHE,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method stopMonitoring\n   * @description 停止监控\n   */\n  private stopMonitoring(): void {\n    if (this.monitoringTimer) {\n      clearInterval(this.monitoringTimer);\n      this.monitoringTimer = undefined;\n      this.logger.info('Stopped cache monitoring', LogContext.CACHE);\n    }\n  }\n\n  /**\n   * @private\n   * @method startCleanup\n   * @description 开始清理\n   */\n  private startCleanup(): void {\n    if (this.config.cleanupInterval && this.config.cleanupInterval > 0) {\n      this.cleanupTimer = setInterval(() => {\n        this.performCleanup().catch(error => {\n          this.logger.error(\n            'Cache cleanup failed',\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        });\n      }, this.config.cleanupInterval);\n\n      this.logger.info(\n        `Started cache cleanup, interval: ${this.config.cleanupInterval}ms`,\n        LogContext.CACHE,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method stopCleanup\n   * @description 停止清理\n   */\n  private stopCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = undefined;\n      this.logger.info('Stopped cache cleanup', LogContext.CACHE);\n    }\n  }\n\n  /**\n   * @private\n   * @method performMonitoring\n   * @description 执行监控\n   */\n  private async performMonitoring(): Promise<void> {\n    try {\n      const health = await this.getHealth();\n      const stats = await this.getStats();\n\n      this.emitEvent('monitoring', { health, stats });\n\n      // 检查健康状态\n      if (!health.healthy) {\n        this.logger.warn('Cache health check failed', LogContext.CACHE);\n      }\n    } catch (error) {\n      this.logger.error(\n        'Cache monitoring execution failed',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method performCleanup\n   * @description 执行清理\n   */\n  private async performCleanup(): Promise<void> {\n    try {\n      // 清理过期的缓存项\n      for (const layer of this.getSortedLayers()) {\n        if (layer.enabled && !layer.readOnly) {\n          try {\n            // 这里可以调用各层的清理方法，如果有的话\n            this.emitEvent('cleanup', { layer: layer.name });\n          } catch (error) {\n            this.logger.warn(\n              `Failed to cleanup layer ${layer.name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n          }\n        }\n      }\n\n      this.logger.debug('Cache cleanup completed', LogContext.CACHE);\n    } catch (error) {\n      this.logger.error(\n        'Cache cleanup execution failed',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n}\n"],"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","ignoreList":[]}