3a9135a847450fcd7582a62043d10a72
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types="jest" />
/* eslint-env jest */
const globals_1 = require("@jest/globals");
const status_enum_1 = require("./status.enum");
/**
 * @file status.enum.spec.ts
 * @description 状态枚举单元测试
 *
 * 测试覆盖：
 * - 状态枚举值
 * - 状态转换规则
 * - 状态工具方法
 * - 状态验证逻辑
 * - 异常情况处理
 *
 * @author AI开发团队
 * @since 1.0.0
 */
(0, globals_1.describe)('Status', () => {
    (0, globals_1.describe)('enum values', () => {
        (0, globals_1.it)('should have correct enum values', () => {
            // Assert
            (0, globals_1.expect)(status_enum_1.Status.PENDING).toBe('PENDING');
            (0, globals_1.expect)(status_enum_1.Status.ACTIVE).toBe('ACTIVE');
            (0, globals_1.expect)(status_enum_1.Status.DISABLED).toBe('DISABLED');
            (0, globals_1.expect)(status_enum_1.Status.LOCKED).toBe('LOCKED');
            (0, globals_1.expect)(status_enum_1.Status.SUSPENDED).toBe('SUSPENDED');
            (0, globals_1.expect)(status_enum_1.Status.DELETED).toBe('DELETED');
        });
    });
});
(0, globals_1.describe)('StatusTransition', () => {
    (0, globals_1.describe)('isTransitionAllowed', () => {
        (0, globals_1.it)('should allow same status transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.ACTIVE, status_enum_1.Status.ACTIVE);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should allow PENDING to ACTIVE transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.PENDING, status_enum_1.Status.ACTIVE);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should allow PENDING to DELETED transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.PENDING, status_enum_1.Status.DELETED);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should allow ACTIVE to DISABLED transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.ACTIVE, status_enum_1.Status.DISABLED);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should allow ACTIVE to LOCKED transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.ACTIVE, status_enum_1.Status.LOCKED);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should allow ACTIVE to SUSPENDED transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.ACTIVE, status_enum_1.Status.SUSPENDED);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should allow ACTIVE to DELETED transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.ACTIVE, status_enum_1.Status.DELETED);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should allow DISABLED to ACTIVE transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.DISABLED, status_enum_1.Status.ACTIVE);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should allow DISABLED to DELETED transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.DISABLED, status_enum_1.Status.DELETED);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should allow LOCKED to ACTIVE transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.LOCKED, status_enum_1.Status.ACTIVE);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should allow LOCKED to DISABLED transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.LOCKED, status_enum_1.Status.DISABLED);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should allow SUSPENDED to ACTIVE transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.SUSPENDED, status_enum_1.Status.ACTIVE);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should allow SUSPENDED to DELETED transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.SUSPENDED, status_enum_1.Status.DELETED);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should not allow DELETED to any other status', () => {
            // Act & Assert
            (0, globals_1.expect)(status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.DELETED, status_enum_1.Status.ACTIVE)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.DELETED, status_enum_1.Status.PENDING)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.DELETED, status_enum_1.Status.DISABLED)).toBe(false);
        });
        (0, globals_1.it)('should not allow PENDING to DISABLED transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.PENDING, status_enum_1.Status.DISABLED);
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
        (0, globals_1.it)('should not allow DISABLED to LOCKED transition', () => {
            // Act
            const result = status_enum_1.StatusTransition.isTransitionAllowed(status_enum_1.Status.DISABLED, status_enum_1.Status.LOCKED);
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
    });
    (0, globals_1.describe)('getAllowedTransitions', () => {
        (0, globals_1.it)('should return allowed transitions for PENDING', () => {
            // Act
            const transitions = status_enum_1.StatusTransition.getAllowedTransitions(status_enum_1.Status.PENDING);
            // Assert
            (0, globals_1.expect)(transitions).toContain(status_enum_1.Status.ACTIVE);
            (0, globals_1.expect)(transitions).toContain(status_enum_1.Status.DELETED);
            (0, globals_1.expect)(transitions).toHaveLength(2);
        });
        (0, globals_1.it)('should return allowed transitions for ACTIVE', () => {
            // Act
            const transitions = status_enum_1.StatusTransition.getAllowedTransitions(status_enum_1.Status.ACTIVE);
            // Assert
            (0, globals_1.expect)(transitions).toContain(status_enum_1.Status.DISABLED);
            (0, globals_1.expect)(transitions).toContain(status_enum_1.Status.LOCKED);
            (0, globals_1.expect)(transitions).toContain(status_enum_1.Status.SUSPENDED);
            (0, globals_1.expect)(transitions).toContain(status_enum_1.Status.DELETED);
            (0, globals_1.expect)(transitions).toHaveLength(4);
        });
        (0, globals_1.it)('should return empty array for DELETED', () => {
            // Act
            const transitions = status_enum_1.StatusTransition.getAllowedTransitions(status_enum_1.Status.DELETED);
            // Assert
            (0, globals_1.expect)(transitions).toHaveLength(0);
        });
    });
    (0, globals_1.describe)('validateTransition', () => {
        (0, globals_1.it)('should not throw for allowed transition', () => {
            // Act & Assert
            (0, globals_1.expect)(() => {
                status_enum_1.StatusTransition.validateTransition(status_enum_1.Status.PENDING, status_enum_1.Status.ACTIVE);
            }).not.toThrow();
        });
        (0, globals_1.it)('should throw InvalidStatusTransitionError for disallowed transition', () => {
            // Act & Assert
            (0, globals_1.expect)(() => {
                status_enum_1.StatusTransition.validateTransition(status_enum_1.Status.PENDING, status_enum_1.Status.DISABLED);
            }).toThrow(status_enum_1.InvalidStatusTransitionError);
        });
    });
});
(0, globals_1.describe)('StatusUtils', () => {
    (0, globals_1.describe)('canLogin', () => {
        (0, globals_1.it)('should return true for ACTIVE status', () => {
            // Act
            const result = status_enum_1.StatusUtils.canLogin(status_enum_1.Status.ACTIVE);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should return false for non-ACTIVE status', () => {
            // Act & Assert
            (0, globals_1.expect)(status_enum_1.StatusUtils.canLogin(status_enum_1.Status.PENDING)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusUtils.canLogin(status_enum_1.Status.DISABLED)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusUtils.canLogin(status_enum_1.Status.LOCKED)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusUtils.canLogin(status_enum_1.Status.SUSPENDED)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusUtils.canLogin(status_enum_1.Status.DELETED)).toBe(false);
        });
    });
    (0, globals_1.describe)('isDisabled', () => {
        (0, globals_1.it)('should return true for disabled statuses', () => {
            // Act & Assert
            (0, globals_1.expect)(status_enum_1.StatusUtils.isDisabled(status_enum_1.Status.DISABLED)).toBe(true);
            (0, globals_1.expect)(status_enum_1.StatusUtils.isDisabled(status_enum_1.Status.LOCKED)).toBe(true);
            (0, globals_1.expect)(status_enum_1.StatusUtils.isDisabled(status_enum_1.Status.SUSPENDED)).toBe(true);
            (0, globals_1.expect)(status_enum_1.StatusUtils.isDisabled(status_enum_1.Status.DELETED)).toBe(true);
        });
        (0, globals_1.it)('should return false for active statuses', () => {
            // Act & Assert
            (0, globals_1.expect)(status_enum_1.StatusUtils.isDisabled(status_enum_1.Status.PENDING)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusUtils.isDisabled(status_enum_1.Status.ACTIVE)).toBe(false);
        });
    });
    (0, globals_1.describe)('needsActivation', () => {
        (0, globals_1.it)('should return true for PENDING status', () => {
            // Act
            const result = status_enum_1.StatusUtils.needsActivation(status_enum_1.Status.PENDING);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should return false for non-PENDING status', () => {
            // Act & Assert
            (0, globals_1.expect)(status_enum_1.StatusUtils.needsActivation(status_enum_1.Status.ACTIVE)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusUtils.needsActivation(status_enum_1.Status.DISABLED)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusUtils.needsActivation(status_enum_1.Status.LOCKED)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusUtils.needsActivation(status_enum_1.Status.SUSPENDED)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusUtils.needsActivation(status_enum_1.Status.DELETED)).toBe(false);
        });
    });
    (0, globals_1.describe)('isDeleted', () => {
        (0, globals_1.it)('should return true for DELETED status', () => {
            // Act
            const result = status_enum_1.StatusUtils.isDeleted(status_enum_1.Status.DELETED);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should return false for non-DELETED status', () => {
            // Act & Assert
            (0, globals_1.expect)(status_enum_1.StatusUtils.isDeleted(status_enum_1.Status.PENDING)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusUtils.isDeleted(status_enum_1.Status.ACTIVE)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusUtils.isDeleted(status_enum_1.Status.DISABLED)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusUtils.isDeleted(status_enum_1.Status.LOCKED)).toBe(false);
            (0, globals_1.expect)(status_enum_1.StatusUtils.isDeleted(status_enum_1.Status.SUSPENDED)).toBe(false);
        });
    });
    (0, globals_1.describe)('getDisplayName', () => {
        (0, globals_1.it)('should return correct display names', () => {
            // Act & Assert
            (0, globals_1.expect)(status_enum_1.StatusUtils.getDisplayName(status_enum_1.Status.PENDING)).toBe('待激活');
            (0, globals_1.expect)(status_enum_1.StatusUtils.getDisplayName(status_enum_1.Status.ACTIVE)).toBe('正常');
            (0, globals_1.expect)(status_enum_1.StatusUtils.getDisplayName(status_enum_1.Status.DISABLED)).toBe('已禁用');
            (0, globals_1.expect)(status_enum_1.StatusUtils.getDisplayName(status_enum_1.Status.LOCKED)).toBe('已锁定');
            (0, globals_1.expect)(status_enum_1.StatusUtils.getDisplayName(status_enum_1.Status.SUSPENDED)).toBe('已暂停');
            (0, globals_1.expect)(status_enum_1.StatusUtils.getDisplayName(status_enum_1.Status.DELETED)).toBe('已删除');
        });
    });
    (0, globals_1.describe)('getDescription', () => {
        (0, globals_1.it)('should return correct descriptions', () => {
            // Act & Assert
            (0, globals_1.expect)(status_enum_1.StatusUtils.getDescription(status_enum_1.Status.PENDING)).toBe('已注册但未激活，需要邮箱验证或管理员激活');
            (0, globals_1.expect)(status_enum_1.StatusUtils.getDescription(status_enum_1.Status.ACTIVE)).toBe('账户正常可用，可以正常登录和使用系统');
            (0, globals_1.expect)(status_enum_1.StatusUtils.getDescription(status_enum_1.Status.DISABLED)).toBe('账户被管理员禁用，不能登录但数据保留');
            (0, globals_1.expect)(status_enum_1.StatusUtils.getDescription(status_enum_1.Status.LOCKED)).toBe('账户因安全原因被锁定，通常因多次登录失败触发');
            (0, globals_1.expect)(status_enum_1.StatusUtils.getDescription(status_enum_1.Status.SUSPENDED)).toBe('账户被临时暂停，可以恢复但需要管理员操作');
            (0, globals_1.expect)(status_enum_1.StatusUtils.getDescription(status_enum_1.Status.DELETED)).toBe('账户已被删除，数据可能被软删除或硬删除');
        });
    });
});
(0, globals_1.describe)('InvalidStatusTransitionError', () => {
    (0, globals_1.it)('should create error with correct name and message', () => {
        // Arrange
        const message = 'Invalid status transition from PENDING to DISABLED';
        // Act
        const error = new status_enum_1.InvalidStatusTransitionError(message);
        // Assert
        (0, globals_1.expect)(error).toBeInstanceOf(Error);
        (0, globals_1.expect)(error).toBeInstanceOf(status_enum_1.InvalidStatusTransitionError);
        (0, globals_1.expect)(error.name).toBe('InvalidStatusTransitionError');
        (0, globals_1.expect)(error.message).toBe(message);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,