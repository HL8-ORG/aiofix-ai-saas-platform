{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/shared/src/enums/status.enum.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/shared/src/enums/status.enum.spec.ts"],"sourcesContent":["/// <reference types=\"jest\" />\n/* eslint-env jest */\nimport {\n  describe,\n  it,\n  expect,\n  jest,\n  beforeEach,\n  afterEach,\n} from '@jest/globals';\n\nimport {\n  Status,\n  StatusTransition,\n  StatusUtils,\n  InvalidStatusTransitionError,\n} from './status.enum';\n\n/**\n * @file status.enum.spec.ts\n * @description 状态枚举单元测试\n *\n * 测试覆盖：\n * - 状态枚举值\n * - 状态转换规则\n * - 状态工具方法\n * - 状态验证逻辑\n * - 异常情况处理\n *\n * @author AI开发团队\n * @since 1.0.0\n */\ndescribe('Status', () => {\n  describe('enum values', () => {\n    it('should have correct enum values', () => {\n      // Assert\n      expect(Status.PENDING).toBe('PENDING');\n      expect(Status.ACTIVE).toBe('ACTIVE');\n      expect(Status.DISABLED).toBe('DISABLED');\n      expect(Status.LOCKED).toBe('LOCKED');\n      expect(Status.SUSPENDED).toBe('SUSPENDED');\n      expect(Status.DELETED).toBe('DELETED');\n    });\n  });\n});\n\ndescribe('StatusTransition', () => {\n  describe('isTransitionAllowed', () => {\n    it('should allow same status transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.ACTIVE,\n        Status.ACTIVE,\n      );\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should allow PENDING to ACTIVE transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.PENDING,\n        Status.ACTIVE,\n      );\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should allow PENDING to DELETED transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.PENDING,\n        Status.DELETED,\n      );\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should allow ACTIVE to DISABLED transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.ACTIVE,\n        Status.DISABLED,\n      );\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should allow ACTIVE to LOCKED transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.ACTIVE,\n        Status.LOCKED,\n      );\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should allow ACTIVE to SUSPENDED transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.ACTIVE,\n        Status.SUSPENDED,\n      );\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should allow ACTIVE to DELETED transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.ACTIVE,\n        Status.DELETED,\n      );\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should allow DISABLED to ACTIVE transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.DISABLED,\n        Status.ACTIVE,\n      );\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should allow DISABLED to DELETED transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.DISABLED,\n        Status.DELETED,\n      );\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should allow LOCKED to ACTIVE transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.LOCKED,\n        Status.ACTIVE,\n      );\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should allow LOCKED to DISABLED transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.LOCKED,\n        Status.DISABLED,\n      );\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should allow SUSPENDED to ACTIVE transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.SUSPENDED,\n        Status.ACTIVE,\n      );\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should allow SUSPENDED to DELETED transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.SUSPENDED,\n        Status.DELETED,\n      );\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should not allow DELETED to any other status', () => {\n      // Act & Assert\n      expect(\n        StatusTransition.isTransitionAllowed(Status.DELETED, Status.ACTIVE),\n      ).toBe(false);\n      expect(\n        StatusTransition.isTransitionAllowed(Status.DELETED, Status.PENDING),\n      ).toBe(false);\n      expect(\n        StatusTransition.isTransitionAllowed(Status.DELETED, Status.DISABLED),\n      ).toBe(false);\n    });\n\n    it('should not allow PENDING to DISABLED transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.PENDING,\n        Status.DISABLED,\n      );\n\n      // Assert\n      expect(result).toBe(false);\n    });\n\n    it('should not allow DISABLED to LOCKED transition', () => {\n      // Act\n      const result = StatusTransition.isTransitionAllowed(\n        Status.DISABLED,\n        Status.LOCKED,\n      );\n\n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getAllowedTransitions', () => {\n    it('should return allowed transitions for PENDING', () => {\n      // Act\n      const transitions = StatusTransition.getAllowedTransitions(\n        Status.PENDING,\n      );\n\n      // Assert\n      expect(transitions).toContain(Status.ACTIVE);\n      expect(transitions).toContain(Status.DELETED);\n      expect(transitions).toHaveLength(2);\n    });\n\n    it('should return allowed transitions for ACTIVE', () => {\n      // Act\n      const transitions = StatusTransition.getAllowedTransitions(Status.ACTIVE);\n\n      // Assert\n      expect(transitions).toContain(Status.DISABLED);\n      expect(transitions).toContain(Status.LOCKED);\n      expect(transitions).toContain(Status.SUSPENDED);\n      expect(transitions).toContain(Status.DELETED);\n      expect(transitions).toHaveLength(4);\n    });\n\n    it('should return empty array for DELETED', () => {\n      // Act\n      const transitions = StatusTransition.getAllowedTransitions(\n        Status.DELETED,\n      );\n\n      // Assert\n      expect(transitions).toHaveLength(0);\n    });\n  });\n\n  describe('validateTransition', () => {\n    it('should not throw for allowed transition', () => {\n      // Act & Assert\n      expect(() => {\n        StatusTransition.validateTransition(Status.PENDING, Status.ACTIVE);\n      }).not.toThrow();\n    });\n\n    it('should throw InvalidStatusTransitionError for disallowed transition', () => {\n      // Act & Assert\n      expect(() => {\n        StatusTransition.validateTransition(Status.PENDING, Status.DISABLED);\n      }).toThrow(InvalidStatusTransitionError);\n    });\n  });\n});\n\ndescribe('StatusUtils', () => {\n  describe('canLogin', () => {\n    it('should return true for ACTIVE status', () => {\n      // Act\n      const result = StatusUtils.canLogin(Status.ACTIVE);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for non-ACTIVE status', () => {\n      // Act & Assert\n      expect(StatusUtils.canLogin(Status.PENDING)).toBe(false);\n      expect(StatusUtils.canLogin(Status.DISABLED)).toBe(false);\n      expect(StatusUtils.canLogin(Status.LOCKED)).toBe(false);\n      expect(StatusUtils.canLogin(Status.SUSPENDED)).toBe(false);\n      expect(StatusUtils.canLogin(Status.DELETED)).toBe(false);\n    });\n  });\n\n  describe('isDisabled', () => {\n    it('should return true for disabled statuses', () => {\n      // Act & Assert\n      expect(StatusUtils.isDisabled(Status.DISABLED)).toBe(true);\n      expect(StatusUtils.isDisabled(Status.LOCKED)).toBe(true);\n      expect(StatusUtils.isDisabled(Status.SUSPENDED)).toBe(true);\n      expect(StatusUtils.isDisabled(Status.DELETED)).toBe(true);\n    });\n\n    it('should return false for active statuses', () => {\n      // Act & Assert\n      expect(StatusUtils.isDisabled(Status.PENDING)).toBe(false);\n      expect(StatusUtils.isDisabled(Status.ACTIVE)).toBe(false);\n    });\n  });\n\n  describe('needsActivation', () => {\n    it('should return true for PENDING status', () => {\n      // Act\n      const result = StatusUtils.needsActivation(Status.PENDING);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for non-PENDING status', () => {\n      // Act & Assert\n      expect(StatusUtils.needsActivation(Status.ACTIVE)).toBe(false);\n      expect(StatusUtils.needsActivation(Status.DISABLED)).toBe(false);\n      expect(StatusUtils.needsActivation(Status.LOCKED)).toBe(false);\n      expect(StatusUtils.needsActivation(Status.SUSPENDED)).toBe(false);\n      expect(StatusUtils.needsActivation(Status.DELETED)).toBe(false);\n    });\n  });\n\n  describe('isDeleted', () => {\n    it('should return true for DELETED status', () => {\n      // Act\n      const result = StatusUtils.isDeleted(Status.DELETED);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for non-DELETED status', () => {\n      // Act & Assert\n      expect(StatusUtils.isDeleted(Status.PENDING)).toBe(false);\n      expect(StatusUtils.isDeleted(Status.ACTIVE)).toBe(false);\n      expect(StatusUtils.isDeleted(Status.DISABLED)).toBe(false);\n      expect(StatusUtils.isDeleted(Status.LOCKED)).toBe(false);\n      expect(StatusUtils.isDeleted(Status.SUSPENDED)).toBe(false);\n    });\n  });\n\n  describe('getDisplayName', () => {\n    it('should return correct display names', () => {\n      // Act & Assert\n      expect(StatusUtils.getDisplayName(Status.PENDING)).toBe('待激活');\n      expect(StatusUtils.getDisplayName(Status.ACTIVE)).toBe('正常');\n      expect(StatusUtils.getDisplayName(Status.DISABLED)).toBe('已禁用');\n      expect(StatusUtils.getDisplayName(Status.LOCKED)).toBe('已锁定');\n      expect(StatusUtils.getDisplayName(Status.SUSPENDED)).toBe('已暂停');\n      expect(StatusUtils.getDisplayName(Status.DELETED)).toBe('已删除');\n    });\n  });\n\n  describe('getDescription', () => {\n    it('should return correct descriptions', () => {\n      // Act & Assert\n      expect(StatusUtils.getDescription(Status.PENDING)).toBe(\n        '已注册但未激活，需要邮箱验证或管理员激活',\n      );\n      expect(StatusUtils.getDescription(Status.ACTIVE)).toBe(\n        '账户正常可用，可以正常登录和使用系统',\n      );\n      expect(StatusUtils.getDescription(Status.DISABLED)).toBe(\n        '账户被管理员禁用，不能登录但数据保留',\n      );\n      expect(StatusUtils.getDescription(Status.LOCKED)).toBe(\n        '账户因安全原因被锁定，通常因多次登录失败触发',\n      );\n      expect(StatusUtils.getDescription(Status.SUSPENDED)).toBe(\n        '账户被临时暂停，可以恢复但需要管理员操作',\n      );\n      expect(StatusUtils.getDescription(Status.DELETED)).toBe(\n        '账户已被删除，数据可能被软删除或硬删除',\n      );\n    });\n  });\n});\n\ndescribe('InvalidStatusTransitionError', () => {\n  it('should create error with correct name and message', () => {\n    // Arrange\n    const message = 'Invalid status transition from PENDING to DISABLED';\n\n    // Act\n    const error = new InvalidStatusTransitionError(message);\n\n    // Assert\n    expect(error).toBeInstanceOf(Error);\n    expect(error).toBeInstanceOf(InvalidStatusTransitionError);\n    expect(error.name).toBe('InvalidStatusTransitionError');\n    expect(error.message).toBe(message);\n  });\n});\n"],"version":3}