{"version":3,"names":["CacheType","cov_29f0wdjbjk","s","f","b","exports","CacheStrategy"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/interfaces/cache.interface.ts"],"sourcesContent":["/**\n * @enum CacheType\n * @description 缓存类型枚举\n */\nexport enum CacheType {\n  MEMORY = 'memory',\n  REDIS = 'redis',\n  HYBRID = 'hybrid',\n}\n\n/**\n * @enum CacheStrategy\n * @description 缓存策略枚举\n */\nexport enum CacheStrategy {\n  LRU = 'lru', // 最近最少使用\n  LFU = 'lfu', // 最少使用频率\n  FIFO = 'fifo', // 先进先出\n  TTL = 'ttl', // 基于时间过期\n}\n\n/**\n * @interface CacheOptions\n * @description 缓存选项接口\n */\nexport interface CacheOptions {\n  /** 缓存类型 */\n  type: CacheType;\n  /** 缓存策略 */\n  strategy: CacheStrategy;\n  /** 默认过期时间（毫秒） */\n  ttl?: number;\n  /** 最大缓存项数量 */\n  maxSize?: number;\n  /** 是否启用压缩 */\n  compress?: boolean;\n  /** 是否启用加密 */\n  encrypt?: boolean;\n  /** 重试次数 */\n  retries?: number;\n  /** 重试延迟（毫秒） */\n  retryDelay?: number;\n  /** 连接超时（毫秒） */\n  timeout?: number;\n}\n\n/**\n * @interface CacheKey\n * @description 缓存键接口\n */\nexport interface CacheKey {\n  /** 键名 */\n  key: string;\n  /** 命名空间 */\n  namespace?: string;\n  /** 版本号 */\n  version?: string;\n  /** 租户ID */\n  tenantId?: string;\n  /** 用户ID */\n  userId?: string;\n  /** 标签 */\n  tags?: string[];\n}\n\n/**\n * @interface CacheValue<T>\n * @description 缓存值接口\n */\nexport interface CacheValue<T = unknown> {\n  /** 实际值 */\n  value: T;\n  /** 创建时间 */\n  createdAt: number;\n  /** 过期时间 */\n  expiresAt?: number;\n  /** 访问次数 */\n  accessCount: number;\n  /** 最后访问时间 */\n  lastAccessed: number;\n  /** 版本号 */\n  version?: string;\n  /** 标签 */\n  tags?: string[];\n  /** 元数据 */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * @interface CacheEntry<T>\n * @description 缓存条目接口\n */\nexport interface CacheEntry<T = unknown> {\n  /** 缓存键 */\n  key: CacheKey;\n  /** 缓存值 */\n  value: CacheValue<T>;\n  /** 大小（字节） */\n  size: number;\n}\n\n/**\n * @interface CacheStats\n * @description 缓存统计接口\n */\nexport interface CacheStats {\n  /** 总条目数 */\n  totalEntries: number;\n  /** 命中次数 */\n  hits: number;\n  /** 未命中次数 */\n  misses: number;\n  /** 命中率 */\n  hitRate: number;\n  /** 总大小（字节） */\n  totalSize: number;\n  /** 平均大小（字节） */\n  averageSize: number;\n  /** 过期条目数 */\n  expiredEntries: number;\n  /** 驱逐条目数 */\n  evictedEntries: number;\n  /** 最后重置时间 */\n  lastReset: number;\n}\n\n/**\n * @interface CacheHealth\n * @description 缓存健康状态接口\n */\nexport interface CacheHealth {\n  /** 是否健康 */\n  healthy: boolean;\n  /** 连接状态 */\n  connected: boolean;\n  /** 响应时间（毫秒） */\n  responseTime: number;\n  /** 错误信息 */\n  error?: string;\n  /** 最后检查时间 */\n  lastCheck: number;\n}\n\n/**\n * @interface ICacheService\n * @description 缓存服务接口\n */\nexport interface ICacheService {\n  /**\n   * @method get\n   * @description 获取缓存值\n   * @param {CacheKey} key 缓存键\n   * @returns {Promise<T | null>} 缓存值或null\n   */\n  get<T = unknown>(key: CacheKey): Promise<T | null>;\n\n  /**\n   * @method set\n   * @description 设置缓存值\n   * @param {CacheKey} key 缓存键\n   * @param {T} value 缓存值\n   * @param {Partial<CacheOptions>} options 缓存选项\n   * @returns {Promise<boolean>} 是否成功\n   */\n  set<T = unknown>(\n    key: CacheKey,\n    value: T,\n    options?: Partial<CacheOptions>,\n  ): Promise<boolean>;\n\n  /**\n   * @method delete\n   * @description 删除缓存值\n   * @param {CacheKey} key 缓存键\n   * @returns {Promise<boolean>} 是否成功\n   */\n  delete(key: CacheKey): Promise<boolean>;\n\n  /**\n   * @method exists\n   * @description 检查缓存键是否存在\n   * @param {CacheKey} key 缓存键\n   * @returns {Promise<boolean>} 是否存在\n   */\n  exists(key: CacheKey): Promise<boolean>;\n\n  /**\n   * @method clear\n   * @description 清空缓存\n   * @param {string} namespace 命名空间（可选）\n   * @returns {Promise<boolean>} 是否成功\n   */\n  clear(namespace?: string): Promise<boolean>;\n\n  /**\n   * @method getStats\n   * @description 获取缓存统计\n   * @returns {Promise<CacheStats>} 缓存统计\n   */\n  getStats(): Promise<CacheStats>;\n\n  /**\n   * @method getHealth\n   * @description 获取缓存健康状态\n   * @returns {Promise<CacheHealth>} 缓存健康状态\n   */\n  getHealth(): Promise<CacheHealth>;\n\n  /**\n   * @method resetStats\n   * @description 重置缓存统计\n   * @returns {Promise<void>}\n   */\n  resetStats(): Promise<void>;\n}\n\n/**\n * @interface ICacheManager\n * @description 缓存管理器接口\n */\nexport interface ICacheManager {\n  /**\n   * @method getCache\n   * @description 获取缓存服务实例\n   * @param {CacheType} type 缓存类型\n   * @returns {ICacheService} 缓存服务实例\n   */\n  getCache(type: CacheType): ICacheService;\n\n  /**\n   * @method setDefaultCache\n   * @description 设置默认缓存类型\n   * @param {CacheType} type 缓存类型\n   * @returns {void}\n   */\n  setDefaultCache(type: CacheType): void;\n\n  /**\n   * @method getDefaultCache\n   * @description 获取默认缓存服务\n   * @returns {ICacheService} 默认缓存服务\n   */\n  getDefaultCache(): ICacheService;\n\n  /**\n   * @method registerCache\n   * @description 注册缓存服务\n   * @param {CacheType} type 缓存类型\n   * @param {ICacheService} service 缓存服务\n   * @returns {void}\n   */\n  registerCache(type: CacheType, service: ICacheService): void;\n\n  /**\n   * @method unregisterCache\n   * @description 注销缓存服务\n   * @param {CacheType} type 缓存类型\n   * @returns {boolean} 是否成功\n   */\n  unregisterCache(type: CacheType): boolean;\n\n  /**\n   * @method getAllCaches\n   * @description 获取所有缓存服务\n   * @returns {Map<CacheType, ICacheService>} 缓存服务映射\n   */\n  getAllCaches(): Map<CacheType, ICacheService>;\n\n  /**\n   * @method getStats\n   * @description 获取所有缓存统计\n   * @returns {Promise<Map<CacheType, CacheStats>>} 缓存统计映射\n   */\n  getStats(): Promise<Map<CacheType, CacheStats>>;\n\n  /**\n   * @method getHealth\n   * @description 获取所有缓存健康状态\n   * @returns {Promise<Map<CacheType, CacheHealth>>} 缓存健康状态映射\n   */\n  getHealth(): Promise<Map<CacheType, CacheHealth>>;\n}\n\n/**\n * @interface ICacheKeyFactory\n * @description 缓存键工厂接口\n */\nexport interface ICacheKeyFactory {\n  /**\n   * @method create\n   * @description 创建缓存键\n   * @param {string} key 基础键名\n   * @param {Partial<CacheKey>} options 键选项\n   * @returns {CacheKey} 缓存键\n   */\n  create(key: string, options?: Partial<CacheKey>): CacheKey;\n\n  /**\n   * @method createNamespace\n   * @description 创建命名空间键\n   * @param {string} namespace 命名空间\n   * @param {string} key 键名\n   * @param {Partial<CacheKey>} options 键选项\n   * @returns {CacheKey} 缓存键\n   */\n  createNamespace(\n    namespace: string,\n    key: string,\n    options?: Partial<CacheKey>,\n  ): CacheKey;\n\n  /**\n   * @method createTenant\n   * @description 创建租户键\n   * @param {string} tenantId 租户ID\n   * @param {string} key 键名\n   * @param {Partial<CacheKey>} options 键选项\n   * @returns {CacheKey} 缓存键\n   */\n  createTenant(\n    tenantId: string,\n    key: string,\n    options?: Partial<CacheKey>,\n  ): CacheKey;\n\n  /**\n   * @method createUser\n   * @description 创建用户键\n   * @param {string} userId 用户ID\n   * @param {string} key 键名\n   * @param {Partial<CacheKey>} options 键选项\n   * @returns {CacheKey} 缓存键\n   */\n  createUser(\n    userId: string,\n    key: string,\n    options?: Partial<CacheKey>,\n  ): CacheKey;\n\n  /**\n   * @method createTagged\n   * @description 创建带标签的键\n   * @param {string} key 键名\n   * @param {string[]} tags 标签数组\n   * @param {Partial<CacheKey>} options 键选项\n   * @returns {CacheKey} 缓存键\n   */\n  createTagged(\n    key: string,\n    tags: string[],\n    options?: Partial<CacheKey>,\n  ): CacheKey;\n\n  /**\n   * @method toString\n   * @description 将缓存键转换为字符串\n   * @param {CacheKey} cacheKey 缓存键\n   * @returns {string} 字符串形式的键\n   */\n  toString(cacheKey: CacheKey): string;\n\n  /**\n   * @method parse\n   * @description 解析字符串为缓存键\n   * @param {string} keyString 键字符串\n   * @returns {CacheKey} 缓存键\n   */\n  parse(keyString: string): CacheKey;\n}\n\n/**\n * @interface ICacheInvalidationService\n * @description 缓存失效服务接口\n */\nexport interface ICacheInvalidationService {\n  /**\n   * @method invalidateByKey\n   * @description 根据键失效缓存\n   * @param {CacheKey} key 缓存键\n   * @returns {Promise<boolean>} 是否成功\n   */\n  invalidateByKey(key: CacheKey): Promise<boolean>;\n\n  /**\n   * @method invalidateByNamespace\n   * @description 根据命名空间失效缓存\n   * @param {string} namespace 命名空间\n   * @returns {Promise<number>} 失效的条目数\n   */\n  invalidateByNamespace(namespace: string): Promise<number>;\n\n  /**\n   * @method invalidateByTenant\n   * @description 根据租户失效缓存\n   * @param {string} tenantId 租户ID\n   * @returns {Promise<number>} 失效的条目数\n   */\n  invalidateByTenant(tenantId: string): Promise<number>;\n\n  /**\n   * @method invalidateByUser\n   * @description 根据用户失效缓存\n   * @param {string} userId 用户ID\n   * @returns {Promise<number>} 失效的条目数\n   */\n  invalidateByUser(userId: string): Promise<number>;\n\n  /**\n   * @method invalidateByTags\n   * @description 根据标签失效缓存\n   * @param {string[]} tags 标签数组\n   * @returns {Promise<number>} 失效的条目数\n   */\n  invalidateByTags(tags: string[]): Promise<number>;\n\n  /**\n   * @method invalidateByPattern\n   * @description 根据模式失效缓存\n   * @param {string} pattern 模式字符串\n   * @returns {Promise<number>} 失效的条目数\n   */\n  invalidateByPattern(pattern: string): Promise<number>;\n\n  /**\n   * @method scheduleInvalidation\n   * @description 计划失效缓存\n   * @param {CacheKey} key 缓存键\n   * @param {number} delay 延迟时间（毫秒）\n   * @returns {Promise<string>} 计划ID\n   */\n  scheduleInvalidation(key: CacheKey, delay: number): Promise<string>;\n\n  /**\n   * @method cancelScheduledInvalidation\n   * @description 取消计划失效\n   * @param {string} scheduleId 计划ID\n   * @returns {Promise<boolean>} 是否成功\n   */\n  cancelScheduledInvalidation(scheduleId: string): Promise<boolean>;\n}\n\n/**\n * @interface RedisConfig\n * @description Redis配置接口\n */\nexport interface RedisConfig {\n  /** Redis主机地址 */\n  host: string;\n  /** Redis端口 */\n  port: number;\n  /** Redis密码 */\n  password?: string;\n  /** 数据库索引 */\n  db?: number;\n  /** 连接超时时间（毫秒） */\n  connectTimeout?: number;\n  /** 命令超时时间（毫秒） */\n  commandTimeout?: number;\n  /** 重试次数 */\n  retries?: number;\n  /** 重试延迟（毫秒） */\n  retryDelay?: number;\n  /** 是否启用集群模式 */\n  cluster?: boolean;\n  /** 集群节点 */\n  nodes?: Array<{ host: string; port: number }>;\n  /** 是否启用哨兵模式 */\n  sentinel?: boolean;\n  /** 哨兵配置 */\n  sentinels?: Array<{ host: string; port: number }>;\n  /** 主节点名称 */\n  name?: string;\n}\n\n/**\n * @interface MemoryCacheConfig\n * @description 内存缓存配置接口\n */\nexport interface MemoryCacheConfig {\n  /** 默认过期时间（毫秒） */\n  defaultTtl?: number;\n  /** 最大缓存项数量 */\n  maxSize?: number;\n  /** 默认缓存策略 */\n  defaultStrategy?: CacheStrategy;\n  /** 清理间隔（毫秒） */\n  cleanupInterval?: number;\n  /** 是否启用压缩 */\n  enableCompression?: boolean;\n  /** 是否启用加密 */\n  enableEncryption?: boolean;\n}\n\n/**\n * @interface CacheManagerConfig\n * @description 缓存管理器配置接口\n */\nexport interface CacheManagerConfig {\n  /** 默认缓存选项 */\n  defaultOptions?: CacheOptions;\n  /** 默认缓存策略 */\n  defaultStrategy?: CacheStrategy;\n  /** 是否启用缓存 */\n  enabled?: boolean;\n  /** 缓存层配置 */\n  layers?: CacheLayerConfig[];\n  /** 监控间隔（毫秒） */\n  monitoringInterval?: number;\n  /** 自动清理间隔（毫秒） */\n  cleanupInterval?: number;\n  /** 最大缓存大小 */\n  maxSize?: number;\n  /** 是否启用统计 */\n  enableStats?: boolean;\n  /** 是否启用事件 */\n  enableEvents?: boolean;\n}\n\n/**\n * @interface CacheLayerConfig\n * @description 缓存层配置接口\n */\nexport interface CacheLayerConfig {\n  /** 缓存层名称 */\n  name: string;\n  /** 缓存层优先级（数字越小优先级越高） */\n  priority: number;\n  /** 缓存服务实例 */\n  service: ICacheService | null;\n  /** 缓存层选项 */\n  options?: CacheOptions;\n  /** 是否启用 */\n  enabled?: boolean;\n  /** 是否只读 */\n  readOnly?: boolean;\n  /** 是否作为后备缓存 */\n  fallback?: boolean;\n}\n\n/**\n * @interface CacheInvalidationConfig\n * @description 缓存失效服务配置接口\n */\nexport interface CacheInvalidationConfig {\n  /** 是否启用自动失效 */\n  enabled?: boolean;\n  /** 默认失效策略 */\n  defaultStrategy?: string;\n  /** 批量失效大小 */\n  batchSize?: number;\n  /** 并发失效数 */\n  concurrency?: number;\n  /** 超时时间（毫秒） */\n  timeout?: number;\n  /** 重试次数 */\n  retries?: number;\n  /** 重试延迟（毫秒） */\n  retryDelay?: number;\n  /** 是否启用统计 */\n  enableStats?: boolean;\n  /** 是否启用事件 */\n  enableEvents?: boolean;\n  /** 监控间隔（毫秒） */\n  monitoringInterval?: number;\n}\n\n/**\n * @interface InvalidationResult\n * @description 缓存失效结果接口，定义失效操作的结果信息。\n */\nexport interface InvalidationResult {\n  /** 失效的键数量 */\n  invalidatedKeys: number;\n  /** 失效的命名空间数量 */\n  invalidatedNamespaces: number;\n  /** 失效的标签数量 */\n  invalidatedTags: number;\n  /** 失效的键列表 */\n  keys: string[];\n  /** 失效的命名空间列表 */\n  namespaces: string[];\n  /** 失效的标签列表 */\n  tags: string[];\n  /** 失效时间 */\n  invalidatedAt: Date;\n  /** 执行时间（毫秒） */\n  executionTime: number;\n  /** 是否成功 */\n  success: boolean;\n  /** 错误信息 */\n  error?: string;\n  /** 元数据 */\n  metadata?: Record<string, unknown>;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA,IAAYA,SAIX;AAAA;AAAAC,cAAA,GAAAC,CAAA;AAJD,WAAYF,SAAS;EAAA;EAAAC,cAAA,GAAAE,CAAA;EAAAF,cAAA,GAAAC,CAAA;EACnBF,SAAA,qBAAiB;EAAA;EAAAC,cAAA,GAAAC,CAAA;EACjBF,SAAA,mBAAe;EAAA;EAAAC,cAAA,GAAAC,CAAA;EACfF,SAAA,qBAAiB;AACnB,CAAC;AAJW;AAAA,CAAAC,cAAA,GAAAG,CAAA,UAAAJ,SAAS;AAAA;AAAA,CAAAC,cAAA,GAAAG,CAAA,UAAAC,OAAA,CAAAL,SAAA,GAATA,SAAS;AAMrB;;;;AAIA,IAAYM,aAKX;AAAA;AAAAL,cAAA,GAAAC,CAAA;AALD,WAAYI,aAAa;EAAA;EAAAL,cAAA,GAAAE,CAAA;EAAAF,cAAA,GAAAC,CAAA;EACvBI,aAAA,eAAW;EAAA;EAAAL,cAAA,GAAAC,CAAA;EACXI,aAAA,eAAW;EAAA;EAAAL,cAAA,GAAAC,CAAA;EACXI,aAAA,iBAAa;EAAA;EAAAL,cAAA,GAAAC,CAAA;EACbI,aAAA,eAAW;AACb,CAAC;AALW;AAAA,CAAAL,cAAA,GAAAG,CAAA,UAAAE,aAAa;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,UAAAC,OAAA,CAAAC,aAAA,GAAbA,aAAa","ignoreList":[]}