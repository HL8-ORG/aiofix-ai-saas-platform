81f614aa48da6e8a55171c42bc3a0da6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const event_emitter_1 = require("@nestjs/event-emitter");
const cache_manager_service_1 = require("./cache-manager.service");
const cache_interface_1 = require("../interfaces/cache.interface");
const logging_1 = require("@aiofix/logging");
/**
 * @class MockCacheService
 * @description 模拟缓存服务，用于测试
 */
class MockCacheService {
    constructor() {
        this.cache = new Map();
        this.stats = {
            totalEntries: 0,
            hits: 0,
            misses: 0,
            hitRate: 0,
            totalSize: 0,
            averageSize: 0,
            expiredEntries: 0,
            evictedEntries: 0,
            lastReset: Date.now(),
        };
    }
    async get(key) {
        const cacheKey = this.buildKey(key);
        const value = this.cache.get(cacheKey);
        if (value !== undefined) {
            this.stats.hits++;
            return value;
        }
        this.stats.misses++;
        return null;
    }
    async set(key, value) {
        const cacheKey = this.buildKey(key);
        this.cache.set(cacheKey, value);
        this.stats.totalEntries = this.cache.size;
        return true;
    }
    async delete(key) {
        const cacheKey = this.buildKey(key);
        return this.cache.delete(cacheKey);
    }
    async exists(key) {
        const cacheKey = this.buildKey(key);
        return this.cache.has(cacheKey);
    }
    async clear() {
        this.cache.clear();
        this.stats.totalEntries = 0;
        return true;
    }
    async getStats() {
        return { ...this.stats };
    }
    async getHealth() {
        return {
            healthy: true,
            connected: true,
            responseTime: 1,
            lastCheck: Date.now(),
        };
    }
    async resetStats() {
        this.stats = {
            totalEntries: 0,
            hits: 0,
            misses: 0,
            hitRate: 0,
            totalSize: 0,
            averageSize: 0,
            expiredEntries: 0,
            evictedEntries: 0,
            lastReset: Date.now(),
        };
    }
    buildKey(key) {
        return `${key.namespace || 'default'}:${key.key}`;
    }
}
/**
 * @class MockCacheKeyFactory
 * @description 模拟缓存键工厂，用于测试
 */
class MockCacheKeyFactory {
    create(key, options) {
        return {
            key,
            namespace: options?.namespace,
            version: options?.version,
            tenantId: options?.tenantId,
            userId: options?.userId,
            tags: options?.tags,
        };
    }
    createNamespace(namespace, key, options) {
        return this.create(key, { ...options, namespace });
    }
    createTenant(tenantId, key, options) {
        return this.create(key, { ...options, tenantId });
    }
    createUser(userId, key, options) {
        return this.create(key, { ...options, userId });
    }
    createTagged(key, tags, options) {
        return this.create(key, { ...options, tags });
    }
    toString(key) {
        return `${key.namespace || 'default'}:${key.key}`;
    }
    parse(keyString) {
        const parts = keyString.split(':');
        return {
            key: parts[1] || parts[0],
            namespace: parts.length > 1 ? parts[0] : undefined,
        };
    }
}
describe('CacheManagerService', () => {
    let service;
    let mockEventEmitter;
    let mockLogger;
    let mockKeyFactory;
    let mockLayer1;
    let mockLayer2;
    const mockConfig = {
        enabled: true,
        defaultStrategy: cache_interface_1.CacheStrategy.LRU,
        monitoringInterval: 1000,
        cleanupInterval: 2000,
        maxSize: 1000,
        enableStats: true,
        enableEvents: true,
    };
    beforeEach(async () => {
        mockEventEmitter = {
            emit: jest.fn(),
        };
        mockLogger = {
            info: jest.fn(),
            error: jest.fn(),
            warn: jest.fn(),
            debug: jest.fn(),
        };
        mockKeyFactory = new MockCacheKeyFactory();
        mockLayer1 = new MockCacheService();
        mockLayer2 = new MockCacheService();
        const module = await testing_1.Test.createTestingModule({
            providers: [
                cache_manager_service_1.CacheManagerService,
                {
                    provide: 'CACHE_MANAGER_CONFIG',
                    useValue: mockConfig,
                },
                {
                    provide: 'ICacheKeyFactory',
                    useValue: mockKeyFactory,
                },
                {
                    provide: event_emitter_1.EventEmitter2,
                    useValue: mockEventEmitter,
                },
                {
                    provide: logging_1.PinoLoggerService,
                    useValue: mockLogger,
                },
            ],
        }).compile();
        service = module.get(cache_manager_service_1.CacheManagerService);
    });
    afterEach(() => {
        service.onDestroy();
    });
    describe('basic operations', () => {
        it('should be defined', () => {
            expect(service).toBeDefined();
        });
        it('should add cache layer', () => {
            const layerConfig = {
                name: 'test-layer',
                priority: 1,
                service: mockLayer1,
                enabled: true,
            };
            const result = service.addLayer(layerConfig);
            expect(result).toBe(true);
            expect(service.getLayers()).toHaveLength(1);
        });
        it('should remove cache layer', () => {
            const layerConfig = {
                name: 'test-layer',
                priority: 1,
                service: mockLayer1,
                enabled: true,
            };
            service.addLayer(layerConfig);
            const result = service.removeLayer('test-layer');
            expect(result).toBe(true);
            expect(service.getLayers()).toHaveLength(0);
        });
        it('should enable/disable cache layer', () => {
            const layerConfig = {
                name: 'test-layer',
                priority: 1,
                service: mockLayer1,
                enabled: true,
            };
            service.addLayer(layerConfig);
            const disableResult = service.enableLayer('test-layer', false);
            expect(disableResult).toBe(true);
            const enableResult = service.enableLayer('test-layer', true);
            expect(enableResult).toBe(true);
        });
    });
    describe('cache operations', () => {
        beforeEach(() => {
            const layer1Config = {
                name: 'layer1',
                priority: 1,
                service: mockLayer1,
                enabled: true,
            };
            const layer2Config = {
                name: 'layer2',
                priority: 2,
                service: mockLayer2,
                enabled: true,
            };
            service.addLayer(layer1Config);
            service.addLayer(layer2Config);
        });
        it('should get value from cache', async () => {
            const key = mockKeyFactory.createNamespace('test-namespace', 'test-key');
            const value = { data: 'test-value' };
            await mockLayer1.set(key, value);
            const result = await service.get(key);
            expect(result).toEqual(value);
        });
        it('should return null for non-existent key', async () => {
            const key = mockKeyFactory.createNamespace('test-namespace', 'non-existent');
            const result = await service.get(key);
            expect(result).toBeNull();
        });
        it('should set value in all layers', async () => {
            const key = mockKeyFactory.createNamespace('test-namespace', 'test-key');
            const value = { data: 'test-value' };
            const result = await service.set(key, value);
            expect(result).toBe(true);
            expect(await mockLayer1.get(key)).toEqual(value);
            expect(await mockLayer2.get(key)).toEqual(value);
        });
        it('should delete value from all layers', async () => {
            const key = mockKeyFactory.createNamespace('test-namespace', 'test-key');
            const value = { data: 'test-value' };
            await service.set(key, value);
            const deleteResult = await service.delete(key);
            expect(deleteResult).toBe(true);
            expect(await mockLayer1.get(key)).toBeNull();
            expect(await mockLayer2.get(key)).toBeNull();
        });
        it('should check if key exists', async () => {
            const key = mockKeyFactory.createNamespace('test-namespace', 'test-key');
            const value = { data: 'test-value' };
            await service.set(key, value);
            const exists = await service.exists(key);
            expect(exists).toBe(true);
        });
        it('should clear all layers', async () => {
            const key = mockKeyFactory.createNamespace('test-namespace', 'test-key');
            const value = { data: 'test-value' };
            await service.set(key, value);
            const clearResult = await service.clear();
            expect(clearResult).toBe(true);
            expect(await mockLayer1.get(key)).toBeNull();
            expect(await mockLayer2.get(key)).toBeNull();
        });
    });
    describe('statistics', () => {
        beforeEach(() => {
            const layerConfig = {
                name: 'test-layer',
                priority: 1,
                service: mockLayer1,
                enabled: true,
            };
            service.addLayer(layerConfig);
        });
        it('should get cache stats', async () => {
            const stats = await service.getStats();
            expect(stats).toBeDefined();
            expect(stats.hits).toBeDefined();
            expect(stats.misses).toBeDefined();
            expect(stats.hitRate).toBeDefined();
        });
        it('should reset cache stats', async () => {
            const key = mockKeyFactory.createNamespace('test-namespace', 'test-key');
            const value = { data: 'test-value' };
            await service.set(key, value);
            await service.get(key);
            await service.resetStats();
            const stats = await service.getStats();
            expect(stats.hits).toBe(0);
            expect(stats.misses).toBe(0);
        });
    });
    describe('health check', () => {
        beforeEach(() => {
            const layerConfig = {
                name: 'test-layer',
                priority: 1,
                service: mockLayer1,
                enabled: true,
            };
            service.addLayer(layerConfig);
        });
        it('should get cache health', async () => {
            const health = await service.getHealth();
            expect(health).toBeDefined();
            expect(health.healthy).toBeDefined();
            expect(health.connected).toBeDefined();
            expect(health.responseTime).toBeDefined();
        });
    });
    describe('layer management', () => {
        it('should handle read-only layers', async () => {
            const readOnlyLayer = {
                name: 'readonly-layer',
                priority: 1,
                service: mockLayer1,
                enabled: true,
                readOnly: true,
            };
            service.addLayer(readOnlyLayer);
            const key = mockKeyFactory.createNamespace('test-namespace', 'test-key');
            const value = { data: 'test-value' };
            // 只读层不应该被写入
            const setResult = await service.set(key, value);
            expect(setResult).toBe(false);
        });
        it('should handle disabled layers', async () => {
            const disabledLayer = {
                name: 'disabled-layer',
                priority: 1,
                service: mockLayer1,
                enabled: false,
            };
            service.addLayer(disabledLayer);
            const key = mockKeyFactory.createNamespace('test-namespace', 'test-key');
            const value = { data: 'test-value' };
            // 禁用的层不应该被访问
            const getResult = await service.get(key);
            expect(getResult).toBeNull();
        });
    });
    describe('error handling', () => {
        it('should handle layer errors gracefully', async () => {
            const errorLayer = {
                name: 'error-layer',
                priority: 1,
                service: {
                    get: jest.fn().mockRejectedValue(new Error('Layer error')),
                    set: jest.fn().mockRejectedValue(new Error('Layer error')),
                    delete: jest.fn().mockRejectedValue(new Error('Layer error')),
                    exists: jest.fn().mockRejectedValue(new Error('Layer error')),
                    clear: jest.fn().mockRejectedValue(new Error('Layer error')),
                    getStats: jest.fn().mockRejectedValue(new Error('Layer error')),
                    getHealth: jest.fn().mockRejectedValue(new Error('Layer error')),
                    resetStats: jest.fn().mockRejectedValue(new Error('Layer error')),
                },
                enabled: true,
            };
            service.addLayer(errorLayer);
            const key = mockKeyFactory.createNamespace('test-namespace', 'test-key');
            const value = { data: 'test-value' };
            // 应该处理错误而不抛出异常
            const getResult = await service.get(key);
            expect(getResult).toBeNull();
            const setResult = await service.set(key, value);
            expect(setResult).toBe(false);
        });
    });
    describe('event emission', () => {
        beforeEach(() => {
            const layerConfig = {
                name: 'test-layer',
                priority: 1,
                service: mockLayer1,
                enabled: true,
            };
            service.addLayer(layerConfig);
        });
        it('should emit cache events', async () => {
            const key = mockKeyFactory.createNamespace('test-namespace', 'test-key');
            const value = { data: 'test-value' };
            await service.set(key, value);
            await service.get(key);
            expect(mockEventEmitter.emit).toHaveBeenCalledWith('cache.cache_set', expect.objectContaining({
                type: 'cache_set',
                data: expect.objectContaining({ key, value }),
            }));
            expect(mockEventEmitter.emit).toHaveBeenCalledWith('cache.cache_hit', expect.objectContaining({
                type: 'cache_hit',
                data: expect.objectContaining({ key, value }),
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,