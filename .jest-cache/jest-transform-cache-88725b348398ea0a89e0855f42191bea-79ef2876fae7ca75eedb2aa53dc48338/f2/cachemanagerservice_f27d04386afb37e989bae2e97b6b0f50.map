{"version":3,"names":["common_1","cov_1pteyjif5c","s","require","event_emitter_1","cache_interface_1","logging_1","CacheManagerService","constructor","config","eventEmitter","logger","f","layers","Map","requestCount","hitCount","totalResponseTime","enabled","defaultStrategy","CacheStrategy","LRU","monitoringInterval","cleanupInterval","maxSize","enableStats","enableEvents","stats","initializeStats","initializeLayers","startMonitoring","startCleanup","info","LogContext","CACHE","get","key","startTime","Date","now","layer","getSortedLayers","b","value","service","updateStats","priority","promoteToHigherLayer","emitEvent","name","error","undefined","set","options","mergedOptions","defaultOptions","success","readOnly","layerSuccess","warn","delete","exists","clear","namespace","getStats","layerStats","hitRate","activeLayers","Array","from","values","filter","length","lastUpdated","getHealth","healthyLayers","hasError","errorMessage","layerHealth","responseTime","healthy","message","averageResponseTime","connected","lastCheck","addLayer","has","fallback","removeLayer","enableLayer","getLayers","map","resetStats","onDestroy","stopMonitoring","stopCleanup","totalEntries","hits","misses","totalSize","averageSize","expiredEntries","evictedEntries","lastReset","layerConfig","sort","a","currentPriority","higherLayers","fromPriority","toPriority","type","_data","emit","data","timestamp","managerId","monitoringTimer","setInterval","performMonitoring","catch","clearInterval","cleanupTimer","performCleanup","health","debug","exports","__decorate","Injectable","__param","Inject","PinoLoggerService","EventEmitter2","_a","Object","_b"],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/cache/src/services/cache-manager.service.ts"],"sourcesContent":["import { Injectable, Inject } from '@nestjs/common';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\n\nimport type { ICacheService } from '../interfaces/cache.interface';\n\nimport type {\n  CacheOptions,\n  CacheKey,\n  CacheStats,\n  CacheHealth,\n} from '../interfaces/cache.interface';\nimport { CacheStrategy } from '../interfaces/cache.interface';\nimport { PinoLoggerService, LogContext } from '@aiofix/logging';\n\n/**\n * @interface CacheManagerConfig\n * @description\n * 缓存管理器配置接口，定义缓存管理器的配置选项。\n */\nexport interface CacheManagerConfig {\n  /** 默认缓存选项 */\n  defaultOptions?: CacheOptions;\n  /** 默认缓存策略 */\n  defaultStrategy?: CacheStrategy;\n  /** 是否启用缓存 */\n  enabled?: boolean;\n  /** 缓存层配置 */\n  layers?: CacheLayerConfig[];\n  /** 监控间隔（毫秒） */\n  monitoringInterval?: number;\n  /** 自动清理间隔（毫秒） */\n  cleanupInterval?: number;\n  /** 最大缓存大小 */\n  maxSize?: number;\n  /** 是否启用统计 */\n  enableStats?: boolean;\n  /** 是否启用事件 */\n  enableEvents?: boolean;\n}\n\n/**\n * @interface CacheLayerConfig\n * @description\n * 缓存层配置接口，定义单个缓存层的配置。\n */\nexport interface CacheLayerConfig {\n  /** 缓存层名称 */\n  name: string;\n  /** 缓存层优先级（数字越小优先级越高） */\n  priority: number;\n  /** 缓存服务实例 */\n  service: ICacheService;\n  /** 缓存层选项 */\n  options?: CacheOptions;\n  /** 是否启用 */\n  enabled?: boolean;\n  /** 是否只读 */\n  readOnly?: boolean;\n  /** 是否作为后备缓存 */\n  fallback?: boolean;\n}\n\n/**\n * @interface CacheManagerStats\n * @description\n * 缓存管理器统计信息接口。\n */\nexport interface CacheManagerStats extends CacheStats {\n  /** 活跃缓存层数量 */\n  activeLayers: number;\n  /** 各层统计信息 */\n  layerStats: Record<string, unknown>;\n  /** 最后更新时间 */\n  lastUpdated: Date;\n}\n\n/**\n * @class CacheManagerService\n * @description\n * 缓存管理器服务，作为缓存系统的核心协调器。\n *\n * 主要功能包括：\n * 1. 管理多个缓存层（L1、L2、L3等）\n * 2. 实现缓存策略（LRU、LFU、FIFO等）\n * 3. 提供统一的缓存接口\n * 4. 监控缓存性能和健康状态\n * 5. 处理缓存失效和更新\n * 6. 提供缓存统计和分析\n *\n * @implements {ICacheService}\n */\n@Injectable()\nexport class CacheManagerService implements ICacheService {\n  /**\n   * 缓存层映射，按优先级排序\n   */\n  private readonly layers = new Map<string, CacheLayerConfig>();\n\n  /**\n   * 缓存管理器配置\n   */\n  private config: CacheManagerConfig;\n\n  /**\n   * 统计信息\n   */\n  private stats: CacheManagerStats;\n\n  /**\n   * 监控定时器\n   */\n  private monitoringTimer?: NodeJS.Timeout;\n\n  /**\n   * 清理定时器\n   */\n  private cleanupTimer?: NodeJS.Timeout;\n\n  /**\n   * 请求计数器\n   */\n  private requestCount = 0;\n\n  /**\n   * 命中计数器\n   */\n  private hitCount = 0;\n\n  /**\n   * 响应时间累计\n   */\n  private totalResponseTime = 0;\n\n  constructor(\n    @Inject('CACHE_MANAGER_CONFIG') config: CacheManagerConfig,\n    private readonly eventEmitter: EventEmitter2,\n    @Inject(PinoLoggerService) private readonly logger: PinoLoggerService,\n  ) {\n    this.config = {\n      enabled: true,\n      defaultStrategy: CacheStrategy.LRU,\n      monitoringInterval: 30000,\n      cleanupInterval: 60000,\n      maxSize: 10000,\n      enableStats: true,\n      enableEvents: true,\n      ...config,\n    };\n\n    this.stats = this.initializeStats();\n    this.initializeLayers();\n    this.startMonitoring();\n    this.startCleanup();\n\n    this.logger.info('CacheManagerService initialized', LogContext.CACHE);\n  }\n\n  /**\n   * @method get\n   * @description 从缓存中获取值\n   * @param key 缓存键\n   * @returns {Promise<T | null>} 缓存值\n   */\n  async get<T = unknown>(key: CacheKey): Promise<T | null> {\n    const startTime = Date.now();\n    this.requestCount++;\n\n    try {\n      // 按优先级遍历缓存层\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled) continue;\n\n        const value = await layer.service.get<T>(key);\n\n        if (value !== null) {\n          // 缓存命中，更新统计\n          this.hitCount++;\n          this.updateStats(startTime);\n\n          // 如果命中的是低优先级层，尝试提升到高优先级层\n          if (layer.priority > 1) {\n            void this.promoteToHigherLayer(key, value, layer.priority);\n          }\n\n          this.emitEvent('cache_hit', { key, layer: layer.name, value });\n          return value;\n        }\n      }\n\n      // 缓存未命中\n      this.updateStats(startTime);\n      this.emitEvent('cache_miss', { key });\n      return null;\n    } catch (error) {\n      this.logger.error(\n        `Error getting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return null;\n    }\n  }\n\n  /**\n   * @method set\n   * @description 设置缓存值\n   * @param key 缓存键\n   * @param value 缓存值\n   * @param options 缓存选项\n   * @returns {Promise<boolean>} 是否成功\n   */\n  async set<T = unknown>(\n    key: CacheKey,\n    value: T,\n    options?: Partial<CacheOptions>,\n  ): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      const mergedOptions = { ...this.config.defaultOptions, ...options };\n      let success = false;\n\n      // 按优先级设置到所有启用的缓存层\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.set(key, value, {\n            ...layer.options,\n            ...mergedOptions,\n          });\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_set', { key, layer: layer.name, value });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to set cache in layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        `Error setting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method delete\n   * @description 删除缓存值\n   * @param key 缓存键\n   * @returns {Promise<boolean>} 是否成功\n   */\n  async delete(key: CacheKey): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      let success = false;\n\n      // 从所有缓存层删除\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.delete(key);\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_delete', { key, layer: layer.name });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to delete cache from layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        `Error deleting cache value: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method exists\n   * @description 检查缓存键是否存在\n   * @param key 缓存键\n   * @returns {Promise<boolean>} 是否存在\n   */\n  async exists(key: CacheKey): Promise<boolean> {\n    const startTime = Date.now();\n    this.requestCount++;\n\n    try {\n      // 检查所有缓存层\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled) continue;\n\n        const exists = await layer.service.exists(key);\n        if (exists) {\n          this.hitCount++;\n          this.updateStats(startTime);\n          this.emitEvent('cache_exists', { key, layer: layer.name });\n          return true;\n        }\n      }\n\n      this.updateStats(startTime);\n      return false;\n    } catch (error) {\n      this.logger.error(\n        `Error checking cache existence: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { key, error });\n      return false;\n    }\n  }\n\n  /**\n   * @method clear\n   * @description 清空缓存\n   * @param namespace 命名空间\n   * @returns {Promise<boolean>} 是否成功\n   */\n  async clear(namespace?: string): Promise<boolean> {\n    const startTime = Date.now();\n\n    try {\n      let success = false;\n\n      // 清空所有缓存层\n      for (const layer of this.getSortedLayers()) {\n        if (!layer.enabled || layer.readOnly) continue;\n\n        try {\n          const layerSuccess = await layer.service.clear(namespace);\n          if (layerSuccess) {\n            success = true;\n            this.emitEvent('cache_clear', { layer: layer.name, namespace });\n          }\n        } catch (error) {\n          this.logger.warn(\n            `Failed to clear cache layer ${layer.name}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n\n      this.updateStats(startTime);\n      return success;\n    } catch (error) {\n      this.logger.error(\n        'Error clearing cache',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      this.emitEvent('cache_error', { error });\n      return false;\n    }\n  }\n\n  /**\n   * @method getStats\n   * @description 获取缓存统计信息\n   * @returns {Promise<CacheStats>} 统计信息\n   */\n  async getStats(): Promise<CacheStats> {\n    try {\n      // 更新各层统计信息\n      const layerStats: Record<string, unknown> = {};\n      for (const [name, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            layerStats[name] = await layer.service.getStats();\n          } catch (error) {\n            this.logger.warn(\n              `Failed to get stats for layer ${name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n            layerStats[name] = null;\n          }\n        }\n      }\n\n      // 计算总体统计\n      this.stats.hitRate =\n        this.requestCount > 0 ? this.hitCount / this.requestCount : 0;\n      this.stats.activeLayers = Array.from(this.layers.values()).filter(\n        layer => layer.enabled,\n      ).length;\n      this.stats.layerStats = layerStats;\n      this.stats.lastUpdated = new Date();\n\n      return { ...this.stats };\n    } catch (error) {\n      this.logger.error(\n        'Error getting cache stats',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return this.stats;\n    }\n  }\n\n  /**\n   * @method getHealth\n   * @description 获取缓存健康状态\n   * @returns {Promise<CacheHealth>} 健康状态\n   */\n  async getHealth(): Promise<CacheHealth> {\n    try {\n      let healthyLayers = 0;\n      let totalResponseTime = 0;\n      let hasError = false;\n      let errorMessage = '';\n\n      // 检查各层健康状态\n      for (const [, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            const layerHealth = await layer.service.getHealth();\n            totalResponseTime += layerHealth.responseTime;\n            if (layerHealth.healthy) {\n              healthyLayers++;\n            } else {\n              hasError = true;\n              errorMessage = layerHealth.error ?? 'Layer unhealthy';\n            }\n          } catch (error) {\n            hasError = true;\n            errorMessage = (error as Error).message;\n          }\n        }\n      }\n\n      const activeLayers = Array.from(this.layers.values()).filter(\n        layer => layer.enabled,\n      ).length;\n      const averageResponseTime =\n        activeLayers > 0 ? totalResponseTime / activeLayers : 0;\n\n      return {\n        healthy: !hasError && healthyLayers === activeLayers,\n        connected: healthyLayers > 0,\n        responseTime: averageResponseTime,\n        error: hasError ? errorMessage : undefined,\n        lastCheck: Date.now(),\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error getting cache health',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return {\n        healthy: false,\n        connected: false,\n        responseTime: 0,\n        error: (error as Error).message,\n        lastCheck: Date.now(),\n      };\n    }\n  }\n\n  /**\n   * @method addLayer\n   * @description 添加缓存层\n   * @param config 缓存层配置\n   * @returns {boolean} 是否成功\n   */\n  addLayer(config: CacheLayerConfig): boolean {\n    try {\n      if (this.layers.has(config.name)) {\n        this.logger.warn(\n          `Cache layer ${config.name} already exists, replacing...`,\n          LogContext.CACHE,\n        );\n      }\n\n      this.layers.set(config.name, {\n        enabled: true,\n        readOnly: false,\n        fallback: false,\n        ...config,\n      });\n\n      this.logger.info(\n        `Added cache layer: ${config.name} with priority ${config.priority}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('layer_added', {\n        layer: config.name,\n        priority: config.priority,\n      });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to add cache layer: ${config.name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method removeLayer\n   * @description 移除缓存层\n   * @param name 缓存层名称\n   * @returns {boolean} 是否成功\n   */\n  removeLayer(name: string): boolean {\n    try {\n      if (!this.layers.has(name)) {\n        this.logger.warn(\n          `Cache layer ${name} does not exist`,\n          LogContext.CACHE,\n        );\n        return false;\n      }\n\n      this.layers.delete(name);\n      this.logger.info(`Removed cache layer: ${name}`, LogContext.CACHE);\n      this.emitEvent('layer_removed', { layer: name });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to remove cache layer: ${name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method enableLayer\n   * @description 启用缓存层\n   * @param name 缓存层名称\n   * @param enabled 是否启用\n   * @returns {boolean} 是否成功\n   */\n  enableLayer(name: string, enabled: boolean): boolean {\n    try {\n      const layer = this.layers.get(name);\n      if (!layer) {\n        this.logger.warn(\n          `Cache layer ${name} does not exist`,\n          LogContext.CACHE,\n        );\n        return false;\n      }\n\n      layer.enabled = enabled;\n      this.logger.info(\n        `${enabled ? 'Enabled' : 'Disabled'} cache layer: ${name}`,\n        LogContext.CACHE,\n      );\n      this.emitEvent('layer_toggled', { layer: name, enabled });\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Failed to toggle cache layer: ${name}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * @method getLayers\n   * @description 获取所有缓存层信息\n   * @returns {CacheLayerConfig[]} 缓存层配置列表\n   */\n  getLayers(): CacheLayerConfig[] {\n    return Array.from(this.layers.values()).map(layer => ({ ...layer }));\n  }\n\n  /**\n   * @method resetStats\n   * @description 重置缓存统计信息\n   */\n  async resetStats(): Promise<void> {\n    try {\n      // 重置各层统计\n      for (const [name, layer] of this.layers) {\n        if (layer.enabled) {\n          try {\n            await layer.service.resetStats();\n          } catch (error) {\n            this.logger.warn(\n              `Failed to reset stats for layer ${name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n          }\n        }\n      }\n\n      // 重置管理器统计\n      this.requestCount = 0;\n      this.hitCount = 0;\n      this.totalResponseTime = 0;\n      this.stats = this.initializeStats();\n\n      this.logger.info('Cache stats reset successfully', LogContext.CACHE);\n      this.emitEvent('stats_reset', {});\n    } catch (error) {\n      this.logger.error(\n        'Failed to reset cache stats',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @method onDestroy\n   * @description 销毁时清理资源\n   */\n  onDestroy(): void {\n    this.stopMonitoring();\n    this.stopCleanup();\n    this.logger.info('CacheManagerService destroyed', LogContext.CACHE);\n  }\n\n  // 私有方法\n\n  /**\n   * @private\n   * @method initializeStats\n   * @description 初始化统计信息\n   * @returns {CacheManagerStats} 初始统计信息\n   */\n  private initializeStats(): CacheManagerStats {\n    return {\n      totalEntries: 0,\n      hits: 0,\n      misses: 0,\n      hitRate: 0,\n      totalSize: 0,\n      averageSize: 0,\n      expiredEntries: 0,\n      evictedEntries: 0,\n      lastReset: Date.now(),\n      activeLayers: 0,\n      layerStats: {},\n      lastUpdated: new Date(),\n    };\n  }\n\n  /**\n   * @private\n   * @method initializeLayers\n   * @description 初始化缓存层\n   */\n  private initializeLayers(): void {\n    if (this.config.layers) {\n      for (const layerConfig of this.config.layers) {\n        this.addLayer(layerConfig);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @method getSortedLayers\n   * @description 获取按优先级排序的缓存层\n   * @returns {CacheLayerConfig[]} 排序后的缓存层\n   */\n  private getSortedLayers(): CacheLayerConfig[] {\n    return Array.from(this.layers.values())\n      .filter(layer => layer.enabled)\n      .sort((a, b) => a.priority - b.priority);\n  }\n\n  /**\n   * @private\n   * @method promoteToHigherLayer\n   * @description 将缓存值提升到更高优先级的层\n   * @param key 缓存键\n   * @param value 缓存值\n   * @param currentPriority 当前优先级\n   */\n  private async promoteToHigherLayer<T>(\n    key: CacheKey,\n    value: T,\n    currentPriority: number,\n  ): Promise<void> {\n    try {\n      const higherLayers = Array.from(this.layers.values())\n        .filter(\n          layer =>\n            layer.enabled &&\n            !layer.readOnly &&\n            layer.priority < currentPriority,\n        )\n        .sort((a, b) => a.priority - b.priority);\n\n      for (const layer of higherLayers) {\n        try {\n          await layer.service.set(key, value);\n          this.emitEvent('cache_promoted', {\n            key,\n            fromPriority: currentPriority,\n            toPriority: layer.priority,\n            layer: layer.name,\n          });\n        } catch (error) {\n          this.logger.warn(\n            `Failed to promote cache to layer ${layer.name}: ${key.key}`,\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        `Error promoting cache: ${key.key}`,\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method updateStats\n   * @description 更新统计信息\n   * @param startTime 开始时间\n   */\n  private updateStats(startTime: number): void {\n    const responseTime = Date.now() - startTime;\n    this.totalResponseTime += responseTime;\n    this.stats.hits = this.hitCount;\n    this.stats.misses = this.requestCount - this.hitCount;\n  }\n\n  /**\n   * @private\n   * @method emitEvent\n   * @description 发送缓存事件\n   * @param type 事件类型\n   * @param data 事件数据\n   */\n  private emitEvent(type: string, _data: Record<string, unknown>): void {\n    if (this.config.enableEvents) {\n      try {\n        this.eventEmitter.emit(`cache.${type}`, {\n          type,\n          data: _data,\n          timestamp: new Date(),\n          managerId: 'cache-manager',\n        });\n      } catch (error) {\n        this.logger.warn(\n          `Failed to emit cache event: ${type}`,\n          LogContext.CACHE,\n          undefined,\n          error as Error,\n        );\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @method startMonitoring\n   * @description 开始监控\n   */\n  private startMonitoring(): void {\n    if (this.config.monitoringInterval && this.config.monitoringInterval > 0) {\n      this.monitoringTimer = setInterval(() => {\n        this.performMonitoring().catch(error => {\n          this.logger.error(\n            'Cache monitoring failed',\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        });\n      }, this.config.monitoringInterval);\n\n      this.logger.info(\n        `Started cache monitoring, interval: ${this.config.monitoringInterval}ms`,\n        LogContext.CACHE,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method stopMonitoring\n   * @description 停止监控\n   */\n  private stopMonitoring(): void {\n    if (this.monitoringTimer) {\n      clearInterval(this.monitoringTimer);\n      this.monitoringTimer = undefined;\n      this.logger.info('Stopped cache monitoring', LogContext.CACHE);\n    }\n  }\n\n  /**\n   * @private\n   * @method startCleanup\n   * @description 开始清理\n   */\n  private startCleanup(): void {\n    if (this.config.cleanupInterval && this.config.cleanupInterval > 0) {\n      this.cleanupTimer = setInterval(() => {\n        this.performCleanup().catch(error => {\n          this.logger.error(\n            'Cache cleanup failed',\n            LogContext.CACHE,\n            undefined,\n            error as Error,\n          );\n        });\n      }, this.config.cleanupInterval);\n\n      this.logger.info(\n        `Started cache cleanup, interval: ${this.config.cleanupInterval}ms`,\n        LogContext.CACHE,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method stopCleanup\n   * @description 停止清理\n   */\n  private stopCleanup(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = undefined;\n      this.logger.info('Stopped cache cleanup', LogContext.CACHE);\n    }\n  }\n\n  /**\n   * @private\n   * @method performMonitoring\n   * @description 执行监控\n   */\n  private async performMonitoring(): Promise<void> {\n    try {\n      const health = await this.getHealth();\n      const stats = await this.getStats();\n\n      this.emitEvent('monitoring', { health, stats });\n\n      // 检查健康状态\n      if (!health.healthy) {\n        this.logger.warn('Cache health check failed', LogContext.CACHE);\n      }\n    } catch (error) {\n      this.logger.error(\n        'Cache monitoring execution failed',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @method performCleanup\n   * @description 执行清理\n   */\n  private async performCleanup(): Promise<void> {\n    try {\n      // 清理过期的缓存项\n      for (const layer of this.getSortedLayers()) {\n        if (layer.enabled && !layer.readOnly) {\n          try {\n            // 这里可以调用各层的清理方法，如果有的话\n            this.emitEvent('cleanup', { layer: layer.name });\n          } catch (error) {\n            this.logger.warn(\n              `Failed to cleanup layer ${layer.name}`,\n              LogContext.CACHE,\n              undefined,\n              error as Error,\n            );\n          }\n        }\n      }\n\n      this.logger.debug('Cache cleanup completed', LogContext.CACHE);\n    } catch (error) {\n      this.logger.error(\n        'Cache cleanup execution failed',\n        LogContext.CACHE,\n        undefined,\n        error as Error,\n      );\n    }\n  }\n}\n"],"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","ignoreList":[]}