d7441f912a7e0a724a44f737a622b46b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types="jest" />
/* eslint-env jest */
const globals_1 = require("@jest/globals");
const email_vo_1 = require("./email.vo");
/**
 * @file email.vo.spec.ts
 * @description 邮箱值对象单元测试
 *
 * 测试覆盖：
 * - 邮箱创建和验证
 * - 邮箱格式验证
 * - 邮箱相等性比较
 * - 邮箱域名检测
 * - 异常情况处理
 *
 * @author AI开发团队
 * @since 1.0.0
 */
(0, globals_1.describe)('Email', () => {
    (0, globals_1.describe)('constructor', () => {
        (0, globals_1.it)('should create Email with valid email address', () => {
            // Arrange
            const validEmail = 'test@example.com';
            // Act
            const email = new email_vo_1.Email(validEmail);
            // Assert
            (0, globals_1.expect)(email).toBeInstanceOf(email_vo_1.Email);
            (0, globals_1.expect)(email.value).toBe(validEmail.toLowerCase());
        });
        (0, globals_1.it)('should normalize email to lowercase', () => {
            // Arrange
            const mixedCaseEmail = 'Test@Example.COM';
            // Act
            const email = new email_vo_1.Email(mixedCaseEmail);
            // Assert
            (0, globals_1.expect)(email.value).toBe('test@example.com');
        });
        (0, globals_1.it)('should trim whitespace from email', () => {
            // Arrange
            const emailWithSpaces = '  test@example.com  ';
            // Act
            const email = new email_vo_1.Email(emailWithSpaces);
            // Assert
            (0, globals_1.expect)(email.value).toBe('test@example.com');
        });
        (0, globals_1.it)('should throw InvalidEmailError for invalid email format', () => {
            // Arrange
            const invalidEmail = 'invalid-email';
            // Act & Assert
            (0, globals_1.expect)(() => {
                new email_vo_1.Email(invalidEmail);
            }).toThrow(email_vo_1.InvalidEmailError);
        });
        (0, globals_1.it)('should throw InvalidEmailError for empty string', () => {
            // Arrange
            const emptyString = '';
            // Act & Assert
            (0, globals_1.expect)(() => {
                new email_vo_1.Email(emptyString);
            }).toThrow(email_vo_1.InvalidEmailError);
        });
        (0, globals_1.it)('should throw InvalidEmailError for email without @ symbol', () => {
            // Arrange
            const emailWithoutAt = 'testexample.com';
            // Act & Assert
            (0, globals_1.expect)(() => {
                new email_vo_1.Email(emailWithoutAt);
            }).toThrow(email_vo_1.InvalidEmailError);
        });
        (0, globals_1.it)('should throw InvalidEmailError for email that is too long', () => {
            // Arrange
            const longEmail = 'a'.repeat(250) + '@example.com';
            // Act & Assert
            (0, globals_1.expect)(() => {
                new email_vo_1.Email(longEmail);
            }).toThrow(email_vo_1.InvalidEmailError);
        });
        (0, globals_1.it)('should throw InvalidEmailError for email with local part too long', () => {
            // Arrange
            const longLocalPart = 'a'.repeat(65) + '@example.com';
            // Act & Assert
            (0, globals_1.expect)(() => {
                new email_vo_1.Email(longLocalPart);
            }).toThrow(email_vo_1.InvalidEmailError);
        });
    });
    (0, globals_1.describe)('equals', () => {
        (0, globals_1.it)('should return true for same Email instances', () => {
            // Arrange
            const email1 = new email_vo_1.Email('test@example.com');
            const email2 = new email_vo_1.Email('test@example.com');
            // Act
            const result = email1.equals(email2);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should return true for emails with different case', () => {
            // Arrange
            const email1 = new email_vo_1.Email('Test@Example.COM');
            const email2 = new email_vo_1.Email('test@example.com');
            // Act
            const result = email1.equals(email2);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should return false for different Email instances', () => {
            // Arrange
            const email1 = new email_vo_1.Email('test1@example.com');
            const email2 = new email_vo_1.Email('test2@example.com');
            // Act
            const result = email1.equals(email2);
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
        (0, globals_1.it)('should return false when comparing with non-Email object', () => {
            // Arrange
            const email = new email_vo_1.Email('test@example.com');
            const otherObject = { value: 'test@example.com' };
            // Act
            const result = email.equals(otherObject);
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
    });
    (0, globals_1.describe)('getLocalPart', () => {
        (0, globals_1.it)('should return local part of email', () => {
            // Arrange
            const email = new email_vo_1.Email('test@example.com');
            // Act
            const localPart = email.getLocalPart();
            // Assert
            (0, globals_1.expect)(localPart).toBe('test');
        });
        (0, globals_1.it)('should return local part for complex email', () => {
            // Arrange
            const email = new email_vo_1.Email('user.name+tag@example.com');
            // Act
            const localPart = email.getLocalPart();
            // Assert
            (0, globals_1.expect)(localPart).toBe('user.name+tag');
        });
    });
    (0, globals_1.describe)('getDomain', () => {
        (0, globals_1.it)('should return domain part of email', () => {
            // Arrange
            const email = new email_vo_1.Email('test@example.com');
            // Act
            const domain = email.getDomain();
            // Assert
            (0, globals_1.expect)(domain).toBe('example.com');
        });
        (0, globals_1.it)('should return domain for complex email', () => {
            // Arrange
            const email = new email_vo_1.Email('test@sub.example.com');
            // Act
            const domain = email.getDomain();
            // Assert
            (0, globals_1.expect)(domain).toBe('sub.example.com');
        });
    });
    (0, globals_1.describe)('isFromDomain', () => {
        (0, globals_1.it)('should return true for matching domain', () => {
            // Arrange
            const email = new email_vo_1.Email('test@example.com');
            // Act
            const result = email.isFromDomain('example.com');
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should return true for matching domain with different case', () => {
            // Arrange
            const email = new email_vo_1.Email('test@Example.COM');
            // Act
            const result = email.isFromDomain('example.com');
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should return false for non-matching domain', () => {
            // Arrange
            const email = new email_vo_1.Email('test@example.com');
            // Act
            const result = email.isFromDomain('other.com');
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
    });
    (0, globals_1.describe)('isGmail', () => {
        (0, globals_1.it)('should return true for Gmail address', () => {
            // Arrange
            const email = new email_vo_1.Email('test@gmail.com');
            // Act
            const result = email.isGmail();
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should return false for non-Gmail address', () => {
            // Arrange
            const email = new email_vo_1.Email('test@example.com');
            // Act
            const result = email.isGmail();
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
    });
    (0, globals_1.describe)('isOutlook', () => {
        (0, globals_1.it)('should return true for Outlook address', () => {
            // Arrange
            const email = new email_vo_1.Email('test@outlook.com');
            // Act
            const result = email.isOutlook();
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should return true for Hotmail address', () => {
            // Arrange
            const email = new email_vo_1.Email('test@hotmail.com');
            // Act
            const result = email.isOutlook();
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should return false for non-Outlook address', () => {
            // Arrange
            const email = new email_vo_1.Email('test@example.com');
            // Act
            const result = email.isOutlook();
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
    });
    (0, globals_1.describe)('isCorporate', () => {
        (0, globals_1.it)('should return true for corporate email', () => {
            // Arrange
            const email = new email_vo_1.Email('test@company.com');
            // Act
            const result = email.isCorporate();
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should return false for Gmail address', () => {
            // Arrange
            const email = new email_vo_1.Email('test@gmail.com');
            // Act
            const result = email.isCorporate();
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
        (0, globals_1.it)('should return false for Outlook address', () => {
            // Arrange
            const email = new email_vo_1.Email('test@outlook.com');
            // Act
            const result = email.isCorporate();
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
    });
    (0, globals_1.describe)('toString', () => {
        (0, globals_1.it)('should return email string representation', () => {
            // Arrange
            const emailString = 'test@example.com';
            const email = new email_vo_1.Email(emailString);
            // Act
            const result = email.toString();
            // Assert
            (0, globals_1.expect)(result).toBe(emailString);
        });
    });
    (0, globals_1.describe)('fromString', () => {
        (0, globals_1.it)('should create Email from valid string', () => {
            // Arrange
            const emailString = 'test@example.com';
            // Act
            const email = email_vo_1.Email.fromString(emailString);
            // Assert
            (0, globals_1.expect)(email).toBeInstanceOf(email_vo_1.Email);
            (0, globals_1.expect)(email.value).toBe(emailString);
        });
        (0, globals_1.it)('should throw InvalidEmailError for invalid string', () => {
            // Arrange
            const invalidString = 'invalid-email';
            // Act & Assert
            (0, globals_1.expect)(() => {
                email_vo_1.Email.fromString(invalidString);
            }).toThrow(email_vo_1.InvalidEmailError);
        });
    });
    (0, globals_1.describe)('isValid', () => {
        (0, globals_1.it)('should return true for valid email', () => {
            // Arrange
            const validEmail = 'test@example.com';
            // Act
            const result = email_vo_1.Email.isValid(validEmail);
            // Assert
            (0, globals_1.expect)(result).toBe(true);
        });
        (0, globals_1.it)('should return false for invalid email', () => {
            // Arrange
            const invalidEmail = 'invalid-email';
            // Act
            const result = email_vo_1.Email.isValid(invalidEmail);
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
        (0, globals_1.it)('should return false for empty string', () => {
            // Arrange
            const emptyString = '';
            // Act
            const result = email_vo_1.Email.isValid(emptyString);
            // Assert
            (0, globals_1.expect)(result).toBe(false);
        });
    });
});
(0, globals_1.describe)('InvalidEmailError', () => {
    (0, globals_1.it)('should create error with correct name and message', () => {
        // Arrange
        const message = 'Invalid email format';
        // Act
        const error = new email_vo_1.InvalidEmailError(message);
        // Assert
        (0, globals_1.expect)(error).toBeInstanceOf(Error);
        (0, globals_1.expect)(error).toBeInstanceOf(email_vo_1.InvalidEmailError);
        (0, globals_1.expect)(error.name).toBe('InvalidEmailError');
        (0, globals_1.expect)(error.message).toBe(message);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,