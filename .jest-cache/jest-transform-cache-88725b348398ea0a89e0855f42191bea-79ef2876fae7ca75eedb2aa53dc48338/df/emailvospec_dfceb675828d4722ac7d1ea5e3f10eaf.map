{"file":"/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/shared/src/common/email.vo.spec.ts","mappings":"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","names":[],"sources":["/home/arligle/V1/Aiofix/aiofix-ai-saas-platform/packages/shared/src/common/email.vo.spec.ts"],"sourcesContent":["/// <reference types=\"jest\" />\n/* eslint-env jest */\nimport {\n  describe,\n  it,\n  expect,\n  jest,\n  beforeEach,\n  afterEach,\n} from '@jest/globals';\n\nimport { Email, InvalidEmailError } from './email.vo';\n\n/**\n * @file email.vo.spec.ts\n * @description 邮箱值对象单元测试\n * \n * 测试覆盖：\n * - 邮箱创建和验证\n * - 邮箱格式验证\n * - 邮箱相等性比较\n * - 邮箱域名检测\n * - 异常情况处理\n * \n * @author AI开发团队\n * @since 1.0.0\n */\ndescribe('Email', () => {\n  describe('constructor', () => {\n    it('should create Email with valid email address', () => {\n      // Arrange\n      const validEmail = 'test@example.com';\n\n      // Act\n      const email = new Email(validEmail);\n\n      // Assert\n      expect(email).toBeInstanceOf(Email);\n      expect(email.value).toBe(validEmail.toLowerCase());\n    });\n\n    it('should normalize email to lowercase', () => {\n      // Arrange\n      const mixedCaseEmail = 'Test@Example.COM';\n\n      // Act\n      const email = new Email(mixedCaseEmail);\n\n      // Assert\n      expect(email.value).toBe('test@example.com');\n    });\n\n    it('should trim whitespace from email', () => {\n      // Arrange\n      const emailWithSpaces = '  test@example.com  ';\n\n      // Act\n      const email = new Email(emailWithSpaces);\n\n      // Assert\n      expect(email.value).toBe('test@example.com');\n    });\n\n    it('should throw InvalidEmailError for invalid email format', () => {\n      // Arrange\n      const invalidEmail = 'invalid-email';\n\n      // Act & Assert\n      expect(() => {\n        new Email(invalidEmail);\n      }).toThrow(InvalidEmailError);\n    });\n\n    it('should throw InvalidEmailError for empty string', () => {\n      // Arrange\n      const emptyString = '';\n\n      // Act & Assert\n      expect(() => {\n        new Email(emptyString);\n      }).toThrow(InvalidEmailError);\n    });\n\n    it('should throw InvalidEmailError for email without @ symbol', () => {\n      // Arrange\n      const emailWithoutAt = 'testexample.com';\n\n      // Act & Assert\n      expect(() => {\n        new Email(emailWithoutAt);\n      }).toThrow(InvalidEmailError);\n    });\n\n    it('should throw InvalidEmailError for email that is too long', () => {\n      // Arrange\n      const longEmail = 'a'.repeat(250) + '@example.com';\n\n      // Act & Assert\n      expect(() => {\n        new Email(longEmail);\n      }).toThrow(InvalidEmailError);\n    });\n\n    it('should throw InvalidEmailError for email with local part too long', () => {\n      // Arrange\n      const longLocalPart = 'a'.repeat(65) + '@example.com';\n\n      // Act & Assert\n      expect(() => {\n        new Email(longLocalPart);\n      }).toThrow(InvalidEmailError);\n    });\n  });\n\n  describe('equals', () => {\n    it('should return true for same Email instances', () => {\n      // Arrange\n      const email1 = new Email('test@example.com');\n      const email2 = new Email('test@example.com');\n\n      // Act\n      const result = email1.equals(email2);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return true for emails with different case', () => {\n      // Arrange\n      const email1 = new Email('Test@Example.COM');\n      const email2 = new Email('test@example.com');\n\n      // Act\n      const result = email1.equals(email2);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for different Email instances', () => {\n      // Arrange\n      const email1 = new Email('test1@example.com');\n      const email2 = new Email('test2@example.com');\n\n      // Act\n      const result = email1.equals(email2);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n\n    it('should return false when comparing with non-Email object', () => {\n      // Arrange\n      const email = new Email('test@example.com');\n      const otherObject = { value: 'test@example.com' };\n\n      // Act\n      const result = email.equals(otherObject as any);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getLocalPart', () => {\n    it('should return local part of email', () => {\n      // Arrange\n      const email = new Email('test@example.com');\n\n      // Act\n      const localPart = email.getLocalPart();\n\n      // Assert\n      expect(localPart).toBe('test');\n    });\n\n    it('should return local part for complex email', () => {\n      // Arrange\n      const email = new Email('user.name+tag@example.com');\n\n      // Act\n      const localPart = email.getLocalPart();\n\n      // Assert\n      expect(localPart).toBe('user.name+tag');\n    });\n  });\n\n  describe('getDomain', () => {\n    it('should return domain part of email', () => {\n      // Arrange\n      const email = new Email('test@example.com');\n\n      // Act\n      const domain = email.getDomain();\n\n      // Assert\n      expect(domain).toBe('example.com');\n    });\n\n    it('should return domain for complex email', () => {\n      // Arrange\n      const email = new Email('test@sub.example.com');\n\n      // Act\n      const domain = email.getDomain();\n\n      // Assert\n      expect(domain).toBe('sub.example.com');\n    });\n  });\n\n  describe('isFromDomain', () => {\n    it('should return true for matching domain', () => {\n      // Arrange\n      const email = new Email('test@example.com');\n\n      // Act\n      const result = email.isFromDomain('example.com');\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return true for matching domain with different case', () => {\n      // Arrange\n      const email = new Email('test@Example.COM');\n\n      // Act\n      const result = email.isFromDomain('example.com');\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for non-matching domain', () => {\n      // Arrange\n      const email = new Email('test@example.com');\n\n      // Act\n      const result = email.isFromDomain('other.com');\n\n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('isGmail', () => {\n    it('should return true for Gmail address', () => {\n      // Arrange\n      const email = new Email('test@gmail.com');\n\n      // Act\n      const result = email.isGmail();\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for non-Gmail address', () => {\n      // Arrange\n      const email = new Email('test@example.com');\n\n      // Act\n      const result = email.isGmail();\n\n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('isOutlook', () => {\n    it('should return true for Outlook address', () => {\n      // Arrange\n      const email = new Email('test@outlook.com');\n\n      // Act\n      const result = email.isOutlook();\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return true for Hotmail address', () => {\n      // Arrange\n      const email = new Email('test@hotmail.com');\n\n      // Act\n      const result = email.isOutlook();\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for non-Outlook address', () => {\n      // Arrange\n      const email = new Email('test@example.com');\n\n      // Act\n      const result = email.isOutlook();\n\n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('isCorporate', () => {\n    it('should return true for corporate email', () => {\n      // Arrange\n      const email = new Email('test@company.com');\n\n      // Act\n      const result = email.isCorporate();\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for Gmail address', () => {\n      // Arrange\n      const email = new Email('test@gmail.com');\n\n      // Act\n      const result = email.isCorporate();\n\n      // Assert\n      expect(result).toBe(false);\n    });\n\n    it('should return false for Outlook address', () => {\n      // Arrange\n      const email = new Email('test@outlook.com');\n\n      // Act\n      const result = email.isCorporate();\n\n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('toString', () => {\n    it('should return email string representation', () => {\n      // Arrange\n      const emailString = 'test@example.com';\n      const email = new Email(emailString);\n\n      // Act\n      const result = email.toString();\n\n      // Assert\n      expect(result).toBe(emailString);\n    });\n  });\n\n  describe('fromString', () => {\n    it('should create Email from valid string', () => {\n      // Arrange\n      const emailString = 'test@example.com';\n\n      // Act\n      const email = Email.fromString(emailString);\n\n      // Assert\n      expect(email).toBeInstanceOf(Email);\n      expect(email.value).toBe(emailString);\n    });\n\n    it('should throw InvalidEmailError for invalid string', () => {\n      // Arrange\n      const invalidString = 'invalid-email';\n\n      // Act & Assert\n      expect(() => {\n        Email.fromString(invalidString);\n      }).toThrow(InvalidEmailError);\n    });\n  });\n\n  describe('isValid', () => {\n    it('should return true for valid email', () => {\n      // Arrange\n      const validEmail = 'test@example.com';\n\n      // Act\n      const result = Email.isValid(validEmail);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for invalid email', () => {\n      // Arrange\n      const invalidEmail = 'invalid-email';\n\n      // Act\n      const result = Email.isValid(invalidEmail);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n\n    it('should return false for empty string', () => {\n      // Arrange\n      const emptyString = '';\n\n      // Act\n      const result = Email.isValid(emptyString);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n});\n\ndescribe('InvalidEmailError', () => {\n  it('should create error with correct name and message', () => {\n    // Arrange\n    const message = 'Invalid email format';\n\n    // Act\n    const error = new InvalidEmailError(message);\n\n    // Assert\n    expect(error).toBeInstanceOf(Error);\n    expect(error).toBeInstanceOf(InvalidEmailError);\n    expect(error.name).toBe('InvalidEmailError');\n    expect(error.message).toBe(message);\n  });\n});\n"],"version":3}