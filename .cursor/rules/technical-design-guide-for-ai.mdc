---
description: 技术设计方案查阅指南
globs:
alwaysApply: true
---

# 技术设计方案查阅指南

## 概述

本指南旨在引导AI在开发过程中主动查阅相应的技术设计方案文档，确保开发工作严格按照既定的架构设计进行。

## 核心原则

- **设计先行**：在编写任何代码之前，必须先查阅相关的技术设计方案
- **架构一致性**：确保实现与设计文档完全一致
- **文档驱动**：以技术设计文档为准，不偏离既定架构
- **主动查阅**：AI应主动识别需要查阅的文档并提前阅读
- **共享优先**：创建值对象时应当检查`packages/shared/src/identifiers`路径下有没有可用的值对象，如果有，则优先使用这些共享的值对象，避免重复创建

## 技术设计文档结构

### 主要设计文档

- **架构概览**：`docs/technical-design-documents/01-architecture-overview.md`
- **分层架构**：`docs/technical-design-documents/02-clean-architecture-layers.md`
- **领域层设计**：`docs/technical-design-documents/03-entities-layer.md`
- **应用层设计**：`docs/technical-design-documents/04-use-cases-layer.md`
- **接口适配器层设计**：`docs/technical-design-documents/05-interface-adapters-layer.md`
- **框架驱动层设计**：`docs/technical-design-documents/06-frameworks-drivers-layer.md`
- **事件驱动架构设计**：`docs/technical-design-documents/07-event-driven-architecture.md`
- **依赖倒置实施指南**：`docs/technical-design-documents/08-dependency-inversion-guide.md`
- **模块结构设计指南**：`docs/technical-design-documents/09-module-structure-guide.md`
- **CQRS实现指南**：`docs/technical-design-documents/10-cqrs-implementation.md`
- **测试策略文档**：`docs/technical-design-documents/11-testing-strategy.md`
- **多租户数据隔离设计**：`docs/technical-design-documents/12-multitenant-data-isolation.md`
- **事件溯源设计**：`docs/technical-design-documents/13-event-sourcing-design.md`
- **适配器模式设计**：`docs/technical-design-documents/14-adapter-pattern-design.md`
- **通知模块设计**：`docs/technical-design-documents/notification/`

### 支持文档

- **技术设计文档目录**：`docs/technical-design-documents/0-catalog.md`
- **业务需求**：`docs/business-requirements.md`
- **开发计划**：`docs/development-plan.md`
- **代码注释规范**：`.cursor/rules/code-annotation-specification.mdc`

## 开发环节查阅指南

### 1. 事件驱动架构基础设施开发

**触发条件**：开发消息队列、事件总线、异步事件处理器等基础设施组件

**必读文档**：

- `docs/technical-design-documents/07-event-driven-architecture.md` - 事件驱动架构设计
- `docs/technical-design-documents/13-event-sourcing-design.md` - 事件溯源设计
- `docs/technical-design-documents/06-frameworks-drivers-layer.md` - 框架驱动层设计
- `.cursor/rules/code-annotation-specification.mdc` - 异步事件处理器注释规范

**查阅重点**：

- Redis + Bull消息队列集成方案
- 事件总线服务设计
- 异步事件处理器实现模式
- 事件重试和死信队列机制

### 2. 领域模型开发

**触发条件**：开发用户、租户、组织、部门等核心领域模型

**必读文档**：

- `docs/technical-design-documents/03-entities-layer.md` - 领域层设计
- `docs/business-requirements.md` - 业务需求
- `docs/technical-design-documents/01-architecture-overview.md` - 架构概览

**查阅重点**：

- 聚合根设计原则
- 值对象和实体设计
- 领域事件设计
- 业务规则和不变性约束
- **重要**：创建值对象时优先检查`packages/shared/src/identifiers`和`packages/shared/src/common`中是否有可用的共享值对象

### 3. 应用层开发

**触发条件**：开发命令、查询、命令处理器、查询处理器等应用层组件

**必读文档**：

- `docs/technical-design-documents/04-use-cases-layer.md` - 应用层设计
- `docs/technical-design-documents/02-clean-architecture-layers.md` - 分层架构
- `docs/technical-design-documents/07-event-driven-architecture.md` - 事件驱动架构

**查阅重点**：

- CQRS模式实现
- 命令和查询分离
- 事件发布机制
- 事务边界管理

### 4. 数据库模块开发

**触发条件**：开发数据库适配器、多租户仓储、隔离策略配置等数据库相关组件

**必读文档**：

- `docs/technical-design-documents/06-frameworks-drivers-layer.md` - 框架驱动层设计
- `docs/technical-design-documents/12-multitenant-data-isolation.md` - 多租户数据隔离设计
- `docs/technical-design-documents/14-adapter-pattern-design.md` - 适配器模式设计
- `.cursor/rules/code-annotation-specification.mdc` - 数据库组件注释规范

**查阅重点**：

- 三种隔离策略的实现（数据库级、Schema级、表级）
- 数据库适配器工厂模式
- 租户感知仓储基类设计
- 多租户数据隔离机制
- 配置驱动的隔离策略切换

### 5. 基础设施层开发

**触发条件**：开发外部服务适配器、缓存服务、消息队列等基础设施组件

**必读文档**：

- `docs/technical-design-documents/06-frameworks-drivers-layer.md` - 框架驱动层设计
- `docs/technical-design-documents/02-clean-architecture-layers.md` - 分层架构

**查阅重点**：

- 外部服务集成
- 缓存策略
- 消息队列配置
- 服务发现和注册

### 6. 接口层开发

**触发条件**：开发控制器、DTO、API等接口层组件

**必读文档**：

- `docs/technical-design-documents/05-interface-adapters-layer.md` - 接口适配器层设计
- `docs/technical-design-documents/02-clean-architecture-layers.md` - 分层架构
- `docs/technical-design-documents/01-architecture-overview.md` - 架构概览

**查阅重点**：

- RESTful API设计
- DTO设计原则
- 权限控制
- 异常处理

## AI查阅行为规范

### 1. 主动识别查阅需求

AI应在以下情况下主动查阅技术设计文档：

- 接收到开发任务时，首先识别涉及的架构层次和模块
- 遇到不熟悉的业务概念或技术模式时
- 需要确认实现方案是否符合架构设计时
- 编写代码注释时，需要参考注释规范时

### 2. 查阅优先级

**高优先级**（必须查阅）：

- 架构概览文档
- 相关模块的专门设计文档
- 代码注释规范

**中优先级**（建议查阅）：

- 分层架构文档
- 业务需求文档

**低优先级**（可选查阅）：

- 开发计划文档
- 其他模块的设计文档

### 3. 查阅方式

- **并行查阅**：同时查阅多个相关文档
- **重点查阅**：根据开发任务重点查阅特定章节
- **交叉验证**：通过多个文档交叉验证设计一致性

## 开发提示词模板

### 事件驱动架构开发提示词

在开始开发事件驱动架构相关功能之前，请先查阅以下技术设计文档：

1. 必读文档：
   - `docs/technical-design-documents/07-event-driven-architecture.md`
   - `docs/technical-design-documents/13-event-sourcing-design.md`
   - `docs/technical-design-documents/06-frameworks-drivers-layer.md`
   - `.cursor/rules/code-annotation-specification.mdc`

2. 查阅重点：
   - 消息队列服务设计（Redis + Bull）
   - 事件总线服务实现
   - 异步事件处理器模式
   - 事件重试和错误处理机制

3. 实现要求：
   - 严格按照设计文档实现
   - 遵循事件驱动架构原则
   - 使用完整的TSDoc注释
   - 实现完整的错误处理

### 领域模型开发提示词

在开始开发领域模型之前，请先查阅以下技术设计文档：

1. 必读文档：
   - `docs/technical-design-documents/03-entities-layer.md`
   - `docs/business-requirements.md`
   - `docs/technical-design-documents/01-architecture-overview.md`

2. 查阅重点：
   - 聚合根设计原则
   - 值对象和实体设计
   - 领域事件设计
   - 业务规则和不变性约束

3. 实现要求：
   - 严格按照DDD原则实现
   - 保持领域层纯净性
   - 实现完整的事件溯源
   - 使用完整的TSDoc注释
   - **重要**：创建值对象时优先检查`packages/shared/src/identifiers`和`packages/shared/src/common`中是否有可用的共享值对象

### 数据库模块开发提示词

在开始开发数据库模块相关功能之前，请先查阅以下技术设计文档：

1. 必读文档：
   - `docs/technical-design-documents/06-frameworks-drivers-layer.md`
   - `docs/technical-design-documents/12-multitenant-data-isolation.md`
   - `docs/technical-design-documents/14-adapter-pattern-design.md`
   - `.cursor/rules/code-annotation-specification.mdc`

2. 查阅重点：
   - 三种隔离策略的实现（数据库级、Schema级、表级）
   - 数据库适配器工厂模式
   - 租户感知仓储基类设计
   - 多租户数据隔离机制
   - 配置驱动的隔离策略切换

3. 实现要求：
   - 严格按照多租户架构设计实现
   - 遵循适配器模式和仓储模式
   - 实现配置驱动的隔离策略
   - 使用完整的TSDoc注释
   - 确保数据隔离的安全性

## 质量保证

### 1. 设计一致性检查

- 实现前：确认实现方案与设计文档一致
- 实现中：持续对照设计文档检查实现
- 实现后：验证实现结果符合设计要求

### 2. 文档同步更新

- 发现设计文档问题时，及时反馈
- 实现过程中的设计调整，及时更新文档
- 保持代码与文档的一致性

### 3. 架构合规性

- 确保实现符合分层架构原则
- 验证依赖关系正确性
- 检查事件驱动架构实现

## 常见查阅场景

### 场景1：开发新的聚合根

**查阅文档**：

- `docs/technical-design-documents/03-entities-layer.md` - 聚合根设计原则
- `docs/business-requirements.md` - 业务需求
- `.cursor/rules/code-annotation-specification.mdc` - 注释规范

**查阅重点**：

- 聚合根的生命周期管理
- 业务方法设计
- 领域事件发布
- 不变性约束
- **重要**：创建值对象时优先检查`packages/shared/src/identifiers`和`packages/shared/src/common`中是否有可用的共享值对象

### 场景2：实现事件处理器

**查阅文档**：

- `docs/technical-design-documents/07-event-driven-architecture.md` - 事件驱动架构
- `docs/technical-design-documents/13-event-sourcing-design.md` - 事件溯源设计
- `docs/technical-design-documents/06-frameworks-drivers-layer.md` - 框架驱动层
- `.cursor/rules/code-annotation-specification.mdc` - 异步事件处理器注释

**查阅重点**：

- Bull队列处理器实现
- 事件处理重试机制
- 错误处理和恢复
- 读模型更新

### 场景3：开发数据库适配器

**查阅文档**：

- `docs/technical-design-documents/14-adapter-pattern-design.md` - 适配器模式设计
- `docs/technical-design-documents/12-multitenant-data-isolation.md` - 多租户数据隔离设计
- `docs/technical-design-documents/06-frameworks-drivers-layer.md` - 框架驱动层设计
- `.cursor/rules/code-annotation-specification.mdc` - 数据库适配器注释规范

**查阅重点**：

- 数据库适配器接口设计
- 多租户支持机制
- 连接池和性能监控
- 租户上下文管理
- 行级安全策略支持

### 场景4：实现租户感知仓储

**查阅文档**：

- `docs/technical-design-documents/14-adapter-pattern-design.md` - 适配器模式设计
- `docs/technical-design-documents/12-multitenant-data-isolation.md` - 多租户数据隔离设计
- `docs/technical-design-documents/06-frameworks-drivers-layer.md` - 框架驱动层设计

**查阅重点**：

- 租户感知仓储基类设计
- 自动隔离条件添加
- 租户上下文管理
- 多租户CRUD操作
- 租户特定仓储创建

### 场景5：设计API接口

**查阅文档**：

- `docs/technical-design-documents/05-interface-adapters-layer.md` - 接口适配器层设计
- `docs/technical-design-documents/02-clean-architecture-layers.md` - 分层架构
- `docs/technical-design-documents/01-architecture-overview.md` - 架构概览
- `docs/business-requirements.md` - 业务需求

**查阅重点**：

- RESTful API设计原则
- DTO设计规范
- 权限控制机制
- 异常处理策略

## 总结

本指南的核心目标是确保AI在开发过程中能够：

1. **主动查阅**：根据开发任务主动识别需要查阅的文档
2. **准确实现**：严格按照技术设计文档实现功能
3. **保持一致性**：确保实现与设计完全一致
4. **质量保证**：通过文档查阅保证代码质量

通过遵循本指南，AI将能够更好地理解项目架构，实现高质量的代码，并保持与设计文档的一致性。

## 重要开发原则

### 共享值对象优先原则

**核心原则**：在创建任何值对象之前，必须优先检查共享模块中是否已有可用的值对象。

**检查路径**：

- `packages/shared/src/identifiers/` - 标识符类值对象（如NotifId、TenantId、UserId等）
- `packages/shared/src/common/` - 通用值对象（如Email、NotificationStatus、PhoneNumber等）

**检查步骤**：

1. 首先查看`packages/shared/src/identifiers/index.ts`和`packages/shared/src/common/index.ts`
2. 确认是否有符合需求的值对象
3. 如果有，直接使用`import { ValueObjectName } from '@aiofix/shared'`
4. 如果没有，再考虑创建新的值对象

**避免重复创建**：

- 不要重复创建已存在的值对象
- 不要创建功能相似的值对象
- 优先扩展现有的共享值对象

**示例**：

```typescript
// ✅ 正确：使用共享模块中的值对象
import {
  NotifId,
  TenantId,
  UserId,
  Email,
  NotificationStatus,
} from '@aiofix/shared';

// ❌ 错误：重复创建已存在的值对象
// import { NotifId } from './value-objects/notif-id.vo';
```

---

**文档版本**：1.3  
**创建日期**：2024-01-01  
**最后更新**：2024-01-01  
**维护者**：项目开发团队
