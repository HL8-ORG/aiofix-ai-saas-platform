---
description: AI开发提示词快速参考
globs:
alwaysApply: true
---

# AI开发提示词快速参考

## 核心提示词（复制即用）

### 1. 项目初始化提示词
```
你是一个全栈工程师，精通TypeScript语言，有丰富的Node.js开发经验。

项目背景：
- 这是一个现代化的SAAS平台项目，支持多租户架构
- 采用DDD + Clean Architecture + CQRS + 事件溯源架构
- 技术栈：NestJS + TypeScript + Fastify + MikroORM + PostgreSQL + MongoDB + Redis

开发原则：
- 使用中文回答问题和编写注释
- 编写注释应当按照TSDoc规范，并加入代码设计原理或机制，以及业务规则或业务逻辑
- 修改代码时应当同时修改相应的注释，确保代码与注释一致
- 使用pnpm作为包管理器
- 完成代码编写后应当进行代码linter检查，及时修复报错
- 检查和修复linter错误时你可以调用mcp-server lint-files

项目文档：
- 业务需求文档：`../../docs/business-requirements.md`
- 技术设计文档：`../../docs/technical-design/README.md`
- 请仔细阅读相关文档，理解业务需求和技术架构
```

### 2. 领域模型开发提示词
```
请为[具体聚合根名称]开发领域模型：

要求：
1. 创建聚合根类，包含业务逻辑和不变性约束
2. 定义值对象，封装业务概念
3. 创建领域事件，记录状态变更
4. 实现业务规则验证
5. 添加详细的中文注释

参考文档：
- 业务需求：`../../docs/business-requirements.md`
- 领域模型设计：`../../docs/technical-design/04-domain-models.md`

请确保：
- 聚合根保持业务不变性
- 所有状态变更都通过事件记录
- 业务规则在领域层实现
- 考虑多租户数据隔离
```

### 3. 应用层开发提示词
```
请为[具体功能模块]开发应用层代码：

要求：
1. 创建命令和查询定义
2. 实现命令处理器和查询处理器
3. 创建应用服务协调业务用例
4. 实现事件处理器更新读模型
5. 添加事务管理

参考文档：
- 应用层实现：`../../docs/technical-design/05-application-layer.md`
- 事件溯源设计：`../../docs/technical-design/07-event-sourcing.md`

请确保：
- 命令处理器实现业务用例
- 查询处理器优化读性能
- 事件处理器保持读模型同步
- 事务边界正确设置
```

### 4. 基础设施层开发提示词
```
请为[具体数据存储]开发基础设施层代码：

要求：
1. 创建实体/文档定义
2. 实现仓储接口
3. 创建数据库迁移
4. 实现事件存储
5. 添加缓存策略

参考文档：
- 基础设施实现：`../../docs/technical-design/06-infrastructure.md`
- 多租户数据隔离：`../../docs/technical-design/09-multitenant.md`

请确保：
- 实体映射正确
- 数据隔离策略实现
- 查询性能优化
- 缓存策略合理
```

### 5. 接口层开发提示词
```
请为[具体API端点]开发接口层代码：

要求：
1. 创建控制器
2. 实现请求验证
3. 添加权限检查
4. 实现响应格式化
5. 添加API文档

参考文档：
- 分层架构设计：`../../docs/technical-design/02-layered-architecture.md`
- 业务需求文档：`../../docs/business-requirements.md`

请确保：
- 输入验证完整
- 权限检查正确
- 错误处理优雅
- API文档清晰
```

### 6. 测试开发提示词
```
请为[具体模块]开发测试代码：

要求：
1. 单元测试：测试业务逻辑
2. 集成测试：测试组件协作
3. 端到端测试：测试完整流程
4. 性能测试：测试系统性能

测试类型：
- 单元测试：使用Jest，测试领域逻辑
- 集成测试：使用TestContainers，测试数据库交互
- 端到端测试：使用Supertest，测试API端点

请确保：
- 测试覆盖率达标
- 测试用例完整
- 测试数据隔离
- 测试性能良好
```

### 7. 部署运维提示词
```
请为[具体环境]配置部署和运维：

要求：
1. Docker容器化配置
2. Kubernetes部署配置
3. 数据库配置和迁移
4. 监控和日志配置
5. 安全配置

参考文档：
- 部署与运维：`../../docs/technical-design/08-deployment.md`

请确保：
- 容器配置优化
- 部署配置完整
- 监控覆盖全面
- 安全策略严格
```

### 8. 代码审查提示词
```
请审查以下代码：

审查重点：
1. 架构合规性：是否符合DDD和Clean Architecture
2. 业务逻辑：是否正确实现业务需求
3. 数据隔离：是否正确实现多租户隔离
4. 权限控制：是否正确实现权限验证
5. 性能优化：是否有性能问题
6. 安全性：是否有安全漏洞
7. 可维护性：代码是否清晰易懂
8. 测试覆盖：是否有足够的测试

请提供：
- 问题识别和修复建议
- 代码改进建议
- 最佳实践建议
- 性能优化建议
```

## 业务场景提示词

### 9. 用户管理开发提示词
```
请开发用户管理相关功能：

业务需求：
- 参考：`../../docs/business-requirements.md` 第4.5节
- 支持平台用户和租户用户的分层管理
- 用户分配：平台用户→租户用户→组织/部门用户
- 数据隔离：用户级数据隔离

技术实现：
- 参考：`../../docs/technical-design/04-domain-models.md`
- 用户聚合根：User
- 相关事件：UserCreatedEvent、UserAssignedToTenantEvent等
- 数据隔离：用户级数据隔离策略

开发要求：
1. 实现用户注册、分配、转移流程
2. 支持用户兼职多个组织/部门
3. 实现用户数据访问控制
4. 添加完整的测试用例
```

### 10. 租户管理开发提示词
```
请开发租户管理相关功能：

业务需求：
- 参考：`../../docs/business-requirements.md` 第4.2节
- 支持企业、社群、团队、个人四种租户类型
- 租户数据完全隔离
- 租户资源配额管理

技术实现：
- 参考：`../../docs/technical-design/09-multitenant.md`
- 租户聚合根：Tenant
- 相关事件：TenantCreatedEvent、TenantUpdatedEvent等
- 数据隔离：租户级数据隔离策略

开发要求：
1. 实现租户创建、配置、管理流程
2. 支持租户资源配额管理
3. 实现租户数据完全隔离
4. 添加完整的测试用例
```

### 11. 权限管理开发提示词
```
请开发权限管理相关功能：

业务需求：
- 参考：`../../docs/business-requirements.md` 第4.6-4.7节
- 8种基础角色：平台管理员、租户管理员等
- 基于角色的访问控制（RBAC）
- 细粒度权限控制

技术实现：
- 参考：`../../docs/technical-design/09-multitenant.md`
- 角色聚合根：Role
- 权限控制：实时权限验证
- 数据隔离：多层级权限控制

开发要求：
1. 实现角色定义和分配
2. 支持权限继承和覆盖
3. 实现实时权限验证
4. 添加完整的测试用例
```

### 12. 组织架构管理开发提示词
```
请开发组织架构管理相关功能：

业务需求：
- 参考：`../../docs/business-requirements.md` 第4.3-4.4节
- 组织：横向设置，组织之间没有从属关系
- 部门：纵向设置，具有明确的上下级关系
- 支持复杂的组织架构

技术实现：
- 参考：`../../docs/technical-design/04-domain-models.md`
- 组织聚合根：Organization
- 部门聚合根：Department
- 相关事件：OrganizationCreatedEvent、DepartmentCreatedEvent等

开发要求：
1. 实现组织和部门的创建、管理
2. 支持组织架构层级关系
3. 实现组织部门数据隔离
4. 添加完整的测试用例
```

## 使用说明

### 使用流程
1. **选择提示词**：根据开发任务选择合适的提示词
2. **替换占位符**：将[具体内容]替换为实际需求
3. **结合文档**：参考相关的业务需求和技术设计文档
4. **执行开发**：按照提示词要求进行开发
5. **质量检查**：进行代码检查和测试

### 注意事项
- 所有提示词都基于项目的业务需求文档和技术设计文档
- 开发时必须考虑多租户数据隔离和权限控制
- 代码必须包含详细的中文注释
- 完成后必须进行linter检查和测试
- 遵循项目的架构规范和开发原则

### 文档参考
- 业务需求文档：`../../docs/business-requirements.md`
- 技术设计文档：`../../docs/technical-design/README.md`
- 完整提示词系统：`../../docs/ai-development-prompts.md`
