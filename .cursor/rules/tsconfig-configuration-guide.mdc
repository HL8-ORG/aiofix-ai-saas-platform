---
description: TypeScript配置指南 - Monorepo项目
globs:
alwaysApply: true
---

# TypeScript配置指南 - Monorepo项目

## 概述

本文档详细说明了在monorepo项目中如何正确配置TypeScript，包括根目录配置和子项目配置。遵循本指南可以避免常见的配置错误，确保所有包都能正确构建。

## 目录结构

```
project-root/
├── tsconfig.json              # 根目录配置（IDE支持）
├── tsconfig.build.json        # 构建基础配置
├── packages/
│   ├── common/
│   │   ├── tsconfig.json      # 继承根配置 + 覆盖构建设置
│   │   └── package.json
│   ├── core/
│   │   ├── tsconfig.json      # 继承根配置 + 覆盖构建设置
│   │   └── package.json
│   ├── logging/
│   │   ├── tsconfig.json      # 继承根配置 + 覆盖构建设置
│   │   └── package.json
│   └── ...
```

## 配置文件详解

### 1. 根目录 `tsconfig.json`

**用途**: IDE支持、类型检查、路径映射
**关键设置**: `noEmit: true` (不生成文件)

```json
{
  "extends": "./tsconfig.build.json",
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@aiofix/logging": ["packages/logging/src"],
      "@aiofix/config": ["packages/config/src"],
      "@aiofix/core": ["packages/core/src"],
      "@aiofix/common": ["packages/common/src"],
      "@aiofix/*": ["packages/*/src"]
    },
    "noEmit": true
  }
}
```

**重要说明**:

- `noEmit: true` 阻止生成输出文件，仅用于IDE支持
- `paths` 提供模块路径映射，支持 `@aiofix/package-name` 导入
- 继承 `tsconfig.build.json` 获得基础编译选项

### 2. 根目录 `tsconfig.build.json`

**用途**: 提供构建基础配置
**关键设置**: `noEmit: false` (允许生成文件)

```json
{
  "compilerOptions": {
    "module": "commonjs",
    "target": "es2020",
    "sourceMap": true,
    "strict": true,
    "declaration": true,
    "declarationMap": true,
    "noEmitOnError": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "types": [],
    "jsx": "react",
    "noEmit": false
  },
  "exclude": ["node_modules", "dist"]
}
```

**重要说明**:

- `noEmit: false` 允许生成输出文件
- 包含所有基础编译选项
- 被根目录 `tsconfig.json` 继承

### 3. 子项目 `tsconfig.json` (标准模式)

**用途**: 包特定构建配置
**关键设置**: 继承根配置 + 覆盖 `noEmit: false`

```json
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "noEmit": false
  },
  "include": ["src/**/*"],
  "exclude": ["dist", "node_modules", "**/*.spec.ts", "**/*.test.ts"]
}
```

**重要说明**:

- **必须继承** `../../tsconfig.json` (不是 `tsconfig.build.json`)
- **必须覆盖** `noEmit: false` 来允许构建
- 添加包特定的输出目录和包含/排除规则

## 配置原则

### ✅ 正确做法

1. **统一继承模式**: 所有子项目都继承 `../../tsconfig.json`
2. **覆盖关键设置**: 每个子项目都设置 `noEmit: false`
3. **保持一致性**: 所有包使用相同的配置模式
4. **路径映射**: 利用根目录的 `paths` 配置

### ❌ 常见错误

1. **继承错误文件**: 继承 `tsconfig.build.json` 而不是 `tsconfig.json`
2. **忘记覆盖 noEmit**: 没有设置 `noEmit: false`
3. **配置不一致**: 不同包使用不同的继承模式
4. **重复配置**: 在子项目中重复根目录已有的配置

## 包依赖配置

### package.json 依赖设置

```json
{
  "dependencies": {
    "@aiofix/common": "workspace:*",
    "uuid": "^11.1.0"
  }
}
```

**重要说明**:

- 使用 `workspace:*` 引用本地包
- 确保依赖的包已经构建完成

## 构建流程

### 1. 构建顺序

```bash
# 1. 先构建基础包
cd packages/common && pnpm build
cd packages/core && pnpm build

# 2. 再构建依赖包
cd packages/logging && pnpm build
cd packages/config && pnpm build
```

### 2. 构建检查

```bash
# 检查构建输出
ls -la packages/*/dist/

# 检查类型定义
ls -la packages/*/dist/*.d.ts
```

## 特殊配置场景

### 1. 用户模块配置 (简化版)

```json
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "rootDir": "./src",
    "baseUrl": "./src",
    "paths": {
      "@/*": ["*"]
    }
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "**/*.spec.ts", "**/*.test.ts"]
}
```

### 2. 测试配置

```json
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "noEmit": false,
    "types": ["jest", "node"]
  },
  "include": ["src/**/*", "**/*.spec.ts", "**/*.test.ts"],
  "exclude": ["dist", "node_modules"]
}
```

## 故障排除

### 问题1: 找不到模块

**错误**: `Cannot find module '@aiofix/common'`

**解决方案**:

1. 检查 `package.json` 中是否有依赖
2. 确保依赖包已经构建
3. 检查路径映射是否正确

### 问题2: 不生成输出文件

**错误**: 构建成功但没有 `dist` 目录

**解决方案**:

1. 检查是否设置了 `noEmit: false`
2. 确认继承的是 `../../tsconfig.json`
3. 检查 `outDir` 设置

### 问题3: 类型检查错误

**错误**: 类型不匹配或找不到类型定义

**解决方案**:

1. 确保依赖包生成了 `.d.ts` 文件
2. 检查 `declaration: true` 设置
3. 验证路径映射配置

## 最佳实践

### 1. 配置管理

- **统一标准**: 所有包使用相同的配置模式
- **版本控制**: 将配置文件纳入版本控制
- **文档更新**: 配置变更时更新本文档

### 2. 构建优化

- **增量构建**: 利用 TypeScript 的增量编译
- **并行构建**: 无依赖关系的包可以并行构建
- **缓存策略**: 使用构建缓存提高效率

### 3. 开发体验

- **IDE支持**: 确保IDE能正确识别路径映射
- **类型提示**: 提供完整的类型定义和提示
- **错误定位**: 清晰的错误信息和源码映射

## 总结

正确的TypeScript配置是monorepo项目成功的基础。遵循本指南可以避免常见的配置错误，确保：

- ✅ 所有包都能正确构建
- ✅ IDE提供完整的类型支持
- ✅ 模块导入和路径映射正常工作
- ✅ 开发体验流畅

**记住**: 继承 `../../tsconfig.json` + 覆盖 `noEmit: false` = 正确的配置模式！

---

**文档版本**: 1.0  
**最后更新**: 2024-01-01  
**维护者**: 项目开发团队
